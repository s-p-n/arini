let session = require("express-session");
let fs = require("fs");
let path = require("path");
let [aceStyle, Ace] = include "./widgets/editor/ace.ari";

// Master list of clients
protected clients = [];

public config = [
	session = [
		cookie = [
			maxAge = 15768000, // 6 months
			httpOnly = true,
			sameSite = "strict",
			secure = false,
			path = "/"
		]
	]
];


protected randomToken (
		size = 16,
		field = r/[a-z0-9\-_]/i
		//field = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
	) {
	return (random size from field).join('');
};

protected Client (req) {
	if (req.session.index is undefined) {
		let index = (clients.push(req.session) - 1);
		if (req.session is clients[index]) {
			req.session.index = index;
		};
	} else {
		clients[req.session.index] = req.session;
	};
	return req.session;
};

let site = {
	let nodes = {
		return [
			"public" = include "./widgets/steps/pick.ari"];
	};
	use nodes;
	return <html lang="en">
		<head>
			<title>
				"Experience Arini";
			</title>;
			<meta name="theme-color" content="rgb(53, 82, 70)"/>;
			<meta name="viewport" content="width=device-width, initial-scale=1" />;
			<Style>
				stylesheet;
				aceStyle;
				[
					body = [
						padding = 0,
						margin = 0,
						background-image = "url(/public/Ara_ararauna_Luc_Viatour.webp)"
					],
					main = [
						background = "rgba(255, 255, 255, 0.95)",
						box-shadow = "0px 0px 5px 0px rgba(255,255,255,0.95)",
						color = "rgb(0, 0, 0)",
						text-shadow = "1px 1px 1px rgba(255,255,255,0.3)",
						margin = "110px auto",
						width = "70%",
						height = "100%",
						display = "flex",
						flex-direction = "column",
						padding = 10,
						font-family = "sans-serif"
					],
					"section,header" = [
						flex = "auto"
					],
					header = [
						background = "rgb(53, 82, 70)",
						color = "rgb(255, 255, 255)",
						border-bottom = "5px solid rgba(255,255,255,0.95)",
						text-shadow = "1px 1px 1px rgba(0, 0, 0, 0.3)",
						position = "fixed",
						padding = 20,
						height = 65,
						width = "100%",
						top = 0,
						">h1" = [
							font-family = "monospace"
						]
					]
				];
			</Style>;
		</head>;
		<body>
			<header>
				<h1>
					"Arini.io";
				</h1>;
			</header>;
			<main>
				
				<section>
					<h1>
						"Help me finish Arini";
					</h1>;
					<p>
						<a href="https://www.patreon.com/arini">"Become my Patreon today";</a>; 
						" to speed up the development of Arini.";
					</p>;
					<h2>
						"Arini.io isn't quite finished yet";
					</h2>;
					<p>
						"Here are some things to do in the mean-time:";
					</p>;
					<ul>
						<li>
							<a href="https://brave.com/ari417">"Try the Brave Browser";</a>;
						</li>;
						<li>
							<a href="https://www.github.com/s-p-n/arini">"See Arini on Github";</a>; 
						</li>;
						<li>
							<a href="https://www.npmjs.com/package/arini">"See Arini on npm";</a>; 
						</li>;
					</ul>;
				</section>;
				<section>
					<Picks>
						<Pick title="New?" teaser="Check out our tour!" />;
						<Pick title="Already been here?" teaser="Skip the tour" />;
					</Picks>;
				</section>;
				<section>
					<Ace>
						"console.log('Hello, World!');";
					</Ace>;
				</section>;
			</main>;
		</body>;
	</html>;
}();


public install (server) {
	let [app, http, io] = server;
	let resourceFilter = r`[a-z0-9\-_]+\.[a-z0-9]{1,5}`i;
	app.set("X-Powered-By", "Arini");
	app['use'](session([
		secret = randomToken(), 
		cookie = config.session.cookie,
		resave = false,
		saveUninitialized = false
	]));
	app['use'](#(req, res, next) {
		res.set("X-Powered-By", "Arini");
		next();
	});
	app.get('/', #(req, res) {
		let client = Client(req);
		console.log("get '/'");
		console.log(client is clients[client.index]);
		console.log(clients.length, client.index);
		res.end(site.toString());
	});
	app.get('/public/:resource', #(req, res) {
		let resource = req.params.resource;
		console.log(resource);
		console.log(__dirname);
		if (resourceFilter.test(resource)) {
			let target = path.join(__dirname, '/user/public/', resource);
			console.log("target:", target);
			console.log(process.cwd());
			if (fs.existsSync(target)) {
				console.log("resource exists.");
				return res.sendFile(target);
			};
		};
		res.status(404).end("404: Not Found.");
	});

	app.get('/public/src-min-noconflict/:resource', #(req, res) {
		let resource = req.params.resource;
		console.log(resource);
		console.log(__dirname);
		if (resourceFilter.test(resource)) {
			let target = path.join(__dirname, '/user/public/src-min-noconflict/', resource);
			console.log("target:", target);
			console.log(process.cwd());
			if (fs.existsSync(target)) {
				console.log("resource exists.");
				return res.sendFile(target);
			};
		};
		res.status(404).end("404: Not Found.");
	});

	console.log("Experience installed.");
};
