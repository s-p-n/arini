{
  "type": "controlCode",
  "body": [
    {
      "type": "controlCode",
      "body": [
        {
          "type": "controlCode",
          "body": [
            {
              "type": "controlCode",
              "body": [
                null,
                {
                  "type": "declarationExpression",
                  "body": [
                    "let",
                    "foo",
                    {
                      "type": "scopeExpression",
                      "body": [
                        {
                          "type": "scopeStart",
                          "body": [],
                          "loc": {
                            "start": {
                              "line": 2,
                              "column": 1
                            },
                            "end": {
                              "line": 2,
                              "column": 6
                            }
                          },
                          "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint",
                          "line": 2,
                          "traversedBody": []
                        },
                        {
                          "type": "scopeArguments",
                          "body": [
                            {
                              "type": "associativeList",
                              "body": [
                                {
                                  "type": "associativeList",
                                  "body": [
                                    {
                                      "type": "associativeDeclaration",
                                      "body": [
                                        "greeting",
                                        "id",
                                        {
                                          "type": "stringLiteral",
                                          "body": "hello",
                                          "loc": {
                                            "start": {
                                              "line": 1,
                                              "column": 28
                                            },
                                            "end": {
                                              "line": 1,
                                              "column": 29
                                            }
                                          },
                                          "raw": "let foo = (greeting: \"hello\",",
                                          "line": 1
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 1,
                                          "column": 28
                                        },
                                        "end": {
                                          "line": 1,
                                          "column": 29
                                        }
                                      },
                                      "raw": "let foo = (greeting: \"hello\",",
                                      "line": 1,
                                      "traversedBody": [
                                        "greeting",
                                        "id",
                                        "\"hello\""
                                      ]
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 1,
                                      "column": 28
                                    },
                                    "end": {
                                      "line": 1,
                                      "column": 29
                                    }
                                  },
                                  "raw": "let foo = (greeting: \"hello\",",
                                  "line": 1,
                                  "traversedBody": [
                                    {
                                      "name": "greeting",
                                      "type": "id",
                                      "expression": "\"hello\""
                                    }
                                  ]
                                },
                                {
                                  "type": "associativeDeclaration",
                                  "body": [
                                    "name",
                                    "id",
                                    {
                                      "type": "stringLiteral",
                                      "body": "scope",
                                      "loc": {
                                        "start": {
                                          "line": 1,
                                          "column": 43
                                        },
                                        "end": {
                                          "line": 1,
                                          "column": 44
                                        }
                                      },
                                      "raw": "let foo = (greeting: \"hello\", name: \"scope\")",
                                      "line": 1
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 1,
                                      "column": 43
                                    },
                                    "end": {
                                      "line": 1,
                                      "column": 44
                                    }
                                  },
                                  "raw": "let foo = (greeting: \"hello\", name: \"scope\")",
                                  "line": 1,
                                  "traversedBody": [
                                    "name",
                                    "id",
                                    "\"scope\""
                                  ]
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 1,
                                  "column": 43
                                },
                                "end": {
                                  "line": 1,
                                  "column": 44
                                }
                              },
                              "raw": "let foo = (greeting: \"hello\", name: \"scope\")",
                              "line": 1,
                              "traversedBody": [
                                "{key: \"greeting\", value: \"hello\"}",
                                {
                                  "name": "name",
                                  "type": "id",
                                  "expression": "\"scope\""
                                }
                              ]
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 1,
                              "column": 43
                            },
                            "end": {
                              "line": 1,
                              "column": 44
                            }
                          },
                          "raw": "let foo = (greeting: \"hello\", name: \"scope\")",
                          "line": 1,
                          "traversedBody": [
                            "{key: \"greeting\", value: \"hello\"},{key: \"name\", value: \"scope\"}"
                          ]
                        },
                        {
                          "type": "controlCode",
                          "body": [
                            null,
                            {
                              "type": "invokeExpression",
                              "body": [
                                {
                                  "type": "identifier",
                                  "body": [
                                    "print"
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 2,
                                      "column": 6
                                    },
                                    "end": {
                                      "line": 2,
                                      "column": 7
                                    }
                                  },
                                  "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(",
                                  "line": 2,
                                  "traversedBody": [
                                    "print"
                                  ]
                                },
                                {
                                  "type": "invokeArguments",
                                  "body": [
                                    {
                                      "type": "expressionList",
                                      "body": [
                                        {
                                          "type": "identifier",
                                          "body": [
                                            "greeting"
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 2,
                                              "column": 15
                                            },
                                            "end": {
                                              "line": 2,
                                              "column": 16
                                            }
                                          },
                                          "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting,",
                                          "line": 2,
                                          "traversedBody": [
                                            "greeting"
                                          ]
                                        },
                                        {
                                          "type": "expressionList",
                                          "body": [
                                            {
                                              "type": "identifier",
                                              "body": [
                                                "name"
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 2,
                                                  "column": 21
                                                },
                                                "end": {
                                                  "line": 2,
                                                  "column": 22
                                                }
                                              },
                                              "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name)",
                                              "line": 2,
                                              "traversedBody": [
                                                "name"
                                              ]
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 2,
                                              "column": 21
                                            },
                                            "end": {
                                              "line": 2,
                                              "column": 22
                                            }
                                          },
                                          "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name)",
                                          "line": 2,
                                          "traversedBody": [
                                            "scope.identifier(\"name\")"
                                          ]
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 2,
                                          "column": 21
                                        },
                                        "end": {
                                          "line": 2,
                                          "column": 22
                                        }
                                      },
                                      "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name)",
                                      "line": 2,
                                      "traversedBody": [
                                        "scope.identifier(\"greeting\")",
                                        "scope.identifier(\"name\")"
                                      ]
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 2,
                                      "column": 21
                                    },
                                    "end": {
                                      "line": 2,
                                      "column": 22
                                    }
                                  },
                                  "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name)",
                                  "line": 2,
                                  "traversedBody": [
                                    "scope.identifier(\"greeting\"), scope.identifier(\"name\")"
                                  ]
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 2,
                                  "column": 22
                                },
                                "end": {
                                  "line": 2,
                                  "column": 23
                                }
                              },
                              "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);",
                              "line": 2,
                              "traversedBody": [
                                "ScopeApi.print",
                                "scope.identifier(\"greeting\"), scope.identifier(\"name\")"
                              ]
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 3,
                              "column": 0
                            },
                            "end": {
                              "line": 3,
                              "column": 1
                            }
                          },
                          "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n}",
                          "line": 3,
                          "traversedBody": [
                            null,
                            "scope.invokeExpression(ScopeApi.print, [scope.identifier(\"greeting\"), scope.identifier(\"name\")])"
                          ]
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 3,
                          "column": 1
                        },
                        "end": {
                          "line": 3,
                          "column": 2
                        }
                      },
                      "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};",
                      "line": 3,
                      "traversedBody": [
                        true,
                        "[{key: \"greeting\", value: \"hello\"},{key: \"name\", value: \"scope\"}]",
                        "scope.invokeExpression(ScopeApi.print, [scope.identifier(\"greeting\"), scope.identifier(\"name\")]);\n"
                      ]
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 1
                    },
                    "end": {
                      "line": 3,
                      "column": 2
                    }
                  },
                  "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};",
                  "line": 3,
                  "traversedBody": [
                    "let",
                    "foo",
                    "scope.createScope((args = [{key: \"greeting\", value: \"hello\"},{key: \"name\", value: \"scope\"}]) => {\n\t\t\tscope.newChildContext();\n\t\t\tscope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"greeting\",\n\t\t\t\tvalue: args[0] === undefined ? \"hello\" : args[0]\n\t\t\t});scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"name\",\n\t\t\t\tvalue: args[1] === undefined ? \"scope\" : args[1]\n\t\t\t});\n\t\t\tscope.invokeExpression(ScopeApi.print, [scope.identifier(\"greeting\"), scope.identifier(\"name\")]);\n\n\t\t\tscope.setParentContext();\n\t\t})"
                  ]
                }
              ],
              "loc": {
                "start": {
                  "line": 4,
                  "column": 0
                },
                "end": {
                  "line": 4,
                  "column": 3
                }
              },
              "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo",
              "line": 4,
              "traversedBody": [
                null,
                "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"foo\",\n\t\t\t\tvalue: scope.createScope((args = [{key: \"greeting\", value: \"hello\"},{key: \"name\", value: \"scope\"}]) => {\n\t\t\tscope.newChildContext();\n\t\t\tscope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"greeting\",\n\t\t\t\tvalue: args[0] === undefined ? \"hello\" : args[0]\n\t\t\t});scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"name\",\n\t\t\t\tvalue: args[1] === undefined ? \"scope\" : args[1]\n\t\t\t});\n\t\t\tscope.invokeExpression(ScopeApi.print, [scope.identifier(\"greeting\"), scope.identifier(\"name\")]);\n\n\t\t\tscope.setParentContext();\n\t\t})\n\t\t\t})"
              ]
            },
            {
              "type": "invokeExpression",
              "body": [
                {
                  "type": "identifier",
                  "body": [
                    "foo"
                  ],
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 3
                    },
                    "end": {
                      "line": 4,
                      "column": 4
                    }
                  },
                  "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo(",
                  "line": 4,
                  "traversedBody": [
                    "foo"
                  ]
                },
                {
                  "type": "invokeArguments",
                  "body": [],
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 4
                    },
                    "end": {
                      "line": 4,
                      "column": 5
                    }
                  },
                  "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo()",
                  "line": 4,
                  "traversedBody": []
                }
              ],
              "loc": {
                "start": {
                  "line": 4,
                  "column": 5
                },
                "end": {
                  "line": 4,
                  "column": 6
                }
              },
              "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();",
              "line": 4,
              "traversedBody": [
                "scope.identifier(\"foo\")",
                ""
              ]
            }
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 3
            }
          },
          "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo",
          "line": 5,
          "traversedBody": [
            "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"foo\",\n\t\t\t\tvalue: scope.createScope((args = [{key: \"greeting\", value: \"hello\"},{key: \"name\", value: \"scope\"}]) => {\n\t\t\tscope.newChildContext();\n\t\t\tscope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"greeting\",\n\t\t\t\tvalue: args[0] === undefined ? \"hello\" : args[0]\n\t\t\t});scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"name\",\n\t\t\t\tvalue: args[1] === undefined ? \"scope\" : args[1]\n\t\t\t});\n\t\t\tscope.invokeExpression(ScopeApi.print, [scope.identifier(\"greeting\"), scope.identifier(\"name\")]);\n\n\t\t\tscope.setParentContext();\n\t\t})\n\t\t\t});\n",
            "scope.invokeExpression(scope.identifier(\"foo\"), [])"
          ]
        },
        {
          "type": "invokeExpression",
          "body": [
            {
              "type": "identifier",
              "body": [
                "foo"
              ],
              "loc": {
                "start": {
                  "line": 5,
                  "column": 3
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(",
              "line": 5,
              "traversedBody": [
                "foo"
              ]
            },
            {
              "type": "invokeArguments",
              "body": [
                {
                  "type": "expressionList",
                  "body": [
                    {
                      "type": "stringLiteral",
                      "body": "testing",
                      "loc": {
                        "start": {
                          "line": 5,
                          "column": 13
                        },
                        "end": {
                          "line": 5,
                          "column": 14
                        }
                      },
                      "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\")",
                      "line": 5
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 13
                    },
                    "end": {
                      "line": 5,
                      "column": 14
                    }
                  },
                  "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\")",
                  "line": 5,
                  "traversedBody": [
                    "\"testing\""
                  ]
                }
              ],
              "loc": {
                "start": {
                  "line": 5,
                  "column": 13
                },
                "end": {
                  "line": 5,
                  "column": 14
                }
              },
              "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\")",
              "line": 5,
              "traversedBody": [
                "\"testing\""
              ]
            }
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 14
            },
            "end": {
              "line": 5,
              "column": 15
            }
          },
          "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\");",
          "line": 5,
          "traversedBody": [
            "scope.identifier(\"foo\")",
            "\"testing\""
          ]
        }
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 3
        }
      },
      "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\");\nfoo",
      "line": 6,
      "traversedBody": [
        "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"foo\",\n\t\t\t\tvalue: scope.createScope((args = [{key: \"greeting\", value: \"hello\"},{key: \"name\", value: \"scope\"}]) => {\n\t\t\tscope.newChildContext();\n\t\t\tscope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"greeting\",\n\t\t\t\tvalue: args[0] === undefined ? \"hello\" : args[0]\n\t\t\t});scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"name\",\n\t\t\t\tvalue: args[1] === undefined ? \"scope\" : args[1]\n\t\t\t});\n\t\t\tscope.invokeExpression(ScopeApi.print, [scope.identifier(\"greeting\"), scope.identifier(\"name\")]);\n\n\t\t\tscope.setParentContext();\n\t\t})\n\t\t\t});\nscope.invokeExpression(scope.identifier(\"foo\"), []);\n",
        "scope.invokeExpression(scope.identifier(\"foo\"), [\"testing\"])"
      ]
    },
    {
      "type": "invokeExpression",
      "body": [
        {
          "type": "identifier",
          "body": [
            "foo"
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 3
            },
            "end": {
              "line": 6,
              "column": 4
            }
          },
          "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\");\nfoo(",
          "line": 6,
          "traversedBody": [
            "foo"
          ]
        },
        {
          "type": "invokeArguments",
          "body": [
            {
              "type": "expressionList",
              "body": [
                {
                  "type": "stringLiteral",
                  "body": "test",
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 10
                    },
                    "end": {
                      "line": 6,
                      "column": 11
                    }
                  },
                  "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\");\nfoo(\"test\",",
                  "line": 6
                },
                {
                  "type": "expressionList",
                  "body": [
                    {
                      "type": "stringLiteral",
                      "body": "passed",
                      "loc": {
                        "start": {
                          "line": 6,
                          "column": 20
                        },
                        "end": {
                          "line": 6,
                          "column": 21
                        }
                      },
                      "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\");\nfoo(\"test\", \"passed\")",
                      "line": 6
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 20
                    },
                    "end": {
                      "line": 6,
                      "column": 21
                    }
                  },
                  "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\");\nfoo(\"test\", \"passed\")",
                  "line": 6,
                  "traversedBody": [
                    "\"passed\""
                  ]
                }
              ],
              "loc": {
                "start": {
                  "line": 6,
                  "column": 20
                },
                "end": {
                  "line": 6,
                  "column": 21
                }
              },
              "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\");\nfoo(\"test\", \"passed\")",
              "line": 6,
              "traversedBody": [
                "\"test\"",
                "\"passed\""
              ]
            }
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 20
            },
            "end": {
              "line": 6,
              "column": 21
            }
          },
          "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\");\nfoo(\"test\", \"passed\")",
          "line": 6,
          "traversedBody": [
            "\"test\", \"passed\""
          ]
        }
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 21
        },
        "end": {
          "line": 6,
          "column": 22
        }
      },
      "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\");\nfoo(\"test\", \"passed\");",
      "line": 6,
      "traversedBody": [
        "scope.identifier(\"foo\")",
        "\"test\", \"passed\""
      ]
    }
  ],
  "loc": {
    "start": {
      "line": 6,
      "column": 22
    },
    "end": {
      "line": 6,
      "column": 22
    }
  },
  "raw": "let foo = (greeting: \"hello\", name: \"scope\") {\n\tprint(greeting, name);\n};\nfoo();\nfoo(\"testing\");\nfoo(\"test\", \"passed\");",
  "line": 6,
  "traversedBody": [
    "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"foo\",\n\t\t\t\tvalue: scope.createScope((args = [{key: \"greeting\", value: \"hello\"},{key: \"name\", value: \"scope\"}]) => {\n\t\t\tscope.newChildContext();\n\t\t\tscope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"greeting\",\n\t\t\t\tvalue: args[0] === undefined ? \"hello\" : args[0]\n\t\t\t});scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"name\",\n\t\t\t\tvalue: args[1] === undefined ? \"scope\" : args[1]\n\t\t\t});\n\t\t\tscope.invokeExpression(ScopeApi.print, [scope.identifier(\"greeting\"), scope.identifier(\"name\")]);\n\n\t\t\tscope.setParentContext();\n\t\t})\n\t\t\t});\nscope.invokeExpression(scope.identifier(\"foo\"), []);\nscope.invokeExpression(scope.identifier(\"foo\"), [\"testing\"]);\n",
    "scope.invokeExpression(scope.identifier(\"foo\"), [\"test\", \"passed\"])"
  ]
}