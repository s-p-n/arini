{
  "type": "controlCode",
  "body": [
    {
      "type": "controlCode",
      "body": [
        {
          "type": "controlCode",
          "body": [
            {
              "type": "controlCode",
              "body": [
                null,
                {
                  "type": "declarationExpression",
                  "body": [
                    "let",
                    "foo",
                    {
                      "type": "stringLiteral",
                      "body": "Hello, \nmultiline\nstring!",
                      "loc": {
                        "start": {
                          "line": 3,
                          "column": 8
                        },
                        "end": {
                          "line": 3,
                          "column": 9
                        }
                      },
                      "raw": "let foo = 'Hello, \nmultiline\nstring!';",
                      "line": 3
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 8
                    },
                    "end": {
                      "line": 3,
                      "column": 9
                    }
                  },
                  "raw": "let foo = 'Hello, \nmultiline\nstring!';",
                  "line": 3,
                  "traversedBody": [
                    "let",
                    "foo",
                    "\"Hello, \\nmultiline\\nstring!\""
                  ]
                }
              ],
              "loc": {
                "start": {
                  "line": 4,
                  "column": 0
                },
                "end": {
                  "line": 4,
                  "column": 3
                }
              },
              "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet",
              "line": 4,
              "traversedBody": [
                null,
                "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"foo\",\n\t\t\t\tvalue: \"Hello, \\nmultiline\\nstring!\"\n\t\t\t})"
              ]
            },
            {
              "type": "declarationExpression",
              "body": [
                "let",
                "bar",
                {
                  "type": "booleanLiteral",
                  "body": true,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 14
                    },
                    "end": {
                      "line": 4,
                      "column": 15
                    }
                  },
                  "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;",
                  "line": 4
                }
              ],
              "loc": {
                "start": {
                  "line": 4,
                  "column": 14
                },
                "end": {
                  "line": 4,
                  "column": 15
                }
              },
              "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;",
              "line": 4,
              "traversedBody": [
                "let",
                "bar",
                true
              ]
            }
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 3
            }
          },
          "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet",
          "line": 5,
          "traversedBody": [
            "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"foo\",\n\t\t\t\tvalue: \"Hello, \\nmultiline\\nstring!\"\n\t\t\t});\n",
            "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"bar\",\n\t\t\t\tvalue: true\n\t\t\t})"
          ]
        },
        {
          "type": "declarationExpression",
          "body": [
            "let",
            "baz",
            {
              "type": "declarationExpression",
              "body": [
                "let",
                "qux",
                {
                  "type": "numericLiteral",
                  "body": 101,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 23
                    },
                    "end": {
                      "line": 5,
                      "column": 24
                    }
                  },
                  "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;",
                  "line": 5
                }
              ],
              "loc": {
                "start": {
                  "line": 5,
                  "column": 23
                },
                "end": {
                  "line": 5,
                  "column": 24
                }
              },
              "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;",
              "line": 5,
              "traversedBody": [
                "let",
                "qux",
                101
              ]
            }
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 23
            },
            "end": {
              "line": 5,
              "column": 24
            }
          },
          "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;",
          "line": 5,
          "traversedBody": [
            "let",
            "baz",
            "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"qux\",\n\t\t\t\tvalue: 101\n\t\t\t})"
          ]
        }
      ],
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 5
        }
      },
      "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;\n\nprint",
      "line": 7,
      "traversedBody": [
        "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"foo\",\n\t\t\t\tvalue: \"Hello, \\nmultiline\\nstring!\"\n\t\t\t});\nscope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"bar\",\n\t\t\t\tvalue: true\n\t\t\t});\n",
        "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"baz\",\n\t\t\t\tvalue: scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"qux\",\n\t\t\t\tvalue: 101\n\t\t\t})\n\t\t\t})"
      ]
    },
    {
      "type": "invokeExpression",
      "body": [
        {
          "type": "identifier",
          "body": [
            "print"
          ],
          "loc": {
            "start": {
              "line": 7,
              "column": 5
            },
            "end": {
              "line": 7,
              "column": 6
            }
          },
          "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;\n\nprint(",
          "line": 7,
          "traversedBody": [
            "print"
          ]
        },
        {
          "type": "invokeArguments",
          "body": [
            {
              "type": "expressionList",
              "body": [
                {
                  "type": "binaryExpression",
                  "body": [
                    {
                      "type": "identifier",
                      "body": [
                        "foo"
                      ],
                      "loc": {
                        "start": {
                          "line": 7,
                          "column": 10
                        },
                        "end": {
                          "line": 7,
                          "column": 11
                        }
                      },
                      "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;\n\nprint(foo +",
                      "line": 7,
                      "traversedBody": [
                        "foo"
                      ]
                    },
                    "+",
                    {
                      "type": "stringLiteral",
                      "body": "kk",
                      "loc": {
                        "start": {
                          "line": 7,
                          "column": 16
                        },
                        "end": {
                          "line": 7,
                          "column": 17
                        }
                      },
                      "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;\n\nprint(foo + \"kk\")",
                      "line": 7
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 16
                    },
                    "end": {
                      "line": 7,
                      "column": 17
                    }
                  },
                  "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;\n\nprint(foo + \"kk\")",
                  "line": 7,
                  "traversedBody": [
                    "scope.identifier(\"foo\")",
                    "+",
                    "\"kk\""
                  ]
                }
              ],
              "loc": {
                "start": {
                  "line": 7,
                  "column": 16
                },
                "end": {
                  "line": 7,
                  "column": 17
                }
              },
              "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;\n\nprint(foo + \"kk\")",
              "line": 7,
              "traversedBody": [
                "scope.identifier(\"foo\") + \"kk\""
              ]
            }
          ],
          "loc": {
            "start": {
              "line": 7,
              "column": 16
            },
            "end": {
              "line": 7,
              "column": 17
            }
          },
          "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;\n\nprint(foo + \"kk\")",
          "line": 7,
          "traversedBody": [
            "scope.identifier(\"foo\") + \"kk\""
          ]
        }
      ],
      "loc": {
        "start": {
          "line": 7,
          "column": 17
        },
        "end": {
          "line": 7,
          "column": 18
        }
      },
      "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;\n\nprint(foo + \"kk\");",
      "line": 7,
      "traversedBody": [
        "ScopeApi.print",
        "scope.identifier(\"foo\") + \"kk\""
      ]
    }
  ],
  "loc": {
    "start": {
      "line": 7,
      "column": 18
    },
    "end": {
      "line": 7,
      "column": 18
    }
  },
  "raw": "let foo = 'Hello, \nmultiline\nstring!';\nlet bar = true;\nlet baz = let qux = 101;\n\nprint(foo + \"kk\");",
  "line": 7,
  "traversedBody": [
    "scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"foo\",\n\t\t\t\tvalue: \"Hello, \\nmultiline\\nstring!\"\n\t\t\t});\nscope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"bar\",\n\t\t\t\tvalue: true\n\t\t\t});\nscope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"baz\",\n\t\t\t\tvalue: scope.declarationExpression({\n\t\t\t\ttype: \"let\",\n\t\t\t\tname: \"qux\",\n\t\t\t\tvalue: 101\n\t\t\t})\n\t\t\t});\n",
    "scope.invokeExpression(ScopeApi.print, [scope.identifier(\"foo\") + \"kk\"])"
  ]
}