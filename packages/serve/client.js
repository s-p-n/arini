(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],3:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],4:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":2,"ieee754":5}],5:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],6:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],7:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":8}],8:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],9:[function(require,module,exports){
(function (process){
"use strict";require("core-js/modules/es7.symbol.async-iterator"),require("core-js/modules/es6.symbol"),require("core-js/modules/web.dom.iterable"),require("core-js/modules/es6.regexp.split"),require("core-js/modules/es6.regexp.replace"),require("core-js/modules/es6.regexp.match");function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}function _arrayWithHoles(a){if(Array.isArray(a))return a}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var BacktickProcessor=function(){function a(b){_classCallCheck(this,a);var c=this;c.sp=b,c.state={inBacktick:!1,inBacktickExpr:!1,btString:"",exprBody:"",exprBraceDepth:0}}return _createClass(a,[{key:"lex",value:function r(a){var b=this,c=b.state;if("`"===a.yytext&&(c.inBacktick=!c.inBacktick),c.inBacktick){var s;c.btString="";for(var d=/^(?:([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*)\$\{((?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*))/g,e=/^((?:[\0-z\|~-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)(\{|\})((?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)/g,f=/^((?:\\`|(?:[\0-_a-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])(?!\{))*)((?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)/g;;){if(1>a._input.length&&(console.log("input exhausted."),process.exit()),c.inBacktickExpr){if(s=a._input.match(e),s){var g=e.exec(a._input),h=_slicedToArray(g,4),i=h[0],j=h[1],k=h[2],l=h[3];if(c.exprBody+=j,"{"===k)c.exprBraceDepth+=1,c.exprBody+="{";else if("}"===k)if(0<c.exprBraceDepth)c.exprBraceDepth-=1,c.exprBody+="}";else{c.inBacktickExpr=!1;var t=b.sp.traverse(b.sp.parse(c.exprBody+";")).translation.replace(/;$/,"");c.exprBody="",c.btString+=t+"}",c.inBacktick=!0}a._input=l,a.match=j+k,a.yytext+=a.match,a.matched+=a.match;continue}console.log("brace misalignment."),process.exit()}if(s=a._input.match(d),s){var m=d.exec(a._input),n=_slicedToArray(m,3),o=n[0],p=n[1],q=n[2];c.inBacktick=!1,c.inBacktickExpr=!0,c.exprBraceDepth=0,a._input=q,a.match=p+"${",a.yytext+=a.match,a.matched+=a.match,c.btString+=a.match;continue}if(s=a._input.match(f),s){if("`"===a._input[0]){a._input=a._input.substr(1),a.yytext+="`",a.match="`",a.matched+="`",c.inBacktick=!1;break}a._input=a._input.replace(f,function(b,c,d){var e=c.split("\n"),f=e.pop().length,g=e.length,h=a.yylloc.last_column;return 0<g?h=f:h+=f,a.yylloc={first_line:a.yylloc.last_line,first_column:a.yylloc.last_column,last_line:a.yylloc.last_line+g,last_column:h},a.match=c,a.matched+=a.match,d}),c.btString+=a.match,a.yytext+=a.match;continue}console.log("Backtick Processor in bad state."),process.exit()}return a.yy.scopeState.btString="`"+c.btString+"`",c.btString="","`"}return!1}}]),a}();module.exports=BacktickProcessor;

}).call(this,require('_process'))

},{"_process":8,"core-js/modules/es6.regexp.match":128,"core-js/modules/es6.regexp.replace":129,"core-js/modules/es6.regexp.split":130,"core-js/modules/es6.symbol":132,"core-js/modules/es7.symbol.async-iterator":136,"core-js/modules/web.dom.iterable":137}],10:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function indentString(a){var b,c="";for(b=0;b<a;b+=1)c+=b+" ";return c}var ScopeAst=function(){function a(b,c,d){_classCallCheck(this,a),this.type=c,this.body=d,this.loc={start:{line:b.lexer.yylloc.first_line,column:b.lexer.yylloc.first_column},end:{line:b.lexer.yylloc.last_line,column:b.lexer.yylloc.last_column}},this.raw=b.lexer.matched,this.line=b.lexer.yylloc.first_line}return _createClass(a,[{key:"get",value:function d(a){var b=indentString(a)+"("+this.type,c=this.body;if(1==c.length&&!(c[0]instanceof ast))b+=" '"+c[0]+"'";else for(i in c)c[i]instanceof ast?b+="\n"+c[i].get(a+1):(b+="\n"+indentString(a+1),b+="'"+c[i]+"'");return b+")"}}]),a}(),_default=ScopeAst;exports.default=_default;

},{}],11:[function(require,module,exports){
(function (__dirname){
"use strict";require("core-js/modules/es6.array.from"),require("core-js/modules/es7.symbol.async-iterator"),require("core-js/modules/es6.symbol"),require("core-js/modules/es6.regexp.to-string"),require("core-js/modules/es6.regexp.replace"),require("core-js/modules/web.dom.iterable");var fs=_interopRequireWildcard(require("fs")),path=_interopRequireWildcard(require("path")),Module=_interopRequireWildcard(require("module")),parser=_interopRequireWildcard(require("./parser.js")),_ScopeAst=_interopRequireDefault(require("./ScopeAst.js")),_ScopeRules=_interopRequireDefault(require("./ScopeRules.js")),_BacktickProcessor=_interopRequireDefault(require("./BacktickProcessor.js")),sourceMap=_interopRequireWildcard(require("source-map")),combine=_interopRequireWildcard(require("combine-source-map")),convert=_interopRequireWildcard(require("convert-source-map"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}return b.default=a,b}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}require("source-map-support").install();var ScopeParser=function(){function a(){_classCallCheck(this,a);var b=this;b.parser=new parser.Parser,b.rules=new _ScopeRules.default,b.parser.yy.scopeAst=_ScopeAst.default}return _createClass(a,[{key:"libraryUtils",value:function a(){return{runtime:require("./scopeRuntime.js"),api:require("./scopeRuntimeApi.js")}}},{key:"parse",value:function e(a){var b=this,c=b.parser.lexer.lex;b.parser.yy.scopeState={};var d=new _BacktickProcessor.default(b);return b.parser.lexer.lex=function(){var a;return a=d.lex(this),!1===a?c.call(this):a},this.parser.parse(a)}},{key:"traverse",value:function d(a){var b=this;if(null===a)return null;if("object"!=typeof a)return a;if(void 0===a.type)return a;if(void 0!==a.loc){var e=b.rules.state.loc.name;b.rules.state.loc=a.loc,b.rules.state.loc.name=e}if(a.body instanceof Array){var f=b.rules.parentNode;a.traversedBody=[],a.body.forEach(function(c){b.rules.parentNode=a.type,a.traversedBody.push(b.traverse(c))}),b.rules.parentNode=f}if(b.rules[a.type]){if(b.rules.state.setName(a.type),a.body instanceof Array){var c;return(c=b.rules)[a.type].apply(c,_toConsumableArray(a.traversedBody))}return b.rules.state.loc.sourceCode=a.body,b.rules[a.type](a.body)}return console.log("".concat(a.type," not implemented")),"Not implemented"}},{key:"import",value:function q(b,c,d,e){var f=this;d=JSON.parse(d);var g=path.resolve(path.dirname(b),d);if(!fs.existsSync(g)){var h=path.resolve(__dirname,"../packages"),i=fs.readdirSync(h);if(-1!==i.indexOf(d)){var j=path.join(h,d),k=require(path.join(j,"spn.json")),l=path.join(j,k.main);g=path.resolve(path.dirname(b),l)}else throw new Error("File \"".concat(d,"\" doesn't exist ").concat(f.rules.state.errorTail()))}if(/\.sc$/.test(g)){var m=path.resolve(path.dirname(c),d.replace(/\.sc$/,".js")),n=fs.readFileSync(g,"utf8"),o=new a().translate(n,g,m),p=path.dirname(m);fs.existsSync(p)||fs.mkdirSync(p),fs.writeFileSync(m,o.code);var r={source:o.code,sourceFile:m};return f.imported.push({file:r,offset:{line:e}}),"scope.import(".concat(JSON.stringify(m),")")}return"scope.import(".concat(JSON.stringify(g),")")}},{key:"translate",value:function s(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"NO SOURCE FILE",c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"NO LIB FILE",d=!!(3<arguments.length&&void 0!==arguments[3])&&arguments[3],e=this,f="";f="undefined"==typeof window?require("./predefs.js")(__dirname):"\"use strict\";";var g,h;e.mapAndParse=function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{source:"",translation:"",sn:""};return"string"!=typeof a.sn&&a.sn.setSourceContent(b,a.source),a},e.sn=function(a){var c=1<arguments.length&&void 0!==arguments[1]?arguments[1]:e.rules.state.getName(),d=e.rules.state.loc.start;return new sourceMap.SourceNode(d.line,d.column,b,a,c)};var i,j=e.sn("");e.imported=[],e.rules=new _ScopeRules.default,e.rules.parser=e,e.rules.srcFilename=b,e.rules.libFilename=c,e.rules.node=j,e.rules.sn=e.sn,e.rules.mapAndParse=e.mapAndParse;var k=this.parse(a),l=JSON.stringify(k,null,"  "),m=e.traverse(k);if(d)return e.rules.invokeExpression(e.rules.scopeExpression(m),e.rules.invokeArguments()).sn;h=e.rules.invokeExpression(e.rules.scopeExpression(e.rules.scopeStart(),m),e.rules.invokeArguments()).sn,h.prepend(f),h.add(";"),i=h.toStringWithSourceMap(),i.map=JSON.parse(i.map.toString()),i.map.sourcesContent=[a],i.comment=convert.fromObject(i.map).toComment();var n={source:i.code+"\n".concat(i.comment),sourceFile:c},p=combine.create(c.replace(/\.js$/,".min.js")).addFile(n,{line:1});e.imported.forEach(function(a){p.addFile(a.file,a.offset)});var q=p.base64(),r=convert.fromBase64(q).toObject();return g={ast:l,map:r,code:i.code+"\n".concat(i.comment)},g}}]),a}();module.exports=ScopeParser;

}).call(this,"/lib")

},{"./BacktickProcessor.js":9,"./ScopeAst.js":10,"./ScopeRules.js":12,"./parser.js":13,"./predefs.js":14,"./scopeRuntime.js":15,"./scopeRuntimeApi.js":16,"combine-source-map":20,"convert-source-map":35,"core-js/modules/es6.array.from":122,"core-js/modules/es6.regexp.replace":129,"core-js/modules/es6.regexp.to-string":131,"core-js/modules/es6.symbol":132,"core-js/modules/es7.symbol.async-iterator":136,"core-js/modules/web.dom.iterable":137,"fs":1,"module":1,"path":7,"source-map":176,"source-map-support":164}],12:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0,require("core-js/modules/es6.regexp.replace"),require("core-js/modules/web.dom.iterable"),require("core-js/modules/es6.map");var fs=_interopRequireWildcard(require("fs")),path=_interopRequireWildcard(require("path"));function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}return b.default=a,b}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var api={print:"ScopeApi.print",debug:"ScopeApi.debug",if:"ScopeApi['if']",each:"ScopeApi['each']",compile:"ScopeApi.compile",promise:"ScopeApi.promise",dereference:"ScopeApi.dereference",BSONtoMap:"ScopeApi.BSONtoMap",toJS:"ScopeApi.toJS",toJSON:"ScopeApi.toJSON",createTag:"ScopeApi.createTag",getTag:"ScopeApi.getTag",getAllTags:"ScopeApi.getAllTags"},allowedUndefinedIdExpressions=["xmlExpression","invokeId"],buildArgPartFromAssocPart=function(a){var b=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1],c="";return b&&(c=","),"id"===a.type?c+="[\"".concat(a.name,"\",").concat(a.expression,"]"):"string"===a.type&&(c+="[".concat(a.name,",").concat(a.expression,"]")),c},randStr=function(){for(var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:16,b="",c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",d=0;d<a;d+=1)b+=c[Math.floor(Math.random()*c.length)];return b},ScopeRules=function(){function a(){var b=this,c=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{context:{}};_classCallCheck(this,a);var d=this;d.parentNode="program",d.state=c,c.loc={start:{line:0,column:0},end:{line:0,column:0},name:"root"},c.errorTail=function(){return"[".concat(d.state.loc.start.line,":").concat(d.state.loc.start.column,"-").concat(d.state.loc.end.line,":").concat(d.state.loc.end.column,"]")},c.importExpressions=new Map,c.root=c.context,c.context=c.context,c.context.args=[],c.context.name="root",c.newChildContext=function(){var a=c.context,b={scoping:{let:new Map,private:new Map,protected:new Map,public:new Map,parent:a},definedLocally:c.context.definedLocally,idAvailable:c.context.idAvailable};b.args=[],b.inArrayDefinition=!1,b.name=c.loc.name,c.context=b},c.setName=function(a){c.loc.name=a},c.getName=function(){for(var a=c.loc.name,b=c.context;b&&b.scoping;)a="".concat(b.name,"->").concat(a),b=b.scoping.parent;return a},c.setParentContext=function(){c.context=c.context.scoping.parent},c.newImportExpression=function(a){var c=b,d=c.parser.import(c.srcFilename,c.libFilename,a,c.state.loc.start.line);return d},c.context.definedLocally=function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:c.context;return b.scoping.let.has(a)?b.scoping.let.get(a):b.scoping.private.has(a)?b.scoping.private.get(a):b.scoping.protected.has(a)?b.scoping.protected.get(a):!!b.scoping.public.has(a)&&b.scoping.public.get(a)},c.context.idAvailable=function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:c.context;return!!b&&(!!(void 0!==b.definedLocally&&b.definedLocally(a,b))||!!(b.scoping&&b.scoping.parent&&b.scoping.parent.scoping)&&b.idAvailable(a,b.scoping.parent))},c.newChildContext()}return _createClass(a,[{key:"arrayExpression",value:function d(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",c=this;return c.state.setParentContext(),c.mapAndParse({source:a.source+b.source+"]",translation:a.translation+b.translation+")",sn:c.sn([a.sn,b.sn,")"])})}},{key:"arrayStart",value:function b(){var a=this;return a.state.newChildContext(),a.state.context.inArrayDefinition=!0,a.mapAndParse({source:"[",translation:"scope.arrayExpression(",sn:a.sn(["scope.arrayExpression("])})}},{key:"assignmentExpression",value:function d(a,b){var c=this;return c.mapAndParse({source:a.source+"="+b.source,translation:"scope.assignmentExpression([".concat(a.translation,"],").concat(b.translation,")"),sn:c.sn(["scope.assignmentExpression([",a.sn,"],",b.sn,")"])})}},{key:"assignmentValue",value:function d(a,b){var c=this;return c.mapAndParse({source:a+b.source,translation:"[\"".concat(a,"\",").concat(b.translation,"]"),sn:c.sn(["[\"",a,"\",",b.sn,"]"])})}},{key:"associativeDeclaration",value:function f(a,b,c){var d=this,e=a;return"id"===b&&(e="\"".concat(a,"\"")),d.mapAndParse({source:"".concat(a,":").concat(c.source),translation:"[".concat(e,",").concat(c.translation,"]"),sn:d.sn(["[",e,",",c.sn,"]"])})}},{key:"associativeList",value:function e(a,b){var c=this,d=null;return void 0===b?(b=a,d={source:b.source,translation:b.translation,sn:c.sn([b.sn])}):d={source:a.source+","+b.source,translation:a.translation+","+b.translation,sn:c.sn([a.sn,",",b.sn])},c.mapAndParse(d)}},{key:"binaryExpression",value:function f(c,a,d){var b=this,e="";return e="&&"===a?" and ":"||"===a?" or ":"==="===a?" is ":"!=="===a?" isnt ":">"===a?" gt ":"<"===a?" lt ":">="===a?" gteq ":"<="===a?" lteq ":a,b.mapAndParse({source:"".concat(c.source).concat(e).concat(d.source),translation:"scope.binaryExpression(\"".concat(a,"\",").concat(c.translation,",").concat(d.translation,")"),sn:b.sn(["scope.binaryExpression(\"",a,"\",",c.sn,",",d.sn,")"])})}},{key:"booleanLiteral",value:function c(a){var b=this;return b.mapAndParse({source:"".concat(a),translation:"".concat(a),sn:b.sn(["".concat(a)])})}},{key:"btString",value:function c(a){var b=this;return b.mapAndParse({source:a,translation:a,sn:b.sn([a]),isBString:!0})}},{key:"bracketExpression",value:function c(a){var b=this;return b.mapAndParse({source:"[".concat(a.source,"]"),translation:"[".concat(a.translation,"]"),sn:b.sn(["[",a.sn,"]"]),value:a.translation})}},{key:"bracketSelectorExpression",value:function f(c,d){var e=this;return"object"!=typeof c&&(c=e.mapAndParse({source:"",translation:"0",sn:"0"})),"object"!=typeof d&&(d=e.mapAndParse({source:"",translation:"undefined",sn:"undefined"})),e.mapAndParse({source:"[".concat(c.source,":").concat(d.source,"]"),translation:".slice(".concat(c.translation,",").concat(d.translation,")"),sn:e.sn([".slice(",c.sn,",",d.sn,")"]),values:[c.translation,d.translation]})}},{key:"controlCode",value:function d(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",b=1<arguments.length?arguments[1]:void 0,c=this;return c.state.loc.name=c.state.context.name,void 0===b?c.mapAndParse():c.mapAndParse({source:"".concat(a.source).concat(b.source,";"),translation:"".concat(a.translation).concat(b.translation,";"),sn:c.sn([a.sn,b.sn,";"])})}},{key:"declarationId",value:function c(a){var b=this;return b.state.loc.name=a,b.mapAndParse({source:"".concat(a),translation:"\"".concat(a,"\""),sn:b.sn(["\"",a,"\""])})}},{key:"declarationIdList",value:function d(a){var b=this,c="";return a.values.forEach(function(a,b){0!==b&&(c+=","),c+="\"".concat(a,"\"")}),b.mapAndParse({source:"[".concat(a.source,"]"),translation:"[".concat(c,"]"),sn:b.sn(["[",c,"]"])})}},{key:"declarationExpression",value:function f(a,b,c){var d=this,e=d.state;if(b in api)throw"Syntax Error: '".concat(b,"' is a reserved word ").concat(e.errorTail());if(e.context.definedLocally(b))throw"Syntax Error: '".concat(b,"' has already been defined in this context. ").concat(e.errorTail());return"let"===a&&e.context.scoping.let.set(b,!0),"private"===a&&e.context.scoping.private.set(b,!0),"protected"===a&&e.context.scoping.protected.set(b,!0),"public"===a&&e.context.scoping.public.set(b,!0),d.mapAndParse({source:"".concat(a," ").concat(b.source," = ").concat(c.source),translation:"scope.declarationExpression({type:\"".concat(a,"\",name:").concat(b.translation,",value:").concat(c.translation,"})"),sn:d.sn(["scope.declarationExpression({type:\"",a,"\",name:",b.sn,",value:",c.sn,"})"])})}},{key:"emptyMapExpression",value:function c(a){var b=this;return b.state.setParentContext(),b.mapAndParse({source:"".concat(a.source,"]"),translation:"".concat(a.translation,")"),sn:b.sn([a.sn,")"])})}},{key:"expressionList",value:function d(a,b){var c=this;return void 0===b?c.mapAndParse({source:a.source,translation:a.translation,sn:c.sn([a.sn])}):c.mapAndParse({source:"".concat(a.source,",").concat(b.source),translation:"".concat(a.translation,",").concat(b.translation),sn:c.sn([a.sn,",",b.sn])})}},{key:"identifier",value:function f(a,b,c){var d=this,e=d.state;return"assignmentExpression"===d.parentNode?"dot"===b?d.mapAndParse({source:"".concat(a.source,".").concat(c),translation:"".concat(a.translation,",\"").concat(c,"\""),sn:d.sn([a.sn,",\"",c,"\""])}):"bracket"===b?c.values?d.mapAndParse({source:"".concat(a.source).concat(c.source),translation:"".concat(a.translation,",").concat(c.values[0],",").concat(c.values[1]),sn:d.sn([a.sn,",",c.values[0],",",c.values[1]])}):d.mapAndParse({source:"".concat(a.source,"[").concat(c.source,"]"),translation:"".concat(a.translation,",").concat(c.value),sn:d.sn([a.sn,",",c.value])}):d.mapAndParse({source:"".concat(a),translation:"\"".concat(a,"\""),sn:d.sn(["\"",a,"\""])}):void 0===c?a in api?d.mapAndParse({source:"".concat(a),translation:"".concat(api[a]),sn:d.sn([api[a]])}):-1===allowedUndefinedIdExpressions.indexOf(this.parentNode)?d.mapAndParse({source:"".concat(a),translation:"scope.identifier(\"".concat(a,"\")"),sn:d.sn(["scope.identifier(\"",a,"\")"])}):d.mapAndParse({source:"".concat(a),translation:"".concat(a),sn:d.sn([a])}):"dot"===b?d.mapAndParse({source:"".concat(a.source,".").concat(c),translation:"".concat(a.translation,"[\"").concat(c,"\"]"),sn:d.sn([a.sn,"[\"",c,"\"]"])}):d.mapAndParse({source:"".concat(a.source).concat(c.source),translation:"".concat(a.translation).concat(c.translation),sn:d.sn([a.sn,c.sn])})}},{key:"idList",value:function e(a,b){var c=this;if(void 0===b)return c.mapAndParse({source:"".concat(a),translation:"".concat(a),sn:c.sn([a]),values:[a]});var d=b.values.slice();return d.unshift(a),c.mapAndParse({source:"".concat(a,",").concat(b.source),translation:"".concat(a,",").concat(b.translation),sn:c.sn([a,",",b.sn]),values:d})}},{key:"importExpression",value:function c(a){var b=this;return b.mapAndParse({source:"import ".concat(a),translation:b.state.newImportExpression(a),sn:b.sn([b.state.newImportExpression(a)])})}},{key:"invokeArguments",value:function c(a){var b=this;return void 0===a?b.mapAndParse():b.mapAndParse({source:"".concat(a.source),translation:"".concat(a.translation),sn:b.sn([a.sn])})}},{key:"invokeExpression",value:function d(a,b){var c=this;return c.mapAndParse({source:"".concat(a.source,"(").concat(b.source,")"),translation:"".concat(a.translation,"(").concat(b.translation,")"),sn:c.sn([a.sn,"(",b.sn,")"])})}},{key:"invokeId",value:function e(a,b,c){var d=this;return"dot"===b?d.mapAndParse({source:"".concat(a.source,".").concat(c.source),translation:"".concat(a.translation,"[\"").concat(c.translation,"\"]"),sn:d.sn([a.sn,"[\"",c.sn,"\"]"])}):d.mapAndParse({source:"".concat(a.source).concat(c.source),translation:"".concat(a.translation).concat(c.translation),sn:d.sn([a.sn,c.sn])})}},{key:"invokeTracker",value:function b(a){return a}},{key:"mapExpression",value:function d(a,b){var c=this;return c.state.setParentContext(),c.mapAndParse({source:"".concat(a.source).concat(b.source,"]"),translation:"scope.mapExpression(".concat(b.translation,")"),sn:c.sn(["scope.mapExpression(",b.sn,")"])})}},{key:"numericLiteral",value:function c(a){var b=this;return b.mapAndParse({source:"".concat(a),translation:"".concat(a),sn:b.sn(["".concat(a)])})}},{key:"regexLiteral",value:function h(a){var b=this,c=/^\/([\0-\uFFFF]*)\/([A-Za-z]*)$/.exec(a),d=c[1],e=c[2],f="`"+d.replace(/\\\//g,"/").replace(/\\/g,"\\\\")+"`",g="XRegExp(".concat(f,",\"").concat(e,"\")");return b.mapAndParse({source:"".concat(a),translation:g,sn:b.sn([g])})}},{key:"returnExpression",value:function c(a){var b=this;return b.mapAndParse({source:"return ".concat(a.source),translation:"return ".concat(a.translation),sn:b.sn(["return ",a.sn])})}},{key:"scopeStart",value:function b(){var a=this;return a.state.newChildContext(),a.mapAndParse({source:"{",translation:"scope.createScope(function(args){",sn:a.sn(["scope.createScope(function(args){"])})}},{key:"scopeExpression",value:function g(a,b,c){var d=this,e=d.state,f="";return"{"!==a.source&&(c=b,b=a),void 0===c&&(c=b,b={source:"",translation:"[]",sn:d.sn(["[]"]),values:[]}),void 0===b&&(b={source:"",translation:"[]",sn:d.sn(["[]"]),values:[]}),b.values.forEach(function(a,b){f+="scope.declarationExpression({type:\"let\","+"name:\"".concat(a[0],"\",")+"value:args[".concat(b,"]===undefined?").concat(a[1],":args[").concat(b,"]")+"});"}),e.setParentContext(),d.mapAndParse({source:"".concat(b.source).concat(a.source).concat(c.source,"}"),translation:"".concat(a.translation).concat(f).concat(c.translation,"})"),sn:d.sn([a.sn,f,c.sn,"})"])})}},{key:"scopeArguments",value:function d(a,b){var c=this;return console.log("scopeArguments:"),console.log(a,b),c.mapAndParse({source:"(".concat(a.source,")"),translation:"".concat(a.translation),sn:c.sn([a.sn]),values:a.values})}},{key:"scopeArgumentsList",value:function e(a,b){var c=this;if(void 0===b)return c.mapAndParse({source:"".concat(a.source),translation:"".concat(a.translation),sn:c.sn([a.sn]),values:[a.value]});var d=b.values.slice();return d.unshift(a.value),c.mapAndParse({source:"".concat(a.source,",").concat(b.source),translation:"",sn:"",values:d})}},{key:"scopeArgumentsListDeclaration",value:function d(a,b){var c=this;return c.mapAndParse({source:"".concat(a,":").concat(b.source),translation:"",sn:"",value:[a,b.translation]})}},{key:"scopeArgumentSpread",value:function c(a){var b=this;return b.mapAndParse({source:"...".concat(a),translation:"",sn:"",value:[a]})}},{key:"stringLiteral",value:function d(a){var b=this;if(a.isBString)return b.mapAndParse(a);var c=a.replace(/\\\r\n|\\\n/mg,"").replace(/\n/mg,"\\n").replace(/\r/mg,"\\r");return console.log("\n\tstr: ".concat(a,"\n\tparsedStr: ").concat(c)),b.mapAndParse({source:"".concat(a),translation:c,sn:b.sn([c])})}},{key:"unaryExpression",value:function d(a,b){var c=this;return c.mapAndParse({source:"".concat(a," ").concat(b.source),translation:"".concat(a).concat(b.translation),sn:c.sn([a,b.sn])})}},{key:"useExpression",value:function d(a,b){var c=this;return void 0===b?c.mapAndParse({source:"use ".concat(a.source),translation:"scope.use([".concat(a.translation,"])"),sn:c.sn(["scope.use([",a.sn,"])"])}):c.mapAndParse({source:"use ".concat(a.source," only ").concat(b.source),translation:"scope.use([".concat(a.translation,"],[").concat(b.translation,"])"),sn:c.sn(["scope.use([",a.sn,"],[",b.sn,"])"])})}},{key:"usable",value:function d(a,b){var c=this;return void 0===b?c.mapAndParse({source:"".concat(a.source),translation:"".concat(a.translation),sn:c.sn([a.sn])}):c.mapAndParse({source:"".concat(a.source,",").concat(b.source),translation:"".concat(a.translation,",").concat(b.translation),sn:c.sn([a.sn,",",b.sn])})}},{key:"useOnly",value:function c(a){var b=this;return b.mapAndParse({source:"".concat(a.source),translation:"".concat(a.translation),sn:b.sn([a.sn])})}},{key:"xmlControlCode",value:function d(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",b=1<arguments.length?arguments[1]:void 0,c=this;return void 0===b?c.mapAndParse({source:"",translation:"",sn:"",first:!0}):(a.first||(a.translation+=",",a.sn.add([","])),c.mapAndParse({source:"".concat(a.source).concat(b.source,";"),translation:"".concat(a.translation).concat(b.translation),sn:c.sn([a.sn,b.sn]),first:!1}))}},{key:"xmlAttributes",value:function e(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",b=1<arguments.length?arguments[1]:void 0,c=2<arguments.length?arguments[2]:void 0,d=this;return void 0===b?d.mapAndParse({source:"",translation:"",sn:"",first:!0}):(a.first||(a.translation+=",",a.sn.add([","])),d.mapAndParse({source:"".concat(a.source," ").concat(b,"=").concat(c.source),translation:"".concat(a.translation,"\"").concat(b,"\":").concat(c.translation),sn:d.sn([a.sn,"\"",b,"\":",c.sn]),first:!1}))}},{key:"xmlExpression",value:function f(a,b,c,d){var e=this;if(void 0===c)return e.mapAndParse({source:"<".concat(a.source," ").concat(b.source,"/>"),translation:"scope.xmlExpression(\"".concat(a.translation,"\",{").concat(b.translation,"})"),sn:e.sn(["scope.xmlExpression(\"",a.sn,"\",{",b.sn,"})"])});if(a.source!==d.source)throw"Syntax Error: Unmatching XML Tags: <".concat(a.source,">...</").concat(d.source,"> ").concat(state.errorTail());return e.mapAndParse({source:"<".concat(a.source," ").concat(b.source,">").concat(c.source,"</").concat(d.source,">"),translation:"scope.xmlExpression(\"".concat(a.translation,"\",{").concat(b.translation,"},").concat(c.translation,")"),sn:e.sn(["scope.xmlExpression(\"",a.sn,"\",{",b.sn,"},",c.sn,")"])})}}]),a}(),_default=ScopeRules;exports.default=_default;

},{"core-js/modules/es6.map":124,"core-js/modules/es6.regexp.replace":129,"core-js/modules/web.dom.iterable":137,"fs":1,"path":7}],13:[function(require,module,exports){
(function (process){
"use strict";require("core-js/modules/es6.regexp.replace"),require("core-js/modules/es6.regexp.split"),require("core-js/modules/es6.regexp.match");var parser=function(){function a(){this.yy={}}var b=function(a,b,c,d){for(c=c||{},d=a.length;d--;c[a[d]]=b);return c},c=[2,41],d=[1,42],e=[1,31],f=[1,43],g=[1,9],h=[1,19],i=[1,20],j=[1,21],k=[1,22],l=[1,11],m=[1,15],n=[1,16],o=[1,17],p=[1,23],q=[1,24],r=[1,25],s=[1,27],t=[1,41],u=[1,33],v=[1,34],w=[1,18],x=[1,36],y=[1,45],z=[1,46],A=[1,47],B=[1,48],C=[1,49],D=[1,50],E=[1,51],F=[1,52],G=[1,53],H=[1,54],I=[1,55],J=[1,56],K=[1,57],L=[1,58],M=[1,59],N=[1,60],O=[5,16,17,19,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,59,81,91,94],P=[1,66],Q=[1,68],R=[1,71],S=[1,80],T=[1,88],U=[1,91],V=[1,90],W=[2,81],X=[5,8,12,14,16,17,19,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,58,59,64,81,88,91,94],Y=[2,63],Z=[2,76],$=[5,16,17,19,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,58,59,81,88,91,94],_=[8,16,21,27,41,52,53,54,55,58,62,63,65,69,70,71,72,78,83,84,85,89],aa=[21,26,28],ba=[59,81],ca=[1,133],da=[1,139],ea=[5,8,16,17,19,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,58,59,64,81,91,94],fa=[5,16,17,19,27,48,59,81,91,94],ga=[5,16,17,19,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,59,81,88,91,94],ha=[1,145],ia=[1,148],ja=[5,59],ka=[16,91,94],la=[5,19],ma=[1,161],na=[1,162],oa=[5,16,17,19,27,30,31,34,35,36,37,38,39,48,59,81,91,94],pa=[5,16,17,19,27,30,31,32,33,34,35,36,37,38,39,48,59,81,91,94],qa=[5,16,17,19,27,34,35,36,37,38,39,48,59,81,91,94],ra=[5,16,17,19,27,30,31,32,33,34,35,36,37,38,39,40,41,48,59,81,91,94],sa=[5,16,17,19,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,48,59,81,91,94],ta=[8,16,21,41,52,53,54,55,58,62,63,65,69,70,71,72,78,83,84,85,89,93],ua={trace:function(){},yy:{},symbols_:{error:2,array:3,arrayStart:4,"]":5,associativeList:6,expressionList:7,"[":8,assignmentExpression:9,id:10,assignmentValue:11,"=":12,expression:13,"+=":14,associativeDeclaration:15,IDENTIFIER:16,":":17,string:18,",":19,btOpStart:20,"`":21,btOpEnd:22,btBody:23,btString:24,btPart:25,"${":26,"}":27,BTCHAR:28,binaryExpression:29,AND:30,OR:31,"<&":32,"&>":33,IS:34,ISNT:35,GT:36,LT:37,GTEQ:38,LTEQ:39,"+":40,"-":41,"*":42,"/":43,"^":44,"%":45,bracketExpression:46,controlCode:47,";":48,declarationId:49,idList:50,declarationExpression:51,LET:52,PRIVATE:53,PROTECTED:54,PUBLIC:55,import:56,use:57,"(":58,")":59,literal:60,invoke:61,RETURN:62,"!":63,".":64,IMPORT:65,invokeTracker:66,invokeArguments:67,scope:68,TRUE:69,FALSE:70,NUMBER:71,REGEXPBODY:72,xml:73,program:74,EOF:75,scopeArguments:76,scopeStart:77,"{":78,scopeArgumentsList:79,scopeArgumentSpread:80,"...":81,scopeArgumentsListDeclaration:82,QSTRING:83,ASTRING:84,USE:85,usable:86,useOnly:87,ONLY:88,"<":89,xmlAttributes:90,">":91,xmlControlCode:92,"</":93,"/>":94,$accept:0,$end:1},terminals_:{2:"error",5:"]",8:"[",12:"=",14:"+=",16:"IDENTIFIER",17:":",19:",",21:"`",26:"${",27:"}",28:"BTCHAR",30:"AND",31:"OR",32:"<&",33:"&>",34:"IS",35:"ISNT",36:"GT",37:"LT",38:"GTEQ",39:"LTEQ",40:"+",41:"-",42:"*",43:"/",44:"^",45:"%",48:";",52:"LET",53:"PRIVATE",54:"PROTECTED",55:"PUBLIC",58:"(",59:")",62:"RETURN",63:"!",64:".",65:"IMPORT",69:"TRUE",70:"FALSE",71:"NUMBER",72:"REGEXPBODY",75:"EOF",78:"{",81:"...",83:"QSTRING",84:"ASTRING",85:"USE",88:"ONLY",89:"<",91:">",93:"</",94:"/>"},productions_:[0,[3,2],[3,3],[3,3],[4,1],[9,2],[11,2],[11,2],[11,4],[15,3],[15,3],[6,1],[6,3],[20,1],[22,2],[24,2],[23,0],[23,2],[25,3],[25,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[46,5],[46,4],[46,4],[46,3],[46,3],[47,0],[47,3],[49,1],[49,3],[51,4],[51,4],[51,4],[51,4],[13,1],[13,1],[13,1],[13,1],[13,2],[13,1],[13,3],[13,1],[13,1],[13,1],[13,2],[13,2],[7,1],[7,3],[10,1],[10,3],[10,2],[50,1],[50,3],[56,2],[66,2],[61,3],[61,4],[61,4],[61,3],[61,2],[61,4],[67,0],[67,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[74,2],[68,4],[68,3],[77,1],[76,4],[76,3],[76,3],[76,2],[80,2],[79,1],[79,3],[82,3],[18,1],[18,1],[18,1],[57,2],[57,3],[86,1],[86,1],[86,1],[86,3],[86,3],[86,3],[87,4],[73,8],[73,4],[90,0],[90,4],[92,0],[92,3]],performAction:function(a,b,c,d,e,f){var g=f.length-1;switch(e){case 1:this.$=new d.scopeAst(d,"emptyMapExpression",[f[g-1]]);break;case 2:this.$=new d.scopeAst(d,"mapExpression",[f[g-2],f[g-1]]);break;case 3:this.$=new d.scopeAst(d,"arrayExpression",[f[g-2],f[g-1]]);break;case 4:this.$=new d.scopeAst(d,"arrayStart",[]);break;case 5:this.$=new d.scopeAst(d,"assignmentExpression",[f[g-1],f[g]]);break;case 6:case 7:this.$=new d.scopeAst(d,"assignmentValue",[f[g-1],f[g]]);break;case 8:this.$=new d.scopeAst(d,"assignmentValue",["[]=",f[g]]);break;case 9:this.$=new d.scopeAst(d,"associativeDeclaration",[f[g-2],"id",f[g]]);break;case 10:this.$=new d.scopeAst(d,"associativeDeclaration",[f[g-2],"string",f[g]]);break;case 11:this.$=new d.scopeAst(d,"associativeList",[f[g]]);break;case 12:this.$=new d.scopeAst(d,"associativeList",[f[g-2],f[g]]);break;case 14:this.$=d.scopeState.btString;break;case 15:case 19:this.$=f[g];break;case 16:this.$="";break;case 17:this.$=f[g-1]+f[g];break;case 18:this.$="${"+f[g-1].translation+"}";break;case 20:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],"&&",f[g]]);break;case 21:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],"||",f[g]]);break;case 22:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],"<&",f[g]]);break;case 23:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],"&>",f[g]]);break;case 24:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],"===",f[g]]);break;case 25:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],"!==",f[g]]);break;case 26:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],">",f[g]]);break;case 27:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],"<",f[g]]);break;case 28:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],">=",f[g]]);break;case 29:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],"<=",f[g]]);break;case 30:case 31:case 32:case 33:case 34:case 35:this.$=new d.scopeAst(d,"binaryExpression",[f[g-2],f[g-1],f[g]]);break;case 36:this.$=new d.scopeAst(d,"bracketSelectorExpression",[f[g-3],f[g-1]]);break;case 37:this.$=new d.scopeAst(d,"bracketSelectorExpression",[0,f[g-1]]);break;case 38:this.$=new d.scopeAst(d,"bracketSelectorExpression",[f[g-2],void 0]);break;case 39:this.$=new d.scopeAst(d,"bracketSelectorExpression",[0,void 0]);break;case 40:this.$=new d.scopeAst(d,"bracketExpression",[f[g-1]]);break;case 41:this.$=new d.scopeAst(d,"controlCode",[]);break;case 42:this.$=new d.scopeAst(d,"controlCode",[f[g-2],f[g-1]]);break;case 43:this.$=new d.scopeAst(d,"declarationId",[f[g]]);break;case 44:this.$=new d.scopeAst(d,"declarationIdList",[f[g-1]]);break;case 45:this.$=new d.scopeAst(d,"declarationExpression",["let",f[g-2],f[g]]);break;case 46:this.$=new d.scopeAst(d,"declarationExpression",["private",f[g-2],f[g]]);break;case 47:this.$=new d.scopeAst(d,"declarationExpression",["protected",f[g-2],f[g]]);break;case 48:this.$=new d.scopeAst(d,"declarationExpression",["public",f[g-2],f[g]]);break;case 49:case 50:case 51:case 52:case 54:case 56:case 57:case 58:case 83:case 84:case 85:case 98:case 99:this.$=f[g];break;case 53:this.$=new d.scopeAst(d,"unaryExpression",["-",f[g]]);break;case 55:this.$=f[g-1];break;case 59:this.$=new d.scopeAst(d,"returnExpression",[f[g]]);break;case 60:this.$=new d.scopeAst(d,"unaryExpression",["!",f[g]]);break;case 61:this.$=new d.scopeAst(d,"expressionList",[f[g]]);break;case 62:this.$=new d.scopeAst(d,"expressionList",[f[g-2],f[g]]);break;case 63:this.$=new d.scopeAst(d,"identifier",[f[g]]);break;case 64:this.$=new d.scopeAst(d,"identifier",[f[g-2],"dot",f[g]]);break;case 65:this.$=new d.scopeAst(d,"identifier",[f[g-1],"bracket",f[g]]);break;case 66:this.$=new d.scopeAst(d,"idList",[f[g]]);break;case 67:this.$=new d.scopeAst(d,"idList",[f[g-2],f[g]]);break;case 68:this.$=new d.scopeAst(d,"importExpression",[f[g]]);break;case 69:this.$=new d.scopeAst(d,"invokeTracker",[f[g-1]]);break;case 70:this.$=new d.scopeAst(d,"invokeExpression",[f[g-2],f[g-1]]);break;case 71:case 72:case 75:this.$=new d.scopeAst(d,"invokeExpression",[f[g-3],f[g-1]]);break;case 73:this.$=new d.scopeAst(d,"invokeId",[f[g-2],"dot",f[g]]);break;case 74:this.$=new d.scopeAst(d,"invokeId",[f[g-1],"bracket",f[g]]);break;case 76:this.$=new d.scopeAst(d,"invokeArguments",[]);break;case 77:this.$=new d.scopeAst(d,"invokeArguments",[f[g]]);break;case 78:this.$=new d.scopeAst(d,"booleanLiteral",!0);break;case 79:this.$=new d.scopeAst(d,"booleanLiteral",!1);break;case 80:this.$=new d.scopeAst(d,"numericLiteral",+f[g]);break;case 81:this.$=new d.scopeAst(d,"stringLiteral",[f[g]]);break;case 82:this.$=new d.scopeAst(d,"regexLiteral",[f[g]]);break;case 86:return f[g-1];break;case 87:this.$=new d.scopeAst(d,"scopeExpression",[f[g-2],f[g-3],f[g-1]]);break;case 88:this.$=new d.scopeAst(d,"scopeExpression",[f[g-2],f[g-1]]);break;case 89:this.$=new d.scopeAst(d,"scopeStart",[]);break;case 90:this.$=new d.scopeAst(d,"scopeArguments",[f[g-2],f[g-1]]);break;case 91:this.$=new d.scopeAst(d,"scopeArguments",[f[g-1],"remainingArguments"]);break;case 92:this.$=new d.scopeAst(d,"scopeArguments",[void 0,f[g-1]]);break;case 93:this.$=new d.scopeAst(d,"scopeArguments",[void 0,void 0]);break;case 94:this.$=new d.scopeAst(d,"scopeArgumentSpread",[f[g]]);break;case 95:this.$=new d.scopeAst(d,"scopeArgumentsList",[f[g]]);break;case 96:this.$=new d.scopeAst(d,"scopeArgumentsList",[f[g-2],f[g]]);break;case 97:this.$=new d.scopeAst(d,"scopeArgumentsListDeclaration",[f[g-2],f[g]]);break;case 100:this.$=new d.scopeAst(d,"btString",[f[g]]);break;case 101:this.$=new d.scopeAst(d,"useExpression",[f[g]]);break;case 102:this.$=new d.scopeAst(d,"useExpression",[f[g-1],f[g]]);break;case 103:case 104:case 105:this.$=new d.scopeAst(d,"usable",[f[g]]);break;case 106:case 107:case 108:this.$=new d.scopeAst(d,"usable",[f[g-2],f[g]]);break;case 109:this.$=new d.scopeAst(d,"useOnly",[f[g-1]]);break;case 110:this.$=new d.scopeAst(d,"xmlExpression",[f[g-6],f[g-5],f[g-3],f[g-1]]);break;case 111:this.$=new d.scopeAst(d,"xmlExpression",[f[g-2],f[g-1]]);break;case 112:this.$=new d.scopeAst(d,"xmlAttributes",[]);break;case 113:this.$=new d.scopeAst(d,"xmlAttributes",[f[g-3],f[g-2],f[g]]);break;case 114:this.$=new d.scopeAst(d,"xmlControlCode",[]);break;case 115:this.$=new d.scopeAst(d,"xmlControlCode",[f[g-2],f[g-1]]);}},table:[b([8,16,21,41,52,53,54,55,58,62,63,65,69,70,71,72,75,78,83,84,85,89],c,{74:1,47:2}),{1:[3]},{3:30,4:39,8:d,9:5,10:13,13:4,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,75:[1,3],76:37,77:38,78:t,83:u,84:v,85:w,89:x},{1:[2,86]},{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N,48:[1,44]},b(O,[2,49]),b(O,[2,50],{58:[1,61]}),b(O,[2,51]),b(O,[2,52]),{3:30,4:39,8:d,9:5,10:13,13:62,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b(O,[2,54]),{3:30,4:39,8:d,9:5,10:13,13:63,16:[1,69],18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,59:P,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,79:64,80:65,81:Q,82:67,83:u,84:v,85:w,89:x},b(O,[2,56]),b(O,[2,57],{11:70,46:72,8:[1,76],12:[1,74],14:[1,75],58:[1,73],64:R}),b(O,[2,58],{46:78,8:S,58:[1,79],64:[1,77]}),{3:30,4:39,8:d,9:5,10:13,13:81,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:82,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{18:83,20:40,21:f,24:35,83:u,84:v},{10:86,16:e,56:87,58:T,65:o,68:85,76:37,77:38,78:t,86:84},{8:U,16:V,49:89},{8:U,16:V,49:92},{8:U,16:V,49:93},{8:U,16:V,49:94},b(O,[2,78]),b(O,[2,79]),b(O,[2,80]),b(O,W),b(O,[2,82]),b(O,[2,83]),b(O,[2,84],{58:[1,95]}),b(O,[2,85]),b(X,Y),{3:30,4:39,7:97,8:d,9:5,10:13,13:98,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,59:Z,60:12,61:14,62:m,63:n,65:o,66:32,67:96,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b($,[2,98]),b($,[2,99]),b($,[2,100]),{10:99,16:e},{77:100,78:t},b(_,c,{47:101}),{3:30,4:39,5:[1,102],6:103,7:104,8:d,9:5,10:13,13:98,15:105,16:[1,106],18:107,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b(aa,[2,16],{22:108,23:109}),b(_,[2,89]),b([5,8,16,21,41,52,53,54,55,58,62,63,65,69,70,71,72,78,83,84,85,89],[2,4]),b(aa,[2,13]),b([8,16,21,27,41,52,53,54,55,58,62,63,65,69,70,71,72,75,78,83,84,85,89],[2,42]),{3:30,4:39,8:d,9:5,10:13,13:110,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:111,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:112,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:113,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:114,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:115,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:116,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:117,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:118,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:119,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:120,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:121,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:122,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:123,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:124,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:125,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,7:97,8:d,9:5,10:13,13:98,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,59:Z,60:12,61:14,62:m,63:n,65:o,66:32,67:126,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b(O,[2,53]),{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N,59:[1,127]},{59:[1,129],80:128,81:Q},{59:[1,130]},{78:[2,93]},b(ba,[2,95],{19:[1,131]}),{16:[1,132]},b([8,12,14,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,58,59,64],Y,{17:ca}),b(O,[2,5]),{16:[1,134]},b(X,[2,65]),b([8,16,21,41,52,53,54,55,58,59,62,63,65,69,70,71,72,78,83,84,85,89],[2,69]),{3:30,4:39,8:d,9:5,10:13,13:135,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:136,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,5:[1,137],8:d,9:5,10:13,13:138,16:e,17:da,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{10:140,16:e},b(ea,[2,74]),{3:30,4:39,7:97,8:d,9:5,10:13,13:98,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,59:Z,60:12,61:14,62:m,63:n,65:o,66:32,67:141,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:138,16:e,17:da,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b(fa,[2,59],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),b(O,[2,60]),b($,[2,68]),b([5,16,17,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,59,81,91,94],[2,101],{87:142,19:[1,143],88:[1,144]}),b(ga,[2,103]),b(ga,[2,104],{46:72,8:S,64:R}),b(ga,[2,105]),{16:ha,59:P,79:64,80:65,81:Q,82:67},{12:[1,146]},{12:[2,43]},{16:ia,50:147},{12:[1,149]},{12:[1,150]},{12:[1,151]},{3:30,4:39,7:97,8:d,9:5,10:13,13:98,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,59:Z,60:12,61:14,62:m,63:n,65:o,66:32,67:152,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{59:[1,153]},{59:[2,77]},b(ja,[2,61],{19:[1,154],30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),b(ka,[2,112],{46:72,90:155,8:S,64:R}),b(_,c,{47:156}),{3:30,4:39,8:d,9:5,10:13,13:4,16:e,18:26,20:40,21:f,24:35,27:[1,157],29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b(O,[2,1]),{5:[1,158],19:[1,159]},{5:[1,160]},b(la,[2,11]),b([5,8,12,14,19,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,58,64],Y,{17:ma}),b([5,19,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],W,{17:na}),b($,[2,15]),{21:[1,163],25:164,26:[1,165],28:[1,166]},b(oa,[2,20],{32:A,33:B,40:I,41:J,42:K,43:L,44:M,45:N}),b(oa,[2,21],{32:A,33:B,40:I,41:J,42:K,43:L,44:M,45:N}),b(pa,[2,22],{40:I,41:J,42:K,43:L,44:M,45:N}),b(pa,[2,23],{40:I,41:J,42:K,43:L,44:M,45:N}),b(qa,[2,24],{30:y,31:z,32:A,33:B,40:I,41:J,42:K,43:L,44:M,45:N}),b(qa,[2,25],{30:y,31:z,32:A,33:B,40:I,41:J,42:K,43:L,44:M,45:N}),b(qa,[2,26],{30:y,31:z,32:A,33:B,40:I,41:J,42:K,43:L,44:M,45:N}),b(qa,[2,27],{30:y,31:z,32:A,33:B,40:I,41:J,42:K,43:L,44:M,45:N}),b(qa,[2,28],{30:y,31:z,32:A,33:B,40:I,41:J,42:K,43:L,44:M,45:N}),b(qa,[2,29],{30:y,31:z,32:A,33:B,40:I,41:J,42:K,43:L,44:M,45:N}),b(ra,[2,30],{42:K,43:L,44:M,45:N}),b(ra,[2,31],{42:K,43:L,44:M,45:N}),b(sa,[2,32],{44:M,45:N}),b(sa,[2,33],{44:M,45:N}),b(O,[2,34]),b(O,[2,35]),{59:[1,167]},b(O,[2,55]),{59:[1,168]},{78:[2,91]},{78:[2,92]},{16:ha,79:169,82:67},{59:[2,94]},{3:30,4:39,8:d,9:5,10:13,13:170,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b(X,[2,64]),b(fa,[2,6],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),b(fa,[2,7],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),{12:[1,171]},{5:[1,173],17:[1,172],30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N},{3:30,4:39,5:[1,175],8:d,9:5,10:13,13:174,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b([5,16,17,19,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,58,59,64,81,91,94],[2,73],{46:72,8:S}),{59:[1,176]},b(O,[2,102]),{10:178,16:e,56:179,58:T,65:o,68:177,76:37,77:38,78:t},{58:[1,180]},{17:ca},{3:30,4:39,8:d,9:5,10:13,13:181,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{5:[1,182]},{5:[2,66],19:[1,183]},{3:30,4:39,8:d,9:5,10:13,13:184,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:185,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:186,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{59:[1,187]},b(ea,[2,70]),{3:30,4:39,7:188,8:d,9:5,10:13,13:98,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{16:[1,191],91:[1,189],94:[1,190]},{3:30,4:39,8:d,9:5,10:13,13:4,16:e,18:26,20:40,21:f,24:35,27:[1,192],29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b($,[2,88]),b(O,[2,2]),{15:193,16:[1,194],18:195,20:40,21:f,24:35,83:u,84:v},b(O,[2,3]),{3:30,4:39,8:d,9:5,10:13,13:196,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,8:d,9:5,10:13,13:197,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b($,[2,14]),b(aa,[2,17]),{3:30,4:39,8:d,9:5,10:13,13:198,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b(aa,[2,19]),b(ea,[2,72]),{78:[2,90]},b(ba,[2,96]),b([19,59,81],[2,97],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),{3:30,4:39,8:d,9:5,10:13,13:199,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},{3:30,4:39,5:[1,201],8:d,9:5,10:13,13:200,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b(X,[2,40]),{5:[1,202],30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N},b(X,[2,39]),b(ea,[2,75]),b(ga,[2,106]),b(ga,[2,107],{46:72,8:S,64:R}),b(ga,[2,108]),{3:30,4:39,7:203,8:d,9:5,10:13,13:98,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b(fa,[2,45],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),{12:[2,44]},{16:ia,50:204},b(fa,[2,46],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),b(fa,[2,47],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),b(fa,[2,48],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),b(ea,[2,71]),b(ja,[2,62]),b(ta,[2,114],{92:205}),b(O,[2,111]),{12:[1,206]},b($,[2,87]),b(la,[2,12]),{17:ma},{17:na},b(la,[2,9],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),b(la,[2,10],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),{27:[1,207],30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N},b(O,[2,8]),{5:[1,208],30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N},b(X,[2,38]),b(X,[2,37]),{59:[1,209]},{5:[2,67]},{3:30,4:39,8:d,9:5,10:13,13:211,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x,93:[1,210]},{3:30,4:39,8:d,9:5,10:13,13:212,16:e,18:26,20:40,21:f,24:35,29:10,41:g,51:8,52:h,53:i,54:j,55:k,56:6,57:7,58:l,60:12,61:14,62:m,63:n,65:o,66:32,68:29,69:p,70:q,71:r,72:s,73:28,76:37,77:38,78:t,83:u,84:v,85:w,89:x},b(aa,[2,18]),b(X,[2,36]),b(O,[2,109]),{10:213,16:e},{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N,48:[1,214]},b(ka,[2,113],{30:y,31:z,32:A,33:B,34:C,35:D,36:E,37:F,38:G,39:H,40:I,41:J,42:K,43:L,44:M,45:N}),{8:S,46:72,64:R,91:[1,215]},b(ta,[2,115]),b(O,[2,110])],defaultActions:{3:[2,86],66:[2,93],90:[2,43],97:[2,77],129:[2,91],130:[2,92],132:[2,94],168:[2,90],182:[2,44],204:[2,67]},parseError:function(a,b){if(b.recoverable)this.trace(a);else{var c=new Error(a);throw c.hash=b,c}},parse:function(a){var b=this,c=[0],d=[null],e=[],f=this.table,g="",h=0,i=0,j=0,l=e.slice.call(arguments,1),m=Object.create(this.lexer),n={yy:{}};for(var o in this.yy)Object.prototype.hasOwnProperty.call(this.yy,o)&&(n.yy[o]=this.yy[o]);m.setInput(a,n.yy),n.yy.lexer=m,n.yy.parser=this,"undefined"==typeof m.yylloc&&(m.yylloc={});var k=m.yylloc;e.push(k);var q=m.options&&m.options.ranges;this.parseError="function"==typeof n.yy.parseError?n.yy.parseError:Object.getPrototypeOf(this).parseError;_token_stack:var s=function(){var a;return a=m.lex()||1,"number"!=typeof a&&(a=b.symbols_[a]||a),a};for(var t,u,v,w,x,y,z,A,B,C={};;){if(v=c[c.length-1],this.defaultActions[v]?w=this.defaultActions[v]:((null===t||"undefined"==typeof t)&&(t=s()),w=f[v]&&f[v][t]),"undefined"==typeof w||!w.length||!w[0]){var D="";for(y in B=[],f[v])this.terminals_[y]&&2<y&&B.push("'"+this.terminals_[y]+"'");D=m.showPosition?"Parse error on line "+(h+1)+":\n"+m.showPosition()+"\nExpecting "+B.join(", ")+", got '"+(this.terminals_[t]||t)+"'":"Parse error on line "+(h+1)+": Unexpected "+(1==t?"end of input":"'"+(this.terminals_[t]||t)+"'"),this.parseError(D,{text:m.match,token:this.terminals_[t]||t,line:m.yylineno,loc:k,expected:B})}if(w[0]instanceof Array&&1<w.length)throw new Error("Parse Error: multiple actions possible at state: "+v+", token: "+t);switch(w[0]){case 1:c.push(t),d.push(m.yytext),e.push(m.yylloc),c.push(w[1]),t=null,u?(t=u,u=null):(i=m.yyleng,g=m.yytext,h=m.yylineno,k=m.yylloc,0<j&&j--);break;case 2:if(z=this.productions_[w[1]][1],C.$=d[d.length-z],C._$={first_line:e[e.length-(z||1)].first_line,last_line:e[e.length-1].last_line,first_column:e[e.length-(z||1)].first_column,last_column:e[e.length-1].last_column},q&&(C._$.range=[e[e.length-(z||1)].range[0],e[e.length-1].range[1]]),x=this.performAction.apply(C,[g,i,h,n.yy,w[1],d,e].concat(l)),"undefined"!=typeof x)return x;z&&(c=c.slice(0,2*(-1*z)),d=d.slice(0,-1*z),e=e.slice(0,-1*z)),c.push(this.productions_[w[1]][0]),d.push(C.$),e.push(C._$),A=f[c[c.length-2]][c[c.length-1]],c.push(A);break;case 3:return!0;}}return!0}},va=function(){var a={EOF:1,parseError:function(a,b){if(this.yy.parser)this.yy.parser.parseError(a,b);else throw new Error(a)},setInput:function c(a,b){return this.yy=b||this.yy||{},this._input=a,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function c(){var a=this._input[0];this.yytext+=a,this.yyleng++,this.offset++,this.match+=a,this.matched+=a;var b=a.match(/(?:\r\n?|\n).*/g);return b?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),a},unput:function f(a){var b=a.length,c=a.split(/(?:\r\n?|\n)/g);this._input=a+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-b),this.offset-=b;var d=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),c.length-1&&(this.yylineno-=c.length-1);var e=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:c?(c.length===d.length?this.yylloc.first_column:0)+d[d.length-c.length].length-c[0].length:this.yylloc.first_column-b},this.options.ranges&&(this.yylloc.range=[e[0],e[0]+this.yyleng-b]),this.yyleng=this.yytext.length,this},more:function a(){return this._more=!0,this},reject:function a(){if(this.options.backtrack_lexer)this._backtrack=!0;else return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno});return this},less:function b(a){this.unput(this.match.slice(a))},pastInput:function b(){var a=this.matched.substr(0,this.matched.length-this.match.length);return(20<a.length?"...":"")+a.substr(-20).replace(/\n/g,"")},upcomingInput:function b(){var a=this.match;return 20>a.length&&(a+=this._input.substr(0,20-a.length)),(a.substr(0,20)+(20<a.length?"...":"")).replace(/\n/g,"")},showPosition:function c(){var a=this.pastInput(),b=Array(a.length+1).join("-");return a+this.upcomingInput()+"\n"+b+"^"},test_match:function g(a,b){var c,d,e;if(this.options.backtrack_lexer&&(e={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(e.yylloc.range=this.yylloc.range.slice(0))),d=a[0].match(/(?:\r\n?|\n).*/g),d&&(this.yylineno+=d.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:d?d[d.length-1].length-d[d.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+a[0].length},this.yytext+=a[0],this.match+=a[0],this.matches=a,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(a[0].length),this.matched+=a[0],c=this.performAction.call(this,this.yy,this,b,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),c)return c;if(this._backtrack){for(var f in e)this[f]=e[f];return!1}return!1},next:function g(){if(this.done)return this.EOF;this._input||(this.done=!0);var a,b,c,d;this._more||(this.yytext="",this.match="");for(var e=this._currentRules(),f=0;f<e.length;f++)if(c=this._input.match(this.rules[e[f]]),c&&(!b||c[0].length>b[0].length))if(b=c,d=f,this.options.backtrack_lexer){if(a=this.test_match(c,e[f]),!1!==a)return a;if(this._backtrack){b=!1;continue}else return!1}else if(!this.options.flex)break;return b?(a=this.test_match(b,e[d]),!1!==a&&a):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var a=this.next();return a?a:this.lex()},begin:function(a){this.conditionStack.push(a)},popState:function(){var a=this.conditionStack.length-1;return 0<a?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(a){return a=this.conditionStack.length-1-Math.abs(a||0),0<=a?this.conditionStack[a]:"INITIAL"},pushState:function(a){this.begin(a)},stateStackSize:function(){return this.conditionStack.length},options:{flex:!0,"case-insensitive":!0},performAction:function(a,b,c,d){switch(c){case 0:break;case 1:break;case 2:break;case 3:return 81;break;case 4:return 14;break;case 5:return 12;break;case 6:return 93;break;case 7:return 94;break;case 8:return"<=";break;case 9:return">=";break;case 10:return 32;break;case 11:return 33;break;case 12:return 89;break;case 13:return 91;break;case 14:return 78;break;case 15:return 27;break;case 16:return 8;break;case 17:return 5;break;case 18:return 58;break;case 19:return 59;break;case 20:return 17;break;case 21:return 64;break;case 22:return 19;break;case 23:return 48;break;case 24:return 40;break;case 25:return 41;break;case 26:return 42;break;case 27:return 45;break;case 28:return 44;break;case 29:return 84;break;case 30:return 83;break;case 31:return 65;break;case 32:return 85;break;case 33:return 88;break;case 34:return"INTO";break;case 35:return"AS";break;case 36:return 52;break;case 37:return 55;break;case 38:return 54;break;case 39:return 53;break;case 40:return 69;break;case 41:return 70;break;case 42:return 62;break;case 43:return 34;break;case 44:return 35;break;case 45:return 37;break;case 46:return 36;break;case 47:return 38;break;case 48:return 39;break;case 49:return 30;break;case 50:return 30;break;case 51:return 31;break;case 52:return 31;break;case 53:return 63;break;case 54:return 71;break;case 55:return 16;break;case 56:return 72;break;case 57:return 43;break;case 58:return 21;break;case 59:return 26;break;case 60:return 28;break;case 61:return 75;break;case 62:console.log(b.yytext);}},rules:[/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:\/\*(.|\n|\r)*?\*\/)/i,/^(?:\.\.\.)/i,/^(?:\+=)/i,/^(?:=)/i,/^(?:<\/)/i,/^(?:\/>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<&)/i,/^(?:&>)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:'(\\'|[^\'])*')/i,/^(?:"(\\"|[^\"])*")/i,/^(?:import)/i,/^(?:use)/i,/^(?:only)/i,/^(?:into)/i,/^(?:as)/i,/^(?:let)/i,/^(?:public)/i,/^(?:protected)/i,/^(?:private)/i,/^(?:true)/i,/^(?:false)/i,/^(?:return)/i,/^(?:is)/i,/^(?:isnt)/i,/^(?:lt)/i,/^(?:gt)/i,/^(?:gteq)/i,/^(?:lteq)/i,/^(?:&&)/i,/^(?:and)/i,/^(?:\|\|)/i,/^(?:or)/i,/^(?:!)/i,/^(?:[0-9]+(?:\.[0-9]+)?)/i,/^(?:[a-zA-Z_$][a-zA-Z0-9_\-$]*)/i,/^(?:\/(?:\\\/|[^\/])+\/[a-zA-Z]*)/i,/^(?:\/)/i,/^(?:`)/i,/^(?:\$\{)/i,/^(?:(\\`|[^\`]))/i,/^(?:$)/i,/^(?:.)/i],conditions:{INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],inclusive:!0}}};return a}();return ua.lexer=va,a.prototype=ua,ua.Parser=a,new a}();"undefined"!=typeof require&&"undefined"!=typeof exports&&(exports.parser=parser,exports.Parser=parser.Parser,exports.parse=function(){return parser.parse.apply(parser,arguments)},exports.main=function(a){a[1]||(console.log("Usage: "+a[0]+" FILE"),process.exit(1));var b=require("fs").readFileSync(require("path").normalize(a[1]),"utf8");return exports.parser.parse(b)},"undefined"!=typeof module&&require.main===module&&exports.main(process.argv.slice(1)));

}).call(this,require('_process'))

},{"_process":8,"core-js/modules/es6.regexp.match":128,"core-js/modules/es6.regexp.replace":129,"core-js/modules/es6.regexp.split":130,"fs":1,"path":7}],14:[function(require,module,exports){
"use strict";require("core-js/modules/es6.regexp.replace"),module.exports=function(a){return"#!/usr/bin/env node\n\"use strict\";"+"\n\tglobal.__scopedir = __dirname;\n\trequire(\"source-map-support\").install();\n\tif (typeof global.scope === \"undefined\") {\n\t\tObject.defineProperty(global, \"scope\", {\n\t\t\tvalue: require(\"".concat(a,"/scopeRuntime.js\")\n\t\t});\n\t\tObject.defineProperty(global, \"ScopeApi\", {\n\t\t\tvalue: require(\"").concat(a,"/scopeRuntimeApi.js\")(scope)\n\t\t});\n\t\tObject.defineProperty(global, \"XRegExp\", {\n\t\t\tvalue: require(\"xregexp\")\n\t\t});\n\t}\n\tmodule.exports=").replace(/((?<!new|let|var|const|typeof)\s)+/g,"")};

},{"core-js/modules/es6.regexp.replace":129}],15:[function(require,module,exports){
(function (process,global){
"use strict";require("core-js/modules/es6.array.from"),require("core-js/modules/es6.regexp.replace"),require("core-js/modules/es6.regexp.constructor"),require("core-js/modules/es7.object.define-getter"),require("core-js/modules/es6.regexp.to-string"),require("core-js/modules/es7.symbol.async-iterator"),require("core-js/modules/es6.symbol"),require("core-js/modules/es6.weak-map"),require("core-js/modules/web.dom.iterable"),require("core-js/modules/es6.map");function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}function _arrayWithHoles(a){if(Array.isArray(a))return a}"undefined"!=typeof window&&"undefined"==typeof global&&(window.global=window);function hasType(a){function b(a){var b="",c="hasType(.., \"",d=0,f=e.length,g=a+12;10<a&&(d=a-10,c+="..",g+=2-d),a+5<e.length?(f=a+5,c+=e.substr(d,f)+"..\")"):c+=e.substr(d,f)+"\")";for(var h=0;h<g;h+=1)b+="-";return b+="^","\n      ".concat(c,"\n      ").concat(b)}function c(){var b=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"";return null==a?"null"===b:b instanceof Array?d(b):"object"===b||("map"===b?a instanceof Map||a instanceof NumericMap:"associative"===b||"numeric"===b?a.type===b:"regex"===b?a instanceof XRegExp||a instanceof RegEXP:"xregex"===b?a instanceof XRegExp:"scope"===b?!0===a._isScope:"js"===b?void 0===a.type&&void 0===a._isScope&&!(a instanceof XRegExp):typeof a===b)}function d(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[];if(1===a.length)return c(e);for(var b,d=!1,f="|",g=0;g<a.length;g+=1){if(b=a[g],"&"===b||"|"===b){f=b;continue}if("&"===f){if(d){d=d&&c(b);continue}return!1}"|"===f&&(d=d||c(b))}return d}var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"";if("undefined"==typeof a)return!1;var f=[];f.parent=null;for(var g,h="",j=/\s/,k=0;k<e.length;k+=1)if(g=e[k],!j.test(g))switch(g){case"&":f.push(h),f.push("and"),h="";break;case"|":f.push(h),f.push("or"),h="";break;case"(":var l=[];0<h.length&&(console.log("Word before starting Paren at char:",k,"\nSolution: Use | or & before this group."),console.log(b(k)),process.exit()),l.parent=f,f.push(l),f=l;break;case")":null===f.parent&&(console.log("Extra Closing Paren at char:",k),console.log(b(k)),process.exit()),0<h.length&&(f.push(h),h=""),f=f.parent;break;default:h+=g;}return 0<h.length&&f.push(h),d(f)}var randStr=function(){for(var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:16,b="",c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",d=0;d<a;d+=1)b+=c[Math.floor(Math.random()*c.length)];return b},indexRange=function(a,b,c){return"number"==typeof c?("number"!=typeof a&&(a=0),"number"!=typeof b&&(b=c),0>a&&(a=c+a,0>a&&(a=0)),0>b&&(b=c+b,0>b&&(b=0)),b>c&&(b=c),a>=b?[0,0]:[a,b]):[0,0]};Object.defineProperty(Map.prototype,"slice",{value:function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.size,c=this.entries(),d=[];if(0>a&&(a=this.size+a,0>a&&(a=0)),0>b&&(b=this.size+b,0>b&&(b=0)),b>this.size&&(b=this.size),a>=b)return scope.mapExpression();for(var e=0;e<a;e+=1)c.next();for(var f=a;f<b;f+=1)d.push(c.next().value);return scope.mapExpression.apply(scope,d)}});var createProxy=function(){var a=new WeakMap,b=/^\-?\d+$/,c={get:function q(c,d,e){var f=this;if("string"==typeof d&&b.test(d))return d=parseInt(d),c.get(d);if("toString"===d)return"associative"===a.get(f).type?function(){var b="map:".concat(a.get(f).type," {"),d=!0,e=!0,g=!1,h=void 0;try{for(var i,j=c[Symbol.iterator]();!(e=(i=j.next()).done);e=!0){var k=_slicedToArray(i.value,2),l=k[0],m=k[1];d?d=!1:b+=",",b+=" ".concat(l," => ").concat(m)}}catch(a){g=!0,h=a}finally{try{e||null==j.return||j.return()}finally{if(g)throw h}}return b+" }"}:c.toString;if("type"===d)return a.get(f).type;if(c.has(d))return c.get(d);if(d in c)return"function"==typeof c[d]?c[d].bind(c):c[d];if(hasType(e,"numeric")&&d in c.array)return console.log("found array operation:",d),c.array[d];var g=c.entries(),h=[],i=!0,j=!1,k=void 0;try{for(var l,m=g[Symbol.iterator]();!(i=(l=m.next()).done);i=!0){var n=_slicedToArray(l.value,2),o=n[0],p=n[1];"function"==typeof p[d]&&h.push([o,p])}}catch(a){j=!0,k=a}finally{try{i||null==m.return||m.return()}finally{if(j)throw k}}return 0===h.length?void 0:function(){for(var b=arguments.length,c=Array(b),e=0;e<b;e++)c[e]=arguments[e];return"numeric"===a.get(f).type?scope.arrayExpression.apply(scope,_toConsumableArray(h.map(function(a){var b;return(b=a[1])[d].apply(b,c)}))):scope.mapExpression.apply(scope,_toConsumableArray(h.map(function(a){var b;return[a[0],(b=a[1])[d].apply(b,c)]})))}},has:function c(a,b){return a.has(b)},set:function f(b,c,d){var e=this;return"type"===c?a.get(this).type:("associative"===a.get(e).type&&(b[c]=d),b.set(c,d))}};return function(b,d){var e=Object.create(c);return a.set(e,Object.create(null)),a.get(e).type=d,new Proxy(b,e)}}(),NumericMap=function(){function a(a,b){return function(){if(a.index<b.size)a.result.value=[a.index,b.get(a.index++)];else return a.index=0,{done:!0};return a.result}}function b(a,b){return function(){if(a.index<b.size)a.result.value=a.index++;else return a.index=0,{done:!0};return a.result}}function c(a,b){return function(){if(a.index<b.size)a.result.value=b.get(a.index++);else return a.index=0,{done:!0};return a.result}}var d=new WeakMap,e=function(){function e(f){_classCallCheck(this,e);var g=this,h={array:_toConsumableArray(f)};d.set(this,h),h.createKeyIterator=function(){return h.createIterator(b)},h.createValueIterator=function(){return h.createIterator(c)},h.createEntryIterator=function(){return h.createIterator(a)},h.createIterator=function(a){return{next:a({index:0,result:{value:void 0,done:!1}},g),[Symbol.iterator]:function(){return this}}}}return _createClass(e,[{key:"toString",value:function c(){for(var a="[",b=0;b<this.size;b+=1)0!=b&&(a+=", "),a+="".concat(this.get(b));return a+"]"}},{key:"get",value:function b(a){if(0!==this.size)return 0>a&&(a=a%this.size+this.size,a===this.size&&(a=0)),this.array[a]}},{key:"set",value:function c(a,b){return this.array[a]=b}},{key:"push",value:function b(){var a;return(a=this.array).push.apply(a,arguments)}},{key:"slice",value:function c(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.size;return scope.arrayExpression.apply(scope,_toConsumableArray(this.array.slice(a,b)))}},{key:"delete",value:function b(a){return!!this.has(a)&&(this.array.splice(a,1),!0)}},{key:"clear",value:function a(){this.size=0}},{key:"entries",value:function a(){return d.get(this).createEntryIterator()}},{key:"keys",value:function a(){return d.get(this).createKeyIterator()}},{key:"values",value:function a(){return d.get(this).createValueIterator()}},{key:"has",value:function b(a){return"number"==typeof a&&0<=a&&a<this.size}},{key:"forEach",value:function k(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this,c=!0,d=!1,e=void 0;try{for(var f,g=this[Symbol.iterator]();!(c=(f=g.next()).done);c=!0){var h=_slicedToArray(f.value,2),i=h[0],j=h[1];a.call(b,j,i,this)}}catch(a){d=!0,e=a}finally{try{c||null==g.return||g.return()}finally{if(d)throw e}}}},{key:Symbol.iterator,value:function a(){return d.get(this).createEntryIterator()}},{key:"type",get:function a(){return"numeric"}},{key:"array",get:function a(){return d.get(this).array},set:function b(a){return a instanceof Array?d.get(this).array=a:d.get(this).array}},{key:"size",get:function a(){return this.array.length},set:function b(a){return this.array.length=a}}]),e}();return e}(),Scope=function(){function a(){var b=this;_classCallCheck(this,a);this;this._scoping={let:this.mapExpression(),private:this.mapExpression(),protected:this.mapExpression(),public:this.mapExpression(),parent:null},this.userTags=this.mapExpression();var c=require("hyperscript");this.xmlExpression=function(d,e){function f(a){var b="",c=!0,d=!1,e=void 0;try{for(var g,h=a[Symbol.iterator]();!(c=(g=h.next()).done);c=!0){var i=_slicedToArray(g.value,2),j=i[0],k=i[1];b+="".concat(j,"{");var l=0,m=!1,n=!0,o=!1,p=void 0;try{for(var q,r=k[Symbol.iterator]();!(n=(q=r.next()).done);n=!0){var s=_slicedToArray(q.value,2),t=s[0],u=s[1];u instanceof Map?(b+="}".concat(f(new Map([[j+t,u]]))),l+1<k.size?b+="".concat(j,"{"):m=!0):b+="".concat(t,":").concat(u,";"),l+=1}}catch(a){o=!0,p=a}finally{try{n||null==r.return||r.return()}finally{if(o)throw p}}m||(b+="}")}}catch(a){d=!0,e=a}finally{try{c||null==h.return||h.return()}finally{if(d)throw e}}return b}for(var g=arguments.length,h=Array(2<g?g-2:0),j=2;j<g;j++)h[j-2]=arguments[j];var k;if("style"!==d&&"script"!==d){for(var l,m=[],n=0;n<h.length;n+=1)l=h[n],l instanceof NumericMap||l instanceof Map?m.push.apply(m,_toConsumableArray(l.values())):m.push(l);h=m}if(b.userTags.has(d.toLowerCase())&&"undefined"!=typeof window){var w=b.mapExpression();for(var x in e)w[x]=e[x];var y=c.apply(void 0,[d,e].concat(_toConsumableArray(h)));return $(y).data("rawAttributes",w),y}for(var z in k="style"===d&&h[0]instanceof Map?c(d,[f(h[0])]):"script"===d?c.apply(void 0,[d].concat(_toConsumableArray(h))):c.apply(void 0,[d].concat(_toConsumableArray(h))),("style"===d||"script"===d)&&(k.__defineGetter__("textContent",function(){return this.childNodes[0].value}),k.__defineGetter__("innerHTML",function(){return this.textContent}),k.__defineGetter__("outerHTML",function(){return"<".concat(d,">").concat(this.innerHTML,"</").concat(d,">")})),e){var a="";if("style"==z&&e[z]instanceof Map){var o=!0,p=!1,q=void 0;try{for(var r,s=e[z][Symbol.iterator]();!(o=(r=s.next()).done);o=!0){var t=_slicedToArray(r.value,2),u=t[0],v=t[1];a+="".concat(u,":").concat(v,";")}}catch(a){p=!0,q=a}finally{try{o||null==s.return||s.return()}finally{if(p)throw q}}}else if("pattern"==z&&e[z]instanceof RegExp){var A=e[z].toString();a=A.substr(1,A.lastIndexOf("/")-1)}else a=e[z];if("function"==typeof a){var B="scope.createScope(".concat(a._originalFunction.toString(),")");a="".concat(B,"(event)")}k.setAttribute(z,a)}return k.toString=function(){return"style"===k.tagName?k.outerHTML.replace(/gt\;/,">"):k.outerHTML},k.get=function(a){return"function"==typeof k[a]?k[a].bind(k):k[a]},k.childNodes.get=function(a){return"function"==typeof k.childNodes[a]?k.childNodes[a].bind(k):k.childNodes[a]},k}}return _createClass(a,[{key:"arrayExpression",value:function d(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];return createProxy(new NumericMap(b),"numeric")}},{key:"mapExpression",value:function i(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];for(var d=new Map(b),e=0;e<b.length;e++){var f=_slicedToArray(b[e],2),g=f[0],h=f[1];d[g]=h}return createProxy(d,"associative")}},{key:"assignmentExpression",value:function u(a,b){var c,d,e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:this._scoping,f=this,g=_slicedToArray(b,2),h=g[0],j=g[1];if(!(1<a.length))c=a[a.length-1],e.let.has(c)&&(d=e.let),e.private.has(c)&&(d=e.private),e.protected.has(c)&&(d=e.protected),e.public.has(c)&&(d=e.public);else if(2===a.length){var k=_slicedToArray(a,2);d=k[0],c=k[1]}else if(3===a.length){d=a[0];var l=indexRange(a[1],a[2],d.size),m=_slicedToArray(l,2),n=m[0],o=m[1];if(d instanceof NumericMap){for(var p=f.arrayExpression(),q=n;q<o;q+=1)p.array.push(f.assignmentExpression([d,q],b,e));return p}if(d instanceof Map){for(var r=f.mapExpression(),s=d.keys(),t=0;t<n;t+=1)s.next();for(var v,w=n;w<o;w+=1)v=s.next().value,r.set(v,f.assignmentExpression([d,v],b,e));return r}throw new Error("Unexpected Range Assignment `[:]` on non-map.")}if(void 0!==d)switch(h){case"=":return d.set?(d.set(c,j),d.get(c)):d[c]=j;case"+=":return d.set(c,f.binaryExpression("+",d.get(c),j)),d.get(c);case"[]=":return f.binaryExpression("<&",d.get(c),j);case"*=":return d.set(c,f.binaryExpression("*",d.get(c),j)),d.get(c);default:throw new Error("Assignment Operator '".concat(h,"' is not implemented"));}if(e.parent)return f.assignmentExpression([c],b,e.parent);throw new Error("Identifier '".concat(c,"' is not defined"))}},{key:"binaryExpression",value:function k(c,d,a){this;switch(c){case"&&":return d&&a;case"||":return d||a;case"===":return d===a;case"!==":return d!==a;case">":return d>a;case"<":return d<a;case">=":return d>=a;case"<=":return d<=a;case"&>":if(console.log("&>:",d,a),hasType(a,"numeric"))return a.push(d),a;if(hasType(a,"string"));throw new Error("Attempt to push on incompatible type: '".concat(d,"' &> '").concat(a,"'"));break;case"<&":if(hasType(d,"numeric"))return d.push(a),d;throw new Error("Attempt to push on incompatible type: '".concat(d,"' <& '").concat(a,"'"));break;case"+":if(hasType(d,"string|number")&&hasType(a,"string|number"))return d+a;if(hasType(d,"numeric")){var l=this.arrayExpression.apply(this,_toConsumableArray(d.array));return l.push(a),l}throw new Error("Attempt to add incompatible types: '".concat(d,"' + '").concat(a,"'"));case"-":return d-a;case"*":if("number"!=typeof a&&(a=1),"number"==typeof d)return d*a;if("string"==typeof d){for(var e="",f=0;f<a;f+=1)e+=d;return e}if(d instanceof NumericMap){for(var g=scope.arrayExpression(),h=0;h<a;h+=1)for(var m=0;m<d.size;m+=1)g.push(d[m]);return g}throw new Error("Attempt to multiply incompatible types: '".concat(d,"' + '").concat(a,"'"));case"/":return d/a;case"^":return d^a;case"%":return d%a;}}},{key:"declarationExpression",value:function k(a){var b,c=a.type,d=a.name,e=a.value,f=this;if(d instanceof Array){if(null!==e&&"function"==typeof e[Symbol.iterator]){for(var g,h=[],j=0;j<d.length;j+=1)g=void 0,g=e.length<=j?void 0:e[j],h.push(f.declarationExpression({type:c,name:d[j],value:g}));return f.arrayExpression.apply(f,h)}throw new Error("Attempt to iterate over non-iterable during declaration")}if("let"===c){if(f._scoping.let.has(d))throw new Error("Identifier '".concat(d,"' has already been declared"));b=f._scoping.let}if("private"===c){if(f._scoping.private.has(d))throw new Error("Identifier '".concat(d,"' has already been declared"));b=f._scoping.private}if("protected"===c){if(f._scoping.protected.has(d))throw new Error("Identifier '".concat(d,"' has already been declared"));b=f._scoping.protected}if("public"===c){if(f._scoping.public.has(d))throw new Error("Identifier '".concat(d,"' has already been declared"));b=f._scoping.public}return b.set(d,e),e}},{key:"dereferenceIdentifier",value:function d(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this._scoping,c=this;return b.let.has(a)?b.let.delete(a):b.private.has(a)?b.private.delete(a):b.protected.has(a)?b.protected.delete(a):b.public.has(a)?b.public.delete(a):!!b.parent&&c.dereferenceIdentifier(a,b.parent)}},{key:"identifier",value:function d(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this._scoping,c=this;return b.let.has(a)?b.let.get(a):b.private.has(a)?b.private.get(a):b.protected.has(a)?b.protected.get(a):b.public.has(a)?b.public.get(a):b.parent?c.identifier(a,b.parent):global[a]}},{key:"createScope",value:function e(a){var b=this,c=function(){for(var c=arguments.length,d=Array(c),e=0;e<c;e++)d[e]=arguments[e];var f=this;return b.invokeExpression({function:a,arguments:d,context:f,isExtension:a._beingUsed})},d=function(b,d){return Object.defineProperty(c,b,{get:function c(){return a[b]},set:function d(c){return a[b]=c}}),c[b]=d};return d("_isScope",!0),d("_parent",b._scoping),d("_beingUsed",!1),d("_originalFunction",a),c}},{key:"invokeExpression",value:function d(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{function:function a(){},arguments:[],context:this,isExtension:!1};if(!a.function._isScope)return a.function.apply(a.context,a.arguments);var b=this._scoping;if(void 0===a.function)throw new Error("Call to undefined scope");this._scoping={parent:a.function._parent,let:this.mapExpression(),private:this.mapExpression(),protected:this.mapExpression(),public:this.mapExpression()};var c=a.function(a.arguments);return void 0===c&&(!0===a.isExtension?c=this.mapExpression(["public",this._scoping.public],["protected",this._scoping.protected]):c=this._scoping.public),this._scoping=b,c}},{key:"import",value:function c(a){var b=require.resolve(a);return delete require.cache[b],require(b)}},{key:"use",value:function d(a,b){var c=this;a.forEach(function(a){if("function"!=typeof a)throw new Error("Attempt to use non-scope");a._beingUsed=!0;var d=a();if(a._beingUsed=!1,!(d instanceof Map))throw new Error("Attempt to use scope returning non-map");if(d.get("protected")instanceof Map){var e=!0,f=!1,g=void 0;try{for(var h,i=d.get("protected")[Symbol.iterator]();!(e=(h=i.next()).done);e=!0){var j=_slicedToArray(h.value,2),k=j[0],l=j[1];(void 0===b||-1!==b.indexOf(k))&&c._scoping.protected.set(k,l)}}catch(a){f=!0,g=a}finally{try{e||null==i.return||i.return()}finally{if(f)throw g}}}if(d.get("public")instanceof Map){var m=!0,n=!1,o=void 0;try{for(var p,q=d.get("public")[Symbol.iterator]();!(m=(p=q.next()).done);m=!0){var r=_slicedToArray(p.value,2),k=r[0],l=r[1];(void 0===b||-1!==b.indexOf(k))&&c._scoping.public.set(k,l)}}catch(a){n=!0,o=a}finally{try{m||null==q.return||q.return()}finally{if(n)throw o}}}})}}]),a}(),scope=new Scope({});module.exports=scope;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":8,"core-js/modules/es6.array.from":122,"core-js/modules/es6.map":124,"core-js/modules/es6.regexp.constructor":126,"core-js/modules/es6.regexp.replace":129,"core-js/modules/es6.regexp.to-string":131,"core-js/modules/es6.symbol":132,"core-js/modules/es6.weak-map":133,"core-js/modules/es7.object.define-getter":134,"core-js/modules/es7.symbol.async-iterator":136,"core-js/modules/web.dom.iterable":137,"hyperscript":138}],16:[function(require,module,exports){
(function (Buffer){
"use strict";require("core-js/modules/es7.promise.finally"),require("core-js/modules/es6.promise"),require("core-js/modules/es6.regexp.replace"),require("core-js/modules/es6.regexp.match"),require("core-js/modules/es7.symbol.async-iterator"),require("core-js/modules/es6.symbol"),require("core-js/modules/es6.regexp.to-string"),require("core-js/modules/web.dom.iterable"),require("core-js/modules/es6.map");function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}function _arrayWithHoles(a){if(Array.isArray(a))return a}var fs=require("fs"),path=require("path"),ScopeParser=require("./ScopeParser.js");module.exports=function(scope){var userTags=scope.userTags,ScopeApi={print:function e(a){for(var b,c=[],d=0;d<a.length;d+=1)a[d]instanceof Map||a[d]instanceof scope.arrayExpression().__proto__.constructor?c.push(a[d].toString()):c.push(a[d]);(b=console).log.apply(b,c)},createTag:function c(a,b){userTags[a.toLowerCase()]=b},getTag:function b(a){return userTags[a.toLowerCase()]},getAllTags:function a(){return userTags},debug:function b(a){a.forEach(function(a){ScopeApi.print([ScopeApi.__debugReturn(a)])})},__debugReturn:function __debugReturn(value){var spaces=1<arguments.length&&void 0!==arguments[1]?arguments[1]:2,result="",spacef=function(){for(var a="",b=0;b<spaces;b+=1)a+=" ";return a};if("object"==typeof value&&value instanceof Map){result+="Map(";var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=value[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var _step$value=_slicedToArray(_step.value,2),key=_step$value[0],val=_step$value[1];result+="\n".concat(spacef()).concat(key," => ").concat(ScopeApi.__debugReturn(val,spaces+2))}}catch(a){_didIteratorError=!0,_iteratorError=a}finally{try{_iteratorNormalCompletion||null==_iterator.return||_iterator.return()}finally{if(_didIteratorError)throw _iteratorError}}return"".concat(result,")")}if("function"==typeof value){var source=value.toString(),args=source.match(/^\(args\=(\[.*\])\)/);return args=args[1]?eval(args[1]):[],result+="Scope([",args.forEach(function(a){result+="\n".concat(spacef(),"(").concat(typeof a.value,") ").concat(a.key,": ").concat(ScopeApi.__debugReturn(a.value,spaces+2))}),"".concat(result,"])")}return"string"==typeof value?"\"".concat(value,"\""):value},dereference:function d(a,b){var c;return void 0===b?b=a:c=a,c instanceof Map||c instanceof scope.arrayExpression().__proto__.constructor?c.delete(b):scope.dereferenceIdentifier(b)},if:function j(a){var b=_slicedToArray(a,4),c=b[0],d=b[1],e=void 0===d?function(){}:d,f=b[2],g=void 0===f?function(){}:f,h=b[3],i=void 0===h||h;return c?i&&"function"==typeof e?e():e:i&&"function"==typeof g?g():g},each:function t(a){var b=_slicedToArray(a,2),c=b[0],d=b[1],e=void 0===d?function(){}:d,f=!1,g=function(){f=!0};if("numeric"===c.type){for(var h=[],j=0;j<c.size&&(h.push(e(c.get(j),j,g)),!f);j+=1);return scope.arrayExpression.apply(scope,h)}var k=scope.mapExpression(),l=!0,m=!1,n=void 0;try{for(var o,p=c[Symbol.iterator]();!(l=(o=p.next()).done);l=!0){var q=_slicedToArray(o.value,2),r=q[0],s=q[1];if(k.set(r,e(s,r,g)),f)break}}catch(a){m=!0,n=a}finally{try{l||null==p.return||p.return()}finally{if(m)throw n}}return k},toJS:function n(a){var b;if("object"!=typeof a||null===a)return a;if(a instanceof Map){b={};var c=!0,d=!1,e=void 0;try{for(var f,g=a[Symbol.iterator]();!(c=(f=g.next()).done);c=!0){var h=_slicedToArray(f.value,2),j=h[0],k=h[1];b[j]=ScopeApi.toJS(k)}}catch(a){d=!0,e=a}finally{try{c||null==g.return||g.return()}finally{if(d)throw e}}return b}if(a instanceof scope.arrayExpression().__proto__.constructor){for(var l=[],m=0;m<a.size;m+=1)l.push(ScopeApi.toJS(a[m]));return l}return null},toJSON:function b(a){return JSON.stringify(ScopeApi.toJS(a))},BSONtoMap:function c(a){var b;if("object"!=typeof a||Buffer.isBuffer(a)||"_bsontype"in a)return a;if(null===a)return!1;if(a instanceof Array){b=scope.arrayExpression();for(var d=0;d<a.length;d+=1)b[d]=ScopeApi.BSONtoMap(a[d]);return b}for(var e in b=scope.mapExpression(),a)Object.hasOwnProperty.call(a,e)&&(b[e]=ScopeApi.BSONtoMap(a[e]));return b},eval:function _eval(code){var parser=new ScopeParser,translation=parser.translate(code);return eval(translation.code)},compile:function e(a){var b=new ScopeParser,c=path.join(__scopedir,a),d=c.replace(/\.sc$/,".js");return new ScopeApi.promise(function(a,e){fs.readFile(c,"utf8",function(f,g){f&&e("Could not read file ".concat(c,".\n").concat(f));var h=b.translate(g,c,d);fs.writeFile(d,h.code,function(b){b&&e("Could not write to file ".concat(d,".\n").concat(b));var c=scope.import(d);a(c)})})})},promise:function d(a){var b=new Promise(function(b,c){a(b,c)}),c=scope.mapExpression();return c.set("then",function(a){b.then(function(b){a(b)})}),c.set("catch",function(a){b.catch(function(b){a(b)})}),c.set("finally",function(a){b.finally(function(){a()})}),c.originalPromise=b,c}};return ScopeApi.promise.get=function(a){return ScopeApi.promise[a]},ScopeApi.promise.all=function(a){var b=[],c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done);d=!0){var i=_slicedToArray(g.value,2),j=i[0],k=i[1],l=void 0;l=void 0===k.originalPromise?k:k.originalPromise,b.push(l),c.push(j)}}catch(a){e=!0,f=a}finally{try{d||null==h.return||h.return()}finally{if(e)throw f}}var m=Promise.all(b),n=scope.mapExpression();return n.set("then",function(a){m.then(function(b){for(var d=scope.mapExpression(),e=0;e<b.length;e+=1)d.set(c[e],b[e]);a(d)})}),n.set("catch",function(a){m.catch(function(b){a(b)})}),n.set("finally",function(a){m.finally(function(){a()})}),n},ScopeApi.print=scope.createScope(ScopeApi.print),ScopeApi.debug=scope.createScope(ScopeApi.debug),ScopeApi.if=scope.createScope(ScopeApi.if),ScopeApi.each=scope.createScope(ScopeApi.each),ScopeApi};

}).call(this,{"isBuffer":require("../../../.nvm/versions/node/v10.5.0/lib/node_modules/browserify/node_modules/is-buffer/index.js")})

},{"../../../.nvm/versions/node/v10.5.0/lib/node_modules/browserify/node_modules/is-buffer/index.js":6,"./ScopeParser.js":11,"core-js/modules/es6.map":124,"core-js/modules/es6.promise":125,"core-js/modules/es6.regexp.match":128,"core-js/modules/es6.regexp.replace":129,"core-js/modules/es6.regexp.to-string":131,"core-js/modules/es6.symbol":132,"core-js/modules/es7.promise.finally":135,"core-js/modules/es7.symbol.async-iterator":136,"core-js/modules/web.dom.iterable":137,"fs":1,"path":7}],17:[function(require,module,exports){
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();

},{}],18:[function(require,module,exports){
(function (Buffer){
var toString = Object.prototype.toString

var isModern = (
  typeof Buffer.alloc === 'function' &&
  typeof Buffer.allocUnsafe === 'function' &&
  typeof Buffer.from === 'function'
)

function isArrayBuffer (input) {
  return toString.call(input).slice(8, -1) === 'ArrayBuffer'
}

function fromArrayBuffer (obj, byteOffset, length) {
  byteOffset >>>= 0

  var maxLength = obj.byteLength - byteOffset

  if (maxLength < 0) {
    throw new RangeError("'offset' is out of bounds")
  }

  if (length === undefined) {
    length = maxLength
  } else {
    length >>>= 0

    if (length > maxLength) {
      throw new RangeError("'length' is out of bounds")
    }
  }

  return isModern
    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))
    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  return isModern
    ? Buffer.from(string, encoding)
    : new Buffer(string, encoding)
}

function bufferFrom (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return isModern
    ? Buffer.from(value)
    : new Buffer(value)
}

module.exports = bufferFrom

}).call(this,require("buffer").Buffer)

},{"buffer":4}],19:[function(require,module,exports){
// contains, add, remove, toggle
var indexof = require('indexof')

module.exports = ClassList

function ClassList(elem) {
    var cl = elem.classList

    if (cl) {
        return cl
    }

    var classList = {
        add: add
        , remove: remove
        , contains: contains
        , toggle: toggle
        , toString: $toString
        , length: 0
        , item: item
    }

    return classList

    function add(token) {
        var list = getTokens()
        if (indexof(list, token) > -1) {
            return
        }
        list.push(token)
        setTokens(list)
    }

    function remove(token) {
        var list = getTokens()
            , index = indexof(list, token)

        if (index === -1) {
            return
        }

        list.splice(index, 1)
        setTokens(list)
    }

    function contains(token) {
        return indexof(getTokens(), token) > -1
    }

    function toggle(token) {
        if (contains(token)) {
            remove(token)
            return false
        } else {
            add(token)
            return true
        }
    }

    function $toString() {
        return elem.className
    }

    function item(index) {
        var tokens = getTokens()
        return tokens[index] || null
    }

    function getTokens() {
        var className = elem.className

        return filter(className.split(" "), isTruthy)
    }

    function setTokens(list) {
        var length = list.length

        elem.className = list.join(" ")
        classList.length = length

        for (var i = 0; i < list.length; i++) {
            classList[i] = list[i]
        }

        delete list[length]
    }
}

function filter (arr, fn) {
    var ret = []
    for (var i = 0; i < arr.length; i++) {
        if (fn(arr[i])) ret.push(arr[i])
    }
    return ret
}

function isTruthy(value) {
    return !!value
}

},{"indexof":139}],20:[function(require,module,exports){
'use strict';

var path            =  require('path');
var convert         =  require('convert-source-map');
var memoize         =  require('lodash.memoize');
var createGenerator =  require('inline-source-map');
var pathIsAbsolute  =  require('./lib/path-is-absolute');
var mappingsFromMap =  require('./lib/mappings-from-map');

var protocolRx = /^[a-z]+:\/\//;

/**
 * Rebases a relative path in 'sourceFile' to be relative
 * to the path where 'sourceFile' is located.
 *
 * This is necessary before adding relative paths to the
 * new combined map to ensure all paths are relative to their
 * original source.
 *
 * The 'sourceRoot' from the original source map is joined
 * as well to ensure the complete path.
 *
 * Resulting paths that are absolute are passed along directly.
 *
 * @param sourceFile {String} path to the original source file that references a map
 * @param relativeRoot {String} sourceRoot in sourceFile's map to combine with relativePath
 * @param relativePath {String} source path from sourceFile's map
 */
var rebaseRelativePath = memoize(function(sourceFile, relativeRoot, relativePath) {
  if (!relativePath) {
    return relativePath;
  }

  // join relative path to root (e.g. 'src/' + 'file.js')
  var relativeRootedPath = relativeRoot ? path.join(relativeRoot, relativePath) : relativePath;
  relativeRootedPath = relativeRootedPath.replace(/\\/g, '/');
  sourceFile = sourceFile.replace(/\\/g, '/');

  if (sourceFile === relativeRootedPath ||    // same path,
      pathIsAbsolute(relativeRootedPath) ||   // absolute path, nor
      protocolRx.test(relativeRootedPath)) {  // absolute protocol need rebasing
    return relativeRootedPath;
  }

  // make relative to source file
  return path.join(path.dirname(sourceFile), relativeRootedPath).replace(/\\/g, '/');
}, function(a, b, c) {
  return a + '::' + b + '::' + c;
});

function resolveMap(source) {
  var gen = convert.fromSource(source);
  return gen ? gen.toObject() : null;
}

function hasInlinedSource(existingMap) {
  return existingMap.sourcesContent && !!existingMap.sourcesContent[0];
}

function Combiner(file, sourceRoot) {
  // since we include the original code in the map sourceRoot actually not needed
  this.generator = createGenerator({ file: file || 'generated.js', sourceRoot: sourceRoot });
}

Combiner.prototype._addGeneratedMap = function (sourceFile, source, offset) {
  this.generator.addGeneratedMappings(sourceFile, source, offset);
  this.generator.addSourceContent(sourceFile, source);
  return this;
};

Combiner.prototype._addExistingMap = function (sourceFile, source, existingMap, offset) {
  var mappings = mappingsFromMap(existingMap);

  // add all of the sources from the map
  for (var i = 0, len = existingMap.sources.length; i < len; i++) {
    if (!existingMap.sourcesContent) continue;

    this.generator.addSourceContent(
      rebaseRelativePath(sourceFile, existingMap.sourceRoot, existingMap.sources[i]),
      existingMap.sourcesContent[i]);
  }

  // add the mappings, preserving the original mapping 'source'
  mappings.forEach(function(mapping) {
    // Add the mappings one at a time because 'inline-source-map' doesn't handle
    // mapping source filenames. The mapping.source already takes sourceRoot into account
    // per the SMConsumer.eachMapping function, so pass null for the root here.
    this.generator.addMappings(
      rebaseRelativePath(sourceFile, null, mapping.source), [mapping], offset);
  }, this);

  return this;
};

/**
 * Adds map to underlying source map.
 * If source contains a source map comment that has the source of the original file inlined it will offset these
 * mappings and include them.
 * If no source map comment is found or it has no source inlined, mappings for the file will be generated and included
 *
 * @name addMap
 * @function
 * @param opts {Object} { sourceFile: {String}, source: {String} }
 * @param offset {Object} { line: {Number}, column: {Number} }
 */
Combiner.prototype.addFile = function (opts, offset) {

  offset = offset || {};
  if (!offset.hasOwnProperty('line'))  offset.line    =  0;
  if (!offset.hasOwnProperty('column')) offset.column =  0;

  var existingMap = resolveMap(opts.source);

  return existingMap && hasInlinedSource(existingMap)
    ? this._addExistingMap(opts.sourceFile, opts.source, existingMap, offset)
    : this._addGeneratedMap(opts.sourceFile, opts.source, offset);
};

/**
* @name base64
* @function
* @return {String} base64 encoded combined source map
*/
Combiner.prototype.base64 = function () {
  return this.generator.base64Encode();
};

/**
 * @name comment
 * @function
 * @return {String} base64 encoded sourceMappingUrl comment of the combined source map
 */
Combiner.prototype.comment = function () {
  return this.generator.inlineMappingUrl();
};

/**
 * @name create
 * @function
 * @param file {String} optional name of the generated file
 * @param sourceRoot {String} optional sourceRoot of the map to be generated
 * @return {Object} Combiner instance to which source maps can be added and later combined
 */
exports.create = function (file, sourceRoot) { return new Combiner(file, sourceRoot); };

/**
 * @name removeComments
 * @function
 * @param src
 * @return {String} src with all sourceMappingUrl comments removed
 */
exports.removeComments = function (src) {
  if (!src.replace) return src;
  return src.replace(convert.commentRegex, '').replace(convert.mapFileCommentRegex, '');
};

},{"./lib/mappings-from-map":21,"./lib/path-is-absolute":22,"convert-source-map":23,"inline-source-map":140,"lodash.memoize":152,"path":7}],21:[function(require,module,exports){
var SMConsumer  =  require('source-map').SourceMapConsumer;

/**
 * @name mappingsFromMap
 * @function
 * @param map {Object} the JSON.parse()'ed map
 * @return {Array} array of mappings
 */
module.exports = function (map) {
  var consumer = new SMConsumer(map);
  var mappings = [];

  consumer.eachMapping(function (mapping) {
    // only set source if we have original position to handle edgecase (see inline-source-map tests)
    mappings.push({
      original: mapping.originalColumn != null ? {
        column: mapping.originalColumn
      , line: mapping.originalLine
      } : undefined
    , generated: {
        column: mapping.generatedColumn
      , line: mapping.generatedLine
      }
    , source: mapping.originalColumn != null ? mapping.source : undefined
    , name: mapping.name
    });
  });

  return mappings;
}

},{"source-map":34}],22:[function(require,module,exports){
(function (process){
'use strict';

function posix(path) {
	return path.charAt(0) === '/';
};

function win32(path) {
	// https://github.com/joyent/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
	var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
	var result = splitDeviceRe.exec(path);
	var device = result[1] || '';
	var isUnc = !!device && device.charAt(1) !== ':';

	// UNC paths are always absolute
	return !!result[2] || isUnc;
};

module.exports = process.platform === 'win32' ? win32 : posix;
module.exports.posix = posix;
module.exports.win32 = win32;
}).call(this,require('_process'))

},{"_process":8}],23:[function(require,module,exports){
(function (Buffer){
'use strict';
var fs = require('fs');
var path = require('path');

var commentRx = /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+;)?base64,(.*)$/mg;
var mapFileCommentRx =
  //Example (Extra space between slashes added to solve Safari bug. Exclude space in production):
  //     / /# sourceMappingURL=foo.js.map           
  /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg

function decodeBase64(base64) {
  return new Buffer(base64, 'base64').toString();
}

function stripComment(sm) {
  return sm.split(',').pop();
}

function readFromFileMap(sm, dir) {
  // NOTE: this will only work on the server since it attempts to read the map file

  var r = mapFileCommentRx.exec(sm);
  mapFileCommentRx.lastIndex = 0;

  // for some odd reason //# .. captures in 1 and /* .. */ in 2
  var filename = r[1] || r[2];
  var filepath = path.join(dir, filename);

  try {
    return fs.readFileSync(filepath, 'utf8');
  } catch (e) {
    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
  }
}

function Converter (sm, opts) {
  opts = opts || {};

  if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
  if (opts.hasComment) sm = stripComment(sm);
  if (opts.isEncoded) sm = decodeBase64(sm);
  if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);

  this.sourcemap = sm;
}

function convertFromLargeSource(content){
  var lines = content.split('\n');
  var line;
  // find first line which contains a source map starting at end of content
  for (var i = lines.length - 1; i > 0; i--) {
    line = lines[i]
    if (~line.indexOf('sourceMappingURL=data:')) return exports.fromComment(line);
  }
}

Converter.prototype.toJSON = function (space) {
  return JSON.stringify(this.sourcemap, null, space);
};

Converter.prototype.toBase64 = function () {
  var json = this.toJSON();
  return new Buffer(json).toString('base64');
};

Converter.prototype.toComment = function (options) {
  var base64 = this.toBase64();
  var data = 'sourceMappingURL=data:application/json;base64,' + base64;
  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
};

// returns copy instead of original
Converter.prototype.toObject = function () {
  return JSON.parse(this.toJSON());
};

Converter.prototype.addProperty = function (key, value) {
  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property %s already exists on the sourcemap, use set property instead');
  return this.setProperty(key, value);
};

Converter.prototype.setProperty = function (key, value) {
  this.sourcemap[key] = value;
  return this;
};

Converter.prototype.getProperty = function (key) {
  return this.sourcemap[key];
};

exports.fromObject = function (obj) {
  return new Converter(obj);
};

exports.fromJSON = function (json) {
  return new Converter(json, { isJSON: true });
};

exports.fromBase64 = function (base64) {
  return new Converter(base64, { isEncoded: true });
};

exports.fromComment = function (comment) {
  comment = comment
    .replace(/^\/\*/g, '//')
    .replace(/\*\/$/g, '');

  return new Converter(comment, { isEncoded: true, hasComment: true });
};

exports.fromMapFileComment = function (comment, dir) {
  return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
};

// Finds last sourcemap comment in file or returns null if none was found
exports.fromSource = function (content, largeSource) {
  if (largeSource) {
    var res = convertFromLargeSource(content);
    return res ? res : null;
  }

  var m = content.match(commentRx);
  commentRx.lastIndex = 0;
  return m ? exports.fromComment(m.pop()) : null;
};

// Finds last sourcemap comment in file or returns null if none was found
exports.fromMapFileSource = function (content, dir) {
  var m = content.match(mapFileCommentRx);
  mapFileCommentRx.lastIndex = 0;
  return m ? exports.fromMapFileComment(m.pop(), dir) : null;
};

exports.removeComments = function (src) {
  commentRx.lastIndex = 0;
  return src.replace(commentRx, '');
};

exports.removeMapFileComments = function (src) {
  mapFileCommentRx.lastIndex = 0;
  return src.replace(mapFileCommentRx, '');
};

Object.defineProperty(exports, 'commentRegex', {
  get: function getCommentRegex () {
    commentRx.lastIndex = 0;
    return commentRx;
  }
});

Object.defineProperty(exports, 'mapFileCommentRegex', {
  get: function getMapFileCommentRegex () {
    mapFileCommentRx.lastIndex = 0;
    return mapFileCommentRx;
  }
});

}).call(this,require("buffer").Buffer)

},{"buffer":4,"fs":1,"path":7}],24:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;

},{"./util":33}],25:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = require('./base64');

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};

},{"./base64":26}],26:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};

},{}],27:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};

},{}],28:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;

},{"./util":33}],29:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};

},{}],30:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');
var binarySearch = require('./binary-search');
var ArraySet = require('./array-set').ArraySet;
var base64VLQ = require('./base64-vlq');
var quickSort = require('./quick-sort').quickSort;

function SourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap)
    : new BasicSourceMapConsumer(sourceMap);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      if (source != null && sourceRoot != null) {
        source = util.join(sourceRoot, source);
      }
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: Optional. the column number in the original source.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    if (this.sourceRoot != null) {
      needle.source = util.relative(this.sourceRoot, needle.source);
    }
    if (!this._sources.has(needle.source)) {
      return [];
    }
    needle.source = this._sources.indexOf(needle.source);

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The only parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._sources.toArray().map(function (s) {
      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
    }, this);
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.
 *   - column: The column number in the generated source.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.
 *   - column: The column number in the original source, or null.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          if (this.sourceRoot != null) {
            source = util.join(this.sourceRoot, source);
          }
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    if (this.sourceRoot != null) {
      aSource = util.relative(this.sourceRoot, aSource);
    }

    if (this._sources.has(aSource)) {
      return this.sourcesContent[this._sources.indexOf(aSource)];
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + aSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: The column number in the original source.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    if (this.sourceRoot != null) {
      source = util.relative(this.sourceRoot, source);
    }
    if (!this._sources.has(source)) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }
    source = this._sources.indexOf(source);

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The only parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'))
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.
 *   - column: The column number in the generated source.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.
 *   - column: The column number in the original source, or null.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: The column number in the original source.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        if (section.consumer.sourceRoot !== null) {
          source = util.join(section.consumer.sourceRoot, source);
        }
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = section.consumer._names.at(mapping.name);
        this._names.add(name);
        name = this._names.indexOf(name);

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

},{"./array-set":24,"./base64-vlq":25,"./binary-search":27,"./quick-sort":29,"./util":33}],31:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = require('./base64-vlq');
var util = require('./util');
var ArraySet = require('./array-set').ArraySet;
var MappingList = require('./mapping-list').MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;

},{"./array-set":24,"./base64-vlq":25,"./mapping-list":28,"./util":33}],32:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
var util = require('./util');

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex];
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex];
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;

},{"./source-map-generator":31,"./util":33}],33:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = mappingA.source - mappingB.source;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return mappingA.name - mappingB.name;
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = mappingA.source - mappingB.source;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return mappingA.name - mappingB.name;
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

},{}],34:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;
exports.SourceNode = require('./lib/source-node').SourceNode;

},{"./lib/source-map-consumer":30,"./lib/source-map-generator":31,"./lib/source-node":32}],35:[function(require,module,exports){
(function (Buffer){
'use strict';
var fs = require('fs');
var path = require('path');

Object.defineProperty(exports, 'commentRegex', {
  get: function getCommentRegex () {
    return /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/mg;
  }
});

Object.defineProperty(exports, 'mapFileCommentRegex', {
  get: function getMapFileCommentRegex () {
    // Matches sourceMappingURL in either // or /* comment styles.
    return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"`]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg;
  }
});


function decodeBase64(base64) {
  return new Buffer(base64, 'base64').toString();
}

function stripComment(sm) {
  return sm.split(',').pop();
}

function readFromFileMap(sm, dir) {
  // NOTE: this will only work on the server since it attempts to read the map file

  var r = exports.mapFileCommentRegex.exec(sm);

  // for some odd reason //# .. captures in 1 and /* .. */ in 2
  var filename = r[1] || r[2];
  var filepath = path.resolve(dir, filename);

  try {
    return fs.readFileSync(filepath, 'utf8');
  } catch (e) {
    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
  }
}

function Converter (sm, opts) {
  opts = opts || {};

  if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
  if (opts.hasComment) sm = stripComment(sm);
  if (opts.isEncoded) sm = decodeBase64(sm);
  if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);

  this.sourcemap = sm;
}

Converter.prototype.toJSON = function (space) {
  return JSON.stringify(this.sourcemap, null, space);
};

Converter.prototype.toBase64 = function () {
  var json = this.toJSON();
  return new Buffer(json).toString('base64');
};

Converter.prototype.toComment = function (options) {
  var base64 = this.toBase64();
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
};

// returns copy instead of original
Converter.prototype.toObject = function () {
  return JSON.parse(this.toJSON());
};

Converter.prototype.addProperty = function (key, value) {
  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
  return this.setProperty(key, value);
};

Converter.prototype.setProperty = function (key, value) {
  this.sourcemap[key] = value;
  return this;
};

Converter.prototype.getProperty = function (key) {
  return this.sourcemap[key];
};

exports.fromObject = function (obj) {
  return new Converter(obj);
};

exports.fromJSON = function (json) {
  return new Converter(json, { isJSON: true });
};

exports.fromBase64 = function (base64) {
  return new Converter(base64, { isEncoded: true });
};

exports.fromComment = function (comment) {
  comment = comment
    .replace(/^\/\*/g, '//')
    .replace(/\*\/$/g, '');

  return new Converter(comment, { isEncoded: true, hasComment: true });
};

exports.fromMapFileComment = function (comment, dir) {
  return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
};

// Finds last sourcemap comment in file or returns null if none was found
exports.fromSource = function (content) {
  var m = content.match(exports.commentRegex);
  return m ? exports.fromComment(m.pop()) : null;
};

// Finds last sourcemap comment in file or returns null if none was found
exports.fromMapFileSource = function (content, dir) {
  var m = content.match(exports.mapFileCommentRegex);
  return m ? exports.fromMapFileComment(m.pop(), dir) : null;
};

exports.removeComments = function (src) {
  return src.replace(exports.commentRegex, '');
};

exports.removeMapFileComments = function (src) {
  return src.replace(exports.mapFileCommentRegex, '');
};

exports.generateMapFileComment = function (file, options) {
  var data = 'sourceMappingURL=' + file;
  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
};

}).call(this,require("buffer").Buffer)

},{"buffer":4,"fs":1,"path":7}],36:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],37:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":64,"./_wks":120}],38:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],39:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":72}],40:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":109,"./_to-iobject":111,"./_to-length":112}],41:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":43,"./_ctx":51,"./_iobject":69,"./_to-length":112,"./_to-object":113}],42:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-array":71,"./_is-object":72,"./_wks":120}],43:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":42}],44:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":45,"./_wks":120}],45:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],46:[function(require,module,exports){
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":38,"./_ctx":51,"./_descriptors":53,"./_for-of":61,"./_iter-define":76,"./_iter-step":78,"./_meta":81,"./_object-create":85,"./_object-dp":86,"./_redefine-all":100,"./_set-species":103,"./_validate-collection":117}],47:[function(require,module,exports){
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":38,"./_an-object":39,"./_array-methods":41,"./_for-of":61,"./_has":63,"./_is-object":72,"./_meta":81,"./_redefine-all":100,"./_validate-collection":117}],48:[function(require,module,exports){
'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":38,"./_export":57,"./_fails":58,"./_for-of":61,"./_global":62,"./_inherit-if-required":67,"./_is-object":72,"./_iter-detect":77,"./_meta":81,"./_redefine":101,"./_redefine-all":100,"./_set-to-string-tag":104}],49:[function(require,module,exports){
var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],50:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":86,"./_property-desc":99}],51:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":36}],52:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],53:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":58}],54:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":62,"./_is-object":72}],55:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],56:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":92,"./_object-keys":95,"./_object-pie":96}],57:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":49,"./_ctx":51,"./_global":62,"./_hide":64,"./_redefine":101}],58:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],59:[function(require,module,exports){
'use strict';
var hide = require('./_hide');
var redefine = require('./_redefine');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./_defined":52,"./_fails":58,"./_hide":64,"./_redefine":101,"./_wks":120}],60:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":39}],61:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":39,"./_ctx":51,"./_is-array-iter":70,"./_iter-call":74,"./_to-length":112,"./core.get-iterator-method":121}],62:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],63:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],64:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":53,"./_object-dp":86,"./_property-desc":99}],65:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":62}],66:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":53,"./_dom-create":54,"./_fails":58}],67:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":72,"./_set-proto":102}],68:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],69:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":45}],70:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":79,"./_wks":120}],71:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":45}],72:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],73:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":45,"./_is-object":72,"./_wks":120}],74:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":39}],75:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":64,"./_object-create":85,"./_property-desc":99,"./_set-to-string-tag":104,"./_wks":120}],76:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":57,"./_hide":64,"./_iter-create":75,"./_iterators":79,"./_library":80,"./_object-gpo":93,"./_redefine":101,"./_set-to-string-tag":104,"./_wks":120}],77:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":120}],78:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],79:[function(require,module,exports){
module.exports = {};

},{}],80:[function(require,module,exports){
module.exports = false;

},{}],81:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":58,"./_has":63,"./_is-object":72,"./_object-dp":86,"./_uid":115}],82:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":45,"./_global":62,"./_task":108}],83:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":36}],84:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_fails":58,"./_iobject":69,"./_object-gops":92,"./_object-keys":95,"./_object-pie":96,"./_to-object":113}],85:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":39,"./_dom-create":54,"./_enum-bug-keys":55,"./_html":65,"./_object-dps":87,"./_shared-key":105}],86:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":39,"./_descriptors":53,"./_ie8-dom-define":66,"./_to-primitive":114}],87:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":39,"./_descriptors":53,"./_object-dp":86,"./_object-keys":95}],88:[function(require,module,exports){
'use strict';
// Forced replacement prototype accessors methods
module.exports = require('./_library') || !require('./_fails')(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete require('./_global')[K];
});

},{"./_fails":58,"./_global":62,"./_library":80}],89:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":53,"./_has":63,"./_ie8-dom-define":66,"./_object-pie":96,"./_property-desc":99,"./_to-iobject":111,"./_to-primitive":114}],90:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":91,"./_to-iobject":111}],91:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":55,"./_object-keys-internal":94}],92:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],93:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":63,"./_shared-key":105,"./_to-object":113}],94:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":40,"./_has":63,"./_shared-key":105,"./_to-iobject":111}],95:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":55,"./_object-keys-internal":94}],96:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],97:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],98:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":39,"./_is-object":72,"./_new-promise-capability":83}],99:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],100:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":101}],101:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":49,"./_global":62,"./_has":63,"./_hide":64,"./_uid":115}],102:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":39,"./_ctx":51,"./_is-object":72,"./_object-gopd":89}],103:[function(require,module,exports){
'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_descriptors":53,"./_global":62,"./_object-dp":86,"./_wks":120}],104:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":63,"./_object-dp":86,"./_wks":120}],105:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":106,"./_uid":115}],106:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":49,"./_global":62,"./_library":80}],107:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":36,"./_an-object":39,"./_wks":120}],108:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":45,"./_ctx":51,"./_dom-create":54,"./_global":62,"./_html":65,"./_invoke":68}],109:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":110}],110:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],111:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":52,"./_iobject":69}],112:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":110}],113:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":52}],114:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":72}],115:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],116:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":62}],117:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":72}],118:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":49,"./_global":62,"./_library":80,"./_object-dp":86,"./_wks-ext":119}],119:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":120}],120:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":62,"./_shared":106,"./_uid":115}],121:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":44,"./_core":49,"./_iterators":79,"./_wks":120}],122:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":50,"./_ctx":51,"./_export":57,"./_is-array-iter":70,"./_iter-call":74,"./_iter-detect":77,"./_to-length":112,"./_to-object":113,"./core.get-iterator-method":121}],123:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":37,"./_iter-define":76,"./_iter-step":78,"./_iterators":79,"./_to-iobject":111}],124:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":48,"./_collection-strong":46,"./_validate-collection":117}],125:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":36,"./_an-instance":38,"./_classof":44,"./_core":49,"./_ctx":51,"./_export":57,"./_for-of":61,"./_global":62,"./_is-object":72,"./_iter-detect":77,"./_library":80,"./_microtask":82,"./_new-promise-capability":83,"./_perform":97,"./_promise-resolve":98,"./_redefine-all":100,"./_set-species":103,"./_set-to-string-tag":104,"./_species-constructor":107,"./_task":108,"./_user-agent":116,"./_wks":120}],126:[function(require,module,exports){
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_descriptors":53,"./_fails":58,"./_flags":60,"./_global":62,"./_inherit-if-required":67,"./_is-regexp":73,"./_object-dp":86,"./_object-gopn":91,"./_redefine":101,"./_set-species":103,"./_wks":120}],127:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":53,"./_flags":60,"./_object-dp":86}],128:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

},{"./_fix-re-wks":59}],129:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

},{"./_fix-re-wks":59}],130:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = require('./_is-regexp');
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

},{"./_fix-re-wks":59,"./_is-regexp":73}],131:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./_an-object":39,"./_descriptors":53,"./_fails":58,"./_flags":60,"./_redefine":101,"./es6.regexp.flags":127}],132:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":39,"./_descriptors":53,"./_enum-keys":56,"./_export":57,"./_fails":58,"./_global":62,"./_has":63,"./_hide":64,"./_is-array":71,"./_is-object":72,"./_library":80,"./_meta":81,"./_object-create":85,"./_object-dp":86,"./_object-gopd":89,"./_object-gopn":91,"./_object-gopn-ext":90,"./_object-gops":92,"./_object-keys":95,"./_object-pie":96,"./_property-desc":99,"./_redefine":101,"./_set-to-string-tag":104,"./_shared":106,"./_to-iobject":111,"./_to-primitive":114,"./_uid":115,"./_wks":120,"./_wks-define":118,"./_wks-ext":119}],133:[function(require,module,exports){
'use strict';
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var fails = require('./_fails');
var validate = require('./_validate-collection');
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":41,"./_collection":48,"./_collection-weak":47,"./_fails":58,"./_is-object":72,"./_meta":81,"./_object-assign":84,"./_redefine":101,"./_validate-collection":117}],134:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":36,"./_descriptors":53,"./_export":57,"./_object-dp":86,"./_object-forced-pam":88,"./_to-object":113}],135:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":49,"./_export":57,"./_global":62,"./_promise-resolve":98,"./_species-constructor":107}],136:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":118}],137:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":62,"./_hide":64,"./_iterators":79,"./_object-keys":95,"./_redefine":101,"./_wks":120,"./es6.array.iterator":123}],138:[function(require,module,exports){
var split = require('browser-split')
var ClassList = require('class-list')

var w = typeof window === 'undefined' ? require('html-element') : window
var document = w.document
var Text = w.Text

function context () {

  var cleanupFuncs = []

  function h() {
    var args = [].slice.call(arguments), e = null
    function item (l) {
      var r
      function parseClass (string) {
        // Our minimal parser doesn’t understand escaping CSS special
        // characters like `#`. Don’t use them. More reading:
        // https://mathiasbynens.be/notes/css-escapes .

        var m = split(string, /([\.#]?[^\s#.]+)/)
        if(/^\.|#/.test(m[1]))
          e = document.createElement('div')
        forEach(m, function (v) {
          var s = v.substring(1,v.length)
          if(!v) return
          if(!e)
            e = document.createElement(v)
          else if (v[0] === '.')
            ClassList(e).add(s)
          else if (v[0] === '#')
            e.setAttribute('id', s)
        })
      }

      if(l == null)
        ;
      else if('string' === typeof l) {
        if(!e)
          parseClass(l)
        else
          e.appendChild(r = document.createTextNode(l))
      }
      else if('number' === typeof l
        || 'boolean' === typeof l
        || l instanceof Date
        || l instanceof RegExp ) {
          e.appendChild(r = document.createTextNode(l.toString()))
      }
      //there might be a better way to handle this...
      else if (isArray(l))
        forEach(l, item)
      else if(isNode(l))
        e.appendChild(r = l)
      else if(l instanceof Text)
        e.appendChild(r = l)
      else if ('object' === typeof l) {
        for (var k in l) {
          if('function' === typeof l[k]) {
            if(/^on\w+/.test(k)) {
              (function (k, l) { // capture k, l in the closure
                if (e.addEventListener){
                  e.addEventListener(k.substring(2), l[k], false)
                  cleanupFuncs.push(function(){
                    e.removeEventListener(k.substring(2), l[k], false)
                  })
                }else{
                  e.attachEvent(k, l[k])
                  cleanupFuncs.push(function(){
                    e.detachEvent(k, l[k])
                  })
                }
              })(k, l)
            } else {
              // observable
              e[k] = l[k]()
              cleanupFuncs.push(l[k](function (v) {
                e[k] = v
              }))
            }
          }
          else if(k === 'style') {
            if('string' === typeof l[k]) {
              e.style.cssText = l[k]
            }else{
              for (var s in l[k]) (function(s, v) {
                if('function' === typeof v) {
                  // observable
                  e.style.setProperty(s, v())
                  cleanupFuncs.push(v(function (val) {
                    e.style.setProperty(s, val)
                  }))
                } else
                  var match = l[k][s].match(/(.*)\W+!important\W*$/);
                  if (match) {
                    e.style.setProperty(s, match[1], 'important')
                  } else {
                    e.style.setProperty(s, l[k][s])
                  }
              })(s, l[k][s])
            }
          } else if(k === 'attrs') {
            for (var v in l[k]) {
              e.setAttribute(v, l[k][v])
            }
          }
          else if (k.substr(0, 5) === "data-") {
            e.setAttribute(k, l[k])
          } else {
            e[k] = l[k]
          }
        }
      } else if ('function' === typeof l) {
        //assume it's an observable!
        var v = l()
        e.appendChild(r = isNode(v) ? v : document.createTextNode(v))

        cleanupFuncs.push(l(function (v) {
          if(isNode(v) && r.parentElement)
            r.parentElement.replaceChild(v, r), r = v
          else
            r.textContent = v
        }))
      }

      return r
    }
    while(args.length)
      item(args.shift())

    return e
  }

  h.cleanup = function () {
    for (var i = 0; i < cleanupFuncs.length; i++){
      cleanupFuncs[i]()
    }
    cleanupFuncs.length = 0
  }

  return h
}

var h = module.exports = context()
h.context = context

function isNode (el) {
  return el && el.nodeName && el.nodeType
}

function forEach (arr, fn) {
  if (arr.forEach) return arr.forEach(fn)
  for (var i = 0; i < arr.length; i++) fn(arr[i], i)
}

function isArray (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]'
}



},{"browser-split":17,"class-list":19,"html-element":3}],139:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],140:[function(require,module,exports){
(function (Buffer){
'use strict';
var SourceMapGenerator = require('source-map').SourceMapGenerator;

function offsetMapping(mapping, offset) {
  return { line: offset.line + mapping.line, column: offset.column + mapping.column };
}

function newlinesIn(src) {
  if (!src) return 0;
  var newlines = src.match(/\n/g);

  return newlines ? newlines.length : 0;
}
 
function Generator(opts) {
  opts = opts || {};
  this.generator = new SourceMapGenerator({ file: opts.file || '', sourceRoot: opts.sourceRoot || '' });
  this.sourcesContent = undefined;
  this.opts = opts;
}

/**
 * Adds the given mappings to the generator and offsets them if offset is given 
 *
 * @name addMappings
 * @function
 * @param sourceFile {String} name of the source file
 * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }
 * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }
 * @return {Object} the generator to allow chaining
 */
Generator.prototype.addMappings = function (sourceFile, mappings, offset) { 
  var generator = this.generator; 

  offset = offset || {};
  offset.line = offset.hasOwnProperty('line') ? offset.line : 0;
  offset.column = offset.hasOwnProperty('column') ? offset.column : 0;

  mappings.forEach(function (m) {
    // only set source if we have original position to handle edgecase (see inline-source-map tests)
    generator.addMapping({
        source    :  m.original ? sourceFile : undefined
      , original  :  m.original
      , generated :  offsetMapping(m.generated, offset)
    });
  });
  return this;
};

/**
 * Generates mappings for the given source, assuming that no translation from original to generated is necessary.
 *
 * @name addGeneratedMappings
 * @function
 * @param sourceFile {String} name of the source file
 * @param source {String} source of the file
 * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }
 * @return {Object} the generator to allow chaining
 */
Generator.prototype.addGeneratedMappings = function (sourceFile, source, offset) {
  var mappings = []
    , linesToGenerate = newlinesIn(source) + 1;

  for (var line = 1; line <= linesToGenerate; line++) {
    var location = { line: line, column: 0 };
    mappings.push({ original: location, generated: location });
  }

  return this.addMappings(sourceFile, mappings, offset);
};

/**
 * Adds source content for the given source file.
 * 
 * @name addSourceContent
 * @function
 * @param sourceFile {String} The source file for which a mapping is included
 * @param sourcesContent {String} The content of the source file
 * @return {Object} The generator to allow chaining
 */
Generator.prototype.addSourceContent = function (sourceFile, sourcesContent) {
  this.sourcesContent = this.sourcesContent || {};
  this.sourcesContent[sourceFile] = sourcesContent;
  return this;
};

/**
 * @name base64Encode
 * @function
 * @return {String} bas64 encoded representation of the added mappings
 */
Generator.prototype.base64Encode = function () {
  var map = this.toString();
  return new Buffer(map).toString('base64');
};

/**
 * @name inlineMappingUrl
 * @function
 * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. 
 */
Generator.prototype.inlineMappingUrl = function () {
  var charset = this.opts.charset || 'utf-8';
  return '//# sourceMappingURL=data:application/json;charset=' + charset + ';base64,' + this.base64Encode();
};

Generator.prototype.toJSON = function () {
  var map = this.generator.toJSON();
  if (!this.sourcesContent) return map;

  var toSourcesContent = (function (s) {
    if (typeof this.sourcesContent[s] === 'string') {
      return this.sourcesContent[s];
    } else {
      return null;
    }
  }).bind(this);
  map.sourcesContent = map.sources.map(toSourcesContent);
  return map;
};

Generator.prototype.toString = function () {
  return JSON.stringify(this);
};

Generator.prototype._mappings = function () {
  return this.generator._mappings._array;
};

Generator.prototype.gen = function () {
  return this.generator;
};

module.exports = function (opts) { return new Generator(opts); };
module.exports.Generator = Generator;

}).call(this,require("buffer").Buffer)

},{"buffer":4,"source-map":151}],141:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"./util":150,"dup":24}],142:[function(require,module,exports){
arguments[4][25][0].apply(exports,arguments)
},{"./base64":143,"dup":25}],143:[function(require,module,exports){
arguments[4][26][0].apply(exports,arguments)
},{"dup":26}],144:[function(require,module,exports){
arguments[4][27][0].apply(exports,arguments)
},{"dup":27}],145:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"./util":150,"dup":28}],146:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],147:[function(require,module,exports){
arguments[4][30][0].apply(exports,arguments)
},{"./array-set":141,"./base64-vlq":142,"./binary-search":144,"./quick-sort":146,"./util":150,"dup":30}],148:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"./array-set":141,"./base64-vlq":142,"./mapping-list":145,"./util":150,"dup":31}],149:[function(require,module,exports){
arguments[4][32][0].apply(exports,arguments)
},{"./source-map-generator":148,"./util":150,"dup":32}],150:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"dup":33}],151:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"./lib/source-map-consumer":147,"./lib/source-map-generator":148,"./lib/source-node":149,"dup":34}],152:[function(require,module,exports){
/**
 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates a cache object to store key/value pairs.
 *
 * @private
 * @static
 * @name Cache
 * @memberOf _.memoize
 */
function MapCache() {
  this.__data__ = {};
}

/**
 * Removes `key` and its value from the cache.
 *
 * @private
 * @name delete
 * @memberOf _.memoize.Cache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
 */
function mapDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the cached value for `key`.
 *
 * @private
 * @name get
 * @memberOf _.memoize.Cache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the cached value.
 */
function mapGet(key) {
  return key == '__proto__' ? undefined : this.__data__[key];
}

/**
 * Checks if a cached value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf _.memoize.Cache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapHas(key) {
  return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
}

/**
 * Sets `value` to `key` of the cache.
 *
 * @private
 * @name set
 * @memberOf _.memoize.Cache
 * @param {string} key The key of the value to cache.
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache object.
 */
function mapSet(key, value) {
  if (key != '__proto__') {
    this.__data__[key] = value;
  }
  return this;
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is coerced to a string and used as the
 * cache key. The `func` is invoked with the `this` binding of the memoized
 * function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the [`Map`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)
 * method interface of `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoizing function.
 * @example
 *
 * var upperCase = _.memoize(function(string) {
 *   return string.toUpperCase();
 * });
 *
 * upperCase('fred');
 * // => 'FRED'
 *
 * // modifying the result cache
 * upperCase.cache.set('fred', 'BARNEY');
 * upperCase('fred');
 * // => 'BARNEY'
 *
 * // replacing `_.memoize.Cache`
 * var object = { 'user': 'fred' };
 * var other = { 'user': 'barney' };
 * var identity = _.memoize(_.identity);
 *
 * identity(object);
 * // => { 'user': 'fred' }
 * identity(other);
 * // => { 'user': 'fred' }
 *
 * _.memoize.Cache = WeakMap;
 * var identity = _.memoize(_.identity);
 *
 * identity(object);
 * // => { 'user': 'fred' }
 * identity(other);
 * // => { 'user': 'barney' }
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new memoize.Cache;
  return memoized;
}

// Add functions to the `Map` cache.
MapCache.prototype['delete'] = mapDelete;
MapCache.prototype.get = mapGet;
MapCache.prototype.has = mapHas;
MapCache.prototype.set = mapSet;

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

module.exports = memoize;

},{}],153:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"./util":162,"dup":24}],154:[function(require,module,exports){
arguments[4][25][0].apply(exports,arguments)
},{"./base64":155,"dup":25}],155:[function(require,module,exports){
arguments[4][26][0].apply(exports,arguments)
},{"dup":26}],156:[function(require,module,exports){
arguments[4][27][0].apply(exports,arguments)
},{"dup":27}],157:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"./util":162,"dup":28}],158:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],159:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');
var binarySearch = require('./binary-search');
var ArraySet = require('./array-set').ArraySet;
var base64VLQ = require('./base64-vlq');
var quickSort = require('./quick-sort').quickSort;

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

},{"./array-set":153,"./base64-vlq":154,"./binary-search":156,"./quick-sort":158,"./util":162}],160:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = require('./base64-vlq');
var util = require('./util');
var ArraySet = require('./array-set').ArraySet;
var MappingList = require('./mapping-list').MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;

},{"./array-set":153,"./base64-vlq":154,"./mapping-list":157,"./util":162}],161:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
var util = require('./util');

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;

},{"./source-map-generator":160,"./util":162}],162:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;

},{}],163:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"./lib/source-map-consumer":159,"./lib/source-map-generator":160,"./lib/source-node":161,"dup":34}],164:[function(require,module,exports){
(function (process){
var SourceMapConsumer = require('source-map').SourceMapConsumer;
var path = require('path');

var fs;
try {
  fs = require('fs');
  if (!fs.existsSync || !fs.readFileSync) {
    // fs doesn't have all methods we need
    fs = null;
  }
} catch (err) {
  /* nop */
}

var bufferFrom = require('buffer-from');

// Only install once if called multiple times
var errorFormatterInstalled = false;
var uncaughtShimInstalled = false;

// If true, the caches are reset before a stack trace formatting operation
var emptyCacheBetweenOperations = false;

// Supports {browser, node, auto}
var environment = "auto";

// Maps a file path to a string containing the file contents
var fileContentsCache = {};

// Maps a file path to a source map for that file
var sourceMapCache = {};

// Regex for detecting source maps
var reSourceMap = /^data:application\/json[^,]+base64,/;

// Priority list of retrieve handlers
var retrieveFileHandlers = [];
var retrieveMapHandlers = [];

function isInBrowser() {
  if (environment === "browser")
    return true;
  if (environment === "node")
    return false;
  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === "renderer"));
}

function hasGlobalProcessEventEmitter() {
  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));
}

function handlerExec(list) {
  return function(arg) {
    for (var i = 0; i < list.length; i++) {
      var ret = list[i](arg);
      if (ret) {
        return ret;
      }
    }
    return null;
  };
}

var retrieveFile = handlerExec(retrieveFileHandlers);

retrieveFileHandlers.push(function(path) {
  // Trim the path to make sure there is no extra whitespace.
  path = path.trim();
  if (/^file:/.test(path)) {
    // existsSync/readFileSync can't handle file protocol, but once stripped, it works
    path = path.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
      return drive ?
        '' : // file:///C:/dir/file -> C:/dir/file
        '/'; // file:///root-dir/file -> /root-dir/file
    });
  }
  if (path in fileContentsCache) {
    return fileContentsCache[path];
  }

  var contents = null;
  if (!fs) {
    // Use SJAX if we are in the browser
    var xhr = new XMLHttpRequest();
    xhr.open('GET', path, false);
    xhr.send(null);
    var contents = null
    if (xhr.readyState === 4 && xhr.status === 200) {
      contents = xhr.responseText
    }
  } else if (fs.existsSync(path)) {
    // Otherwise, use the filesystem
    try {
      contents = fs.readFileSync(path, 'utf8');
    } catch (er) {
      contents = '';
    }
  }

  return fileContentsCache[path] = contents;
});

// Support URLs relative to a directory, but be careful about a protocol prefix
// in case we are in the browser (i.e. directories may start with "http://" or "file:///")
function supportRelativeURL(file, url) {
  if (!file) return url;
  var dir = path.dirname(file);
  var match = /^\w+:\/\/[^\/]*/.exec(dir);
  var protocol = match ? match[0] : '';
  var startPath = dir.slice(protocol.length);
  if (protocol && /^\/\w\:/.test(startPath)) {
    // handle file:///C:/ paths
    protocol += '/';
    return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\/g, '/');
  }
  return protocol + path.resolve(dir.slice(protocol.length), url);
}

function retrieveSourceMapURL(source) {
  var fileData;

  if (isInBrowser()) {
     try {
       var xhr = new XMLHttpRequest();
       xhr.open('GET', source, false);
       xhr.send(null);
       fileData = xhr.readyState === 4 ? xhr.responseText : null;

       // Support providing a sourceMappingURL via the SourceMap header
       var sourceMapHeader = xhr.getResponseHeader("SourceMap") ||
                             xhr.getResponseHeader("X-SourceMap");
       if (sourceMapHeader) {
         return sourceMapHeader;
       }
     } catch (e) {
     }
  }

  // Get the URL of the source map
  fileData = retrieveFile(source);
  var re = /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/)[ \t]*$)/mg;
  // Keep executing the search to find the *last* sourceMappingURL to avoid
  // picking up sourceMappingURLs from comments, strings, etc.
  var lastMatch, match;
  while (match = re.exec(fileData)) lastMatch = match;
  if (!lastMatch) return null;
  return lastMatch[1];
};

// Can be overridden by the retrieveSourceMap option to install. Takes a
// generated source filename; returns a {map, optional url} object, or null if
// there is no source map.  The map field may be either a string or the parsed
// JSON object (ie, it must be a valid argument to the SourceMapConsumer
// constructor).
var retrieveSourceMap = handlerExec(retrieveMapHandlers);
retrieveMapHandlers.push(function(source) {
  var sourceMappingURL = retrieveSourceMapURL(source);
  if (!sourceMappingURL) return null;

  // Read the contents of the source map
  var sourceMapData;
  if (reSourceMap.test(sourceMappingURL)) {
    // Support source map URL as a data url
    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);
    sourceMapData = bufferFrom(rawData, "base64").toString();
    sourceMappingURL = source;
  } else {
    // Support source map URLs relative to the source URL
    sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
    sourceMapData = retrieveFile(sourceMappingURL);
  }

  if (!sourceMapData) {
    return null;
  }

  return {
    url: sourceMappingURL,
    map: sourceMapData
  };
});

function mapSourcePosition(position) {
  var sourceMap = sourceMapCache[position.source];
  if (!sourceMap) {
    // Call the (overrideable) retrieveSourceMap function to get the source map.
    var urlAndMap = retrieveSourceMap(position.source);
    if (urlAndMap) {
      sourceMap = sourceMapCache[position.source] = {
        url: urlAndMap.url,
        map: new SourceMapConsumer(urlAndMap.map)
      };

      // Load all sources stored inline with the source map into the file cache
      // to pretend like they are already loaded. They may not exist on disk.
      if (sourceMap.map.sourcesContent) {
        sourceMap.map.sources.forEach(function(source, i) {
          var contents = sourceMap.map.sourcesContent[i];
          if (contents) {
            var url = supportRelativeURL(sourceMap.url, source);
            fileContentsCache[url] = contents;
          }
        });
      }
    } else {
      sourceMap = sourceMapCache[position.source] = {
        url: null,
        map: null
      };
    }
  }

  // Resolve the source URL relative to the URL of the source map
  if (sourceMap && sourceMap.map) {
    var originalPosition = sourceMap.map.originalPositionFor(position);

    // Only return the original position if a matching line was found. If no
    // matching line is found then we return position instead, which will cause
    // the stack trace to print the path and line for the compiled file. It is
    // better to give a precise location in the compiled file than a vague
    // location in the original file.
    if (originalPosition.source !== null) {
      originalPosition.source = supportRelativeURL(
        sourceMap.url, originalPosition.source);
      return originalPosition;
    }
  }

  return position;
}

// Parses code generated by FormatEvalOrigin(), a function inside V8:
// https://code.google.com/p/v8/source/browse/trunk/src/messages.js
function mapEvalOrigin(origin) {
  // Most eval() calls are in this format
  var match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
  if (match) {
    var position = mapSourcePosition({
      source: match[2],
      line: +match[3],
      column: match[4] - 1
    });
    return 'eval at ' + match[1] + ' (' + position.source + ':' +
      position.line + ':' + (position.column + 1) + ')';
  }

  // Parse nested eval() calls using recursion
  match = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
  if (match) {
    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';
  }

  // Make sure we still return useful information if we didn't find anything
  return origin;
}

// This is copied almost verbatim from the V8 source code at
// https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The
// implementation of wrapCallSite() used to just forward to the actual source
// code of CallSite.prototype.toString but unfortunately a new release of V8
// did something to the prototype chain and broke the shim. The only fix I
// could find was copy/paste.
function CallSiteToString() {
  var fileName;
  var fileLocation = "";
  if (this.isNative()) {
    fileLocation = "native";
  } else {
    fileName = this.getScriptNameOrSourceURL();
    if (!fileName && this.isEval()) {
      fileLocation = this.getEvalOrigin();
      fileLocation += ", ";  // Expecting source position to follow.
    }

    if (fileName) {
      fileLocation += fileName;
    } else {
      // Source code does not originate from a file and is not native, but we
      // can still get the source position inside the source string, e.g. in
      // an eval string.
      fileLocation += "<anonymous>";
    }
    var lineNumber = this.getLineNumber();
    if (lineNumber != null) {
      fileLocation += ":" + lineNumber;
      var columnNumber = this.getColumnNumber();
      if (columnNumber) {
        fileLocation += ":" + columnNumber;
      }
    }
  }

  var line = "";
  var functionName = this.getFunctionName();
  var addSuffix = true;
  var isConstructor = this.isConstructor();
  var isMethodCall = !(this.isToplevel() || isConstructor);
  if (isMethodCall) {
    var typeName = this.getTypeName();
    // Fixes shim to be backward compatable with Node v0 to v4
    if (typeName === "[object Object]") {
      typeName = "null";
    }
    var methodName = this.getMethodName();
    if (functionName) {
      if (typeName && functionName.indexOf(typeName) != 0) {
        line += typeName + ".";
      }
      line += functionName;
      if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
        line += " [as " + methodName + "]";
      }
    } else {
      line += typeName + "." + (methodName || "<anonymous>");
    }
  } else if (isConstructor) {
    line += "new " + (functionName || "<anonymous>");
  } else if (functionName) {
    line += functionName;
  } else {
    line += fileLocation;
    addSuffix = false;
  }
  if (addSuffix) {
    line += " (" + fileLocation + ")";
  }
  return line;
}

function cloneCallSite(frame) {
  var object = {};
  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];
  });
  object.toString = CallSiteToString;
  return object;
}

function wrapCallSite(frame) {
  if(frame.isNative()) {
    return frame;
  }

  // Most call sites will return the source file from getFileName(), but code
  // passed to eval() ending in "//# sourceURL=..." will return the source file
  // from getScriptNameOrSourceURL() instead
  var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
  if (source) {
    var line = frame.getLineNumber();
    var column = frame.getColumnNumber() - 1;

    // Fix position in Node where some (internal) code is prepended.
    // See https://github.com/evanw/node-source-map-support/issues/36
    var headerLength = 62;
    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
      column -= headerLength;
    }

    var position = mapSourcePosition({
      source: source,
      line: line,
      column: column
    });
    frame = cloneCallSite(frame);
    frame.getFileName = function() { return position.source; };
    frame.getLineNumber = function() { return position.line; };
    frame.getColumnNumber = function() { return position.column + 1; };
    frame.getScriptNameOrSourceURL = function() { return position.source; };
    return frame;
  }

  // Code called using eval() needs special handling
  var origin = frame.isEval() && frame.getEvalOrigin();
  if (origin) {
    origin = mapEvalOrigin(origin);
    frame = cloneCallSite(frame);
    frame.getEvalOrigin = function() { return origin; };
    return frame;
  }

  // If we get here then we were unable to change the source position
  return frame;
}

// This function is part of the V8 stack trace API, for more info see:
// http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi
function prepareStackTrace(error, stack) {
  if (emptyCacheBetweenOperations) {
    fileContentsCache = {};
    sourceMapCache = {};
  }

  return error + stack.map(function(frame) {
    return '\n    at ' + wrapCallSite(frame);
  }).join('');
}

// Generate position and snippet of original source with pointer
function getErrorSource(error) {
  var match = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
  if (match) {
    var source = match[1];
    var line = +match[2];
    var column = +match[3];

    // Support the inline sourceContents inside the source map
    var contents = fileContentsCache[source];

    // Support files on disk
    if (!contents && fs && fs.existsSync(source)) {
      try {
        contents = fs.readFileSync(source, 'utf8');
      } catch (er) {
        contents = '';
      }
    }

    // Format the line from the original source code like node does
    if (contents) {
      var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
      if (code) {
        return source + ':' + line + '\n' + code + '\n' +
          new Array(column).join(' ') + '^';
      }
    }
  }
  return null;
}

function printErrorAndExit (error) {
  var source = getErrorSource(error);

  if (source) {
    fs.writeSync(2, "\n" + source + "\n");
  }

  fs.writeSync(2, error.stack + "\n");
  process.exit(1);
}

function shimEmitUncaughtException () {
  var origEmit = process.emit;

  process.emit = function (type) {
    if (type === 'uncaughtException') {
      var hasStack = (arguments[1] && arguments[1].stack);
      var hasListeners = (this.listeners(type).length > 0);

      if (hasStack && !hasListeners) {
        return printErrorAndExit(arguments[1]);
      }
    }

    return origEmit.apply(this, arguments);
  };
}

var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);

exports.wrapCallSite = wrapCallSite;
exports.getErrorSource = getErrorSource;
exports.mapSourcePosition = mapSourcePosition;
exports.retrieveSourceMap = retrieveSourceMap;

exports.install = function(options) {
  options = options || {};

  if (options.environment) {
    environment = options.environment;
    if (["node", "browser", "auto"].indexOf(environment) === -1) {
      throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}")
    }
  }

  // Allow sources to be found by methods other than reading the files
  // directly from disk.
  if (options.retrieveFile) {
    if (options.overrideRetrieveFile) {
      retrieveFileHandlers.length = 0;
    }

    retrieveFileHandlers.unshift(options.retrieveFile);
  }

  // Allow source maps to be found by methods other than reading the files
  // directly from disk.
  if (options.retrieveSourceMap) {
    if (options.overrideRetrieveSourceMap) {
      retrieveMapHandlers.length = 0;
    }

    retrieveMapHandlers.unshift(options.retrieveSourceMap);
  }

  // Support runtime transpilers that include inline source maps
  if (options.hookRequire && !isInBrowser()) {
    var Module;
    try {
      Module = require('module');
    } catch (err) {
      // NOP: Loading in catch block to convert webpack error to warning.
    }
    var $compile = Module.prototype._compile;

    if (!$compile.__sourceMapSupport) {
      Module.prototype._compile = function(content, filename) {
        fileContentsCache[filename] = content;
        sourceMapCache[filename] = undefined;
        return $compile.call(this, content, filename);
      };

      Module.prototype._compile.__sourceMapSupport = true;
    }
  }

  // Configure options
  if (!emptyCacheBetweenOperations) {
    emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?
      options.emptyCacheBetweenOperations : false;
  }

  // Install the error reformatter
  if (!errorFormatterInstalled) {
    errorFormatterInstalled = true;
    Error.prepareStackTrace = prepareStackTrace;
  }

  if (!uncaughtShimInstalled) {
    var installHandler = 'handleUncaughtExceptions' in options ?
      options.handleUncaughtExceptions : true;

    // Provide the option to not install the uncaught exception handler. This is
    // to support other uncaught exception handlers (in test frameworks, for
    // example). If this handler is not installed and there are no other uncaught
    // exception handlers, uncaught exceptions will be caught by node's built-in
    // exception handler and the process will still be terminated. However, the
    // generated JavaScript code will be shown above the stack trace instead of
    // the original source code.
    if (installHandler && hasGlobalProcessEventEmitter()) {
      uncaughtShimInstalled = true;
      shimEmitUncaughtException();
    }
  }
};

exports.resetRetrieveHandlers = function() {
  retrieveFileHandlers.length = 0;
  retrieveMapHandlers.length = 0;

  retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
  retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);
}

}).call(this,require('_process'))

},{"_process":8,"buffer-from":18,"fs":1,"module":1,"path":7,"source-map":163}],165:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
class ArraySet {
  constructor() {
    this._array = [];
    this._set = new Map();
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  static fromArray(aArray, aAllowDuplicates) {
    const set = new ArraySet();
    for (let i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  }

  /**
   * Return how many unique items are in this ArraySet. If duplicates have been
   * added, than those do not count towards the size.
   *
   * @returns Number
   */
  size() {
    return this._set.size;
  }

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  add(aStr, aAllowDuplicates) {
    const isDuplicate = this.has(aStr);
    const idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      this._set.set(aStr, idx);
    }
  }

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  has(aStr) {
      return this._set.has(aStr);
  }

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  indexOf(aStr) {
    const idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
    throw new Error('"' + aStr + '" is not in the set.');
  }

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error("No element indexed by " + aIdx);
  }

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  toArray() {
    return this._array.slice();
  }
}
exports.ArraySet = ArraySet;

},{}],166:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

const base64 = require("./base64");

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

const VLQ_BASE_SHIFT = 5;

// binary: 100000
const VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
const VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
const VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
// eslint-disable-next-line no-unused-vars
function fromVLQSigned(aValue) {
  const isNegative = (aValue & 1) === 1;
  const shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  let encoded = "";
  let digit;

  let vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

},{"./base64":167}],167:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

const intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function(number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

},{}],168:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  const mid = Math.floor((aHigh - aLow) / 2) + aLow;
  const cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  } else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    }
    return mid;
  }

  // Our needle is less than aHaystack[mid].
  if (mid - aLow > 1) {
    // The element is in the lower half.
    return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
  }

  // we are in termination case (3) or (2) and return the appropriate thing.
  if (aBias == exports.LEAST_UPPER_BOUND) {
    return mid;
  }
  return aLow < 0 ? -1 : aLow;
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  let index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};

},{}],169:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

const util = require("./util");

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  const lineA = mappingA.generatedLine;
  const lineB = mappingB.generatedLine;
  const columnA = mappingA.generatedColumn;
  const columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a negligible overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
class MappingList {
  constructor() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {generatedLine: -1, generatedColumn: 0};
  }

  /**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
  unsortedForEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  }

  /**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
  add(aMapping) {
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  }

  /**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
  toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositionsInflated);
      this._sorted = true;
    }
    return this._array;
  }
}

exports.MappingList = MappingList;

},{"./util":174}],170:[function(require,module,exports){
(function (__dirname){
if (typeof fetch === "function") {
  // Web version of reading a wasm file into an array buffer.

  let mappingsWasmUrl = null;

  module.exports = function readWasm() {
    if (typeof mappingsWasmUrl !== "string") {
      throw new Error("You must provide the URL of lib/mappings.wasm by calling " +
                      "SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) " +
                      "before using SourceMapConsumer");
    }

    return fetch(mappingsWasmUrl)
      .then(response => response.arrayBuffer());
  };

  module.exports.initialize = url => mappingsWasmUrl = url;
} else {
  // Node version of reading a wasm file into an array buffer.
  const fs = require("fs");
  const path = require("path");

  module.exports = function readWasm() {
    return new Promise((resolve, reject) => {
      const wasmPath = path.join(__dirname, "mappings.wasm");
      fs.readFile(wasmPath, null, (error, data) => {
        if (error) {
          reject(error);
          return;
        }

        resolve(data.buffer);
      });
    });
  };

  module.exports.initialize = _ => {
    console.debug("SourceMapConsumer.initialize is a no-op when running in node.js");
  };
}

}).call(this,"/node_modules/source-map/lib")

},{"fs":1,"path":7}],171:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

const util = require("./util");
const binarySearch = require("./binary-search");
const ArraySet = require("./array-set").ArraySet;
const base64VLQ = require("./base64-vlq"); // eslint-disable-line no-unused-vars
const readWasm = require("../lib/read-wasm");
const wasm = require("./wasm");

const INTERNAL = Symbol("smcInternal");

class SourceMapConsumer {
  constructor(aSourceMap, aSourceMapURL) {
    // If the constructor was called by super(), just return Promise<this>.
    // Yes, this is a hack to retain the pre-existing API of the base-class
    // constructor also being an async factory function.
    if (aSourceMap == INTERNAL) {
      return Promise.resolve(this);
    }

    return _factory(aSourceMap, aSourceMapURL);
  }

  static initialize(opts) {
    readWasm.initialize(opts["lib/mappings.wasm"]);
  }

  static fromSourceMap(aSourceMap, aSourceMapURL) {
    return _factoryBSM(aSourceMap, aSourceMapURL);
  }

  /**
   * Construct a new `SourceMapConsumer` from `rawSourceMap` and `sourceMapUrl`
   * (see the `SourceMapConsumer` constructor for details. Then, invoke the `async
   * function f(SourceMapConsumer) -> T` with the newly constructed consumer, wait
   * for `f` to complete, call `destroy` on the consumer, and return `f`'s return
   * value.
   *
   * You must not use the consumer after `f` completes!
   *
   * By using `with`, you do not have to remember to manually call `destroy` on
   * the consumer, since it will be called automatically once `f` completes.
   *
   * ```js
   * const xSquared = await SourceMapConsumer.with(
   *   myRawSourceMap,
   *   null,
   *   async function (consumer) {
   *     // Use `consumer` inside here and don't worry about remembering
   *     // to call `destroy`.
   *
   *     const x = await whatever(consumer);
   *     return x * x;
   *   }
   * );
   *
   * // You may not use that `consumer` anymore out here; it has
   * // been destroyed. But you can use `xSquared`.
   * console.log(xSquared);
   * ```
   */
  static with(rawSourceMap, sourceMapUrl, f) {
    // Note: The `acorn` version that `webpack` currently depends on doesn't
    // support `async` functions, and the nodes that we support don't all have
    // `.finally`. Therefore, this is written a bit more convolutedly than it
    // should really be.

    let consumer = null;
    const promise = new SourceMapConsumer(rawSourceMap, sourceMapUrl);
    return promise
      .then(c => {
        consumer = c;
        return f(c);
      })
      .then(x => {
        if (consumer) {
          consumer.destroy();
        }
        return x;
      }, e => {
        if (consumer) {
          consumer.destroy();
        }
        throw e;
      });
  }

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  _parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  }

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  eachMapping(aCallback, aContext, aOrder) {
    throw new Error("Subclasses must implement eachMapping");
  }

  /**
   * Returns all generated line and column information for the original source,
   * line, and column provided. If no column is provided, returns all mappings
   * corresponding to a either the line we are searching for or the next
   * closest line that has any mappings. Otherwise, returns all mappings
   * corresponding to the given line and either the column we are searching for
   * or the next closest column that has any offsets.
   *
   * The only argument is an object with the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number is 1-based.
   *   - column: Optional. the column number in the original source.
   *    The column number is 0-based.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *    line number is 1-based.
   *   - column: The column number in the generated source, or null.
   *    The column number is 0-based.
   */
  allGeneratedPositionsFor(aArgs) {
    throw new Error("Subclasses must implement allGeneratedPositionsFor");
  }

  destroy() {
    throw new Error("Subclasses must implement destroy");
  }
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;
SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
class BasicSourceMapConsumer extends SourceMapConsumer {
  constructor(aSourceMap, aSourceMapURL) {
    return super(INTERNAL).then(that => {
      let sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }

      const version = util.getArg(sourceMap, "version");
      let sources = util.getArg(sourceMap, "sources");
      // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
      // requires the array) to play nice here.
      const names = util.getArg(sourceMap, "names", []);
      let sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
      const sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
      const mappings = util.getArg(sourceMap, "mappings");
      const file = util.getArg(sourceMap, "file", null);

      // Once again, Sass deviates from the spec and supplies the version as a
      // string rather than a number, so we use loose equality checking here.
      if (version != that._version) {
        throw new Error("Unsupported version: " + version);
      }

      if (sourceRoot) {
        sourceRoot = util.normalize(sourceRoot);
      }

      sources = sources
        .map(String)
        // Some source maps produce relative source paths like "./foo.js" instead of
        // "foo.js".  Normalize these first so that future comparisons will succeed.
        // See bugzil.la/1090768.
        .map(util.normalize)
        // Always ensure that absolute sources are internally stored relative to
        // the source root, if the source root is absolute. Not doing this would
        // be particularly problematic when the source root is a prefix of the
        // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
        .map(function(source) {
          return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
            ? util.relative(sourceRoot, source)
            : source;
        });

      // Pass `true` below to allow duplicate names and sources. While source maps
      // are intended to be compressed and deduplicated, the TypeScript compiler
      // sometimes generates source maps with duplicates in them. See Github issue
      // #72 and bugzil.la/889492.
      that._names = ArraySet.fromArray(names.map(String), true);
      that._sources = ArraySet.fromArray(sources, true);

      that._absoluteSources = that._sources.toArray().map(function(s) {
        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
      });

      that.sourceRoot = sourceRoot;
      that.sourcesContent = sourcesContent;
      that._mappings = mappings;
      that._sourceMapURL = aSourceMapURL;
      that.file = file;

      that._computedColumnSpans = false;
      that._mappingsPtr = 0;
      that._wasm = null;

      return wasm().then(w => {
        that._wasm = w;
        return that;
      });
    });
  }

  /**
   * Utility function to find the index of a source.  Returns -1 if not
   * found.
   */
  _findSourceIndex(aSource) {
    let relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    if (this._sources.has(relativeSource)) {
      return this._sources.indexOf(relativeSource);
    }

    // Maybe aSource is an absolute URL as returned by |sources|.  In
    // this case we can't simply undo the transform.
    for (let i = 0; i < this._absoluteSources.length; ++i) {
      if (this._absoluteSources[i] == aSource) {
        return i;
      }
    }

    return -1;
  }

  /**
   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @param String aSourceMapURL
   *        The URL at which the source map can be found (optional)
   * @returns BasicSourceMapConsumer
   */
  static fromSourceMap(aSourceMap, aSourceMapURL) {
    return new BasicSourceMapConsumer(aSourceMap.toString());
  }

  get sources() {
    return this._absoluteSources.slice();
  }

  _getMappingsPtr() {
    if (this._mappingsPtr === 0) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this._mappingsPtr;
  }

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  _parseMappings(aStr, aSourceRoot) {
    const size = aStr.length;

    const mappingsBufPtr = this._wasm.exports.allocate_mappings(size);
    const mappingsBuf = new Uint8Array(this._wasm.exports.memory.buffer, mappingsBufPtr, size);
    for (let i = 0; i < size; i++) {
      mappingsBuf[i] = aStr.charCodeAt(i);
    }

    const mappingsPtr = this._wasm.exports.parse_mappings(mappingsBufPtr);

    if (!mappingsPtr) {
      const error = this._wasm.exports.get_last_error();
      let msg = `Error parsing mappings (code ${error}): `;

      // XXX: keep these error codes in sync with `fitzgen/source-map-mappings`.
      switch (error) {
        case 1:
          msg += "the mappings contained a negative line, column, source index, or name index";
          break;
        case 2:
          msg += "the mappings contained a number larger than 2**32";
          break;
        case 3:
          msg += "reached EOF while in the middle of parsing a VLQ";
          break;
        case 4:
          msg += "invalid base 64 character while parsing a VLQ";
          break;
        default:
          msg += "unknown error code";
          break;
      }

      throw new Error(msg);
    }

    this._mappingsPtr = mappingsPtr;
  }

  eachMapping(aCallback, aContext, aOrder) {
    const context = aContext || null;
    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;
    const sourceRoot = this.sourceRoot;

    this._wasm.withMappingCallback(
      mapping => {
        if (mapping.source !== null) {
          mapping.source = this._sources.at(mapping.source);
          mapping.source = util.computeSourceURL(sourceRoot, mapping.source, this._sourceMapURL);

          if (mapping.name !== null) {
            mapping.name = this._names.at(mapping.name);
          }
        }

        aCallback.call(context, mapping);
      },
      () => {
        switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          this._wasm.exports.by_generated_location(this._getMappingsPtr());
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          this._wasm.exports.by_original_location(this._getMappingsPtr());
          break;
        default:
          throw new Error("Unknown order of iteration.");
        }
      }
    );
  }

  allGeneratedPositionsFor(aArgs) {
    let source = util.getArg(aArgs, "source");
    const originalLine = util.getArg(aArgs, "line");
    const originalColumn = aArgs.column || 0;

    source = this._findSourceIndex(source);
    if (source < 0) {
      return [];
    }

    if (originalLine < 1) {
      throw new Error("Line numbers must be >= 1");
    }

    if (originalColumn < 0) {
      throw new Error("Column numbers must be >= 0");
    }

    const mappings = [];

    this._wasm.withMappingCallback(
      m => {
        let lastColumn = m.lastGeneratedColumn;
        if (this._computedColumnSpans && lastColumn === null) {
          lastColumn = Infinity;
        }
        mappings.push({
          line: m.generatedLine,
          column: m.generatedColumn,
          lastColumn,
        });
      }, () => {
        this._wasm.exports.all_generated_locations_for(
          this._getMappingsPtr(),
          source,
          originalLine - 1,
          "column" in aArgs,
          originalColumn
        );
      }
    );

    return mappings;
  }

  destroy() {
    if (this._mappingsPtr !== 0) {
      this._wasm.exports.free_mappings(this._mappingsPtr);
      this._mappingsPtr = 0;
    }
  }

  /**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
  computeColumnSpans() {
    if (this._computedColumnSpans) {
      return;
    }

    this._wasm.exports.compute_column_spans(this._getMappingsPtr());
    this._computedColumnSpans = true;
  }

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.  The line number
   *     is 1-based.
   *   - column: The column number in the generated source.  The column
   *     number is 0-based.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the original source, or null.  The
   *     column number is 0-based.
   *   - name: The original identifier, or null.
   */
  originalPositionFor(aArgs) {
    const needle = {
      generatedLine: util.getArg(aArgs, "line"),
      generatedColumn: util.getArg(aArgs, "column")
    };

    if (needle.generatedLine < 1) {
      throw new Error("Line numbers must be >= 1");
    }

    if (needle.generatedColumn < 0) {
      throw new Error("Column numbers must be >= 0");
    }

    let bias = util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND);
    if (bias == null) {
      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;
    }

    let mapping;
    this._wasm.withMappingCallback(m => mapping = m, () => {
      this._wasm.exports.original_location_for(
        this._getMappingsPtr(),
        needle.generatedLine - 1,
        needle.generatedColumn,
        bias
      );
    });

    if (mapping) {
      if (mapping.generatedLine === needle.generatedLine) {
        let source = util.getArg(mapping, "source", null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }

        let name = util.getArg(mapping, "name", null);
        if (name !== null) {
          name = this._names.at(name);
        }

        return {
          source,
          line: util.getArg(mapping, "originalLine", null),
          column: util.getArg(mapping, "originalColumn", null),
          name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  }

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function(sc) { return sc == null; });
  }

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    const index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    let relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    let url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      const fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }

    throw new Error('"' + relativeSource + '" is not in the SourceMap.');
  }

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number
   *     is 1-based.
   *   - column: The column number in the original source.  The column
   *     number is 0-based.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the generated source, or null.
   *     The column number is 0-based.
   */
  generatedPositionFor(aArgs) {
    let source = util.getArg(aArgs, "source");
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    const needle = {
      source,
      originalLine: util.getArg(aArgs, "line"),
      originalColumn: util.getArg(aArgs, "column")
    };

    if (needle.originalLine < 1) {
      throw new Error("Line numbers must be >= 1");
    }

    if (needle.originalColumn < 0) {
      throw new Error("Column numbers must be >= 0");
    }

    let bias = util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND);
    if (bias == null) {
      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;
    }

    let mapping;
    this._wasm.withMappingCallback(m => mapping = m, () => {
      this._wasm.exports.generated_location_for(
        this._getMappingsPtr(),
        needle.source,
        needle.originalLine - 1,
        needle.originalColumn,
        bias
      );
    });

    if (mapping) {
      if (mapping.source === needle.source) {
        let lastColumn = mapping.lastGeneratedColumn;
        if (this._computedColumnSpans && lastColumn === null) {
          lastColumn = Infinity;
        }
        return {
          line: util.getArg(mapping, "generatedLine", null),
          column: util.getArg(mapping, "generatedColumn", null),
          lastColumn,
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  }
}

BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
class IndexedSourceMapConsumer extends SourceMapConsumer {
  constructor(aSourceMap, aSourceMapURL) {
    return super(INTERNAL).then(that => {
      let sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }

      const version = util.getArg(sourceMap, "version");
      const sections = util.getArg(sourceMap, "sections");

      if (version != that._version) {
        throw new Error("Unsupported version: " + version);
      }

      that._sources = new ArraySet();
      that._names = new ArraySet();
      that.__generatedMappings = null;
      that.__originalMappings = null;
      that.__generatedMappingsUnsorted = null;
      that.__originalMappingsUnsorted = null;

      let lastOffset = {
        line: -1,
        column: 0
      };
      return Promise.all(sections.map(s => {
        if (s.url) {
          // The url field will require support for asynchronicity.
          // See https://github.com/mozilla/source-map/issues/16
          throw new Error("Support for url field in sections not implemented.");
        }
        const offset = util.getArg(s, "offset");
        const offsetLine = util.getArg(offset, "line");
        const offsetColumn = util.getArg(offset, "column");

        if (offsetLine < lastOffset.line ||
            (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
          throw new Error("Section offsets must be ordered and non-overlapping.");
        }
        lastOffset = offset;

        const cons = new SourceMapConsumer(util.getArg(s, "map"), aSourceMapURL);
        return cons.then(consumer => {
          return {
            generatedOffset: {
              // The offset fields are 0-based, but we use 1-based indices when
              // encoding/decoding from VLQ.
              generatedLine: offsetLine + 1,
              generatedColumn: offsetColumn + 1
            },
            consumer
          };
        });
      })).then(s => {
        that._sections = s;
        return that;
      });
    });
  }

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.
  get _generatedMappings() {
    if (!this.__generatedMappings) {
      this._sortGeneratedMappings();
    }

    return this.__generatedMappings;
  }

  get _originalMappings() {
    if (!this.__originalMappings) {
      this._sortOriginalMappings();
    }

    return this.__originalMappings;
  }

  get _generatedMappingsUnsorted() {
    if (!this.__generatedMappingsUnsorted) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappingsUnsorted;
  }

  get _originalMappingsUnsorted() {
    if (!this.__originalMappingsUnsorted) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappingsUnsorted;
  }

  _sortGeneratedMappings() {
    const mappings = this._generatedMappingsUnsorted;
    mappings.sort(util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = mappings;
  }

  _sortOriginalMappings() {
    const mappings = this._originalMappingsUnsorted;
    mappings.sort(util.compareByOriginalPositions);
    this.__originalMappings = mappings;
  }

  /**
   * The list of original sources.
   */
  get sources() {
    const sources = [];
    for (let i = 0; i < this._sections.length; i++) {
      for (let j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.  The line number
   *     is 1-based.
   *   - column: The column number in the generated source.  The column
   *     number is 0-based.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the original source, or null.  The
   *     column number is 0-based.
   *   - name: The original identifier, or null.
   */
  originalPositionFor(aArgs) {
    const needle = {
      generatedLine: util.getArg(aArgs, "line"),
      generatedColumn: util.getArg(aArgs, "column")
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    const sectionIndex = binarySearch.search(needle, this._sections,
      function(aNeedle, section) {
        const cmp = aNeedle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (aNeedle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    const section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  }

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  hasContentsOfAllSources() {
    return this._sections.every(function(s) {
      return s.consumer.hasContentsOfAllSources();
    });
  }

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  sourceContentFor(aSource, nullOnMissing) {
    for (let i = 0; i < this._sections.length; i++) {
      const section = this._sections[i];

      const content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    throw new Error('"' + aSource + '" is not in the SourceMap.');
  }

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number
   *     is 1-based.
   *   - column: The column number in the original source.  The column
   *     number is 0-based.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the generated source, or null.
   *     The column number is 0-based.
   */
  generatedPositionFor(aArgs) {
    for (let i = 0; i < this._sections.length; i++) {
      const section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) === -1) {
        continue;
      }
      const generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        const ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  }

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  _parseMappings(aStr, aSourceRoot) {
    const generatedMappings = this.__generatedMappingsUnsorted = [];
    const originalMappings = this.__originalMappingsUnsorted = [];
    for (let i = 0; i < this._sections.length; i++) {
      const section = this._sections[i];

      const sectionMappings = [];
      section.consumer.eachMapping(m => sectionMappings.push(m));

      for (let j = 0; j < sectionMappings.length; j++) {
        const mapping = sectionMappings[j];

        // TODO: test if null is correct here.  The original code used
        // `source`, which would actually have gotten used as null because
        // var's get hoisted.
        // See: https://github.com/mozilla/source-map/issues/333
        let source = util.computeSourceURL(section.consumer.sourceRoot, null, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        let name = null;
        if (mapping.name) {
          this._names.add(mapping.name);
          name = this._names.indexOf(mapping.name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        const adjustedMapping = {
          source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name
        };

        generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === "number") {
          originalMappings.push(adjustedMapping);
        }
      }
    }
  }

  eachMapping(aCallback, aContext, aOrder) {
    const context = aContext || null;
    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    let mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    const sourceRoot = this.sourceRoot;
    mappings.map(function(mapping) {
      let source = null;
      if (mapping.source !== null) {
        source = this._sources.at(mapping.source);
        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      }
      return {
        source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  }

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  _findMapping(aNeedle, aMappings, aLineName,
              aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError("Line must be greater than or equal to 1, got "
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError("Column must be greater than or equal to 0, got "
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  }

  allGeneratedPositionsFor(aArgs) {
    const line = util.getArg(aArgs, "line");

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    const needle = {
      source: util.getArg(aArgs, "source"),
      originalLine: line,
      originalColumn: util.getArg(aArgs, "column", 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    if (needle.originalLine < 1) {
      throw new Error("Line numbers must be >= 1");
    }

    if (needle.originalColumn < 0) {
      throw new Error("Column numbers must be >= 0");
    }

    const mappings = [];

    let index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      let mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        const originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          let lastColumn = mapping.lastGeneratedColumn;
          if (this._computedColumnSpans && lastColumn === null) {
            lastColumn = Infinity;
          }
          mappings.push({
            line: util.getArg(mapping, "generatedLine", null),
            column: util.getArg(mapping, "generatedColumn", null),
            lastColumn,
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        const originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          let lastColumn = mapping.lastGeneratedColumn;
          if (this._computedColumnSpans && lastColumn === null) {
            lastColumn = Infinity;
          }
          mappings.push({
            line: util.getArg(mapping, "generatedLine", null),
            column: util.getArg(mapping, "generatedColumn", null),
            lastColumn,
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  }

  destroy() {
    for (let i = 0; i < this._sections.length; i++) {
      this._sections[i].consumer.destroy();
    }
  }
}
exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

/*
 * Cheat to get around inter-twingled classes.  `factory()` can be at the end
 * where it has access to non-hoisted classes, but it gets hoisted itself.
 */
function _factory(aSourceMap, aSourceMapURL) {
  let sourceMap = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  const consumer = sourceMap.sections != null
      ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
      : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
  return Promise.resolve(consumer);
}

function _factoryBSM(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

},{"../lib/read-wasm":170,"./array-set":165,"./base64-vlq":166,"./binary-search":168,"./util":174,"./wasm":175}],172:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

const base64VLQ = require("./base64-vlq");
const util = require("./util");
const ArraySet = require("./array-set").ArraySet;
const MappingList = require("./mapping-list").MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
class SourceMapGenerator {
  constructor(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, "file", null);
    this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
    this._skipValidation = util.getArg(aArgs, "skipValidation", false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
  }

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  static fromSourceMap(aSourceMapConsumer) {
    const sourceRoot = aSourceMapConsumer.sourceRoot;
    const generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot
    });
    aSourceMapConsumer.eachMapping(function(mapping) {
      const newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
      let sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      const content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  }

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  addMapping(aArgs) {
    const generated = util.getArg(aArgs, "generated");
    const original = util.getArg(aArgs, "original", null);
    let source = util.getArg(aArgs, "source", null);
    let name = util.getArg(aArgs, "name", null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source,
      name
    });
  }

  /**
   * Set the source content for a source file.
   */
  setSourceContent(aSourceFile, aSourceContent) {
    let source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  }

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    let sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          "SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, " +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    const sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    const newSources = this._mappings.toArray().length > 0
      ? new ArraySet()
      : this._sources;
    const newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function(mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        const original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source);
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      const source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      const name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function(srcFile) {
      const content = aSourceMapConsumer.sourceContentFor(srcFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          srcFile = util.join(aSourceMapPath, srcFile);
        }
        if (sourceRoot != null) {
          srcFile = util.relative(sourceRoot, srcFile);
        }
        this.setSourceContent(srcFile, content);
      }
    }, this);
  }

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  _validateMapping(aGenerated, aOriginal, aSource, aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
        throw new Error(
            "original.line and original.column are not numbers -- you probably meant to omit " +
            "the original mapping entirely and only map the generated position. If so, pass " +
            "null for the original mapping instead of an object with empty or null values."
        );
    }

    if (aGenerated && "line" in aGenerated && "column" in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.

    } else if (aGenerated && "line" in aGenerated && "column" in aGenerated
             && aOriginal && "line" in aOriginal && "column" in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.

    } else {
      throw new Error("Invalid mapping: " + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  }

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  _serializeMappings() {
    let previousGeneratedColumn = 0;
    let previousGeneratedLine = 1;
    let previousOriginalColumn = 0;
    let previousOriginalLine = 0;
    let previousName = 0;
    let previousSource = 0;
    let result = "";
    let next;
    let mapping;
    let nameIdx;
    let sourceIdx;

    const mappings = this._mappings.toArray();
    for (let i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = "";

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ";";
          previousGeneratedLine++;
        }
      } else if (i > 0) {
        if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
          continue;
        }
        next += ",";
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  }

  _generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function(source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      const key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  }

  /**
   * Externalize the source map.
   */
  toJSON() {
    const map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  }

  /**
   * Render the source map being generated to a string.
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
}

SourceMapGenerator.prototype._version = 3;
exports.SourceMapGenerator = SourceMapGenerator;

},{"./array-set":165,"./base64-vlq":166,"./mapping-list":169,"./util":174}],173:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

const SourceMapGenerator = require("./source-map-generator").SourceMapGenerator;
const util = require("./util");

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
const REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
const NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
const isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
class SourceNode {
  constructor(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  static fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    const node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    let remainingLinesIndex = 0;
    const shiftNextLine = function() {
      const lineContents = getNextLine();
      // The last line of a file might not have a newline.
      const newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    let lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    let lastMapping = null;
    let nextLine;

    aSourceMapConsumer.eachMapping(function(mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          nextLine = remainingLines[remainingLinesIndex] || "";
          const code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        nextLine = remainingLines[remainingLinesIndex] || "";
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
      const content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        const source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  }

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function(chunk) {
        this.add(chunk);
      }, this);
    } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    } else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  }

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (let i = aChunk.length - 1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    } else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  }

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  walk(aFn) {
    let chunk;
    for (let i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      } else if (chunk !== "") {
        aFn(chunk, { source: this.source,
                      line: this.line,
                      column: this.column,
                      name: this.name });
      }
    }
  }

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  join(aSep) {
    let newChildren;
    let i;
    const len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len - 1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  }

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  replaceRight(aPattern, aReplacement) {
    const lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    } else if (typeof lastChild === "string") {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    } else {
      this.children.push("".replace(aPattern, aReplacement));
    }
    return this;
  }

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  }

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  walkSourceContents(aFn) {
    for (let i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    const sources = Object.keys(this.sourceContents);
    for (let i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  }

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  toString() {
    let str = "";
    this.walk(function(chunk) {
      str += chunk;
    });
    return str;
  }

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  toStringWithSourceMap(aArgs) {
    const generated = {
      code: "",
      line: 1,
      column: 0
    };
    const map = new SourceMapGenerator(aArgs);
    let sourceMappingActive = false;
    let lastOriginalSource = null;
    let lastOriginalLine = null;
    let lastOriginalColumn = null;
    let lastOriginalName = null;
    this.walk(function(chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if (lastOriginalSource !== original.source
          || lastOriginalLine !== original.line
          || lastOriginalColumn !== original.column
          || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (let idx = 0, length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function(sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map };
  }
}

exports.SourceNode = SourceNode;

},{"./source-map-generator":172,"./util":174}],174:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  }
    throw new Error('"' + aName + '" is a required argument.');

}
exports.getArg = getArg;

const urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
const dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  const match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  let url = "";
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ":";
  }
  url += "//";
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + "@";
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port;
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

const MAX_CACHED_INPUTS = 32;

/**
 * Takes some function `f(input) -> result` and returns a memoized version of
 * `f`.
 *
 * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
 * memoization is a dumb-simple, linear least-recently-used cache.
 */
function lruMemoize(f) {
  const cache = [];

  return function(input) {
    for (let i = 0; i < cache.length; i++) {
      if (cache[i].input === input) {
        const temp = cache[0];
        cache[0] = cache[i];
        cache[i] = temp;
        return cache[0].result;
      }
    }

    const result = f(input);

    cache.unshift({
      input,
      result,
    });

    if (cache.length > MAX_CACHED_INPUTS) {
      cache.pop();
    }

    return result;
  };
}

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
const normalize = lruMemoize(function normalize(aPath) {
  let path = aPath;
  const url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  const isAbsolute = exports.isAbsolute(path);

  // Split the path into parts between `/` characters. This is much faster than
  // using `.split(/\/+/g)`.
  const parts = [];
  let start = 0;
  let i = 0;
  while (true) {
    start = i;
    i = path.indexOf("/", start);
    if (i === -1) {
      parts.push(path.slice(start));
      break;
    } else {
      parts.push(path.slice(start, i));
      while (i < path.length && path[i] === "/") {
        i++;
      }
    }
  }

  let up = 0;
  for (i = parts.length - 1; i >= 0; i--) {
    const part = parts[i];
    if (part === ".") {
      parts.splice(i, 1);
    } else if (part === "..") {
      up++;
    } else if (up > 0) {
      if (part === "") {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join("/");

  if (path === "") {
    path = isAbsolute ? "/" : ".";
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
});
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  const aPathUrl = urlParse(aPath);
  const aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || "/";
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  const joined = aPath.charAt(0) === "/"
    ? aPath
    : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function(aPath) {
  return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, "");

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  let level = 0;
  while (aPath.indexOf(aRoot + "/") !== 0) {
    const index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

const supportsNullProto = (function() {
  const obj = Object.create(null);
  return !("__proto__" in obj);
}());

function identity(s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return "$" + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  const length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  /* eslint-disable no-multi-spaces */
  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }
  /* eslint-enable no-multi-spaces */

  for (let i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  let cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  let cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  let cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || "";

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
      sourceRoot += "/";
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    const parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      const index = parsed.path.lastIndexOf("/");
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;

},{}],175:[function(require,module,exports){
const readWasm = require("../lib/read-wasm");

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.lastGeneratedColumn = null;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

let cachedWasm = null;

module.exports = function wasm() {
  if (cachedWasm) {
    return cachedWasm;
  }

  const callbackStack = [];

  cachedWasm = readWasm().then(buffer => {
      return WebAssembly.instantiate(buffer, {
        env: {
          mapping_callback(
            generatedLine,
            generatedColumn,

            hasLastGeneratedColumn,
            lastGeneratedColumn,

            hasOriginal,
            source,
            originalLine,
            originalColumn,

            hasName,
            name
          ) {
            const mapping = new Mapping();
            // JS uses 1-based line numbers, wasm uses 0-based.
            mapping.generatedLine = generatedLine + 1;
            mapping.generatedColumn = generatedColumn;

            if (hasLastGeneratedColumn) {
              // JS uses inclusive last generated column, wasm uses exclusive.
              mapping.lastGeneratedColumn = lastGeneratedColumn - 1;
            }

            if (hasOriginal) {
              mapping.source = source;
              // JS uses 1-based line numbers, wasm uses 0-based.
              mapping.originalLine = originalLine + 1;
              mapping.originalColumn = originalColumn;

              if (hasName) {
                mapping.name = name;
              }
            }

            callbackStack[callbackStack.length - 1](mapping);
          },

          start_all_generated_locations_for() { console.time("all_generated_locations_for"); },
          end_all_generated_locations_for() { console.timeEnd("all_generated_locations_for"); },

          start_compute_column_spans() { console.time("compute_column_spans"); },
          end_compute_column_spans() { console.timeEnd("compute_column_spans"); },

          start_generated_location_for() { console.time("generated_location_for"); },
          end_generated_location_for() { console.timeEnd("generated_location_for"); },

          start_original_location_for() { console.time("original_location_for"); },
          end_original_location_for() { console.timeEnd("original_location_for"); },

          start_parse_mappings() { console.time("parse_mappings"); },
          end_parse_mappings() { console.timeEnd("parse_mappings"); },

          start_sort_by_generated_location() { console.time("sort_by_generated_location"); },
          end_sort_by_generated_location() { console.timeEnd("sort_by_generated_location"); },

          start_sort_by_original_location() { console.time("sort_by_original_location"); },
          end_sort_by_original_location() { console.timeEnd("sort_by_original_location"); },
        }
      });
  }).then(Wasm => {
    return {
      exports: Wasm.instance.exports,
      withMappingCallback: (mappingCallback, f) => {
        callbackStack.push(mappingCallback);
        try {
          f();
        } finally {
          callbackStack.pop();
        }
      }
    };
  }).then(null, e => {
    cachedWasm = null;
    throw e;
  });

  return cachedWasm;
};

},{"../lib/read-wasm":170}],176:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = require("./lib/source-map-generator").SourceMapGenerator;
exports.SourceMapConsumer = require("./lib/source-map-consumer").SourceMapConsumer;
exports.SourceNode = require("./lib/source-node").SourceNode;

},{"./lib/source-map-consumer":171,"./lib/source-map-generator":172,"./lib/source-node":173}],177:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*!
 * XRegExp.build 4.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2012-present MIT License
 */
var _default = function _default(XRegExp) {
  var REGEX_DATA = 'xregexp';
  var subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
  var parts = XRegExp.union([/\({{([\w$]+)}}\)|{{([\w$]+)}}/, subParts], 'g', {
    conjunction: 'or'
  });
  /**
   * Strips a leading `^` and trailing unescaped `$`, if both are present.
   *
   * @private
   * @param {String} pattern Pattern to process.
   * @returns {String} Pattern with edge anchors removed.
   */

  function deanchor(pattern) {
    // Allow any number of empty noncapturing groups before/after anchors, because regexes
    // built/generated by XRegExp sometimes include them
    var leadingAnchor = /^(?:\(\?:\))*\^/;
    var trailingAnchor = /\$(?:\(\?:\))*$/;

    if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) && // Ensure that the trailing `$` isn't escaped
    trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ''))) {
      return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');
    }

    return pattern;
  }
  /**
   * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.
   *
   * @private
   * @param {String|RegExp} value Value to convert.
   * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not
   *   already a regex generated by XRegExp
   * @returns {RegExp} XRegExp object with XRegExp syntax applied.
   */


  function asXRegExp(value, addFlagX) {
    var flags = addFlagX ? 'x' : '';
    return XRegExp.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? // Don't recompile, to preserve capture names
    value : // Recompile as XRegExp
    XRegExp(value.source, flags) : // Compile string as XRegExp
    XRegExp(value, flags);
  }

  function interpolate(substitution) {
    return substitution instanceof RegExp ? substitution : XRegExp.escape(substitution);
  }

  function reduceToSubpatternsObject(subpatterns, interpolated, subpatternIndex) {
    subpatterns["subpattern".concat(subpatternIndex)] = interpolated;
    return subpatterns;
  }

  function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {
    var hasSubpattern = subpatternIndex < rawLiterals.length - 1;
    return raw + (hasSubpattern ? "{{subpattern".concat(subpatternIndex, "}}") : '');
  }
  /**
   * Provides tagged template literals that create regexes with XRegExp syntax and flags. The
   * provided pattern is handled as a raw string, so backslashes don't need to be escaped.
   *
   * Interpolation of strings and regexes shares the features of `XRegExp.build`. Interpolated
   * patterns are treated as atomic units when quantified, interpolated strings have their special
   * characters escaped, a leading `^` and trailing unescaped `$` are stripped from interpolated
   * regexes if both are present, and any backreferences within an interpolated regex are
   * rewritten to work within the overall pattern.
   *
   * @memberOf XRegExp
   * @param {String} [flags] Any combination of XRegExp flags.
   * @returns {Function} Handler for template literals that construct regexes with XRegExp syntax.
   * @example
   *
   * const h12 = /1[0-2]|0?[1-9]/;
   * const h24 = /2[0-3]|[01][0-9]/;
   * const hours = XRegExp.tag('x')`${h12} : | ${h24}`;
   * const minutes = /^[0-5][0-9]$/;
   * // Note that explicitly naming the 'minutes' group is required for named backreferences
   * const time = XRegExp.tag('x')`^ ${hours} (?<minutes>${minutes}) $`;
   * time.test('10:59'); // -> true
   * XRegExp.exec('10:59', time).minutes; // -> '59'
   */


  XRegExp.tag = function (flags) {
    return function (literals) {
      for (var _len = arguments.length, substitutions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        substitutions[_key - 1] = arguments[_key];
      }

      var subpatterns = substitutions.map(interpolate).reduce(reduceToSubpatternsObject, {});
      var pattern = literals.raw.map(embedSubpatternAfter).join('');
      return XRegExp.build(pattern, subpatterns, flags);
    };
  };
  /**
   * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in
   * the outer pattern and provided subpatterns are automatically renumbered to work correctly.
   * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.
   *
   * @memberOf XRegExp
   * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows
   *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within
   *   character classes.
   * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A
   *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.
   * @param {String} [flags] Any combination of XRegExp flags.
   * @returns {RegExp} Regex with interpolated subpatterns.
   * @example
   *
   * const time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {
   *   hours: XRegExp.build('{{h12}} : | {{h24}}', {
   *     h12: /1[0-2]|0?[1-9]/,
   *     h24: /2[0-3]|[01][0-9]/
   *   }, 'x'),
   *   minutes: /^[0-5][0-9]$/
   * });
   * time.test('10:59'); // -> true
   * XRegExp.exec('10:59', time).minutes; // -> '59'
   */


  XRegExp.build = function (pattern, subs, flags) {
    flags = flags || ''; // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how
    // some browsers convert `RegExp('\n')` to a regex that contains the literal characters `\`
    // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.

    var addFlagX = flags.indexOf('x') !== -1;
    var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern); // Add flags within a leading mode modifier to the overall pattern's flags

    if (inlineFlags) {
      flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);
    }

    var data = {};

    for (var p in subs) {
      if (subs.hasOwnProperty(p)) {
        // Passing to XRegExp enables extended syntax and ensures independent validity,
        // lest an unescaped `(`, `)`, `[`, or trailing `\` breaks the `(?:)` wrapper. For
        // subpatterns provided as native regexes, it dies on octals and adds the property
        // used to hold extended regex instance data, for simplicity.
        var sub = asXRegExp(subs[p], addFlagX);
        data[p] = {
          // Deanchoring allows embedding independently useful anchored regexes. If you
          // really need to keep your anchors, double them (i.e., `^^...$$`).
          pattern: deanchor(sub.source),
          names: sub[REGEX_DATA].captureNames || []
        };
      }
    } // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;
    // helps keep this simple. Named captures will be put back.


    var patternAsRegex = asXRegExp(pattern, addFlagX); // 'Caps' is short for 'captures'

    var numCaps = 0;
    var numPriorCaps;
    var numOuterCaps = 0;
    var outerCapsMap = [0];
    var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
    var output = patternAsRegex.source.replace(parts, function ($0, $1, $2, $3, $4) {
      var subName = $1 || $2;
      var capName;
      var intro;
      var localCapIndex; // Named subpattern

      if (subName) {
        if (!data.hasOwnProperty(subName)) {
          throw new ReferenceError("Undefined property ".concat($0));
        } // Named subpattern was wrapped in a capturing group


        if ($1) {
          capName = outerCapNames[numOuterCaps];
          outerCapsMap[++numOuterCaps] = ++numCaps; // If it's a named group, preserve the name. Otherwise, use the subpattern name
          // as the capture name

          intro = "(?<".concat(capName || subName, ">");
        } else {
          intro = '(?:';
        }

        numPriorCaps = numCaps;
        var rewrittenSubpattern = data[subName].pattern.replace(subParts, function (match, paren, backref) {
          // Capturing group
          if (paren) {
            capName = data[subName].names[numCaps - numPriorCaps];
            ++numCaps; // If the current capture has a name, preserve the name

            if (capName) {
              return "(?<".concat(capName, ">");
            } // Backreference

          } else if (backref) {
            localCapIndex = +backref - 1; // Rewrite the backreference

            return data[subName].names[localCapIndex] ? // Need to preserve the backreference name in case using flag `n`
            "\\k<".concat(data[subName].names[localCapIndex], ">") : "\\".concat(+backref + numPriorCaps);
          }

          return match;
        });
        return "".concat(intro).concat(rewrittenSubpattern, ")");
      } // Capturing group


      if ($3) {
        capName = outerCapNames[numOuterCaps];
        outerCapsMap[++numOuterCaps] = ++numCaps; // If the current capture has a name, preserve the name

        if (capName) {
          return "(?<".concat(capName, ">");
        } // Backreference

      } else if ($4) {
        localCapIndex = +$4 - 1; // Rewrite the backreference

        return outerCapNames[localCapIndex] ? // Need to preserve the backreference name in case using flag `n`
        "\\k<".concat(outerCapNames[localCapIndex], ">") : "\\".concat(outerCapsMap[+$4]);
      }

      return $0;
    });
    return XRegExp(output, flags);
  };
};

exports.default = _default;
module.exports = exports["default"];
},{}],178:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*!
 * XRegExp.matchRecursive 4.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2009-present MIT License
 */
var _default = function _default(XRegExp) {
  /**
   * Returns a match detail object composed of the provided values.
   *
   * @private
   */
  function row(name, value, start, end) {
    return {
      name: name,
      value: value,
      start: start,
      end: end
    };
  }
  /**
   * Returns an array of match strings between outermost left and right delimiters, or an array of
   * objects with detailed match parts and position data. An error is thrown if delimiters are
   * unbalanced within the data.
   *
   * @memberOf XRegExp
   * @param {String} str String to search.
   * @param {String} left Left delimiter as an XRegExp pattern.
   * @param {String} right Right delimiter as an XRegExp pattern.
   * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.
   * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.
   * @returns {Array} Array of matches, or an empty array.
   * @example
   *
   * // Basic usage
   * let str = '(t((e))s)t()(ing)';
   * XRegExp.matchRecursive(str, '\\(', '\\)', 'g');
   * // -> ['t((e))s', '', 'ing']
   *
   * // Extended information mode with valueNames
   * str = 'Here is <div> <div>an</div></div> example';
   * XRegExp.matchRecursive(str, '<div\\s*>', '</div>', 'gi', {
   *   valueNames: ['between', 'left', 'match', 'right']
   * });
   * // -> [
   * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},
   * // {name: 'left',    value: '<div>',          start: 8,  end: 13},
   * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},
   * // {name: 'right',   value: '</div>',         start: 27, end: 33},
   * // {name: 'between', value: ' example',       start: 33, end: 41}
   * // ]
   *
   * // Omitting unneeded parts with null valueNames, and using escapeChar
   * str = '...{1}.\\{{function(x,y){return {y:x}}}';
   * XRegExp.matchRecursive(str, '{', '}', 'g', {
   *   valueNames: ['literal', null, 'value', null],
   *   escapeChar: '\\'
   * });
   * // -> [
   * // {name: 'literal', value: '...',  start: 0, end: 3},
   * // {name: 'value',   value: '1',    start: 4, end: 5},
   * // {name: 'literal', value: '.\\{', start: 6, end: 9},
   * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}
   * // ]
   *
   * // Sticky mode via flag y
   * str = '<1><<<2>>><3>4<5>';
   * XRegExp.matchRecursive(str, '<', '>', 'gy');
   * // -> ['1', '<<2>>', '3']
   */


  XRegExp.matchRecursive = function (str, left, right, flags, options) {
    flags = flags || '';
    options = options || {};
    var global = flags.indexOf('g') !== -1;
    var sticky = flags.indexOf('y') !== -1; // Flag `y` is controlled internally

    var basicFlags = flags.replace(/y/g, '');
    var _options = options,
        escapeChar = _options.escapeChar;
    var vN = options.valueNames;
    var output = [];
    var openTokens = 0;
    var delimStart = 0;
    var delimEnd = 0;
    var lastOuterEnd = 0;
    var outerStart;
    var innerStart;
    var leftMatch;
    var rightMatch;
    var esc;
    left = XRegExp(left, basicFlags);
    right = XRegExp(right, basicFlags);

    if (escapeChar) {
      if (escapeChar.length > 1) {
        throw new Error('Cannot use more than one escape character');
      }

      escapeChar = XRegExp.escape(escapeChar); // Example of concatenated `esc` regex:
      // `escapeChar`: '%'
      // `left`: '<'
      // `right`: '>'
      // Regex is: /(?:%[\S\s]|(?:(?!<|>)[^%])+)+/

      esc = new RegExp("(?:".concat(escapeChar, "[\\S\\s]|(?:(?!").concat( // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.
      // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax
      // transformation resulting from those flags was already applied to `left` and
      // `right` when they were passed through the XRegExp constructor above.
      XRegExp.union([left, right], '', {
        conjunction: 'or'
      }).source, ")[^").concat(escapeChar, "])+)+"), // Flags `gy` not needed here
      flags.replace(/[^imu]+/g, ''));
    }

    while (true) {
      // If using an escape character, advance to the delimiter's next starting position,
      // skipping any escaped characters in between
      if (escapeChar) {
        delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;
      }

      leftMatch = XRegExp.exec(str, left, delimEnd);
      rightMatch = XRegExp.exec(str, right, delimEnd); // Keep the leftmost match only

      if (leftMatch && rightMatch) {
        if (leftMatch.index <= rightMatch.index) {
          rightMatch = null;
        } else {
          leftMatch = null;
        }
      } // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):
      // LM | RM | OT | Result
      // 1  | 0  | 1  | loop
      // 1  | 0  | 0  | loop
      // 0  | 1  | 1  | loop
      // 0  | 1  | 0  | throw
      // 0  | 0  | 1  | throw
      // 0  | 0  | 0  | break
      // The paths above don't include the sticky mode special case. The loop ends after the
      // first completed match if not `global`.


      if (leftMatch || rightMatch) {
        delimStart = (leftMatch || rightMatch).index;
        delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
      } else if (!openTokens) {
        break;
      }

      if (sticky && !openTokens && delimStart > lastOuterEnd) {
        break;
      }

      if (leftMatch) {
        if (!openTokens) {
          outerStart = delimStart;
          innerStart = delimEnd;
        }

        ++openTokens;
      } else if (rightMatch && openTokens) {
        if (! --openTokens) {
          if (vN) {
            if (vN[0] && outerStart > lastOuterEnd) {
              output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));
            }

            if (vN[1]) {
              output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));
            }

            if (vN[2]) {
              output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));
            }

            if (vN[3]) {
              output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));
            }
          } else {
            output.push(str.slice(innerStart, delimStart));
          }

          lastOuterEnd = delimEnd;

          if (!global) {
            break;
          }
        }
      } else {
        throw new Error('Unbalanced delimiter found in string');
      } // If the delimiter matched an empty string, avoid an infinite loop


      if (delimStart === delimEnd) {
        ++delimEnd;
      }
    }

    if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
      output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));
    }

    return output;
  };
};

exports.default = _default;
module.exports = exports["default"];
},{}],179:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*!
 * XRegExp Unicode Base 4.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2008-present MIT License
 */
var _default = function _default(XRegExp) {
  /**
   * Adds base support for Unicode matching:
   * - Adds syntax `\p{..}` for matching Unicode tokens. Tokens can be inverted using `\P{..}` or
   *   `\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the
   *   braces for token names that are a single letter (e.g. `\pL` or `PL`).
   * - Adds flag A (astral), which enables 21-bit Unicode support.
   * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.
   *
   * Unicode Base relies on externally provided Unicode character data. Official addons are
   * available to provide data for Unicode categories, scripts, blocks, and properties.
   *
   * @requires XRegExp
   */
  // ==--------------------------==
  // Private stuff
  // ==--------------------------==
  // Storage for Unicode data
  var unicode = {}; // Reuse utils

  var dec = XRegExp._dec;
  var hex = XRegExp._hex;
  var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed

  function normalize(name) {
    return name.replace(/[- _]+/g, '').toLowerCase();
  } // Gets the decimal code of a literal code unit, \xHH, \uHHHH, or a backslash-escaped literal


  function charCode(chr) {
    var esc = /^\\[xu](.+)/.exec(chr);
    return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\' ? 1 : 0);
  } // Inverts a list of ordered BMP characters and ranges


  function invertBmp(range) {
    var output = '';
    var lastEnd = -1;
    XRegExp.forEach(range, /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/, function (m) {
      var start = charCode(m[1]);

      if (start > lastEnd + 1) {
        output += "\\u".concat(pad4(hex(lastEnd + 1)));

        if (start > lastEnd + 2) {
          output += "-\\u".concat(pad4(hex(start - 1)));
        }
      }

      lastEnd = charCode(m[2] || m[1]);
    });

    if (lastEnd < 0xFFFF) {
      output += "\\u".concat(pad4(hex(lastEnd + 1)));

      if (lastEnd < 0xFFFE) {
        output += '-\\uFFFF';
      }
    }

    return output;
  } // Generates an inverted BMP range on first use


  function cacheInvertedBmp(slug) {
    var prop = 'b!';
    return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));
  } // Combines and optionally negates BMP and astral data


  function buildAstral(slug, isNegated) {
    var item = unicode[slug];
    var combined = '';

    if (item.bmp && !item.isBmpLast) {
      combined = "[".concat(item.bmp, "]").concat(item.astral ? '|' : '');
    }

    if (item.astral) {
      combined += item.astral;
    }

    if (item.isBmpLast && item.bmp) {
      combined += "".concat(item.astral ? '|' : '', "[").concat(item.bmp, "]");
    } // Astral Unicode tokens always match a code point, never a code unit


    return isNegated ? "(?:(?!".concat(combined, ")(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))") : "(?:".concat(combined, ")");
  } // Builds a complete astral pattern on first use


  function cacheAstral(slug, isNegated) {
    var prop = isNegated ? 'a!' : 'a=';
    return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));
  } // ==--------------------------==
  // Core functionality
  // ==--------------------------==

  /*
   * Add astral mode (flag A) and Unicode token syntax: `\p{..}`, `\P{..}`, `\p{^..}`, `\pC`.
   */


  XRegExp.addToken( // Use `*` instead of `+` to avoid capturing `^` as the token name in `\p{^}`
  /\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {
    var ERR_DOUBLE_NEG = 'Invalid double negation ';
    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';
    var ERR_UNKNOWN_REF = 'Unicode token missing data ';
    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';
    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes'; // Negated via \P{..} or \p{^..}

    var isNegated = match[1] === 'P' || !!match[2]; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A

    var isAstralMode = flags.indexOf('A') !== -1; // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\p{}`

    var slug = normalize(match[4] || match[3]); // Token data object

    var item = unicode[slug];

    if (match[1] === 'P' && match[2]) {
      throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);
    }

    if (!unicode.hasOwnProperty(slug)) {
      throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);
    } // Switch to the negated form of the referenced Unicode token


    if (item.inverseOf) {
      slug = normalize(item.inverseOf);

      if (!unicode.hasOwnProperty(slug)) {
        throw new ReferenceError("".concat(ERR_UNKNOWN_REF + match[0], " -> ").concat(item.inverseOf));
      }

      item = unicode[slug];
      isNegated = !isNegated;
    }

    if (!(item.bmp || isAstralMode)) {
      throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);
    }

    if (isAstralMode) {
      if (scope === 'class') {
        throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
      }

      return cacheAstral(slug, isNegated);
    }

    return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : "".concat((isNegated ? '[^' : '[') + item.bmp, "]");
  }, {
    scope: 'all',
    optionalFlags: 'A',
    leadChar: '\\'
  });
  /**
   * Adds to the list of Unicode tokens that XRegExp regexes can match via `\p` or `\P`.
   *
   * @memberOf XRegExp
   * @param {Array} data Objects with named character ranges. Each object may have properties
   *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are
   *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If
   *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,
   *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are
   *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and
   *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan
   *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and
   *   `astral` data should be a combination of literal characters and `\xHH` or `\uHHHH` escape
   *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be
   *   escaped, apart from range-creating hyphens. The `astral` data can additionally use
   *   character classes and alternation, and should use surrogate pairs to represent astral code
   *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is
   *   defined as the exact inverse of another token.
   * @example
   *
   * // Basic use
   * XRegExp.addUnicodeData([{
   *   name: 'XDigit',
   *   alias: 'Hexadecimal',
   *   bmp: '0-9A-Fa-f'
   * }]);
   * XRegExp('\\p{XDigit}:\\p{Hexadecimal}+').test('0:3D'); // -> true
   */

  XRegExp.addUnicodeData = function (data) {
    var ERR_NO_NAME = 'Unicode token requires name';
    var ERR_NO_DATA = 'Unicode token has no character data ';
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var item = _step.value;

        if (!item.name) {
          throw new Error(ERR_NO_NAME);
        }

        if (!(item.inverseOf || item.bmp || item.astral)) {
          throw new Error(ERR_NO_DATA + item.name);
        }

        unicode[normalize(item.name)] = item;

        if (item.alias) {
          unicode[normalize(item.alias)] = item;
        }
      } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and
      // flags might now produce different results

    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    XRegExp.cache.flush('patterns');
  };
  /**
   * @ignore
   *
   * Return a reference to the internal Unicode definition structure for the given Unicode
   * Property if the given name is a legal Unicode Property for use in XRegExp `\p` or `\P` regex
   * constructs.
   *
   * @memberOf XRegExp
   * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),
   *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode
   *   Properties and Property Aliases.
   * @returns {Object} Reference to definition structure when the name matches a Unicode Property.
   *
   * @note
   * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.
   *
   * @note
   * This method is *not* part of the officially documented API and may change or be removed in
   * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode
   * structures set up by XRegExp.
   */


  XRegExp._getUnicodeProperty = function (name) {
    var slug = normalize(name);
    return unicode[slug];
  };
};

exports.default = _default;
module.exports = exports["default"];
},{}],180:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _blocks = _interopRequireDefault(require("../../tools/output/blocks"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * XRegExp Unicode Blocks 4.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2010-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
var _default = function _default(XRegExp) {
  /**
   * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g.,
   * `\p{InBasicLatin}`. Token names are case insensitive, and any spaces, hyphens, and
   * underscores are ignored.
   *
   * Uses Unicode 11.0.0.
   *
   * @requires XRegExp, Unicode Base
   */
  if (!XRegExp.addUnicodeData) {
    throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');
  }

  XRegExp.addUnicodeData(_blocks.default);
};

exports.default = _default;
module.exports = exports["default"];
},{"../../tools/output/blocks":186}],181:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _categories = _interopRequireDefault(require("../../tools/output/categories"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * XRegExp Unicode Categories 4.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2010-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
var _default = function _default(XRegExp) {
  /**
   * Adds support for Unicode's general categories. E.g., `\p{Lu}` or `\p{Uppercase Letter}`. See
   * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token
   * names are case insensitive, and any spaces, hyphens, and underscores are ignored.
   *
   * Uses Unicode 11.0.0.
   *
   * @requires XRegExp, Unicode Base
   */
  if (!XRegExp.addUnicodeData) {
    throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');
  }

  XRegExp.addUnicodeData(_categories.default);
};

exports.default = _default;
module.exports = exports["default"];
},{"../../tools/output/categories":187}],182:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _properties = _interopRequireDefault(require("../../tools/output/properties"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * XRegExp Unicode Properties 4.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2012-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
var _default = function _default(XRegExp) {
  /**
   * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See
   * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from
   * UAX #44 <http://unicode.org/reports/tr44/>:
   *
   * - Alphabetic
   *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm +
   *   Lo + Nl + Other_Alphabetic.
   *
   * - Default_Ignorable_Code_Point
   *   For programmatic determination of default ignorable code points. New characters that should
   *   be ignored in rendering (unless explicitly supported) will be assigned in these ranges,
   *   permitting programs to correctly handle the default rendering of such characters when not
   *   otherwise supported.
   *
   * - Lowercase
   *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.
   *
   * - Noncharacter_Code_Point
   *   Code points permanently reserved for internal use.
   *
   * - Uppercase
   *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.
   *
   * - White_Space
   *   Spaces, separator characters and other control characters which should be treated by
   *   programming languages as "white space" for the purpose of parsing elements.
   *
   * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS
   * #18 RL1.2 additionally requires support for Unicode scripts and general categories. These are
   * included in XRegExp's Unicode Categories and Unicode Scripts addons.
   *
   * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.
   *
   * Uses Unicode 11.0.0.
   *
   * @requires XRegExp, Unicode Base
   */
  if (!XRegExp.addUnicodeData) {
    throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');
  }

  var unicodeData = _properties.default; // Add non-generated data

  unicodeData.push({
    name: 'Assigned',
    // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode
    // Categories addon is required to use this property
    inverseOf: 'Cn'
  });
  XRegExp.addUnicodeData(unicodeData);
};

exports.default = _default;
module.exports = exports["default"];
},{"../../tools/output/properties":188}],183:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _scripts = _interopRequireDefault(require("../../tools/output/scripts"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * XRegExp Unicode Scripts 4.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2010-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
var _default = function _default(XRegExp) {
  /**
   * Adds support for all Unicode scripts. E.g., `\p{Latin}`. Token names are case insensitive,
   * and any spaces, hyphens, and underscores are ignored.
   *
   * Uses Unicode 11.0.0.
   *
   * @requires XRegExp, Unicode Base
   */
  if (!XRegExp.addUnicodeData) {
    throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');
  }

  XRegExp.addUnicodeData(_scripts.default);
};

exports.default = _default;
module.exports = exports["default"];
},{"../../tools/output/scripts":189}],184:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _xregexp = _interopRequireDefault(require("./xregexp"));

var _build = _interopRequireDefault(require("./addons/build"));

var _matchrecursive = _interopRequireDefault(require("./addons/matchrecursive"));

var _unicodeBase = _interopRequireDefault(require("./addons/unicode-base"));

var _unicodeBlocks = _interopRequireDefault(require("./addons/unicode-blocks"));

var _unicodeCategories = _interopRequireDefault(require("./addons/unicode-categories"));

var _unicodeProperties = _interopRequireDefault(require("./addons/unicode-properties"));

var _unicodeScripts = _interopRequireDefault(require("./addons/unicode-scripts"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _build.default)(_xregexp.default);
(0, _matchrecursive.default)(_xregexp.default);
(0, _unicodeBase.default)(_xregexp.default);
(0, _unicodeBlocks.default)(_xregexp.default);
(0, _unicodeCategories.default)(_xregexp.default);
(0, _unicodeProperties.default)(_xregexp.default);
(0, _unicodeScripts.default)(_xregexp.default);
var _default = _xregexp.default;
exports.default = _default;
module.exports = exports["default"];
},{"./addons/build":177,"./addons/matchrecursive":178,"./addons/unicode-base":179,"./addons/unicode-blocks":180,"./addons/unicode-categories":181,"./addons/unicode-properties":182,"./addons/unicode-scripts":183,"./xregexp":185}],185:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*!
 * XRegExp 4.2.0
 * <xregexp.com>
 * Steven Levithan (c) 2007-present MIT License
 */

/**
 * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and
 * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to
 * make your client-side grepping simpler and more powerful, while freeing you from related
 * cross-browser inconsistencies.
 */
// ==--------------------------==
// Private stuff
// ==--------------------------==
// Property name used for extended regex instance data
var REGEX_DATA = 'xregexp'; // Optional features that can be installed and uninstalled

var features = {
  astral: false,
  namespacing: false
}; // Native methods to use and restore ('native' is an ES3 reserved keyword)

var nativ = {
  exec: RegExp.prototype.exec,
  test: RegExp.prototype.test,
  match: String.prototype.match,
  replace: String.prototype.replace,
  split: String.prototype.split
}; // Storage for fixed/extended native methods

var fixed = {}; // Storage for regexes cached by `XRegExp.cache`

var regexCache = {}; // Storage for pattern details cached by the `XRegExp` constructor

var patternCache = {}; // Storage for regex syntax tokens added internally or by `XRegExp.addToken`

var tokens = []; // Token scopes

var defaultScope = 'default';
var classScope = 'class'; // Regexes that match native regex syntax, including octals

var nativeTokens = {
  // Any native multicharacter token in default scope, or any single character
  'default': /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
  // Any native multicharacter token in character class scope, or any single character
  'class': /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
}; // Any backreference or dollar-prefixed character in replacement strings

var replacementToken = /\$(?:{([\w$]+)}|<([\w$]+)>|(\d\d?|[\s\S]))/g; // Check for correct `exec` handling of nonparticipating capturing groups

var correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined; // Check for ES6 `flags` prop support

var hasFlagsProp = /x/.flags !== undefined; // Shortcut to `Object.prototype.toString`

var _ref = {},
    toString = _ref.toString;

function hasNativeFlag(flag) {
  // Can't check based on the presence of properties/getters since browsers might support such
  // properties even when they don't support the corresponding flag in regex construction (tested
  // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`
  // throws an error)
  var isSupported = true;

  try {
    // Can't use regex literals for testing even in a `try` because regex literals with
    // unsupported flags cause a compilation error in IE
    new RegExp('', flag);
  } catch (exception) {
    isSupported = false;
  }

  return isSupported;
} // Check for ES6 `u` flag support


var hasNativeU = hasNativeFlag('u'); // Check for ES6 `y` flag support

var hasNativeY = hasNativeFlag('y'); // Tracker for known flags, including addon flags

var registeredFlags = {
  g: true,
  i: true,
  m: true,
  u: hasNativeU,
  y: hasNativeY
};
/**
 * Attaches extended data and `XRegExp.prototype` properties to a regex object.
 *
 * @private
 * @param {RegExp} regex Regex to augment.
 * @param {Array} captureNames Array with capture names, or `null`.
 * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.
 * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.
 * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal
 *   operations, and never exposed to users. For internal-only regexes, we can improve perf by
 *   skipping some operations like attaching `XRegExp.prototype` properties.
 * @returns {RegExp} Augmented regex.
 */

function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
  regex[REGEX_DATA] = {
    captureNames: captureNames
  };

  if (isInternalOnly) {
    return regex;
  } // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value


  if (regex.__proto__) {
    regex.__proto__ = XRegExp.prototype;
  } else {
    for (var p in XRegExp.prototype) {
      // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this
      // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`
      // extensions exist on `regex.prototype` anyway
      regex[p] = XRegExp.prototype[p];
    }
  }

  regex[REGEX_DATA].source = xSource; // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order

  regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;
  return regex;
}
/**
 * Removes any duplicate characters from the provided string.
 *
 * @private
 * @param {String} str String to remove duplicate characters from.
 * @returns {String} String with any duplicate characters removed.
 */


function clipDuplicates(str) {
  return nativ.replace.call(str, /([\s\S])(?=[\s\S]*\1)/g, '');
}
/**
 * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`
 * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing
 * flags g and y while copying the regex.
 *
 * @private
 * @param {RegExp} regex Regex to copy.
 * @param {Object} [options] Options object with optional properties:
 *   - `addG` {Boolean} Add flag g while copying the regex.
 *   - `addY` {Boolean} Add flag y while copying the regex.
 *   - `removeG` {Boolean} Remove flag g while copying the regex.
 *   - `removeY` {Boolean} Remove flag y while copying the regex.
 *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal
 *     operations, and never exposed to users. For internal-only regexes, we can improve perf by
 *     skipping some operations like attaching `XRegExp.prototype` properties.
 *   - `source` {String} Overrides `<regex>.source`, for special cases.
 * @returns {RegExp} Copy of the provided regex, possibly with modified flags.
 */


function copyRegex(regex, options) {
  if (!XRegExp.isRegExp(regex)) {
    throw new TypeError('Type RegExp expected');
  }

  var xData = regex[REGEX_DATA] || {};
  var flags = getNativeFlags(regex);
  var flagsToAdd = '';
  var flagsToRemove = '';
  var xregexpSource = null;
  var xregexpFlags = null;
  options = options || {};

  if (options.removeG) {
    flagsToRemove += 'g';
  }

  if (options.removeY) {
    flagsToRemove += 'y';
  }

  if (flagsToRemove) {
    flags = nativ.replace.call(flags, new RegExp("[".concat(flagsToRemove, "]+"), 'g'), '');
  }

  if (options.addG) {
    flagsToAdd += 'g';
  }

  if (options.addY) {
    flagsToAdd += 'y';
  }

  if (flagsToAdd) {
    flags = clipDuplicates(flags + flagsToAdd);
  }

  if (!options.isInternalOnly) {
    if (xData.source !== undefined) {
      xregexpSource = xData.source;
    } // null or undefined; don't want to add to `flags` if the previous value was null, since
    // that indicates we're not tracking original precompilation flags


    if (xData.flags != null) {
      // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never
      // removed for non-internal regexes, so don't need to handle it
      xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;
    }
  } // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid
  // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and
  // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the
  // translation to native regex syntax


  regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? xData.captureNames.slice(0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);
  return regex;
}
/**
 * Converts hexadecimal to decimal.
 *
 * @private
 * @param {String} hex
 * @returns {Number}
 */


function dec(hex) {
  return parseInt(hex, 16);
}
/**
 * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an
 * inline comment or whitespace with flag x. This is used directly as a token handler function
 * passed to `XRegExp.addToken`.
 *
 * @private
 * @param {String} match Match arg of `XRegExp.addToken` handler
 * @param {String} scope Scope arg of `XRegExp.addToken` handler
 * @param {String} flags Flags arg of `XRegExp.addToken` handler
 * @returns {String} Either '' or '(?:)', depending on which is needed in the context of the match.
 */


function getContextualTokenSeparator(match, scope, flags) {
  if ( // No need to separate tokens if at the beginning or end of a group
  match.input[match.index - 1] === '(' || match.input[match.index + match[0].length] === ')' || // No need to separate tokens if before or after a `|`
  match.input[match.index - 1] === '|' || match.input[match.index + match[0].length] === '|' || // No need to separate tokens if at the beginning or end of the pattern
  match.index < 1 || match.index + match[0].length >= match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookahead.
  // The way this is written relies on:
  // - The search regex matching only 3-char strings.
  // - Although `substr` gives chars from the end of the string if given a negative index,
  //   the resulting substring will be too short to match. Ex: `'abcd'.substr(-1, 3) === 'd'`
  nativ.test.call(/^\(\?[:=!]/, match.input.substr(match.index - 3, 3)) || // Avoid separating tokens when the following token is a quantifier
  isQuantifierNext(match.input, match.index + match[0].length, flags)) {
    return '';
  } // Keep tokens separated. This avoids e.g. inadvertedly changing `\1 1` or `\1(?#)1` to `\11`.
  // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax
  // error `(? :` into `(?:`.


  return '(?:)';
}
/**
 * Returns native `RegExp` flags used by a regex object.
 *
 * @private
 * @param {RegExp} regex Regex to check.
 * @returns {String} Native flags in use.
 */


function getNativeFlags(regex) {
  return hasFlagsProp ? regex.flags : // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation
  // with an empty string) allows this to continue working predictably when
  // `XRegExp.proptotype.toString` is overridden
  nativ.exec.call(/\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];
}
/**
 * Determines whether a regex has extended instance data used to track capture names.
 *
 * @private
 * @param {RegExp} regex Regex to check.
 * @returns {Boolean} Whether the regex uses named capture.
 */


function hasNamedCapture(regex) {
  return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
}
/**
 * Converts decimal to hexadecimal.
 *
 * @private
 * @param {Number|String} dec
 * @returns {String}
 */


function hex(dec) {
  return parseInt(dec, 10).toString(16);
}
/**
 * Checks whether the next nonignorable token after the specified position is a quantifier.
 *
 * @private
 * @param {String} pattern Pattern to search within.
 * @param {Number} pos Index in `pattern` to search at.
 * @param {String} flags Flags used by the pattern.
 * @returns {Boolean} Whether the next nonignorable token is a quantifier.
 */


function isQuantifierNext(pattern, pos, flags) {
  var inlineCommentPattern = '\\(\\?#[^)]*\\)';
  var lineCommentPattern = '#[^#\\n]*';
  var quantifierPattern = '[?*+]|{\\d+(?:,\\d*)?}';
  return nativ.test.call(flags.indexOf('x') !== -1 ? // Ignore any leading whitespace, line comments, and inline comments
  /^(?:\s|#[^#\n]*|\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/ : // Ignore any leading inline comments
  /^(?:\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/, pattern.slice(pos));
}
/**
 * Determines whether a value is of the specified type, by resolving its internal [[Class]].
 *
 * @private
 * @param {*} value Object to check.
 * @param {String} type Type to check for, in TitleCase.
 * @returns {Boolean} Whether the object matches the type.
 */


function isType(value, type) {
  return toString.call(value) === "[object ".concat(type, "]");
}
/**
 * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.
 *
 * @private
 * @param {String} str
 * @returns {String}
 */


function pad4(str) {
  while (str.length < 4) {
    str = "0".concat(str);
  }

  return str;
}
/**
 * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads
 * the flag preparation logic from the `XRegExp` constructor.
 *
 * @private
 * @param {String} pattern Regex pattern, possibly with a leading mode modifier.
 * @param {String} flags Any combination of flags.
 * @returns {Object} Object with properties `pattern` and `flags`.
 */


function prepareFlags(pattern, flags) {
  // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags
  if (clipDuplicates(flags) !== flags) {
    throw new SyntaxError("Invalid duplicate regex flag ".concat(flags));
  } // Strip and apply a leading mode modifier with any combination of flags except g or y


  pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, function ($0, $1) {
    if (nativ.test.call(/[gy]/, $1)) {
      throw new SyntaxError("Cannot use flag g or y in mode modifier ".concat($0));
    } // Allow duplicate flags within the mode modifier


    flags = clipDuplicates(flags + $1);
    return '';
  }); // Throw on unknown native or nonnative flags

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = flags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var flag = _step.value;

      if (!registeredFlags[flag]) {
        throw new SyntaxError("Unknown regex flag ".concat(flag));
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return {
    pattern: pattern,
    flags: flags
  };
}
/**
 * Prepares an options object from the given value.
 *
 * @private
 * @param {String|Object} value Value to convert to an options object.
 * @returns {Object} Options object.
 */


function prepareOptions(value) {
  var options = {};

  if (isType(value, 'String')) {
    XRegExp.forEach(value, /[^\s,]+/, function (match) {
      options[match] = true;
    });
    return options;
  }

  return value;
}
/**
 * Registers a flag so it doesn't throw an 'unknown flag' error.
 *
 * @private
 * @param {String} flag Single-character flag to register.
 */


function registerFlag(flag) {
  if (!/^[\w$]$/.test(flag)) {
    throw new Error('Flag must be a single character A-Za-z0-9_$');
  }

  registeredFlags[flag] = true;
}
/**
 * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified
 * position, until a match is found.
 *
 * @private
 * @param {String} pattern Original pattern from which an XRegExp object is being built.
 * @param {String} flags Flags being used to construct the regex.
 * @param {Number} pos Position to search for tokens within `pattern`.
 * @param {Number} scope Regex scope to apply: 'default' or 'class'.
 * @param {Object} context Context object to use for token handler functions.
 * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.
 */


function runTokens(pattern, flags, pos, scope, context) {
  var i = tokens.length;
  var leadChar = pattern[pos];
  var result = null;
  var match;
  var t; // Run in reverse insertion order

  while (i--) {
    t = tokens[i];

    if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && !(flags.indexOf(t.flag) !== -1)) {
      continue;
    }

    match = XRegExp.exec(pattern, t.regex, pos, 'sticky');

    if (match) {
      result = {
        matchLength: match[0].length,
        output: t.handler.call(context, match, scope, flags),
        reparse: t.reparse
      }; // Finished with token tests

      break;
    }
  }

  return result;
}
/**
 * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to
 * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if
 * the Unicode Base addon is not available, since flag A is registered by that addon.
 *
 * @private
 * @param {Boolean} on `true` to enable; `false` to disable.
 */


function setAstral(on) {
  features.astral = on;
}
/**
 * Adds named capture groups to the `groups` property of match arrays. See here for details:
 * https://github.com/tc39/proposal-regexp-named-groups
 *
 * @private
 * @param {Boolean} on `true` to enable; `false` to disable.
 */


function setNamespacing(on) {
  features.namespacing = on;
}
/**
 * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow
 * the ES5 abstract operation `ToObject`.
 *
 * @private
 * @param {*} value Object to check and return.
 * @returns {*} The provided object.
 */


function toObject(value) {
  // null or undefined
  if (value == null) {
    throw new TypeError('Cannot convert null or undefined to object');
  }

  return value;
} // ==--------------------------==
// Constructor
// ==--------------------------==

/**
 * Creates an extended regular expression object for matching text with a pattern. Differs from a
 * native regular expression in that additional syntax and flags are supported. The returned object
 * is in fact a native `RegExp` and works with all native methods.
 *
 * @class XRegExp
 * @constructor
 * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.
 * @param {String} [flags] Any combination of flags.
 *   Native flags:
 *     - `g` - global
 *     - `i` - ignore case
 *     - `m` - multiline anchors
 *     - `u` - unicode (ES6)
 *     - `y` - sticky (Firefox 3+, ES6)
 *   Additional XRegExp flags:
 *     - `n` - explicit capture
 *     - `s` - dot matches all (aka singleline)
 *     - `x` - free-spacing and line comments (aka extended)
 *     - `A` - astral (requires the Unicode Base addon)
 *   Flags cannot be provided when constructing one `RegExp` from another.
 * @returns {RegExp} Extended regular expression object.
 * @example
 *
 * // With named capture and flag x
 * XRegExp(`(?<year>  [0-9]{4} ) -?  # year
 *          (?<month> [0-9]{2} ) -?  # month
 *          (?<day>   [0-9]{2} )     # day`, 'x');
 *
 * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)
 * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and
 * // have fresh `lastIndex` properties (set to zero).
 * XRegExp(/regex/);
 */


function XRegExp(pattern, flags) {
  if (XRegExp.isRegExp(pattern)) {
    if (flags !== undefined) {
      throw new TypeError('Cannot supply flags when copying a RegExp');
    }

    return copyRegex(pattern);
  } // Copy the argument behavior of `RegExp`


  pattern = pattern === undefined ? '' : String(pattern);
  flags = flags === undefined ? '' : String(flags);

  if (XRegExp.isInstalled('astral') && !(flags.indexOf('A') !== -1)) {
    // This causes an error to be thrown if the Unicode Base addon is not available
    flags += 'A';
  }

  if (!patternCache[pattern]) {
    patternCache[pattern] = {};
  }

  if (!patternCache[pattern][flags]) {
    var context = {
      hasNamedCapture: false,
      captureNames: []
    };
    var scope = defaultScope;
    var output = '';
    var pos = 0;
    var result; // Check for flag-related errors, and strip/apply flags in a leading mode modifier

    var applied = prepareFlags(pattern, flags);
    var appliedPattern = applied.pattern;
    var appliedFlags = applied.flags; // Use XRegExp's tokens to translate the pattern to a native regex pattern.
    // `appliedPattern.length` may change on each iteration if tokens use `reparse`

    while (pos < appliedPattern.length) {
      do {
        // Check for custom tokens at the current position
        result = runTokens(appliedPattern, appliedFlags, pos, scope, context); // If the matched token used the `reparse` option, splice its output into the
        // pattern before running tokens again at the same position

        if (result && result.reparse) {
          appliedPattern = appliedPattern.slice(0, pos) + result.output + appliedPattern.slice(pos + result.matchLength);
        }
      } while (result && result.reparse);

      if (result) {
        output += result.output;
        pos += result.matchLength || 1;
      } else {
        // Get the native token at the current position
        var _XRegExp$exec = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky'),
            _XRegExp$exec2 = _slicedToArray(_XRegExp$exec, 1),
            token = _XRegExp$exec2[0];

        output += token;
        pos += token.length;

        if (token === '[' && scope === defaultScope) {
          scope = classScope;
        } else if (token === ']' && scope === classScope) {
          scope = defaultScope;
        }
      }
    }

    patternCache[pattern][flags] = {
      // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty
      // groups are sometimes inserted during regex transpilation in order to keep tokens
      // separated. However, more than one empty group in a row is never needed.
      pattern: nativ.replace.call(output, /(?:\(\?:\))+/g, '(?:)'),
      // Strip all but native flags
      flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),
      // `context.captureNames` has an item for each capturing group, even if unnamed
      captures: context.hasNamedCapture ? context.captureNames : null
    };
  }

  var generated = patternCache[pattern][flags];
  return augment(new RegExp(generated.pattern, generated.flags), generated.captures, pattern, flags);
} // Add `RegExp.prototype` to the prototype chain


XRegExp.prototype = /(?:)/; // ==--------------------------==
// Public properties
// ==--------------------------==

/**
 * The XRegExp version number as a string containing three dot-separated parts. For example,
 * '2.0.0-beta-3'.
 *
 * @static
 * @memberOf XRegExp
 * @type String
 */

XRegExp.version = '4.2.0'; // ==--------------------------==
// Public methods
// ==--------------------------==
// Intentionally undocumented; used in tests and addons

XRegExp._clipDuplicates = clipDuplicates;
XRegExp._hasNativeFlag = hasNativeFlag;
XRegExp._dec = dec;
XRegExp._hex = hex;
XRegExp._pad4 = pad4;
/**
 * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to
 * create XRegExp addons. If more than one token can match the same string, the last added wins.
 *
 * @memberOf XRegExp
 * @param {RegExp} regex Regex object that matches the new token.
 * @param {Function} handler Function that returns a new pattern string (using native regex syntax)
 *   to replace the matched token within all future XRegExp regexes. Has access to persistent
 *   properties of the regex being built, through `this`. Invoked with three arguments:
 *   - The match array, with named backreference properties.
 *   - The regex scope where the match was found: 'default' or 'class'.
 *   - The flags used by the regex, including any flags in a leading mode modifier.
 *   The handler function becomes part of the XRegExp construction process, so be careful not to
 *   construct XRegExps within the function or you will trigger infinite recursion.
 * @param {Object} [options] Options object with optional properties:
 *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.
 *   - `flag` {String} Single-character flag that triggers the token. This also registers the
 *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.
 *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are
 *     not required to trigger the token. This registers the flags, to prevent XRegExp from
 *     throwing an 'unknown flag' error when any of the flags are used.
 *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as
 *     final, and instead be reparseable by other tokens (including the current token). Allows
 *     token chaining or deferring.
 *   - `leadChar` {String} Single character that occurs at the beginning of any successful match
 *     of the token (not always applicable). This doesn't change the behavior of the token unless
 *     you provide an erroneous value. However, providing it can increase the token's performance
 *     since the token can be skipped at any positions where this character doesn't appear.
 * @example
 *
 * // Basic usage: Add \a for the ALERT control code
 * XRegExp.addToken(
 *   /\\a/,
 *   () => '\\x07',
 *   {scope: 'all'}
 * );
 * XRegExp('\\a[\\a-\\n]+').test('\x07\n\x07'); // -> true
 *
 * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.
 * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of
 * // character classes only)
 * XRegExp.addToken(
 *   /([?*+]|{\d+(?:,\d*)?})(\??)/,
 *   (match) => `${match[1]}${match[2] ? '' : '?'}`,
 *   {flag: 'U'}
 * );
 * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'
 * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'
 */

XRegExp.addToken = function (regex, handler, options) {
  options = options || {};
  var _options = options,
      optionalFlags = _options.optionalFlags;

  if (options.flag) {
    registerFlag(options.flag);
  }

  if (optionalFlags) {
    optionalFlags = nativ.split.call(optionalFlags, '');
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = optionalFlags[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var flag = _step2.value;
        registerFlag(flag);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  } // Add to the private list of syntax tokens


  tokens.push({
    regex: copyRegex(regex, {
      addG: true,
      addY: hasNativeY,
      isInternalOnly: true
    }),
    handler: handler,
    scope: options.scope || defaultScope,
    flag: options.flag,
    reparse: options.reparse,
    leadChar: options.leadChar
  }); // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags
  // might now produce different results

  XRegExp.cache.flush('patterns');
};
/**
 * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with
 * the same pattern and flag combination, the cached copy of the regex is returned.
 *
 * @memberOf XRegExp
 * @param {String} pattern Regex pattern string.
 * @param {String} [flags] Any combination of XRegExp flags.
 * @returns {RegExp} Cached XRegExp object.
 * @example
 *
 * while (match = XRegExp.cache('.', 'gs').exec(str)) {
 *   // The regex is compiled once only
 * }
 */


XRegExp.cache = function (pattern, flags) {
  if (!regexCache[pattern]) {
    regexCache[pattern] = {};
  }

  return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));
}; // Intentionally undocumented; used in tests


XRegExp.cache.flush = function (cacheName) {
  if (cacheName === 'patterns') {
    // Flush the pattern cache used by the `XRegExp` constructor
    patternCache = {};
  } else {
    // Flush the regex cache populated by `XRegExp.cache`
    regexCache = {};
  }
};
/**
 * Escapes any regular expression metacharacters, for use when matching literal strings. The result
 * can safely be used at any point within a regex that uses any flags.
 *
 * @memberOf XRegExp
 * @param {String} str String to escape.
 * @returns {String} String with regex metacharacters escaped.
 * @example
 *
 * XRegExp.escape('Escaped? <.>');
 * // -> 'Escaped\?\ <\.>'
 */


XRegExp.escape = function (str) {
  return nativ.replace.call(toObject(str), /[-\[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
};
/**
 * Executes a regex search in a specified string. Returns a match array or `null`. If the provided
 * regex uses named capture, named backreference properties are included on the match array.
 * Optional `pos` and `sticky` arguments specify the search start position, and whether the match
 * must start at the specified position only. The `lastIndex` property of the provided regex is not
 * used, but is updated for compatibility. Also fixes browser bugs compared to the native
 * `RegExp.prototype.exec` and can be used reliably cross-browser.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {Number} [pos=0] Zero-based index at which to start the search.
 * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
 *   only. The string `'sticky'` is accepted as an alternative to `true`.
 * @returns {Array} Match array with named backreference properties, or `null`.
 * @example
 *
 * // Basic use, with named backreference
 * let match = XRegExp.exec('U+2620', XRegExp('U\\+(?<hex>[0-9A-F]{4})'));
 * match.hex; // -> '2620'
 *
 * // With pos and sticky, in a loop
 * let pos = 2, result = [], match;
 * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\d)>/, pos, 'sticky')) {
 *   result.push(match[1]);
 *   pos = match.index + match[0].length;
 * }
 * // result -> ['2', '3', '4']
 */


XRegExp.exec = function (str, regex, pos, sticky) {
  var cacheKey = 'g';
  var addY = false;
  var fakeY = false;
  var match;
  addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);

  if (addY) {
    cacheKey += 'y';
  } else if (sticky) {
    // Simulate sticky matching by appending an empty capture to the original regex. The
    // resulting regex will succeed no matter what at the current index (set with `lastIndex`),
    // and will not search the rest of the subject string. We'll know that the original regex
    // has failed if that last capture is `''` rather than `undefined` (i.e., if that last
    // capture participated in the match).
    fakeY = true;
    cacheKey += 'FakeY';
  }

  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.match`/`replace`

  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
    addG: true,
    addY: addY,
    source: fakeY ? "".concat(regex.source, "|()") : undefined,
    removeY: sticky === false,
    isInternalOnly: true
  }));
  pos = pos || 0;
  r2.lastIndex = pos; // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.

  match = fixed.exec.call(r2, str); // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means
  // the original regexp failed (see above).

  if (fakeY && match && match.pop() === '') {
    match = null;
  }

  if (regex.global) {
    regex.lastIndex = match ? r2.lastIndex : 0;
  }

  return match;
};
/**
 * Executes a provided function once per regex match. Searches always start at the beginning of the
 * string and continue until the end, regardless of the state of the regex's `global` property and
 * initial `lastIndex`.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {Function} callback Function to execute for each match. Invoked with four arguments:
 *   - The match array, with named backreference properties.
 *   - The zero-based match index.
 *   - The string being traversed.
 *   - The regex object being used to traverse the string.
 * @example
 *
 * // Extracts every other digit from a string
 * const evens = [];
 * XRegExp.forEach('1a2345', /\d/, (match, i) => {
 *   if (i % 2) evens.push(+match[0]);
 * });
 * // evens -> [2, 4]
 */


XRegExp.forEach = function (str, regex, callback) {
  var pos = 0;
  var i = -1;
  var match;

  while (match = XRegExp.exec(str, regex, pos)) {
    // Because `regex` is provided to `callback`, the function could use the deprecated/
    // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`
    // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,
    // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of
    // regexes, mutating the regex will not have any effect on the iteration or matched strings,
    // which is a nice side effect that brings extra safety.
    callback(match, ++i, str, regex);
    pos = match.index + (match[0].length || 1);
  }
};
/**
 * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with
 * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native
 * regexes are not recompiled using XRegExp syntax.
 *
 * @memberOf XRegExp
 * @param {RegExp} regex Regex to globalize.
 * @returns {RegExp} Copy of the provided regex with flag `g` added.
 * @example
 *
 * const globalCopy = XRegExp.globalize(/regex/);
 * globalCopy.global; // -> true
 */


XRegExp.globalize = function (regex) {
  return copyRegex(regex, {
    addG: true
  });
};
/**
 * Installs optional features according to the specified options. Can be undone using
 * `XRegExp.uninstall`.
 *
 * @memberOf XRegExp
 * @param {Object|String} options Options object or string.
 * @example
 *
 * // With an options object
 * XRegExp.install({
 *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)
 *   astral: true,
 *
 *   // Adds named capture groups to the `groups` property of matches
 *   namespacing: true
 * });
 *
 * // With an options string
 * XRegExp.install('astral namespacing');
 */


XRegExp.install = function (options) {
  options = prepareOptions(options);

  if (!features.astral && options.astral) {
    setAstral(true);
  }

  if (!features.namespacing && options.namespacing) {
    setNamespacing(true);
  }
};
/**
 * Checks whether an individual optional feature is installed.
 *
 * @memberOf XRegExp
 * @param {String} feature Name of the feature to check. One of:
 *   - `astral`
 *   - `namespacing`
 * @returns {Boolean} Whether the feature is installed.
 * @example
 *
 * XRegExp.isInstalled('astral');
 */


XRegExp.isInstalled = function (feature) {
  return !!features[feature];
};
/**
 * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes
 * created in another frame, when `instanceof` and `constructor` checks would fail.
 *
 * @memberOf XRegExp
 * @param {*} value Object to check.
 * @returns {Boolean} Whether the object is a `RegExp` object.
 * @example
 *
 * XRegExp.isRegExp('string'); // -> false
 * XRegExp.isRegExp(/regex/i); // -> true
 * XRegExp.isRegExp(RegExp('^', 'm')); // -> true
 * XRegExp.isRegExp(XRegExp('(?s).')); // -> true
 */


XRegExp.isRegExp = function (value) {
  return toString.call(value) === '[object RegExp]';
}; // isType(value, 'RegExp');

/**
 * Returns the first matched string, or in global mode, an array containing all matched strings.
 * This is essentially a more convenient re-implementation of `String.prototype.match` that gives
 * the result types you actually want (string instead of `exec`-style array in match-first mode,
 * and an empty array instead of `null` when no matches are found in match-all mode). It also lets
 * you override flag g and ignore `lastIndex`, and fixes browser bugs.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to
 *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,
 *   `scope` is 'all'.
 * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all
 *   mode: Array of all matched strings, or an empty array.
 * @example
 *
 * // Match first
 * XRegExp.match('abc', /\w/); // -> 'a'
 * XRegExp.match('abc', /\w/g, 'one'); // -> 'a'
 * XRegExp.match('abc', /x/g, 'one'); // -> null
 *
 * // Match all
 * XRegExp.match('abc', /\w/g); // -> ['a', 'b', 'c']
 * XRegExp.match('abc', /\w/, 'all'); // -> ['a', 'b', 'c']
 * XRegExp.match('abc', /x/, 'all'); // -> []
 */


XRegExp.match = function (str, regex, scope) {
  var global = regex.global && scope !== 'one' || scope === 'all';
  var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';
  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`replace`

  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
    addG: !!global,
    removeG: scope === 'one',
    isInternalOnly: true
  }));
  var result = nativ.match.call(toObject(str), r2);

  if (regex.global) {
    regex.lastIndex = scope === 'one' && result ? // Can't use `r2.lastIndex` since `r2` is nonglobal in this case
    result.index + result[0].length : 0;
  }

  return global ? result || [] : result && result[0];
};
/**
 * Retrieves the matches from searching a string using a chain of regexes that successively search
 * within previous matches. The provided `chain` array can contain regexes and or objects with
 * `regex` and `backref` properties. When a backreference is specified, the named or numbered
 * backreference is passed forward to the next regex or returned.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {Array} chain Regexes that each search for matches within preceding results.
 * @returns {Array} Matches by the last regex in the chain, or an empty array.
 * @example
 *
 * // Basic usage; matches numbers within <b> tags
 * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [
 *   XRegExp('(?is)<b>.*?</b>'),
 *   /\d+/
 * ]);
 * // -> ['2', '4', '56']
 *
 * // Passing forward and returning specific backreferences
 * html = '<a href="http://xregexp.com/api/">XRegExp</a>\
 *         <a href="http://www.google.com/">Google</a>';
 * XRegExp.matchChain(html, [
 *   {regex: /<a href="([^"]+)">/i, backref: 1},
 *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}
 * ]);
 * // -> ['xregexp.com', 'www.google.com']
 */


XRegExp.matchChain = function (str, chain) {
  return function recurseChain(values, level) {
    var item = chain[level].regex ? chain[level] : {
      regex: chain[level]
    };
    var matches = [];

    function addMatch(match) {
      if (item.backref) {
        var ERR_UNDEFINED_GROUP = "Backreference to undefined group: ".concat(item.backref);
        var isNamedBackref = isNaN(item.backref);

        if (isNamedBackref && XRegExp.isInstalled('namespacing')) {
          // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`
          if (!(item.backref in match.groups)) {
            throw new ReferenceError(ERR_UNDEFINED_GROUP);
          }
        } else if (!match.hasOwnProperty(item.backref)) {
          throw new ReferenceError(ERR_UNDEFINED_GROUP);
        }

        var backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ? match.groups[item.backref] : match[item.backref];
        matches.push(backrefValue || '');
      } else {
        matches.push(match[0]);
      }
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = values[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var value = _step3.value;
        XRegExp.forEach(value, item.regex, addMatch);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);
  }([str], 0);
};
/**
 * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string
 * or regex, and the replacement can be a string or a function to be called for each match. To
 * perform a global search and replace, use the optional `scope` argument or include flag g if using
 * a regex. Replacement strings can use `${n}` or `$<n>` for named and numbered backreferences.
 * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser
 * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp|String} search Search pattern to be replaced.
 * @param {String|Function} replacement Replacement string or a function invoked to create it.
 *   Replacement strings can include special replacement syntax:
 *     - $$ - Inserts a literal $ character.
 *     - $&, $0 - Inserts the matched substring.
 *     - $` - Inserts the string that precedes the matched substring (left context).
 *     - $' - Inserts the string that follows the matched substring (right context).
 *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts
 *       backreference n/nn.
 *     - ${n}, $<n> - Where n is a name or any number of digits that reference an existent capturing
 *       group, inserts backreference n.
 *   Replacement functions are invoked with three or more arguments:
 *     - The matched substring (corresponds to $& above). Named backreferences are accessible as
 *       properties of this first argument.
 *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).
 *     - The zero-based index of the match within the total search string.
 *     - The total string being searched.
 * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not
 *   explicitly specified and using a regex with flag g, `scope` is 'all'.
 * @returns {String} New string with one or all matches replaced.
 * @example
 *
 * // Regex search, using named backreferences in replacement string
 * const name = XRegExp('(?<first>\\w+) (?<last>\\w+)');
 * XRegExp.replace('John Smith', name, '$<last>, $<first>');
 * // -> 'Smith, John'
 *
 * // Regex search, using named backreferences in replacement function
 * XRegExp.replace('John Smith', name, (match) => `${match.last}, ${match.first}`);
 * // -> 'Smith, John'
 *
 * // String search, with replace-all
 * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');
 * // -> 'XRegExp builds XRegExps'
 */


XRegExp.replace = function (str, search, replacement, scope) {
  var isRegex = XRegExp.isRegExp(search);
  var global = search.global && scope !== 'one' || scope === 'all';
  var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';
  var s2 = search;

  if (isRegex) {
    search[REGEX_DATA] = search[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s
    // `lastIndex` isn't updated *during* replacement iterations

    s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {
      addG: !!global,
      removeG: scope === 'one',
      isInternalOnly: true
    }));
  } else if (global) {
    s2 = new RegExp(XRegExp.escape(String(search)), 'g');
  } // Fixed `replace` required for named backreferences, etc.


  var result = fixed.replace.call(toObject(str), s2, replacement);

  if (isRegex && search.global) {
    // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
    search.lastIndex = 0;
  }

  return result;
};
/**
 * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an
 * array of replacement details. Later replacements operate on the output of earlier replacements.
 * Replacement details are accepted as an array with a regex or string to search for, the
 * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp
 * replacement text syntax, which supports named backreference properties via `${name}` or
 * `$<name>`.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {Array} replacements Array of replacement detail arrays.
 * @returns {String} New string with all replacements.
 * @example
 *
 * str = XRegExp.replaceEach(str, [
 *   [XRegExp('(?<name>a)'), 'z${name}'],
 *   [/b/gi, 'y'],
 *   [/c/g, 'x', 'one'], // scope 'one' overrides /g
 *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g
 *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings
 *   [/f/g, ($0) => $0.toUpperCase()]
 * ]);
 */


XRegExp.replaceEach = function (str, replacements) {
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = replacements[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var r = _step4.value;
      str = XRegExp.replace(str, r[0], r[1], r[2]);
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  return str;
};
/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 *
 * @memberOf XRegExp
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * XRegExp.split('a b c', ' ');
 * // -> ['a', 'b', 'c']
 *
 * // With limit
 * XRegExp.split('a b c', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * XRegExp.split('..word1..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', '..']
 */


XRegExp.split = function (str, separator, limit) {
  return fixed.split.call(toObject(str), separator, limit);
};
/**
 * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and
 * `sticky` arguments specify the search start position, and whether the match must start at the
 * specified position only. The `lastIndex` property of the provided regex is not used, but is
 * updated for compatibility. Also fixes browser bugs compared to the native
 * `RegExp.prototype.test` and can be used reliably cross-browser.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {Number} [pos=0] Zero-based index at which to start the search.
 * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
 *   only. The string `'sticky'` is accepted as an alternative to `true`.
 * @returns {Boolean} Whether the regex matched the provided value.
 * @example
 *
 * // Basic use
 * XRegExp.test('abc', /c/); // -> true
 *
 * // With pos and sticky
 * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false
 * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true
 */
// Do this the easy way :-)


XRegExp.test = function (str, regex, pos, sticky) {
  return !!XRegExp.exec(str, regex, pos, sticky);
};
/**
 * Uninstalls optional features according to the specified options. All optional features start out
 * uninstalled, so this is used to undo the actions of `XRegExp.install`.
 *
 * @memberOf XRegExp
 * @param {Object|String} options Options object or string.
 * @example
 *
 * // With an options object
 * XRegExp.uninstall({
 *   // Disables support for astral code points in Unicode addons
 *   astral: true,
 *
 *   // Don't add named capture groups to the `groups` property of matches
 *   namespacing: true
 * });
 *
 * // With an options string
 * XRegExp.uninstall('astral namespacing');
 */


XRegExp.uninstall = function (options) {
  options = prepareOptions(options);

  if (features.astral && options.astral) {
    setAstral(false);
  }

  if (features.namespacing && options.namespacing) {
    setNamespacing(false);
  }
};
/**
 * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as
 * regex objects or strings. Metacharacters are escaped in patterns provided as strings.
 * Backreferences in provided regex objects are automatically renumbered to work correctly within
 * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the
 * `flags` argument.
 *
 * @memberOf XRegExp
 * @param {Array} patterns Regexes and strings to combine.
 * @param {String} [flags] Any combination of XRegExp flags.
 * @param {Object} [options] Options object with optional properties:
 *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.
 * @returns {RegExp} Union of the provided regexes and strings.
 * @example
 *
 * XRegExp.union(['a+b*c', /(dogs)\1/, /(cats)\1/], 'i');
 * // -> /a\+b\*c|(dogs)\1|(cats)\2/i
 *
 * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});
 * // -> /manbearpig/i
 */


XRegExp.union = function (patterns, flags, options) {
  options = options || {};
  var conjunction = options.conjunction || 'or';
  var numCaptures = 0;
  var numPriorCaptures;
  var captureNames;

  function rewrite(match, paren, backref) {
    var name = captureNames[numCaptures - numPriorCaptures]; // Capturing group

    if (paren) {
      ++numCaptures; // If the current capture has a name, preserve the name

      if (name) {
        return "(?<".concat(name, ">");
      } // Backreference

    } else if (backref) {
      // Rewrite the backreference
      return "\\".concat(+backref + numPriorCaptures);
    }

    return match;
  }

  if (!(isType(patterns, 'Array') && patterns.length)) {
    throw new TypeError('Must provide a nonempty array of patterns to merge');
  }

  var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
  var output = [];
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = patterns[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var pattern = _step5.value;

      if (XRegExp.isRegExp(pattern)) {
        numPriorCaptures = numCaptures;
        captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are
        // independently valid; helps keep this simple. Named captures are put back

        output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));
      } else {
        output.push(XRegExp.escape(pattern));
      }
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
        _iterator5.return();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  var separator = conjunction === 'none' ? '' : '|';
  return XRegExp(output.join(separator), flags);
}; // ==--------------------------==
// Fixed/extended native methods
// ==--------------------------==

/**
 * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
 * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.
 *
 * @memberOf RegExp
 * @param {String} str String to search.
 * @returns {Array} Match array with named backreference properties, or `null`.
 */


fixed.exec = function (str) {
  var origLastIndex = this.lastIndex;
  var match = nativ.exec.apply(this, arguments);

  if (match) {
    // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing
    // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9
    // in standards mode follows the spec.
    if (!correctExecNpcg && match.length > 1 && match.indexOf('') !== -1) {
      var r2 = copyRegex(this, {
        removeG: true,
        isInternalOnly: true
      }); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed
      // matching due to characters outside the match

      nativ.replace.call(String(str).slice(match.index), r2, function () {
        var len = arguments.length; // Skip index 0 and the last 2

        for (var i = 1; i < len - 2; ++i) {
          if ((i < 0 || arguments.length <= i ? undefined : arguments[i]) === undefined) {
            match[i] = undefined;
          }
        }
      });
    } // Attach named capture properties


    var groupsObject = match;

    if (XRegExp.isInstalled('namespacing')) {
      // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec
      match.groups = Object.create(null);
      groupsObject = match.groups;
    }

    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
      // Skip index 0
      for (var i = 1; i < match.length; ++i) {
        var name = this[REGEX_DATA].captureNames[i - 1];

        if (name) {
          groupsObject[name] = match[i];
        }
      }
    } // Fix browsers that increment `lastIndex` after zero-length matches


    if (this.global && !match[0].length && this.lastIndex > match.index) {
      this.lastIndex = match.index;
    }
  }

  if (!this.global) {
    // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
    this.lastIndex = origLastIndex;
  }

  return match;
};
/**
 * Fixes browser bugs in the native `RegExp.prototype.test`.
 *
 * @memberOf RegExp
 * @param {String} str String to search.
 * @returns {Boolean} Whether the regex matched the provided value.
 */


fixed.test = function (str) {
  // Do this the easy way :-)
  return !!fixed.exec.call(this, str);
};
/**
 * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
 * bugs in the native `String.prototype.match`.
 *
 * @memberOf String
 * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.
 * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,
 *   the result of calling `regex.exec(this)`.
 */


fixed.match = function (regex) {
  if (!XRegExp.isRegExp(regex)) {
    // Use the native `RegExp` rather than `XRegExp`
    regex = new RegExp(regex);
  } else if (regex.global) {
    var result = nativ.match.apply(this, arguments); // Fixes IE bug

    regex.lastIndex = 0;
    return result;
  }

  return fixed.exec.call(regex, toObject(this));
};
/**
 * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement
 * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also
 * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex
 * search value, and the value of a replacement regex's `lastIndex` property during replacement
 * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third
 * (`flags`) argument. Use via `XRegExp.replace`.
 *
 * @memberOf String
 * @param {RegExp|String} search Search pattern to be replaced.
 * @param {String|Function} replacement Replacement string or a function invoked to create it.
 * @returns {String} New string with one or all matches replaced.
 */


fixed.replace = function (search, replacement) {
  var isRegex = XRegExp.isRegExp(search);
  var origLastIndex;
  var captureNames;
  var result;

  if (isRegex) {
    if (search[REGEX_DATA]) {
      captureNames = search[REGEX_DATA].captureNames;
    } // Only needed if `search` is nonglobal


    origLastIndex = search.lastIndex;
  } else {
    search += ''; // Type-convert
  } // Don't use `typeof`; some older browsers return 'function' for regex objects


  if (isType(replacement, 'Function')) {
    // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement
    // functions isn't type-converted to a string
    result = nativ.replace.call(String(this), search, function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (captureNames) {
        var groupsObject;

        if (XRegExp.isInstalled('namespacing')) {
          // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec
          groupsObject = Object.create(null);
          args.push(groupsObject);
        } else {
          // Change the `args[0]` string primitive to a `String` object that can store
          // properties. This really does need to use `String` as a constructor
          args[0] = new String(args[0]);
          groupsObject = args[0];
        } // Store named backreferences


        for (var i = 0; i < captureNames.length; ++i) {
          if (captureNames[i]) {
            groupsObject[captureNames[i]] = args[i + 1];
          }
        }
      } // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox, Safari
      // bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)


      if (isRegex && search.global) {
        search.lastIndex = args[args.length - 2] + args[0].length;
      } // ES6 specs the context for replacement functions as `undefined`


      return replacement.apply(void 0, args);
    });
  } else {
    // Ensure that the last value of `args` will be a string when given nonstring `this`,
    // while still throwing on null or undefined context
    result = nativ.replace.call(this == null ? this : String(this), search, function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return nativ.replace.call(String(replacement), replacementToken, replacer);

      function replacer($0, bracketed, angled, dollarToken) {
        bracketed = bracketed || angled; // Named or numbered backreference with curly or angled braces

        if (bracketed) {
          // XRegExp behavior for `${n}` or `$<n>`:
          // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the
          //    entire match. Any number of leading zeros may be used.
          // 2. Backreference to named capture `n`, if it exists and is not an integer
          //    overridden by numbered capture. In practice, this does not overlap with
          //    numbered capture since XRegExp does not allow named capture to use a bare
          //    integer as the name.
          // 3. If the name or number does not refer to an existing capturing group, it's
          //    an error.
          var n = +bracketed; // Type-convert; drop leading zeros

          if (n <= args.length - 3) {
            return args[n] || '';
          } // Groups with the same name is an error, else would need `lastIndexOf`


          n = captureNames ? captureNames.indexOf(bracketed) : -1;

          if (n < 0) {
            throw new SyntaxError("Backreference to undefined group ".concat($0));
          }

          return args[n + 1] || '';
        } // Else, special variable or numbered backreference without curly braces


        if (dollarToken === '$') {
          // $$
          return '$';
        }

        if (dollarToken === '&' || +dollarToken === 0) {
          // $&, $0 (not followed by 1-9), $00
          return args[0];
        }

        if (dollarToken === '`') {
          // $` (left context)
          return args[args.length - 1].slice(0, args[args.length - 2]);
        }

        if (dollarToken === "'") {
          // $' (right context)
          return args[args.length - 1].slice(args[args.length - 2] + args[0].length);
        } // Else, numbered backreference without braces


        dollarToken = +dollarToken; // Type-convert; drop leading zero
        // XRegExp behavior for `$n` and `$nn`:
        // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.
        // - `$1` is an error if no capturing groups.
        // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`
        //   instead.
        // - `$01` is `$1` if at least one capturing group, else it's an error.
        // - `$0` (not followed by 1-9) and `$00` are the entire match.
        // Native behavior, for comparison:
        // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.
        // - `$1` is a literal `$1` if no capturing groups.
        // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.
        // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.
        // - `$0` is a literal `$0`.

        if (!isNaN(dollarToken)) {
          if (dollarToken > args.length - 3) {
            throw new SyntaxError("Backreference to undefined group ".concat($0));
          }

          return args[dollarToken] || '';
        } // `$` followed by an unsupported char is an error, unlike native JS


        throw new SyntaxError("Invalid token ".concat($0));
      }
    });
  }

  if (isRegex) {
    if (search.global) {
      // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
      search.lastIndex = 0;
    } else {
      // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
      search.lastIndex = origLastIndex;
    }
  }

  return result;
};
/**
 * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.
 *
 * @memberOf String
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 */


fixed.split = function (separator, limit) {
  if (!XRegExp.isRegExp(separator)) {
    // Browsers handle nonregex split correctly, so use the faster native method
    return nativ.split.apply(this, arguments);
  }

  var str = String(this);
  var output = [];
  var origLastIndex = separator.lastIndex;
  var lastLastIndex = 0;
  var lastLength; // Values for `limit`, per the spec:
  // If undefined: pow(2,32) - 1
  // If 0, Infinity, or NaN: 0
  // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);
  // If negative number: pow(2,32) - floor(abs(limit))
  // If other: Type-convert, then use the above rules
  // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless
  // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+

  limit = (limit === undefined ? -1 : limit) >>> 0;
  XRegExp.forEach(str, separator, function (match) {
    // This condition is not the same as `if (match[0].length)`
    if (match.index + match[0].length > lastLastIndex) {
      output.push(str.slice(lastLastIndex, match.index));

      if (match.length > 1 && match.index < str.length) {
        Array.prototype.push.apply(output, match.slice(1));
      }

      lastLength = match[0].length;
      lastLastIndex = match.index + lastLength;
    }
  });

  if (lastLastIndex === str.length) {
    if (!nativ.test.call(separator, '') || lastLength) {
      output.push('');
    }
  } else {
    output.push(str.slice(lastLastIndex));
  }

  separator.lastIndex = origLastIndex;
  return output.length > limit ? output.slice(0, limit) : output;
}; // ==--------------------------==
// Built-in syntax/flag tokens
// ==--------------------------==

/*
 * Letter escapes that natively match literal characters: `\a`, `\A`, etc. These should be
 * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser
 * consistency and to reserve their syntax, but lets them be superseded by addons.
 */


XRegExp.addToken(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/, function (match, scope) {
  // \B is allowed in default scope only
  if (match[1] === 'B' && scope === defaultScope) {
    return match[0];
  }

  throw new SyntaxError("Invalid escape ".concat(match[0]));
}, {
  scope: 'all',
  leadChar: '\\'
});
/*
 * Unicode code point escape with curly braces: `\u{N..}`. `N..` is any one or more digit
 * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag
 * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to
 * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior
 * if you follow a `\u{N..}` token that references a code point above U+FFFF with a quantifier, or
 * if you use the same in a character class.
 */

XRegExp.addToken(/\\u{([\dA-Fa-f]+)}/, function (match, scope, flags) {
  var code = dec(match[1]);

  if (code > 0x10FFFF) {
    throw new SyntaxError("Invalid Unicode code point ".concat(match[0]));
  }

  if (code <= 0xFFFF) {
    // Converting to \uNNNN avoids needing to escape the literal character and keep it
    // separate from preceding tokens
    return "\\u".concat(pad4(hex(code)));
  } // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling


  if (hasNativeU && flags.indexOf('u') !== -1) {
    return match[0];
  }

  throw new SyntaxError('Cannot use Unicode code point above \\u{FFFF} without flag u');
}, {
  scope: 'all',
  leadChar: '\\'
});
/*
 * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.
 * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because
 * character class endings can't be determined.
 */

XRegExp.addToken(/\[(\^?)\]/, // For cross-browser compatibility with ES3, convert [] to \b\B and [^] to [\s\S].
// (?!) should work like \b\B, but is unreliable in some versions of Firefox

/* eslint-disable no-confusing-arrow */
function (match) {
  return match[1] ? '[\\s\\S]' : '\\b\\B';
},
/* eslint-enable no-confusing-arrow */
{
  leadChar: '['
});
/*
 * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in
 * free-spacing mode (flag x).
 */

XRegExp.addToken(/\(\?#[^)]*\)/, getContextualTokenSeparator, {
  leadChar: '('
});
/*
 * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.
 */

XRegExp.addToken(/\s+|#[^\n]*\n?/, getContextualTokenSeparator, {
  flag: 'x'
});
/*
 * Dot, in dotall mode (aka singleline mode, flag s) only.
 */

XRegExp.addToken(/\./, function () {
  return '[\\s\\S]';
}, {
  flag: 's',
  leadChar: '.'
});
/*
 * Named backreference: `\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,
 * and $ only. Also allows numbered backreferences as `\k<n>`.
 */

XRegExp.addToken(/\\k<([\w$]+)>/, function (match) {
  // Groups with the same name is an error, else would need `lastIndexOf`
  var index = isNaN(match[1]) ? this.captureNames.indexOf(match[1]) + 1 : +match[1];
  var endIndex = match.index + match[0].length;

  if (!index || index > this.captureNames.length) {
    throw new SyntaxError("Backreference to undefined group ".concat(match[0]));
  } // Keep backreferences separate from subsequent literal numbers. This avoids e.g.
  // inadvertedly changing `(?<n>)\k<n>1` to `()\11`.


  return "\\".concat(index).concat(endIndex === match.input.length || isNaN(match.input[endIndex]) ? '' : '(?:)');
}, {
  leadChar: '\\'
});
/*
 * Numbered backreference or octal, plus any following digits: `\0`, `\11`, etc. Octals except `\0`
 * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches
 * are returned unaltered. IE < 9 doesn't support backreferences above `\99` in regex syntax.
 */

XRegExp.addToken(/\\(\d+)/, function (match, scope) {
  if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {
    throw new SyntaxError("Cannot use octal escape or backreference to undefined group ".concat(match[0]));
  }

  return match[0];
}, {
  scope: 'all',
  leadChar: '\\'
});
/*
 * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the
 * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style
 * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively
 * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to
 * Python-style named capture as octals.
 */

XRegExp.addToken(/\(\?P?<([\w$]+)>/, function (match) {
  // Disallow bare integers as names because named backreferences are added to match arrays
  // and therefore numeric properties may lead to incorrect lookups
  if (!isNaN(match[1])) {
    throw new SyntaxError("Cannot use integer as capture name ".concat(match[0]));
  }

  if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {
    throw new SyntaxError("Cannot use reserved word as capture name ".concat(match[0]));
  }

  if (this.captureNames.indexOf(match[1]) !== -1) {
    throw new SyntaxError("Cannot use same name for multiple groups ".concat(match[0]));
  }

  this.captureNames.push(match[1]);
  this.hasNamedCapture = true;
  return '(';
}, {
  leadChar: '('
});
/*
 * Capturing group; match the opening parenthesis only. Required for support of named capturing
 * groups. Also adds explicit capture mode (flag n).
 */

XRegExp.addToken(/\((?!\?)/, function (match, scope, flags) {
  if (flags.indexOf('n') !== -1) {
    return '(?:';
  }

  this.captureNames.push(null);
  return '(';
}, {
  optionalFlags: 'n',
  leadChar: '('
});
var _default = XRegExp;
exports.default = _default;
module.exports = exports["default"];
},{}],186:[function(require,module,exports){
module.exports = [
    {
        'name': 'InAdlam',
        'astral': '\uD83A[\uDD00-\uDD5F]'
    },
    {
        'name': 'InAegean_Numbers',
        'astral': '\uD800[\uDD00-\uDD3F]'
    },
    {
        'name': 'InAhom',
        'astral': '\uD805[\uDF00-\uDF3F]'
    },
    {
        'name': 'InAlchemical_Symbols',
        'astral': '\uD83D[\uDF00-\uDF7F]'
    },
    {
        'name': 'InAlphabetic_Presentation_Forms',
        'bmp': '\uFB00-\uFB4F'
    },
    {
        'name': 'InAnatolian_Hieroglyphs',
        'astral': '\uD811[\uDC00-\uDE7F]'
    },
    {
        'name': 'InAncient_Greek_Musical_Notation',
        'astral': '\uD834[\uDE00-\uDE4F]'
    },
    {
        'name': 'InAncient_Greek_Numbers',
        'astral': '\uD800[\uDD40-\uDD8F]'
    },
    {
        'name': 'InAncient_Symbols',
        'astral': '\uD800[\uDD90-\uDDCF]'
    },
    {
        'name': 'InArabic',
        'bmp': '\u0600-\u06FF'
    },
    {
        'name': 'InArabic_Extended_A',
        'bmp': '\u08A0-\u08FF'
    },
    {
        'name': 'InArabic_Mathematical_Alphabetic_Symbols',
        'astral': '\uD83B[\uDE00-\uDEFF]'
    },
    {
        'name': 'InArabic_Presentation_Forms_A',
        'bmp': '\uFB50-\uFDFF'
    },
    {
        'name': 'InArabic_Presentation_Forms_B',
        'bmp': '\uFE70-\uFEFF'
    },
    {
        'name': 'InArabic_Supplement',
        'bmp': '\u0750-\u077F'
    },
    {
        'name': 'InArmenian',
        'bmp': '\u0530-\u058F'
    },
    {
        'name': 'InArrows',
        'bmp': '\u2190-\u21FF'
    },
    {
        'name': 'InAvestan',
        'astral': '\uD802[\uDF00-\uDF3F]'
    },
    {
        'name': 'InBalinese',
        'bmp': '\u1B00-\u1B7F'
    },
    {
        'name': 'InBamum',
        'bmp': '\uA6A0-\uA6FF'
    },
    {
        'name': 'InBamum_Supplement',
        'astral': '\uD81A[\uDC00-\uDE3F]'
    },
    {
        'name': 'InBasic_Latin',
        'bmp': '\0-\x7F'
    },
    {
        'name': 'InBassa_Vah',
        'astral': '\uD81A[\uDED0-\uDEFF]'
    },
    {
        'name': 'InBatak',
        'bmp': '\u1BC0-\u1BFF'
    },
    {
        'name': 'InBengali',
        'bmp': '\u0980-\u09FF'
    },
    {
        'name': 'InBhaiksuki',
        'astral': '\uD807[\uDC00-\uDC6F]'
    },
    {
        'name': 'InBlock_Elements',
        'bmp': '\u2580-\u259F'
    },
    {
        'name': 'InBopomofo',
        'bmp': '\u3100-\u312F'
    },
    {
        'name': 'InBopomofo_Extended',
        'bmp': '\u31A0-\u31BF'
    },
    {
        'name': 'InBox_Drawing',
        'bmp': '\u2500-\u257F'
    },
    {
        'name': 'InBrahmi',
        'astral': '\uD804[\uDC00-\uDC7F]'
    },
    {
        'name': 'InBraille_Patterns',
        'bmp': '\u2800-\u28FF'
    },
    {
        'name': 'InBuginese',
        'bmp': '\u1A00-\u1A1F'
    },
    {
        'name': 'InBuhid',
        'bmp': '\u1740-\u175F'
    },
    {
        'name': 'InByzantine_Musical_Symbols',
        'astral': '\uD834[\uDC00-\uDCFF]'
    },
    {
        'name': 'InCJK_Compatibility',
        'bmp': '\u3300-\u33FF'
    },
    {
        'name': 'InCJK_Compatibility_Forms',
        'bmp': '\uFE30-\uFE4F'
    },
    {
        'name': 'InCJK_Compatibility_Ideographs',
        'bmp': '\uF900-\uFAFF'
    },
    {
        'name': 'InCJK_Compatibility_Ideographs_Supplement',
        'astral': '\uD87E[\uDC00-\uDE1F]'
    },
    {
        'name': 'InCJK_Radicals_Supplement',
        'bmp': '\u2E80-\u2EFF'
    },
    {
        'name': 'InCJK_Strokes',
        'bmp': '\u31C0-\u31EF'
    },
    {
        'name': 'InCJK_Symbols_And_Punctuation',
        'bmp': '\u3000-\u303F'
    },
    {
        'name': 'InCJK_Unified_Ideographs',
        'bmp': '\u4E00-\u9FFF'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_A',
        'bmp': '\u3400-\u4DBF'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_B',
        'astral': '[\uD840-\uD868][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF]'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_C',
        'astral': '\uD869[\uDF00-\uDFFF]|[\uD86A-\uD86C][\uDC00-\uDFFF]|\uD86D[\uDC00-\uDF3F]'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_D',
        'astral': '\uD86D[\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1F]'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_E',
        'astral': '\uD86E[\uDC20-\uDFFF]|[\uD86F-\uD872][\uDC00-\uDFFF]|\uD873[\uDC00-\uDEAF]'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_F',
        'astral': '\uD873[\uDEB0-\uDFFF]|[\uD874-\uD879][\uDC00-\uDFFF]|\uD87A[\uDC00-\uDFEF]'
    },
    {
        'name': 'InCarian',
        'astral': '\uD800[\uDEA0-\uDEDF]'
    },
    {
        'name': 'InCaucasian_Albanian',
        'astral': '\uD801[\uDD30-\uDD6F]'
    },
    {
        'name': 'InChakma',
        'astral': '\uD804[\uDD00-\uDD4F]'
    },
    {
        'name': 'InCham',
        'bmp': '\uAA00-\uAA5F'
    },
    {
        'name': 'InCherokee',
        'bmp': '\u13A0-\u13FF'
    },
    {
        'name': 'InCherokee_Supplement',
        'bmp': '\uAB70-\uABBF'
    },
    {
        'name': 'InChess_Symbols',
        'astral': '\uD83E[\uDE00-\uDE6F]'
    },
    {
        'name': 'InCombining_Diacritical_Marks',
        'bmp': '\u0300-\u036F'
    },
    {
        'name': 'InCombining_Diacritical_Marks_Extended',
        'bmp': '\u1AB0-\u1AFF'
    },
    {
        'name': 'InCombining_Diacritical_Marks_For_Symbols',
        'bmp': '\u20D0-\u20FF'
    },
    {
        'name': 'InCombining_Diacritical_Marks_Supplement',
        'bmp': '\u1DC0-\u1DFF'
    },
    {
        'name': 'InCombining_Half_Marks',
        'bmp': '\uFE20-\uFE2F'
    },
    {
        'name': 'InCommon_Indic_Number_Forms',
        'bmp': '\uA830-\uA83F'
    },
    {
        'name': 'InControl_Pictures',
        'bmp': '\u2400-\u243F'
    },
    {
        'name': 'InCoptic',
        'bmp': '\u2C80-\u2CFF'
    },
    {
        'name': 'InCoptic_Epact_Numbers',
        'astral': '\uD800[\uDEE0-\uDEFF]'
    },
    {
        'name': 'InCounting_Rod_Numerals',
        'astral': '\uD834[\uDF60-\uDF7F]'
    },
    {
        'name': 'InCuneiform',
        'astral': '\uD808[\uDC00-\uDFFF]'
    },
    {
        'name': 'InCuneiform_Numbers_And_Punctuation',
        'astral': '\uD809[\uDC00-\uDC7F]'
    },
    {
        'name': 'InCurrency_Symbols',
        'bmp': '\u20A0-\u20CF'
    },
    {
        'name': 'InCypriot_Syllabary',
        'astral': '\uD802[\uDC00-\uDC3F]'
    },
    {
        'name': 'InCyrillic',
        'bmp': '\u0400-\u04FF'
    },
    {
        'name': 'InCyrillic_Extended_A',
        'bmp': '\u2DE0-\u2DFF'
    },
    {
        'name': 'InCyrillic_Extended_B',
        'bmp': '\uA640-\uA69F'
    },
    {
        'name': 'InCyrillic_Extended_C',
        'bmp': '\u1C80-\u1C8F'
    },
    {
        'name': 'InCyrillic_Supplement',
        'bmp': '\u0500-\u052F'
    },
    {
        'name': 'InDeseret',
        'astral': '\uD801[\uDC00-\uDC4F]'
    },
    {
        'name': 'InDevanagari',
        'bmp': '\u0900-\u097F'
    },
    {
        'name': 'InDevanagari_Extended',
        'bmp': '\uA8E0-\uA8FF'
    },
    {
        'name': 'InDingbats',
        'bmp': '\u2700-\u27BF'
    },
    {
        'name': 'InDogra',
        'astral': '\uD806[\uDC00-\uDC4F]'
    },
    {
        'name': 'InDomino_Tiles',
        'astral': '\uD83C[\uDC30-\uDC9F]'
    },
    {
        'name': 'InDuployan',
        'astral': '\uD82F[\uDC00-\uDC9F]'
    },
    {
        'name': 'InEarly_Dynastic_Cuneiform',
        'astral': '\uD809[\uDC80-\uDD4F]'
    },
    {
        'name': 'InEgyptian_Hieroglyphs',
        'astral': '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F]'
    },
    {
        'name': 'InElbasan',
        'astral': '\uD801[\uDD00-\uDD2F]'
    },
    {
        'name': 'InEmoticons',
        'astral': '\uD83D[\uDE00-\uDE4F]'
    },
    {
        'name': 'InEnclosed_Alphanumeric_Supplement',
        'astral': '\uD83C[\uDD00-\uDDFF]'
    },
    {
        'name': 'InEnclosed_Alphanumerics',
        'bmp': '\u2460-\u24FF'
    },
    {
        'name': 'InEnclosed_CJK_Letters_And_Months',
        'bmp': '\u3200-\u32FF'
    },
    {
        'name': 'InEnclosed_Ideographic_Supplement',
        'astral': '\uD83C[\uDE00-\uDEFF]'
    },
    {
        'name': 'InEthiopic',
        'bmp': '\u1200-\u137F'
    },
    {
        'name': 'InEthiopic_Extended',
        'bmp': '\u2D80-\u2DDF'
    },
    {
        'name': 'InEthiopic_Extended_A',
        'bmp': '\uAB00-\uAB2F'
    },
    {
        'name': 'InEthiopic_Supplement',
        'bmp': '\u1380-\u139F'
    },
    {
        'name': 'InGeneral_Punctuation',
        'bmp': '\u2000-\u206F'
    },
    {
        'name': 'InGeometric_Shapes',
        'bmp': '\u25A0-\u25FF'
    },
    {
        'name': 'InGeometric_Shapes_Extended',
        'astral': '\uD83D[\uDF80-\uDFFF]'
    },
    {
        'name': 'InGeorgian',
        'bmp': '\u10A0-\u10FF'
    },
    {
        'name': 'InGeorgian_Extended',
        'bmp': '\u1C90-\u1CBF'
    },
    {
        'name': 'InGeorgian_Supplement',
        'bmp': '\u2D00-\u2D2F'
    },
    {
        'name': 'InGlagolitic',
        'bmp': '\u2C00-\u2C5F'
    },
    {
        'name': 'InGlagolitic_Supplement',
        'astral': '\uD838[\uDC00-\uDC2F]'
    },
    {
        'name': 'InGothic',
        'astral': '\uD800[\uDF30-\uDF4F]'
    },
    {
        'name': 'InGrantha',
        'astral': '\uD804[\uDF00-\uDF7F]'
    },
    {
        'name': 'InGreek_And_Coptic',
        'bmp': '\u0370-\u03FF'
    },
    {
        'name': 'InGreek_Extended',
        'bmp': '\u1F00-\u1FFF'
    },
    {
        'name': 'InGujarati',
        'bmp': '\u0A80-\u0AFF'
    },
    {
        'name': 'InGunjala_Gondi',
        'astral': '\uD807[\uDD60-\uDDAF]'
    },
    {
        'name': 'InGurmukhi',
        'bmp': '\u0A00-\u0A7F'
    },
    {
        'name': 'InHalfwidth_And_Fullwidth_Forms',
        'bmp': '\uFF00-\uFFEF'
    },
    {
        'name': 'InHangul_Compatibility_Jamo',
        'bmp': '\u3130-\u318F'
    },
    {
        'name': 'InHangul_Jamo',
        'bmp': '\u1100-\u11FF'
    },
    {
        'name': 'InHangul_Jamo_Extended_A',
        'bmp': '\uA960-\uA97F'
    },
    {
        'name': 'InHangul_Jamo_Extended_B',
        'bmp': '\uD7B0-\uD7FF'
    },
    {
        'name': 'InHangul_Syllables',
        'bmp': '\uAC00-\uD7AF'
    },
    {
        'name': 'InHanifi_Rohingya',
        'astral': '\uD803[\uDD00-\uDD3F]'
    },
    {
        'name': 'InHanunoo',
        'bmp': '\u1720-\u173F'
    },
    {
        'name': 'InHatran',
        'astral': '\uD802[\uDCE0-\uDCFF]'
    },
    {
        'name': 'InHebrew',
        'bmp': '\u0590-\u05FF'
    },
    {
        'name': 'InHigh_Private_Use_Surrogates',
        'bmp': '\uDB80-\uDBFF'
    },
    {
        'name': 'InHigh_Surrogates',
        'bmp': '\uD800-\uDB7F'
    },
    {
        'name': 'InHiragana',
        'bmp': '\u3040-\u309F'
    },
    {
        'name': 'InIPA_Extensions',
        'bmp': '\u0250-\u02AF'
    },
    {
        'name': 'InIdeographic_Description_Characters',
        'bmp': '\u2FF0-\u2FFF'
    },
    {
        'name': 'InIdeographic_Symbols_And_Punctuation',
        'astral': '\uD81B[\uDFE0-\uDFFF]'
    },
    {
        'name': 'InImperial_Aramaic',
        'astral': '\uD802[\uDC40-\uDC5F]'
    },
    {
        'name': 'InIndic_Siyaq_Numbers',
        'astral': '\uD83B[\uDC70-\uDCBF]'
    },
    {
        'name': 'InInscriptional_Pahlavi',
        'astral': '\uD802[\uDF60-\uDF7F]'
    },
    {
        'name': 'InInscriptional_Parthian',
        'astral': '\uD802[\uDF40-\uDF5F]'
    },
    {
        'name': 'InJavanese',
        'bmp': '\uA980-\uA9DF'
    },
    {
        'name': 'InKaithi',
        'astral': '\uD804[\uDC80-\uDCCF]'
    },
    {
        'name': 'InKana_Extended_A',
        'astral': '\uD82C[\uDD00-\uDD2F]'
    },
    {
        'name': 'InKana_Supplement',
        'astral': '\uD82C[\uDC00-\uDCFF]'
    },
    {
        'name': 'InKanbun',
        'bmp': '\u3190-\u319F'
    },
    {
        'name': 'InKangxi_Radicals',
        'bmp': '\u2F00-\u2FDF'
    },
    {
        'name': 'InKannada',
        'bmp': '\u0C80-\u0CFF'
    },
    {
        'name': 'InKatakana',
        'bmp': '\u30A0-\u30FF'
    },
    {
        'name': 'InKatakana_Phonetic_Extensions',
        'bmp': '\u31F0-\u31FF'
    },
    {
        'name': 'InKayah_Li',
        'bmp': '\uA900-\uA92F'
    },
    {
        'name': 'InKharoshthi',
        'astral': '\uD802[\uDE00-\uDE5F]'
    },
    {
        'name': 'InKhmer',
        'bmp': '\u1780-\u17FF'
    },
    {
        'name': 'InKhmer_Symbols',
        'bmp': '\u19E0-\u19FF'
    },
    {
        'name': 'InKhojki',
        'astral': '\uD804[\uDE00-\uDE4F]'
    },
    {
        'name': 'InKhudawadi',
        'astral': '\uD804[\uDEB0-\uDEFF]'
    },
    {
        'name': 'InLao',
        'bmp': '\u0E80-\u0EFF'
    },
    {
        'name': 'InLatin_1_Supplement',
        'bmp': '\x80-\xFF'
    },
    {
        'name': 'InLatin_Extended_A',
        'bmp': '\u0100-\u017F'
    },
    {
        'name': 'InLatin_Extended_Additional',
        'bmp': '\u1E00-\u1EFF'
    },
    {
        'name': 'InLatin_Extended_B',
        'bmp': '\u0180-\u024F'
    },
    {
        'name': 'InLatin_Extended_C',
        'bmp': '\u2C60-\u2C7F'
    },
    {
        'name': 'InLatin_Extended_D',
        'bmp': '\uA720-\uA7FF'
    },
    {
        'name': 'InLatin_Extended_E',
        'bmp': '\uAB30-\uAB6F'
    },
    {
        'name': 'InLepcha',
        'bmp': '\u1C00-\u1C4F'
    },
    {
        'name': 'InLetterlike_Symbols',
        'bmp': '\u2100-\u214F'
    },
    {
        'name': 'InLimbu',
        'bmp': '\u1900-\u194F'
    },
    {
        'name': 'InLinear_A',
        'astral': '\uD801[\uDE00-\uDF7F]'
    },
    {
        'name': 'InLinear_B_Ideograms',
        'astral': '\uD800[\uDC80-\uDCFF]'
    },
    {
        'name': 'InLinear_B_Syllabary',
        'astral': '\uD800[\uDC00-\uDC7F]'
    },
    {
        'name': 'InLisu',
        'bmp': '\uA4D0-\uA4FF'
    },
    {
        'name': 'InLow_Surrogates',
        'bmp': '\uDC00-\uDFFF'
    },
    {
        'name': 'InLycian',
        'astral': '\uD800[\uDE80-\uDE9F]'
    },
    {
        'name': 'InLydian',
        'astral': '\uD802[\uDD20-\uDD3F]'
    },
    {
        'name': 'InMahajani',
        'astral': '\uD804[\uDD50-\uDD7F]'
    },
    {
        'name': 'InMahjong_Tiles',
        'astral': '\uD83C[\uDC00-\uDC2F]'
    },
    {
        'name': 'InMakasar',
        'astral': '\uD807[\uDEE0-\uDEFF]'
    },
    {
        'name': 'InMalayalam',
        'bmp': '\u0D00-\u0D7F'
    },
    {
        'name': 'InMandaic',
        'bmp': '\u0840-\u085F'
    },
    {
        'name': 'InManichaean',
        'astral': '\uD802[\uDEC0-\uDEFF]'
    },
    {
        'name': 'InMarchen',
        'astral': '\uD807[\uDC70-\uDCBF]'
    },
    {
        'name': 'InMasaram_Gondi',
        'astral': '\uD807[\uDD00-\uDD5F]'
    },
    {
        'name': 'InMathematical_Alphanumeric_Symbols',
        'astral': '\uD835[\uDC00-\uDFFF]'
    },
    {
        'name': 'InMathematical_Operators',
        'bmp': '\u2200-\u22FF'
    },
    {
        'name': 'InMayan_Numerals',
        'astral': '\uD834[\uDEE0-\uDEFF]'
    },
    {
        'name': 'InMedefaidrin',
        'astral': '\uD81B[\uDE40-\uDE9F]'
    },
    {
        'name': 'InMeetei_Mayek',
        'bmp': '\uABC0-\uABFF'
    },
    {
        'name': 'InMeetei_Mayek_Extensions',
        'bmp': '\uAAE0-\uAAFF'
    },
    {
        'name': 'InMende_Kikakui',
        'astral': '\uD83A[\uDC00-\uDCDF]'
    },
    {
        'name': 'InMeroitic_Cursive',
        'astral': '\uD802[\uDDA0-\uDDFF]'
    },
    {
        'name': 'InMeroitic_Hieroglyphs',
        'astral': '\uD802[\uDD80-\uDD9F]'
    },
    {
        'name': 'InMiao',
        'astral': '\uD81B[\uDF00-\uDF9F]'
    },
    {
        'name': 'InMiscellaneous_Mathematical_Symbols_A',
        'bmp': '\u27C0-\u27EF'
    },
    {
        'name': 'InMiscellaneous_Mathematical_Symbols_B',
        'bmp': '\u2980-\u29FF'
    },
    {
        'name': 'InMiscellaneous_Symbols',
        'bmp': '\u2600-\u26FF'
    },
    {
        'name': 'InMiscellaneous_Symbols_And_Arrows',
        'bmp': '\u2B00-\u2BFF'
    },
    {
        'name': 'InMiscellaneous_Symbols_And_Pictographs',
        'astral': '\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF]'
    },
    {
        'name': 'InMiscellaneous_Technical',
        'bmp': '\u2300-\u23FF'
    },
    {
        'name': 'InModi',
        'astral': '\uD805[\uDE00-\uDE5F]'
    },
    {
        'name': 'InModifier_Tone_Letters',
        'bmp': '\uA700-\uA71F'
    },
    {
        'name': 'InMongolian',
        'bmp': '\u1800-\u18AF'
    },
    {
        'name': 'InMongolian_Supplement',
        'astral': '\uD805[\uDE60-\uDE7F]'
    },
    {
        'name': 'InMro',
        'astral': '\uD81A[\uDE40-\uDE6F]'
    },
    {
        'name': 'InMultani',
        'astral': '\uD804[\uDE80-\uDEAF]'
    },
    {
        'name': 'InMusical_Symbols',
        'astral': '\uD834[\uDD00-\uDDFF]'
    },
    {
        'name': 'InMyanmar',
        'bmp': '\u1000-\u109F'
    },
    {
        'name': 'InMyanmar_Extended_A',
        'bmp': '\uAA60-\uAA7F'
    },
    {
        'name': 'InMyanmar_Extended_B',
        'bmp': '\uA9E0-\uA9FF'
    },
    {
        'name': 'InNKo',
        'bmp': '\u07C0-\u07FF'
    },
    {
        'name': 'InNabataean',
        'astral': '\uD802[\uDC80-\uDCAF]'
    },
    {
        'name': 'InNew_Tai_Lue',
        'bmp': '\u1980-\u19DF'
    },
    {
        'name': 'InNewa',
        'astral': '\uD805[\uDC00-\uDC7F]'
    },
    {
        'name': 'InNumber_Forms',
        'bmp': '\u2150-\u218F'
    },
    {
        'name': 'InNushu',
        'astral': '\uD82C[\uDD70-\uDEFF]'
    },
    {
        'name': 'InOgham',
        'bmp': '\u1680-\u169F'
    },
    {
        'name': 'InOl_Chiki',
        'bmp': '\u1C50-\u1C7F'
    },
    {
        'name': 'InOld_Hungarian',
        'astral': '\uD803[\uDC80-\uDCFF]'
    },
    {
        'name': 'InOld_Italic',
        'astral': '\uD800[\uDF00-\uDF2F]'
    },
    {
        'name': 'InOld_North_Arabian',
        'astral': '\uD802[\uDE80-\uDE9F]'
    },
    {
        'name': 'InOld_Permic',
        'astral': '\uD800[\uDF50-\uDF7F]'
    },
    {
        'name': 'InOld_Persian',
        'astral': '\uD800[\uDFA0-\uDFDF]'
    },
    {
        'name': 'InOld_Sogdian',
        'astral': '\uD803[\uDF00-\uDF2F]'
    },
    {
        'name': 'InOld_South_Arabian',
        'astral': '\uD802[\uDE60-\uDE7F]'
    },
    {
        'name': 'InOld_Turkic',
        'astral': '\uD803[\uDC00-\uDC4F]'
    },
    {
        'name': 'InOptical_Character_Recognition',
        'bmp': '\u2440-\u245F'
    },
    {
        'name': 'InOriya',
        'bmp': '\u0B00-\u0B7F'
    },
    {
        'name': 'InOrnamental_Dingbats',
        'astral': '\uD83D[\uDE50-\uDE7F]'
    },
    {
        'name': 'InOsage',
        'astral': '\uD801[\uDCB0-\uDCFF]'
    },
    {
        'name': 'InOsmanya',
        'astral': '\uD801[\uDC80-\uDCAF]'
    },
    {
        'name': 'InPahawh_Hmong',
        'astral': '\uD81A[\uDF00-\uDF8F]'
    },
    {
        'name': 'InPalmyrene',
        'astral': '\uD802[\uDC60-\uDC7F]'
    },
    {
        'name': 'InPau_Cin_Hau',
        'astral': '\uD806[\uDEC0-\uDEFF]'
    },
    {
        'name': 'InPhags_Pa',
        'bmp': '\uA840-\uA87F'
    },
    {
        'name': 'InPhaistos_Disc',
        'astral': '\uD800[\uDDD0-\uDDFF]'
    },
    {
        'name': 'InPhoenician',
        'astral': '\uD802[\uDD00-\uDD1F]'
    },
    {
        'name': 'InPhonetic_Extensions',
        'bmp': '\u1D00-\u1D7F'
    },
    {
        'name': 'InPhonetic_Extensions_Supplement',
        'bmp': '\u1D80-\u1DBF'
    },
    {
        'name': 'InPlaying_Cards',
        'astral': '\uD83C[\uDCA0-\uDCFF]'
    },
    {
        'name': 'InPrivate_Use_Area',
        'bmp': '\uE000-\uF8FF'
    },
    {
        'name': 'InPsalter_Pahlavi',
        'astral': '\uD802[\uDF80-\uDFAF]'
    },
    {
        'name': 'InRejang',
        'bmp': '\uA930-\uA95F'
    },
    {
        'name': 'InRumi_Numeral_Symbols',
        'astral': '\uD803[\uDE60-\uDE7F]'
    },
    {
        'name': 'InRunic',
        'bmp': '\u16A0-\u16FF'
    },
    {
        'name': 'InSamaritan',
        'bmp': '\u0800-\u083F'
    },
    {
        'name': 'InSaurashtra',
        'bmp': '\uA880-\uA8DF'
    },
    {
        'name': 'InSharada',
        'astral': '\uD804[\uDD80-\uDDDF]'
    },
    {
        'name': 'InShavian',
        'astral': '\uD801[\uDC50-\uDC7F]'
    },
    {
        'name': 'InShorthand_Format_Controls',
        'astral': '\uD82F[\uDCA0-\uDCAF]'
    },
    {
        'name': 'InSiddham',
        'astral': '\uD805[\uDD80-\uDDFF]'
    },
    {
        'name': 'InSinhala',
        'bmp': '\u0D80-\u0DFF'
    },
    {
        'name': 'InSinhala_Archaic_Numbers',
        'astral': '\uD804[\uDDE0-\uDDFF]'
    },
    {
        'name': 'InSmall_Form_Variants',
        'bmp': '\uFE50-\uFE6F'
    },
    {
        'name': 'InSogdian',
        'astral': '\uD803[\uDF30-\uDF6F]'
    },
    {
        'name': 'InSora_Sompeng',
        'astral': '\uD804[\uDCD0-\uDCFF]'
    },
    {
        'name': 'InSoyombo',
        'astral': '\uD806[\uDE50-\uDEAF]'
    },
    {
        'name': 'InSpacing_Modifier_Letters',
        'bmp': '\u02B0-\u02FF'
    },
    {
        'name': 'InSpecials',
        'bmp': '\uFFF0-\uFFFF'
    },
    {
        'name': 'InSundanese',
        'bmp': '\u1B80-\u1BBF'
    },
    {
        'name': 'InSundanese_Supplement',
        'bmp': '\u1CC0-\u1CCF'
    },
    {
        'name': 'InSuperscripts_And_Subscripts',
        'bmp': '\u2070-\u209F'
    },
    {
        'name': 'InSupplemental_Arrows_A',
        'bmp': '\u27F0-\u27FF'
    },
    {
        'name': 'InSupplemental_Arrows_B',
        'bmp': '\u2900-\u297F'
    },
    {
        'name': 'InSupplemental_Arrows_C',
        'astral': '\uD83E[\uDC00-\uDCFF]'
    },
    {
        'name': 'InSupplemental_Mathematical_Operators',
        'bmp': '\u2A00-\u2AFF'
    },
    {
        'name': 'InSupplemental_Punctuation',
        'bmp': '\u2E00-\u2E7F'
    },
    {
        'name': 'InSupplemental_Symbols_And_Pictographs',
        'astral': '\uD83E[\uDD00-\uDDFF]'
    },
    {
        'name': 'InSupplementary_Private_Use_Area_A',
        'astral': '[\uDB80-\uDBBF][\uDC00-\uDFFF]'
    },
    {
        'name': 'InSupplementary_Private_Use_Area_B',
        'astral': '[\uDBC0-\uDBFF][\uDC00-\uDFFF]'
    },
    {
        'name': 'InSutton_SignWriting',
        'astral': '\uD836[\uDC00-\uDEAF]'
    },
    {
        'name': 'InSyloti_Nagri',
        'bmp': '\uA800-\uA82F'
    },
    {
        'name': 'InSyriac',
        'bmp': '\u0700-\u074F'
    },
    {
        'name': 'InSyriac_Supplement',
        'bmp': '\u0860-\u086F'
    },
    {
        'name': 'InTagalog',
        'bmp': '\u1700-\u171F'
    },
    {
        'name': 'InTagbanwa',
        'bmp': '\u1760-\u177F'
    },
    {
        'name': 'InTags',
        'astral': '\uDB40[\uDC00-\uDC7F]'
    },
    {
        'name': 'InTai_Le',
        'bmp': '\u1950-\u197F'
    },
    {
        'name': 'InTai_Tham',
        'bmp': '\u1A20-\u1AAF'
    },
    {
        'name': 'InTai_Viet',
        'bmp': '\uAA80-\uAADF'
    },
    {
        'name': 'InTai_Xuan_Jing_Symbols',
        'astral': '\uD834[\uDF00-\uDF5F]'
    },
    {
        'name': 'InTakri',
        'astral': '\uD805[\uDE80-\uDECF]'
    },
    {
        'name': 'InTamil',
        'bmp': '\u0B80-\u0BFF'
    },
    {
        'name': 'InTangut',
        'astral': '[\uD81C-\uD821][\uDC00-\uDFFF]'
    },
    {
        'name': 'InTangut_Components',
        'astral': '\uD822[\uDC00-\uDEFF]'
    },
    {
        'name': 'InTelugu',
        'bmp': '\u0C00-\u0C7F'
    },
    {
        'name': 'InThaana',
        'bmp': '\u0780-\u07BF'
    },
    {
        'name': 'InThai',
        'bmp': '\u0E00-\u0E7F'
    },
    {
        'name': 'InTibetan',
        'bmp': '\u0F00-\u0FFF'
    },
    {
        'name': 'InTifinagh',
        'bmp': '\u2D30-\u2D7F'
    },
    {
        'name': 'InTirhuta',
        'astral': '\uD805[\uDC80-\uDCDF]'
    },
    {
        'name': 'InTransport_And_Map_Symbols',
        'astral': '\uD83D[\uDE80-\uDEFF]'
    },
    {
        'name': 'InUgaritic',
        'astral': '\uD800[\uDF80-\uDF9F]'
    },
    {
        'name': 'InUnified_Canadian_Aboriginal_Syllabics',
        'bmp': '\u1400-\u167F'
    },
    {
        'name': 'InUnified_Canadian_Aboriginal_Syllabics_Extended',
        'bmp': '\u18B0-\u18FF'
    },
    {
        'name': 'InVai',
        'bmp': '\uA500-\uA63F'
    },
    {
        'name': 'InVariation_Selectors',
        'bmp': '\uFE00-\uFE0F'
    },
    {
        'name': 'InVariation_Selectors_Supplement',
        'astral': '\uDB40[\uDD00-\uDDEF]'
    },
    {
        'name': 'InVedic_Extensions',
        'bmp': '\u1CD0-\u1CFF'
    },
    {
        'name': 'InVertical_Forms',
        'bmp': '\uFE10-\uFE1F'
    },
    {
        'name': 'InWarang_Citi',
        'astral': '\uD806[\uDCA0-\uDCFF]'
    },
    {
        'name': 'InYi_Radicals',
        'bmp': '\uA490-\uA4CF'
    },
    {
        'name': 'InYi_Syllables',
        'bmp': '\uA000-\uA48F'
    },
    {
        'name': 'InYijing_Hexagram_Symbols',
        'bmp': '\u4DC0-\u4DFF'
    },
    {
        'name': 'InZanabazar_Square',
        'astral': '\uD806[\uDE00-\uDE4F]'
    }
];

},{}],187:[function(require,module,exports){
module.exports = [
    {
        'name': 'C',
        'alias': 'Other',
        'isBmpLast': true,
        'bmp': '\0-\x1F\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08BE-\u08D2\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D04\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFA-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BC9\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E4F-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FF0-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7BA-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF',
        'astral': '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F-\uDEFF\uDF28-\uDF2F\uDF5A-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCBD\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD47-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5F-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD00-\uDDFF\uDE48-\uDE4F\uDE84\uDE85\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE2-\uDFFF]|\uD821[\uDFF2-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDD1F-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDE9-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED5-\uDEDF\uDEED-\uDEEF\uDEFA-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD0F\uDD3F\uDD71\uDD72\uDD77-\uDD79\uDD7B\uDDA3-\uDDAF\uDDBA-\uDDBF\uDDC3-\uDDCF\uDE00-\uDE5F\uDE6E-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]'
    },
    {
        'name': 'Cc',
        'alias': 'Control',
        'bmp': '\0-\x1F\x7F-\x9F'
    },
    {
        'name': 'Cf',
        'alias': 'Format',
        'bmp': '\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB',
        'astral': '\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]'
    },
    {
        'name': 'Cn',
        'alias': 'Unassigned',
        'bmp': '\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08BE-\u08D2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D04\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFA-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BC9\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E4F-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FF0-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7BA-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF',
        'astral': '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F-\uDEFF\uDF28-\uDF2F\uDF5A-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCC2-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD47-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5F-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD00-\uDDFF\uDE48-\uDE4F\uDE84\uDE85\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE2-\uDFFF]|\uD821[\uDFF2-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDD1F-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDE9-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED5-\uDEDF\uDEED-\uDEEF\uDEFA-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD0F\uDD3F\uDD71\uDD72\uDD77-\uDD79\uDD7B\uDDA3-\uDDAF\uDDBA-\uDDBF\uDDC3-\uDDCF\uDE00-\uDE5F\uDE6E-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]'
    },
    {
        'name': 'Co',
        'alias': 'Private_Use',
        'bmp': '\uE000-\uF8FF',
        'astral': '[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]'
    },
    {
        'name': 'Cs',
        'alias': 'Surrogate',
        'bmp': '\uD800-\uDFFF'
    },
    {
        'name': 'L',
        'alias': 'Letter',
        'bmp': 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7B9\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFF1]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]'
    },
    {
        'name': 'LC',
        'alias': 'Cased_Letter',
        'bmp': 'A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7B9\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A',
        'astral': '\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDD00-\uDD43]'
    },
    {
        'name': 'Ll',
        'alias': 'Lowercase_Letter',
        'bmp': 'a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
        'astral': '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
    },
    {
        'name': 'Lm',
        'alias': 'Modifier_Letter',
        'bmp': '\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F',
        'astral': '\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1]'
    },
    {
        'name': 'Lo',
        'alias': 'Other_Letter',
        'bmp': '\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFF1]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]'
    },
    {
        'name': 'Lt',
        'alias': 'Titlecase_Letter',
        'bmp': '\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC'
    },
    {
        'name': 'Lu',
        'alias': 'Uppercase_Letter',
        'bmp': 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uFF21-\uFF3A',
        'astral': '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]'
    },
    {
        'name': 'M',
        'alias': 'Mark',
        'bmp': '\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
        'astral': '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDF46-\uDF50]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
    },
    {
        'name': 'Mc',
        'alias': 'Spacing_Mark',
        'bmp': '\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF2\u1CF3\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BD-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC',
        'astral': '\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF7E]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]'
    },
    {
        'name': 'Me',
        'alias': 'Enclosing_Mark',
        'bmp': '\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672'
    },
    {
        'name': 'Mn',
        'alias': 'Nonspacing_Mark',
        'bmp': '\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
        'astral': '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
    },
    {
        'name': 'N',
        'alias': 'Number',
        'bmp': '0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
        'astral': '\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4]|\uD83C[\uDD00-\uDD0C]'
    },
    {
        'name': 'Nd',
        'alias': 'Decimal_Number',
        'bmp': '0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
        'astral': '\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDD50-\uDD59]'
    },
    {
        'name': 'Nl',
        'alias': 'Letter_Number',
        'bmp': '\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF',
        'astral': '\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]'
    },
    {
        'name': 'No',
        'alias': 'Other_Number',
        'bmp': '\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835',
        'astral': '\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4]|\uD83C[\uDD00-\uDD0C]'
    },
    {
        'name': 'P',
        'alias': 'Punctuation',
        'bmp': '!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65',
        'astral': '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
    },
    {
        'name': 'Pc',
        'alias': 'Connector_Punctuation',
        'bmp': '_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F'
    },
    {
        'name': 'Pd',
        'alias': 'Dash_Punctuation',
        'bmp': '\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D'
    },
    {
        'name': 'Pe',
        'alias': 'Close_Punctuation',
        'bmp': '\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63'
    },
    {
        'name': 'Pf',
        'alias': 'Final_Punctuation',
        'bmp': '\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21'
    },
    {
        'name': 'Pi',
        'alias': 'Initial_Punctuation',
        'bmp': '\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20'
    },
    {
        'name': 'Po',
        'alias': 'Other_Punctuation',
        'bmp': '!-#%-\'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166D\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4E\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65',
        'astral': '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
    },
    {
        'name': 'Ps',
        'alias': 'Open_Punctuation',
        'bmp': '\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62'
    },
    {
        'name': 'S',
        'alias': 'Symbol',
        'bmp': '\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B98-\u2BC8\u2BCA-\u2BFE\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD',
        'astral': '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83B[\uDCAC\uDCB0\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED4\uDEE0-\uDEEC\uDEF0-\uDEF9\uDF00-\uDF73\uDF80-\uDFD8]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD00-\uDD0B\uDD10-\uDD3E\uDD40-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF\uDE60-\uDE6D]'
    },
    {
        'name': 'Sc',
        'alias': 'Currency_Symbol',
        'bmp': '\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BF\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6',
        'astral': '\uD83B\uDCB0'
    },
    {
        'name': 'Sk',
        'alias': 'Modifier_Symbol',
        'bmp': '\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uFBB2-\uFBC1\uFF3E\uFF40\uFFE3',
        'astral': '\uD83C[\uDFFB-\uDFFF]'
    },
    {
        'name': 'Sm',
        'alias': 'Math_Symbol',
        'bmp': '\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC',
        'astral': '\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]'
    },
    {
        'name': 'So',
        'alias': 'Other_Symbol',
        'bmp': '\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B98-\u2BC8\u2BCA-\u2BFE\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFDFD\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD',
        'astral': '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83B\uDCAC|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED4\uDEE0-\uDEEC\uDEF0-\uDEF9\uDF00-\uDF73\uDF80-\uDFD8]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD00-\uDD0B\uDD10-\uDD3E\uDD40-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF\uDE60-\uDE6D]'
    },
    {
        'name': 'Z',
        'alias': 'Separator',
        'bmp': ' \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
    },
    {
        'name': 'Zl',
        'alias': 'Line_Separator',
        'bmp': '\u2028'
    },
    {
        'name': 'Zp',
        'alias': 'Paragraph_Separator',
        'bmp': '\u2029'
    },
    {
        'name': 'Zs',
        'alias': 'Space_Separator',
        'bmp': ' \xA0\u1680\u2000-\u200A\u202F\u205F\u3000'
    }
];

},{}],188:[function(require,module,exports){
module.exports = [
    {
        'name': 'ASCII',
        'bmp': '\0-\x7F'
    },
    {
        'name': 'Alphabetic',
        'bmp': 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u1062\u1065-\u1068\u106E-\u1086\u108E\u109C\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C35\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7B9\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA827\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A\uAA7E-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDF00-\uDF1C\uDF27\uDF30-\uDF45]|\uD804[\uDC00-\uDC45\uDC82-\uDCB8\uDCD0-\uDCE8\uDD00-\uDD32\uDD44-\uDD46\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDF00-\uDF1A\uDF1D-\uDF2A]|\uD806[\uDC00-\uDC38\uDCA0-\uDCDF\uDCFF\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE83\uDE86-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDEE0-\uDEF6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF36\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF44\uDF50-\uDF7E\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFF1]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]'
    },
    {
        'name': 'Any',
        'isBmpLast': true,
        'bmp': '\0-\uFFFF',
        'astral': '[\uD800-\uDBFF][\uDC00-\uDFFF]'
    },
    {
        'name': 'Default_Ignorable_Code_Point',
        'bmp': '\xAD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8',
        'astral': '\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]'
    },
    {
        'name': 'Lowercase',
        'bmp': 'a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
        'astral': '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
    },
    {
        'name': 'Noncharacter_Code_Point',
        'bmp': '\uFDD0-\uFDEF\uFFFE\uFFFF',
        'astral': '[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]'
    },
    {
        'name': 'Uppercase',
        'bmp': 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uFF21-\uFF3A',
        'astral': '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]'
    },
    {
        'name': 'White_Space',
        'bmp': '\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
    }
];

},{}],189:[function(require,module,exports){
module.exports = [
    {
        'name': 'Adlam',
        'astral': '\uD83A[\uDD00-\uDD4A\uDD50-\uDD59\uDD5E\uDD5F]'
    },
    {
        'name': 'Ahom',
        'astral': '\uD805[\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF3F]'
    },
    {
        'name': 'Anatolian_Hieroglyphs',
        'astral': '\uD811[\uDC00-\uDE46]'
    },
    {
        'name': 'Arabic',
        'bmp': '\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061C\u061E\u0620-\u063F\u0641-\u064A\u0656-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B4\u08B6-\u08BD\u08D3-\u08E1\u08E3-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC',
        'astral': '\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]'
    },
    {
        'name': 'Armenian',
        'bmp': '\u0531-\u0556\u0559-\u0588\u058A\u058D-\u058F\uFB13-\uFB17'
    },
    {
        'name': 'Avestan',
        'astral': '\uD802[\uDF00-\uDF35\uDF39-\uDF3F]'
    },
    {
        'name': 'Balinese',
        'bmp': '\u1B00-\u1B4B\u1B50-\u1B7C'
    },
    {
        'name': 'Bamum',
        'bmp': '\uA6A0-\uA6F7',
        'astral': '\uD81A[\uDC00-\uDE38]'
    },
    {
        'name': 'Bassa_Vah',
        'astral': '\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]'
    },
    {
        'name': 'Batak',
        'bmp': '\u1BC0-\u1BF3\u1BFC-\u1BFF'
    },
    {
        'name': 'Bengali',
        'bmp': '\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE'
    },
    {
        'name': 'Bhaiksuki',
        'astral': '\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]'
    },
    {
        'name': 'Bopomofo',
        'bmp': '\u02EA\u02EB\u3105-\u312F\u31A0-\u31BA'
    },
    {
        'name': 'Brahmi',
        'astral': '\uD804[\uDC00-\uDC4D\uDC52-\uDC6F\uDC7F]'
    },
    {
        'name': 'Braille',
        'bmp': '\u2800-\u28FF'
    },
    {
        'name': 'Buginese',
        'bmp': '\u1A00-\u1A1B\u1A1E\u1A1F'
    },
    {
        'name': 'Buhid',
        'bmp': '\u1740-\u1753'
    },
    {
        'name': 'Canadian_Aboriginal',
        'bmp': '\u1400-\u167F\u18B0-\u18F5'
    },
    {
        'name': 'Carian',
        'astral': '\uD800[\uDEA0-\uDED0]'
    },
    {
        'name': 'Caucasian_Albanian',
        'astral': '\uD801[\uDD30-\uDD63\uDD6F]'
    },
    {
        'name': 'Chakma',
        'astral': '\uD804[\uDD00-\uDD34\uDD36-\uDD46]'
    },
    {
        'name': 'Cham',
        'bmp': '\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F'
    },
    {
        'name': 'Cherokee',
        'bmp': '\u13A0-\u13F5\u13F8-\u13FD\uAB70-\uABBF'
    },
    {
        'name': 'Common',
        'bmp': '\0-@\\[-`\\{-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7\u02B9-\u02DF\u02E5-\u02E9\u02EC-\u02FF\u0374\u037E\u0385\u0387\u0589\u0605\u060C\u061B\u061F\u0640\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BF\u2100-\u2125\u2127-\u2129\u212C-\u2131\u2133-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B98-\u2BC8\u2BCA-\u2BFE\u2E00-\u2E4E\u2FF0-\u2FFB\u3000-\u3004\u3006\u3008-\u3020\u3030-\u3037\u303C-\u303F\u309B\u309C\u30A0\u30FB\u30FC\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721\uA788-\uA78A\uA830-\uA839\uA92E\uA9CF\uAB5B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFF70\uFF9E\uFF9F\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD',
        'astral': '\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9B\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDEE0-\uDEF3\uDF00-\uDF56\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83B[\uDC71-\uDCB4]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDD0C\uDD10-\uDD6B\uDD70-\uDDAC\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED4\uDEE0-\uDEEC\uDEF0-\uDEF9\uDF00-\uDF73\uDF80-\uDFD8]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD00-\uDD0B\uDD10-\uDD3E\uDD40-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF\uDE60-\uDE6D]|\uDB40[\uDC01\uDC20-\uDC7F]'
    },
    {
        'name': 'Coptic',
        'bmp': '\u03E2-\u03EF\u2C80-\u2CF3\u2CF9-\u2CFF'
    },
    {
        'name': 'Cuneiform',
        'astral': '\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]'
    },
    {
        'name': 'Cypriot',
        'astral': '\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]'
    },
    {
        'name': 'Cyrillic',
        'bmp': '\u0400-\u0484\u0487-\u052F\u1C80-\u1C88\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F'
    },
    {
        'name': 'Deseret',
        'astral': '\uD801[\uDC00-\uDC4F]'
    },
    {
        'name': 'Devanagari',
        'bmp': '\u0900-\u0950\u0953-\u0963\u0966-\u097F\uA8E0-\uA8FF'
    },
    {
        'name': 'Dogra',
        'astral': '\uD806[\uDC00-\uDC3B]'
    },
    {
        'name': 'Duployan',
        'astral': '\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]'
    },
    {
        'name': 'Egyptian_Hieroglyphs',
        'astral': '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]'
    },
    {
        'name': 'Elbasan',
        'astral': '\uD801[\uDD00-\uDD27]'
    },
    {
        'name': 'Ethiopic',
        'bmp': '\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E'
    },
    {
        'name': 'Georgian',
        'bmp': '\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u1C90-\u1CBA\u1CBD-\u1CBF\u2D00-\u2D25\u2D27\u2D2D'
    },
    {
        'name': 'Glagolitic',
        'bmp': '\u2C00-\u2C2E\u2C30-\u2C5E',
        'astral': '\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]'
    },
    {
        'name': 'Gothic',
        'astral': '\uD800[\uDF30-\uDF4A]'
    },
    {
        'name': 'Grantha',
        'astral': '\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]'
    },
    {
        'name': 'Greek',
        'bmp': '\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65',
        'astral': '\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]'
    },
    {
        'name': 'Gujarati',
        'bmp': '\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF'
    },
    {
        'name': 'Gunjala_Gondi',
        'astral': '\uD807[\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9]'
    },
    {
        'name': 'Gurmukhi',
        'bmp': '\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76'
    },
    {
        'name': 'Han',
        'bmp': '\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DB5\u4E00-\u9FEF\uF900-\uFA6D\uFA70-\uFAD9',
        'astral': '[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]'
    },
    {
        'name': 'Hangul',
        'bmp': '\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC'
    },
    {
        'name': 'Hanifi_Rohingya',
        'astral': '\uD803[\uDD00-\uDD27\uDD30-\uDD39]'
    },
    {
        'name': 'Hanunoo',
        'bmp': '\u1720-\u1734'
    },
    {
        'name': 'Hatran',
        'astral': '\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]'
    },
    {
        'name': 'Hebrew',
        'bmp': '\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F'
    },
    {
        'name': 'Hiragana',
        'bmp': '\u3041-\u3096\u309D-\u309F',
        'astral': '\uD82C[\uDC01-\uDD1E]|\uD83C\uDE00'
    },
    {
        'name': 'Imperial_Aramaic',
        'astral': '\uD802[\uDC40-\uDC55\uDC57-\uDC5F]'
    },
    {
        'name': 'Inherited',
        'bmp': '\u0300-\u036F\u0485\u0486\u064B-\u0655\u0670\u0951\u0952\u1AB0-\u1ABE\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u200D\u20D0-\u20F0\u302A-\u302D\u3099\u309A\uFE00-\uFE0F\uFE20-\uFE2D',
        'astral': '\uD800[\uDDFD\uDEE0]|\uD804\uDF3B|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]'
    },
    {
        'name': 'Inscriptional_Pahlavi',
        'astral': '\uD802[\uDF60-\uDF72\uDF78-\uDF7F]'
    },
    {
        'name': 'Inscriptional_Parthian',
        'astral': '\uD802[\uDF40-\uDF55\uDF58-\uDF5F]'
    },
    {
        'name': 'Javanese',
        'bmp': '\uA980-\uA9CD\uA9D0-\uA9D9\uA9DE\uA9DF'
    },
    {
        'name': 'Kaithi',
        'astral': '\uD804[\uDC80-\uDCC1\uDCCD]'
    },
    {
        'name': 'Kannada',
        'bmp': '\u0C80-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2'
    },
    {
        'name': 'Katakana',
        'bmp': '\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D',
        'astral': '\uD82C\uDC00'
    },
    {
        'name': 'Kayah_Li',
        'bmp': '\uA900-\uA92D\uA92F'
    },
    {
        'name': 'Kharoshthi',
        'astral': '\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F-\uDE48\uDE50-\uDE58]'
    },
    {
        'name': 'Khmer',
        'bmp': '\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF'
    },
    {
        'name': 'Khojki',
        'astral': '\uD804[\uDE00-\uDE11\uDE13-\uDE3E]'
    },
    {
        'name': 'Khudawadi',
        'astral': '\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]'
    },
    {
        'name': 'Lao',
        'bmp': '\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF'
    },
    {
        'name': 'Latin',
        'bmp': 'A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA7B9\uA7F7-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB64\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A'
    },
    {
        'name': 'Lepcha',
        'bmp': '\u1C00-\u1C37\u1C3B-\u1C49\u1C4D-\u1C4F'
    },
    {
        'name': 'Limbu',
        'bmp': '\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u194F'
    },
    {
        'name': 'Linear_A',
        'astral': '\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]'
    },
    {
        'name': 'Linear_B',
        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]'
    },
    {
        'name': 'Lisu',
        'bmp': '\uA4D0-\uA4FF'
    },
    {
        'name': 'Lycian',
        'astral': '\uD800[\uDE80-\uDE9C]'
    },
    {
        'name': 'Lydian',
        'astral': '\uD802[\uDD20-\uDD39\uDD3F]'
    },
    {
        'name': 'Mahajani',
        'astral': '\uD804[\uDD50-\uDD76]'
    },
    {
        'name': 'Makasar',
        'astral': '\uD807[\uDEE0-\uDEF8]'
    },
    {
        'name': 'Malayalam',
        'bmp': '\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F'
    },
    {
        'name': 'Mandaic',
        'bmp': '\u0840-\u085B\u085E'
    },
    {
        'name': 'Manichaean',
        'astral': '\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]'
    },
    {
        'name': 'Marchen',
        'astral': '\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]'
    },
    {
        'name': 'Masaram_Gondi',
        'astral': '\uD807[\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]'
    },
    {
        'name': 'Medefaidrin',
        'astral': '\uD81B[\uDE40-\uDE9A]'
    },
    {
        'name': 'Meetei_Mayek',
        'bmp': '\uAAE0-\uAAF6\uABC0-\uABED\uABF0-\uABF9'
    },
    {
        'name': 'Mende_Kikakui',
        'astral': '\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]'
    },
    {
        'name': 'Meroitic_Cursive',
        'astral': '\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]'
    },
    {
        'name': 'Meroitic_Hieroglyphs',
        'astral': '\uD802[\uDD80-\uDD9F]'
    },
    {
        'name': 'Miao',
        'astral': '\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]'
    },
    {
        'name': 'Modi',
        'astral': '\uD805[\uDE00-\uDE44\uDE50-\uDE59]'
    },
    {
        'name': 'Mongolian',
        'bmp': '\u1800\u1801\u1804\u1806-\u180E\u1810-\u1819\u1820-\u1878\u1880-\u18AA',
        'astral': '\uD805[\uDE60-\uDE6C]'
    },
    {
        'name': 'Mro',
        'astral': '\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]'
    },
    {
        'name': 'Multani',
        'astral': '\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]'
    },
    {
        'name': 'Myanmar',
        'bmp': '\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F'
    },
    {
        'name': 'Nabataean',
        'astral': '\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]'
    },
    {
        'name': 'New_Tai_Lue',
        'bmp': '\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE\u19DF'
    },
    {
        'name': 'Newa',
        'astral': '\uD805[\uDC00-\uDC59\uDC5B\uDC5D\uDC5E]'
    },
    {
        'name': 'Nko',
        'bmp': '\u07C0-\u07FA\u07FD-\u07FF'
    },
    {
        'name': 'Nushu',
        'astral': '\uD81B\uDFE1|\uD82C[\uDD70-\uDEFB]'
    },
    {
        'name': 'Ogham',
        'bmp': '\u1680-\u169C'
    },
    {
        'name': 'Ol_Chiki',
        'bmp': '\u1C50-\u1C7F'
    },
    {
        'name': 'Old_Hungarian',
        'astral': '\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]'
    },
    {
        'name': 'Old_Italic',
        'astral': '\uD800[\uDF00-\uDF23\uDF2D-\uDF2F]'
    },
    {
        'name': 'Old_North_Arabian',
        'astral': '\uD802[\uDE80-\uDE9F]'
    },
    {
        'name': 'Old_Permic',
        'astral': '\uD800[\uDF50-\uDF7A]'
    },
    {
        'name': 'Old_Persian',
        'astral': '\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]'
    },
    {
        'name': 'Old_Sogdian',
        'astral': '\uD803[\uDF00-\uDF27]'
    },
    {
        'name': 'Old_South_Arabian',
        'astral': '\uD802[\uDE60-\uDE7F]'
    },
    {
        'name': 'Old_Turkic',
        'astral': '\uD803[\uDC00-\uDC48]'
    },
    {
        'name': 'Oriya',
        'bmp': '\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77'
    },
    {
        'name': 'Osage',
        'astral': '\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]'
    },
    {
        'name': 'Osmanya',
        'astral': '\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]'
    },
    {
        'name': 'Pahawh_Hmong',
        'astral': '\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]'
    },
    {
        'name': 'Palmyrene',
        'astral': '\uD802[\uDC60-\uDC7F]'
    },
    {
        'name': 'Pau_Cin_Hau',
        'astral': '\uD806[\uDEC0-\uDEF8]'
    },
    {
        'name': 'Phags_Pa',
        'bmp': '\uA840-\uA877'
    },
    {
        'name': 'Phoenician',
        'astral': '\uD802[\uDD00-\uDD1B\uDD1F]'
    },
    {
        'name': 'Psalter_Pahlavi',
        'astral': '\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]'
    },
    {
        'name': 'Rejang',
        'bmp': '\uA930-\uA953\uA95F'
    },
    {
        'name': 'Runic',
        'bmp': '\u16A0-\u16EA\u16EE-\u16F8'
    },
    {
        'name': 'Samaritan',
        'bmp': '\u0800-\u082D\u0830-\u083E'
    },
    {
        'name': 'Saurashtra',
        'bmp': '\uA880-\uA8C5\uA8CE-\uA8D9'
    },
    {
        'name': 'Sharada',
        'astral': '\uD804[\uDD80-\uDDCD\uDDD0-\uDDDF]'
    },
    {
        'name': 'Shavian',
        'astral': '\uD801[\uDC50-\uDC7F]'
    },
    {
        'name': 'Siddham',
        'astral': '\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]'
    },
    {
        'name': 'SignWriting',
        'astral': '\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]'
    },
    {
        'name': 'Sinhala',
        'bmp': '\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4',
        'astral': '\uD804[\uDDE1-\uDDF4]'
    },
    {
        'name': 'Sogdian',
        'astral': '\uD803[\uDF30-\uDF59]'
    },
    {
        'name': 'Sora_Sompeng',
        'astral': '\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]'
    },
    {
        'name': 'Soyombo',
        'astral': '\uD806[\uDE50-\uDE83\uDE86-\uDEA2]'
    },
    {
        'name': 'Sundanese',
        'bmp': '\u1B80-\u1BBF\u1CC0-\u1CC7'
    },
    {
        'name': 'Syloti_Nagri',
        'bmp': '\uA800-\uA82B'
    },
    {
        'name': 'Syriac',
        'bmp': '\u0700-\u070D\u070F-\u074A\u074D-\u074F\u0860-\u086A'
    },
    {
        'name': 'Tagalog',
        'bmp': '\u1700-\u170C\u170E-\u1714'
    },
    {
        'name': 'Tagbanwa',
        'bmp': '\u1760-\u176C\u176E-\u1770\u1772\u1773'
    },
    {
        'name': 'Tai_Le',
        'bmp': '\u1950-\u196D\u1970-\u1974'
    },
    {
        'name': 'Tai_Tham',
        'bmp': '\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD'
    },
    {
        'name': 'Tai_Viet',
        'bmp': '\uAA80-\uAAC2\uAADB-\uAADF'
    },
    {
        'name': 'Takri',
        'astral': '\uD805[\uDE80-\uDEB7\uDEC0-\uDEC9]'
    },
    {
        'name': 'Tamil',
        'bmp': '\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA'
    },
    {
        'name': 'Tangut',
        'astral': '\uD81B\uDFE0|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFF1]|\uD822[\uDC00-\uDEF2]'
    },
    {
        'name': 'Telugu',
        'bmp': '\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7F'
    },
    {
        'name': 'Thaana',
        'bmp': '\u0780-\u07B1'
    },
    {
        'name': 'Thai',
        'bmp': '\u0E01-\u0E3A\u0E40-\u0E5B'
    },
    {
        'name': 'Tibetan',
        'bmp': '\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA'
    },
    {
        'name': 'Tifinagh',
        'bmp': '\u2D30-\u2D67\u2D6F\u2D70\u2D7F'
    },
    {
        'name': 'Tirhuta',
        'astral': '\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]'
    },
    {
        'name': 'Ugaritic',
        'astral': '\uD800[\uDF80-\uDF9D\uDF9F]'
    },
    {
        'name': 'Vai',
        'bmp': '\uA500-\uA62B'
    },
    {
        'name': 'Warang_Citi',
        'astral': '\uD806[\uDCA0-\uDCF2\uDCFF]'
    },
    {
        'name': 'Yi',
        'bmp': '\uA000-\uA48C\uA490-\uA4C6'
    },
    {
        'name': 'Zanabazar_Square',
        'astral': '\uD806[\uDE00-\uDE47]'
    }
];

},{}],190:[function(require,module,exports){
if (!window.ServedOnce) {
	(function () {
		window.ServedOnce = true;
		window.XRegExp = require("xregexp");
		window.scope = require('../../lib/scopeRuntime.js');
		window.ScopeApi = require('../../lib/scopeRuntimeApi.js')(scope);
		window.socket = io.connect();
		scope.declarationExpression({
			type: "let", 
			name: "socket", 
			value: {
				emit (channel, data) {
					return socket.emit(channel, ScopeApi.toJSON(data));
				},
				on (channel, handle) {
					return socket.on(channel, handle);
				}
			}
		});

		function attrToMap(attributes) {
			let result = scope.mapExpression();
			for (let i = 0; i < attributes.length; i += 1) {
				let name = attributes[i].name;
				let value = attributes[i].value;
				result[name] = value;
			}
			return result;
		}
		function randStr (len=16) {
			let result = "";
			let chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
			for (let i = 0; i < len; i += 1) {
				result += chars[Math.floor(Math.random() * chars.length)];
			}
			return result;
		}

		function stateProxy (instance, element) {
			let state = instance.state;
			let stateProxyTraps = {
				get (target, prop, receiver) {
					//console.log("get state-proxy:", prop, target[prop]);
					if (typeof target[prop] !== "undefined") {
						if (prop === "set") {
							return function (name, val) {
								//console.log("set state-proxy(2):", name, val);
								let result = target[prop](name, val);
								let newElement = scope.identifier("renderEngine").renderChildren(instance.render());
								$(element).replaceWith(newElement);
								element = newElement;
								return result;
							};
						}
						if (typeof target[prop] === "object") {
							return new Proxy(target[prop], stateProxyTraps);
						}
						return target[prop];
					}
					return undefined;
				},
				set (target, prop, val) {
					//console.log("set state-proxy:", prop, target[prop], val);
					target[prop] = val;
					let newElement = scope.identifier("renderEngine").renderChildren(instance.render());
					$(element).replaceWith(newElement);
					element = newElement;
					return val;
				}
			}
			instance.state = new Proxy(state, stateProxyTraps);
			instance.setState = (newState) => {
				for (let [key, val] of state) {
					if (!newState.has(key)) {
						newState.set(key, val);
					}
				}
				state = newState;
				instance.state = new Proxy(newState, stateProxyTraps);
				let newElement = scope.identifier("renderEngine").renderChildren(instance.render());
				$(element).replaceWith(newElement);
				element = newElement;
				return instance.state;
			}
		}

		scope.declarationExpression({
			type: "let",
			name: "userTagStates",
			value: scope.mapExpression()
		});
		let lastPaint = 0;
		let minPaintInterval = 150;
		scope.declarationExpression({
			type: "let",
			name: "renderEngine",
			value: {
				triggerPaint () {
					return window.requestAnimationFrame(scope.identifier("renderEngine").paint);
				},
				renderUserTag (tagName, sc, element) {
					let attr = $(element).data("rawAttributes") || scope.mapExpression();
					let id = randStr();
					let tClass = sc(attr, element.childNodes);
					if (typeof tClass.render === "function") {
						let node = tClass.render();
						scope.identifier("userTagStates").set(id, tClass);
						if (tClass.state && tClass.state instanceof Map) {
							stateProxy(tClass, node);
						}
						if (tClass.listeners && tClass.listeners instanceof Map) {
							for (let [event, func] of tClass.listeners) {
								$(node).on(event, func);
							}
						}
						return node;
					}
					// No render function found, so return original element.
					return element;
				},
				renderChildren (n) {
					let self = this;
					let userTags = ScopeApi.getAllTags();
					/*if(document.contains(n)) {
						console.log("render after paint");
					} else {
						console.log("render before paint");
					}*/
					for (let [tagName, sc] of userTags) {
						$(n).find(tagName).each(function (i, element) {
							let node = self.renderUserTag(tagName, sc, element);
							element.replaceWith(self.renderChildren(node));
						});
					}
					return n;
				},
				paint() {
					let self = scope.identifier("renderEngine");
					self.renderChildren(document);
				}
			}
		});
		whenReady(scope.identifier("renderEngine").triggerPaint);
		$('[bind-in]').each(function () {
			var binder = $(this).attr('bind-in').split(':');
			var event = binder[0];
			var id = binder[1];
			$(this).on(event, function (e) {
				scope.identifier("socket").emit(id, $(this).val());
			});
		});

		$('[bind-out]').each(function () {
			var channel = $(this).attr('bind-out');
			var el = $(this);
			socket.on(channel, function (data) {
				el.html(data);
			});
		});
	}());
}
},{"../../lib/scopeRuntime.js":15,"../../lib/scopeRuntimeApi.js":16,"xregexp":184}]},{},[190])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy5udm0vdmVyc2lvbnMvbm9kZS92MTAuNS4wL2xpYi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiLi4vLi4vLm52bS92ZXJzaW9ucy9ub2RlL3YxMC41LjAvbGliL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L2xpYi9fZW1wdHkuanMiLCIuLi8uLi8ubnZtL3ZlcnNpb25zL25vZGUvdjEwLjUuMC9saWIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIi4uLy4uLy5udm0vdmVyc2lvbnMvbm9kZS92MTAuNS4wL2xpYi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwiLi4vLi4vLm52bS92ZXJzaW9ucy9ub2RlL3YxMC41LjAvbGliL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwiLi4vLi4vLm52bS92ZXJzaW9ucy9ub2RlL3YxMC41LjAvbGliL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCIuLi8uLi8ubnZtL3ZlcnNpb25zL25vZGUvdjEwLjUuMC9saWIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcyIsIi4uLy4uLy5udm0vdmVyc2lvbnMvbm9kZS92MTAuNS4wL2xpYi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibGliL3NyYy9CYWNrdGlja1Byb2Nlc3Nvci5qcyIsInNyYy9TY29wZUFzdC5qcyIsImxpYi9zcmMvU2NvcGVQYXJzZXIuanMiLCJzcmMvU2NvcGVSdWxlcy5qcyIsImxpYi9zcmMvcGFyc2VyLmpzIiwic3JjL3ByZWRlZnMuanMiLCJsaWIvc3JjL3Njb3BlUnVudGltZS5qcyIsImxpYi9zcmMvc2NvcGVSdW50aW1lQXBpLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXItc3BsaXQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnVmZmVyLWZyb20vaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2xhc3MtbGlzdC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb21iaW5lLXNvdXJjZS1tYXAvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY29tYmluZS1zb3VyY2UtbWFwL2xpYi9tYXBwaW5ncy1mcm9tLW1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb21iaW5lLXNvdXJjZS1tYXAvbGliL3BhdGgtaXMtYWJzb2x1dGUuanMiLCJub2RlX21vZHVsZXMvY29tYmluZS1zb3VyY2UtbWFwL25vZGVfbW9kdWxlcy9jb252ZXJ0LXNvdXJjZS1tYXAvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY29tYmluZS1zb3VyY2UtbWFwL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9hcnJheS1zZXQuanMiLCJub2RlX21vZHVsZXMvY29tYmluZS1zb3VyY2UtbWFwL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iYXNlNjQtdmxxLmpzIiwibm9kZV9tb2R1bGVzL2NvbWJpbmUtc291cmNlLW1hcC9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmFzZTY0LmpzIiwibm9kZV9tb2R1bGVzL2NvbWJpbmUtc291cmNlLW1hcC9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmluYXJ5LXNlYXJjaC5qcyIsIm5vZGVfbW9kdWxlcy9jb21iaW5lLXNvdXJjZS1tYXAvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL21hcHBpbmctbGlzdC5qcyIsIm5vZGVfbW9kdWxlcy9jb21iaW5lLXNvdXJjZS1tYXAvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3F1aWNrLXNvcnQuanMiLCJub2RlX21vZHVsZXMvY29tYmluZS1zb3VyY2UtbWFwL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwLWNvbnN1bWVyLmpzIiwibm9kZV9tb2R1bGVzL2NvbWJpbmUtc291cmNlLW1hcC9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1nZW5lcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29tYmluZS1zb3VyY2UtbWFwL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2Utbm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9jb21iaW5lLXNvdXJjZS1tYXAvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3V0aWwuanMiLCJub2RlX21vZHVsZXMvY29tYmluZS1zb3VyY2UtbWFwL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL3NvdXJjZS1tYXAuanMiLCJub2RlX21vZHVsZXMvY29udmVydC1zb3VyY2UtbWFwL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9oeXBlcnNjcmlwdC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pbmRleG9mL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2lubGluZS1zb3VyY2UtbWFwL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC5tZW1vaXplL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAtc3VwcG9ydC9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1jb25zdW1lci5qcyIsIm5vZGVfbW9kdWxlcy9zb3VyY2UtbWFwLXN1cHBvcnQvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAtc3VwcG9ydC9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW5vZGUuanMiLCJub2RlX21vZHVsZXMvc291cmNlLW1hcC1zdXBwb3J0L25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi91dGlsLmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAtc3VwcG9ydC9zb3VyY2UtbWFwLXN1cHBvcnQuanMiLCJub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYXJyYXktc2V0LmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2Jhc2U2NC12bHEuanMiLCJub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmFzZTY0LmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2JpbmFyeS1zZWFyY2guanMiLCJub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvbWFwcGluZy1saXN0LmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3JlYWQtd2FzbS5qcyIsIm5vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwLWNvbnN1bWVyLmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1ub2RlLmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3V0aWwuanMiLCJub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvd2FzbS5qcyIsIm5vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL3NvdXJjZS1tYXAuanMiLCJub2RlX21vZHVsZXMveHJlZ2V4cC9saWIvYWRkb25zL2J1aWxkLmpzIiwibm9kZV9tb2R1bGVzL3hyZWdleHAvbGliL2FkZG9ucy9tYXRjaHJlY3Vyc2l2ZS5qcyIsIm5vZGVfbW9kdWxlcy94cmVnZXhwL2xpYi9hZGRvbnMvdW5pY29kZS1iYXNlLmpzIiwibm9kZV9tb2R1bGVzL3hyZWdleHAvbGliL2FkZG9ucy91bmljb2RlLWJsb2Nrcy5qcyIsIm5vZGVfbW9kdWxlcy94cmVnZXhwL2xpYi9hZGRvbnMvdW5pY29kZS1jYXRlZ29yaWVzLmpzIiwibm9kZV9tb2R1bGVzL3hyZWdleHAvbGliL2FkZG9ucy91bmljb2RlLXByb3BlcnRpZXMuanMiLCJub2RlX21vZHVsZXMveHJlZ2V4cC9saWIvYWRkb25zL3VuaWNvZGUtc2NyaXB0cy5qcyIsIm5vZGVfbW9kdWxlcy94cmVnZXhwL2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy94cmVnZXhwL2xpYi94cmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL3hyZWdleHAvdG9vbHMvb3V0cHV0L2Jsb2Nrcy5qcyIsIm5vZGVfbW9kdWxlcy94cmVnZXhwL3Rvb2xzL291dHB1dC9jYXRlZ29yaWVzLmpzIiwibm9kZV9tb2R1bGVzL3hyZWdleHAvdG9vbHMvb3V0cHV0L3Byb3BlcnRpZXMuanMiLCJub2RlX21vZHVsZXMveHJlZ2V4cC90b29scy9vdXRwdXQvc2NyaXB0cy5qcyIsInBhY2thZ2VzL3NlcnZlL3NlcnZlLWNsaWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN2SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzlTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7aXJDQ3JKTSxDQUFBLGlCLFlBQ0wsV0FBYSxDQUFiLENBQWlCLHlCQUNoQixHQUFNLENBQUEsQ0FBSSxDQUFHLElBQWIsQ0FDQSxDQUFJLENBQUMsRUFBTCxDQUFVLENBRk0sQ0FHaEIsQ0FBSSxDQUFDLEtBQUwsQ0FBYSxDQUNaLFVBQVUsR0FERSxDQUVaLGNBQWMsR0FGRixDQUdaLFFBQVEsQ0FBRSxFQUhFLENBSVosUUFBUSxDQUFFLEVBSkUsQ0FLWixjQUFjLENBQUUsQ0FMSixDQU9iLEMsbURBRUksQyxDQUFLLElBQ0gsQ0FBQSxDQUFJLENBQUcsSUFESixDQUVILENBQUssQ0FBRyxDQUFJLENBQUMsS0FGVixDQVlULEdBTm1CLEdBQWYsR0FBQSxDQUFHLENBQUMsTUFNUixHQUhDLENBQUssQ0FBQyxVQUFOLENBQW1CLENBQUMsQ0FBSyxDQUFDLFVBRzNCLEVBQUksQ0FBSyxDQUFDLFVBQVYsQ0FBc0IsQ0FPckIsR0FBSSxDQUFBLENBQUosQ0FHQSxDQUFLLENBQUMsUUFBTixDQUFpQixFQVZJLFFBY2pCLENBQUEsQ0FBVyxDQUFHLHlOQWRHLENBZ0JqQixDQUFlLENBQUcsOFJBaEJELENBbUJqQixDQUFXLENBQUcsbVNBbkJHLEdBOEJULENBUVgsR0FKd0IsQ0FBcEIsQ0FBQSxDQUFHLENBQUMsTUFBSixDQUFXLE1BSWYsR0FIQyxPQUFPLENBQUMsR0FBUixDQUFZLGtCQUFaLENBR0QsQ0FGQyxPQUFPLENBQUMsSUFBUixFQUVELEVBQUksQ0FBSyxDQUFDLGNBQVYsQ0FBMEIsQ0FLekIsR0FEQSxDQUFVLENBQUcsQ0FBRyxDQUFDLE1BQUosQ0FBVyxLQUFYLENBQWlCLENBQWpCLENBQ2IsQ0FBSSxDQUFKLENBQWdCLElBRVgsQ0FBQSxDQUFlLENBQUcsQ0FBZSxDQUFDLElBQWhCLENBQXFCLENBQUcsQ0FBQyxNQUF6QixDQUZQLGtCQVNYLENBVFcsSUFLZCxDQUxjLE1BTWQsQ0FOYyxNQU9kLENBUGMsTUFRZCxDQVJjLE1BYWYsR0FGQSxDQUFLLENBQUMsUUFBTixFQUFrQixDQUVsQixDQUFjLEdBQVYsR0FBQSxDQUFKLENBQ0MsQ0FBSyxDQUFDLGNBQU4sRUFBd0IsQ0FEekIsQ0FFQyxDQUFLLENBQUMsUUFBTixFQUFrQixHQUZuQixLQUdPLElBQWMsR0FBVixHQUFBLENBQUosQ0FDTixHQUEyQixDQUF2QixDQUFBLENBQUssQ0FBQyxjQUFWLENBQ0MsQ0FBSyxDQUFDLGNBQU4sRUFBd0IsQ0FEekIsQ0FFQyxDQUFLLENBQUMsUUFBTixFQUFrQixHQUZuQixLQUdPLENBQ04sQ0FBSyxDQUFDLGNBQU4sR0FETSxDQUVOLEdBQUksQ0FBQSxDQUFVLENBQUcsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxRQUFSLENBQ2hCLENBQUksQ0FBQyxFQUFMLENBQVEsS0FBUixDQUFjLENBQUssQ0FBQyxRQUFOLENBQWlCLEdBQS9CLENBRGdCLEVBRWYsV0FGZSxDQUVILE9BRkcsQ0FFSyxJQUZMLENBRVcsRUFGWCxDQUFqQixDQUdBLENBQUssQ0FBQyxRQUFOLENBQWlCLEVBTFgsQ0FNTixDQUFLLENBQUMsUUFBTixFQUFrQixDQUFVLENBQUcsR0FOekIsQ0FPTixDQUFLLENBQUMsVUFBTixHQUNBLENBRUYsQ0FBRyxDQUFDLE1BQUosQ0FBYSxDQTlCRSxDQStCZixDQUFHLENBQUMsS0FBSixDQUFZLENBQU0sQ0FBRyxDQS9CTixDQWdDZixDQUFHLENBQUMsTUFBSixFQUFjLENBQUcsQ0FBQyxLQWhDSCxDQWlDZixDQUFHLENBQUMsT0FBSixFQUFlLENBQUcsQ0FBQyxLQWpDSixDQWtDZixRQUNBLENBQ0QsT0FBTyxDQUFDLEdBQVIsQ0FBWSxxQkFBWixDQXpDeUIsQ0EwQ3pCLE9BQU8sQ0FBQyxJQUFSLEVBQ0EsQ0FPRCxHQUhBLENBQVUsQ0FBRyxDQUFHLENBQUMsTUFBSixDQUFXLEtBQVgsQ0FBaUIsQ0FBakIsQ0FHYixDQUFJLENBQUosQ0FBZ0IsSUFHWCxDQUFBLENBQVcsQ0FBRyxDQUFXLENBQUMsSUFBWixDQUFpQixDQUFHLENBQUMsTUFBckIsQ0FISCxrQkFXWCxDQVhXLElBT2QsQ0FQYyxNQVFkLENBUmMsTUFVZCxDQVZjLE1Bc0JmLENBQUssQ0FBQyxVQUFOLEdBdEJlLENBdUJmLENBQUssQ0FBQyxjQUFOLEdBdkJlLENBd0JmLENBQUssQ0FBQyxjQUFOLENBQXVCLENBeEJSLENBMEJmLENBQUcsQ0FBQyxNQUFKLENBQWEsQ0ExQkUsQ0EyQmYsQ0FBRyxDQUFDLEtBQUosQ0FBWSxDQUFZLENBQUcsSUEzQlosQ0E0QmYsQ0FBRyxDQUFDLE1BQUosRUFBYyxDQUFHLENBQUMsS0E1QkgsQ0E2QmYsQ0FBRyxDQUFDLE9BQUosRUFBZSxDQUFHLENBQUMsS0E3QkosQ0E4QmYsQ0FBSyxDQUFDLFFBQU4sRUFBa0IsQ0FBRyxDQUFDLEtBOUJQLENBK0JmLFFBZ0RBLENBT0QsR0FIQSxDQUFVLENBQUcsQ0FBRyxDQUFDLE1BQUosQ0FBVyxLQUFYLENBQWlCLENBQWpCLENBR2IsQ0FBSSxDQUFKLENBQWdCLENBS2YsR0FBc0IsR0FBbEIsR0FBQSxDQUFHLENBQUMsTUFBSixDQUFXLENBQVgsQ0FBSixDQUEyQixDQUUxQixDQUFHLENBQUMsTUFBSixDQUFhLENBQUcsQ0FBQyxNQUFKLENBQVcsTUFBWCxDQUFrQixDQUFsQixDQUZhLENBRzFCLENBQUcsQ0FBQyxNQUFKLEVBQWMsR0FIWSxDQUkxQixDQUFHLENBQUMsS0FBSixDQUFZLEdBSmMsQ0FLMUIsQ0FBRyxDQUFDLE9BQUosRUFBZSxHQUxXLENBTTFCLENBQUssQ0FBQyxVQUFOLEdBTjBCLENBVzFCLEtBQ0EsQ0FHRCxDQUFHLENBQUMsTUFBSixDQUFhLENBQUcsQ0FBQyxNQUFKLENBQVcsT0FBWCxDQUFtQixDQUFuQixDQUFnQyxTQUFDLENBQUQsQ0FBVyxDQUFYLENBQWtCLENBQWxCLENBQWdDLElBQ3hFLENBQUEsQ0FBSyxDQUFHLENBQUssQ0FBQyxLQUFOLENBQVksSUFBWixDQURnRSxDQUV4RSxDQUFNLENBQUcsQ0FBSyxDQUFDLEdBQU4sR0FBWSxNQUZtRCxDQUd4RSxDQUFRLENBQUcsQ0FBSyxDQUFDLE1BSHVELENBSXhFLENBQUcsQ0FBRyxDQUFHLENBQUMsTUFBSixDQUFXLFdBSnVELENBd0I1RSxNQWxCZSxFQUFYLENBQUEsQ0FrQkosQ0FqQkMsQ0FBRyxDQUFHLENBaUJQLENBZkMsQ0FBRyxFQUFJLENBZVIsQ0FaQSxDQUFHLENBQUMsTUFBSixDQUFhLENBQ1osVUFBVSxDQUFFLENBQUcsQ0FBQyxNQUFKLENBQVcsU0FEWCxDQUVaLFlBQVksQ0FBRSxDQUFHLENBQUMsTUFBSixDQUFXLFdBRmIsQ0FHWixTQUFTLENBQUUsQ0FBRyxDQUFDLE1BQUosQ0FBVyxTQUFYLENBQXVCLENBSHRCLENBSVosV0FBVyxDQUFFLENBSkQsQ0FZYixDQUpBLENBQUcsQ0FBQyxLQUFKLENBQVksQ0FJWixDQUhBLENBQUcsQ0FBQyxPQUFKLEVBQWUsQ0FBRyxDQUFDLEtBR25CLENBQU8sQ0FDUCxDQXpCWSxDQXBCRSxDQWlEZixDQUFLLENBQUMsUUFBTixFQUFrQixDQUFHLENBQUMsS0FqRFAsQ0FrRGYsQ0FBRyxDQUFDLE1BQUosRUFBYyxDQUFHLENBQUMsS0FsREgsQ0F5RGYsUUFDQSxDQUVELE9BQU8sQ0FBQyxHQUFSLENBQVksa0NBQVosQ0E1TVcsQ0E2TVgsT0FBTyxDQUFDLElBQVIsRUFDQSxDQVVELE1BSkEsQ0FBQSxDQUFHLENBQUMsRUFBSixDQUFPLFVBQVAsQ0FBa0IsUUFBbEIsQ0FBNkIsSUFBTSxDQUFLLENBQUMsUUFBWixDQUF1QixHQUlwRCxDQUhBLENBQUssQ0FBQyxRQUFOLENBQWlCLEVBR2pCLENBQU8sR0FDUCxDQUdELFFBQ0EsQyxTQUtGLE1BQU0sQ0FBQyxPQUFQLENBQWlCLGlCOzs7Ozs2ZEM1VGpCLFFBQVMsQ0FBQSxZQUFULENBQXNCLENBQXRCLENBQXlCLElBRXBCLENBQUEsQ0FGb0IsQ0FDcEIsQ0FBQyxDQUFHLEVBRGdCLENBR3hCLElBQUksQ0FBQyxDQUFHLENBQVIsQ0FBVyxDQUFDLENBQUcsQ0FBZixDQUFrQixDQUFDLEVBQUksQ0FBdkIsQ0FDQyxDQUFDLEVBQUksQ0FBQyxDQUFHLEdBQVQsQ0FFRCxNQUFPLENBQUEsQ0FDUCxDLEdBRUssQ0FBQSxRLFlBQ0wsV0FBYSxDQUFiLENBQW1CLENBQW5CLENBQXlCLENBQXpCLENBQStCLHlCQUM5QixLQUFLLElBQUwsQ0FBWSxDQURrQixDQUU5QixLQUFLLElBQUwsQ0FBWSxDQUZrQixDQUc5QixLQUFLLEdBQUwsQ0FBVyxDQUNWLEtBQUssQ0FBRSxDQUNOLElBQUksQ0FBRSxDQUFJLENBQUMsS0FBTCxDQUFXLE1BQVgsQ0FBa0IsVUFEbEIsQ0FFTixNQUFNLENBQUUsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxNQUFYLENBQWtCLFlBRnBCLENBREcsQ0FLVixHQUFHLENBQUUsQ0FDSixJQUFJLENBQUUsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxNQUFYLENBQWtCLFNBRHBCLENBRUosTUFBTSxDQUFFLENBQUksQ0FBQyxLQUFMLENBQVcsTUFBWCxDQUFrQixXQUZ0QixDQUxLLENBSG1CLENBYTlCLEtBQUssR0FBTCxDQUFXLENBQUksQ0FBQyxLQUFMLENBQVcsT0FiUSxDQWM5QixLQUFLLElBQUwsQ0FBWSxDQUFJLENBQUMsS0FBTCxDQUFXLE1BQVgsQ0FBa0IsVUFDOUIsQyxtREFFSSxDLENBQVEsSUFDUixDQUFBLENBQUMsQ0FBRyxZQUFZLENBQUMsQ0FBRCxDQUFaLENBQXVCLEdBQXZCLENBQTZCLEtBQUssSUFEOUIsQ0FFUixDQUFHLENBQUcsS0FBSyxJQUZILENBR1osR0FBaUIsQ0FBZCxFQUFBLENBQUcsQ0FBQyxNQUFKLEVBQW1CLEVBQUUsQ0FBRyxDQUFDLENBQUQsQ0FBSCxVQUFrQixDQUFBLEdBQXBCLENBQXRCLENBQ0MsQ0FBQyxFQUFJLEtBQUssQ0FBRyxDQUFDLENBQUQsQ0FBUixDQUFZLEdBRGxCLEtBRU8sS0FBSyxDQUFMLEdBQVUsQ0FBQSxDQUFWLENBQ0YsQ0FBRyxDQUFDLENBQUQsQ0FBSCxVQUFrQixDQUFBLEdBRGhCLENBRUwsQ0FBQyxFQUFJLEtBQU8sQ0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPLEdBQVAsQ0FBVyxDQUFNLENBQUMsQ0FBbEIsQ0FGUCxFQUlMLENBQUMsRUFBSSxLQUFPLFlBQVksQ0FBQyxDQUFNLENBQUMsQ0FBUixDQUpuQixDQUtMLENBQUMsRUFBSSxJQUFJLENBQUcsQ0FBQyxDQUFELENBQVAsQ0FBVyxHQUxYLEVBUVAsTUFBTyxDQUFBLENBQUMsQ0FBcUMsR0FDN0MsQyxrQkFHYSxROzs7O3FqRUM1Q2YsT0FBTyxDQUFDLG9CQUFELENBQVAsQ0FBOEIsT0FBOUIsRSxJQVlNLENBQUEsVyxZQUNMLFlBQWUseUJBQ2QsR0FBTSxDQUFBLENBQUksQ0FBRyxJQUFiLENBQ0EsQ0FBSSxDQUFDLE1BQUwsQ0FBYyxHQUFJLENBQUEsTUFBTSxDQUFDLE1BRlgsQ0FHZCxDQUFJLENBQUMsS0FBTCxDQUFhLEdBQUksb0JBSEgsQ0E2R2QsQ0FBSSxDQUFDLE1BQUwsQ0FBWSxFQUFaLENBQWUsUUFBZixDQUEwQixpQkFDMUIsQyw2REFFZSxDQUNmLE1BQU8sQ0FDTixPQUFPLENBQUUsT0FBTyxDQUFDLG1CQUFELENBRFYsQ0FFTixHQUFHLENBQUUsT0FBTyxDQUFDLHNCQUFELENBRk4sQ0FJUCxDLGdDQUVNLEMsQ0FBTSxJQUNOLENBQUEsQ0FBSSxDQUFHLElBREQsQ0FFUixDQUFVLENBQUcsQ0FBSSxDQUFDLE1BQUwsQ0FBWSxLQUFaLENBQWtCLEdBRnZCLENBR1osQ0FBSSxDQUFDLE1BQUwsQ0FBWSxFQUFaLENBQWUsVUFBZixDQUE0QixFQUhoQixDQUlaLEdBQUksQ0FBQSxDQUFXLENBQUcsR0FBSSwyQkFBSixDQUFzQixDQUF0QixDQUFsQixDQVlBLE1BVkEsQ0FBQSxDQUFJLENBQUMsTUFBTCxDQUFZLEtBQVosQ0FBa0IsR0FBbEIsQ0FBd0IsVUFBWSxDQUNuQyxHQUFJLENBQUEsQ0FBSixDQURtQyxNQUduQyxDQUFBLENBQUksQ0FBRyxDQUFXLENBQUMsR0FBWixDQUFnQixJQUFoQixDQUg0QixDQUkvQixLQUFBLENBSitCLENBTzVCLENBQVUsQ0FBQyxJQUFYLENBQWdCLElBQWhCLENBUDRCLENBSzNCLENBR1IsQ0FFRCxDQUFPLEtBQUssTUFBTCxDQUFZLEtBQVosQ0FBa0IsQ0FBbEIsQ0FDUCxDLG1DQUVTLEMsQ0FBSyxJQUNSLENBQUEsQ0FBSSxDQUFHLElBREMsQ0FHZCxHQUFZLElBQVIsR0FBQSxDQUFKLENBQ0MsTUFBTyxLQUFQLENBRUQsR0FBbUIsUUFBZixRQUFPLENBQUEsQ0FBWCxDQUNDLE1BQU8sQ0FBQSxDQUFQLENBRUQsR0FBSSxTQUFBLENBQUcsQ0FBQyxJQUFSLENBQ0MsTUFBTyxDQUFBLENBQVAsQ0FFRCxHQUFJLFNBQUEsQ0FBRyxDQUFDLEdBQVIsQ0FBMkIsQ0FDMUIsR0FBSSxDQUFBLENBQUksQ0FBRyxDQUFJLENBQUMsS0FBTCxDQUFXLEtBQVgsQ0FBaUIsR0FBakIsQ0FBcUIsSUFBaEMsQ0FDQSxDQUFJLENBQUMsS0FBTCxDQUFXLEtBQVgsQ0FBaUIsR0FBakIsQ0FBdUIsQ0FBRyxDQUFDLEdBRkQsQ0FHMUIsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxLQUFYLENBQWlCLEdBQWpCLENBQXFCLElBQXJCLENBQTRCLENBQzVCLENBRUQsR0FBSSxDQUFHLENBQUMsSUFBSixXQUFvQixDQUFBLEtBQXhCLENBQStCLENBQzlCLEdBQUksQ0FBQSxDQUFVLENBQUcsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxVQUE1QixDQUNBLENBQUcsQ0FBQyxhQUFKLENBQW9CLEVBRlUsQ0FHOUIsQ0FBRyxDQUFDLElBQUosQ0FBUyxPQUFULENBQWlCLFNBQUMsQ0FBRCxDQUFPLENBQ3ZCLENBQUksQ0FBQyxLQUFMLENBQVcsVUFBWCxDQUF3QixDQUFHLENBQUMsSUFETCxDQUV2QixDQUFHLENBQUMsYUFBSixDQUFrQixJQUFsQixDQUF1QixDQUFJLENBQUMsUUFBTCxDQUFjLENBQWQsQ0FBdkIsQ0FDQSxDQUhELENBSDhCLENBTzlCLENBQUksQ0FBQyxLQUFMLENBQVcsVUFBWCxDQUF3QixDQUN4QixDQUNELEdBQUksQ0FBSSxDQUFDLEtBQUwsQ0FBVyxDQUFHLENBQUMsSUFBZixDQUFKLENBQTBCLENBRXpCLEdBREEsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxLQUFYLENBQWlCLE9BQWpCLENBQXlCLENBQUcsQ0FBQyxJQUE3QixDQUNBLENBQUksQ0FBRyxDQUFDLElBQUosV0FBb0IsQ0FBQSxLQUF4QixDQUErQixPQUM5QixNQUFPLEdBQUEsQ0FBSSxDQUFDLEtBQUwsRUFBVyxDQUFHLENBQUMsSUFBZiw2QkFBd0IsQ0FBRyxDQUFDLGFBQTVCLEVBQ1AsQ0FFQSxNQURBLENBQUEsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxLQUFYLENBQWlCLEdBQWpCLENBQXFCLFVBQXJCLENBQWtDLENBQUcsQ0FBQyxJQUN0QyxDQUFPLENBQUksQ0FBQyxLQUFMLENBQVcsQ0FBRyxDQUFDLElBQWYsRUFBcUIsQ0FBRyxDQUFDLElBQXpCLENBRVIsQ0FFRCxNQURBLENBQUEsT0FBTyxDQUFDLEdBQVIsV0FBZSxDQUFHLENBQUMsSUFBbkIscUJBQ0EsQ0FBTyxpQkFDUCxDLGlDQUVPLEMsQ0FBYSxDLENBQWEsQyxDQUFVLEMsQ0FBWSxDQUN2RCxHQUFJLENBQUEsQ0FBSSxDQUFHLElBQVgsQ0FDQSxDQUFRLENBQUcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLENBRjRDLENBR3ZELEdBQUksQ0FBQSxDQUFZLENBQUcsSUFBSSxDQUFDLE9BQUwsQ0FBYSxJQUFJLENBQUMsT0FBTCxDQUFhLENBQWIsQ0FBYixDQUF3QyxDQUF4QyxDQUFuQixDQUNBLEdBQUksQ0FBQyxFQUFFLENBQUMsVUFBSCxDQUFjLENBQWQsQ0FBTCxDQUFrQyxJQUM3QixDQUFBLENBQVcsQ0FBRyxJQUFJLENBQUMsT0FBTCxDQUFhLFNBQWIsQ0FBd0IsYUFBeEIsQ0FEZSxDQUU3QixDQUFRLENBQUcsRUFBRSxDQUFDLFdBQUgsQ0FBZSxDQUFmLENBRmtCLENBR2pDLEdBQW1DLENBQUMsQ0FBaEMsR0FBQSxDQUFRLENBQUMsT0FBVCxDQUFpQixDQUFqQixDQUFKLENBQXVDLElBQ2xDLENBQUEsQ0FBZSxDQUFHLElBQUksQ0FBQyxJQUFMLENBQVUsQ0FBVixDQUF1QixDQUF2QixDQURnQixDQUVsQyxDQUFHLENBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFMLENBQVUsQ0FBVixDQUEyQixVQUEzQixDQUFELENBRnFCLENBR2xDLENBQUksQ0FBRyxJQUFJLENBQUMsSUFBTCxDQUFVLENBQVYsQ0FBMkIsQ0FBRyxDQUFDLElBQS9CLENBSDJCLENBSXRDLENBQVksQ0FBRyxJQUFJLENBQUMsT0FBTCxDQUFhLElBQUksQ0FBQyxPQUFMLENBQWEsQ0FBYixDQUFiLENBQXdDLENBQXhDLENBRWYsQ0FORCxJQU9DLE1BQU0sSUFBSSxDQUFBLEtBQUosa0JBQW1CLENBQW5CLDZCQUE4QyxDQUFJLENBQUMsS0FBTCxDQUFXLEtBQVgsQ0FBaUIsU0FBakIsRUFBOUMsRUFFUCxDQUNELEdBQUksUUFBUSxJQUFSLENBQWEsQ0FBYixDQUFKLENBQWdDLElBQzNCLENBQUEsQ0FBWSxDQUFHLElBQUksQ0FBQyxPQUFMLENBQWEsSUFBSSxDQUFDLE9BQUwsQ0FBYSxDQUFiLENBQWIsQ0FBd0MsQ0FBUSxDQUFDLE9BQVQsQ0FBaUIsT0FBakIsQ0FBMEIsS0FBMUIsQ0FBeEMsQ0FEWSxDQUUzQixDQUFLLENBQUcsRUFBRSxDQUFDLFlBQUgsQ0FBZ0IsQ0FBaEIsQ0FBOEIsTUFBOUIsQ0FGbUIsQ0FHM0IsQ0FBTyxDQUFHLEdBQUksQ0FBQSxDQUFKLEdBQWtCLFNBQWxCLENBQTRCLENBQTVCLENBQW1DLENBQW5DLENBQWlELENBQWpELENBSGlCLENBSTNCLENBQVcsQ0FBRyxJQUFJLENBQUMsT0FBTCxDQUFhLENBQWIsQ0FKYSxDQUsxQixFQUFFLENBQUMsVUFBSCxDQUFjLENBQWQsQ0FMMEIsRUFNOUIsRUFBRSxDQUFDLFNBQUgsQ0FBYSxDQUFiLENBTjhCLENBUS9CLEVBQUUsQ0FBQyxhQUFILENBQWlCLENBQWpCLENBQStCLENBQU8sQ0FBQyxJQUF2QyxDQVIrQixDQVMvQixHQUFJLENBQUEsQ0FBSSxDQUFHLENBQ1YsTUFBTSxDQUFFLENBQU8sQ0FBQyxJQUROLENBRVYsVUFBVSxDQUFFLENBRkYsQ0FBWCxDQVVBLE1BTkEsQ0FBQSxDQUFJLENBQUMsUUFBTCxDQUFjLElBQWQsQ0FBbUIsQ0FDbEIsSUFBSSxDQUFFLENBRFksQ0FFbEIsTUFBTSxDQUFFLENBQ1AsSUFBSSxDQUFFLENBREMsQ0FGVSxDQUFuQixDQU1BLHdCQUF1QixJQUFJLENBQUMsU0FBTCxDQUFlLENBQWYsQ0FBdkIsS0FDQSxDQUNBLDZCQUF1QixJQUFJLENBQUMsU0FBTCxDQUFlLENBQWYsQ0FBdkIsS0FFRCxDLG9DQUVVLEMsQ0FBZ0YsSUFBMUUsQ0FBQSxDQUEwRSx3REFBOUQsZ0JBQThELENBQTVDLENBQTRDLHdEQUFoQyxhQUFnQyxDQUFqQixDQUFpQiw2REFDdEYsQ0FBSSxDQUFHLElBRCtFLENBRXRGLENBQVksQ0FBRyxFQUZ1RSxDQUl6RixDQUp5RixDQUdwRSxXQUFsQixRQUFPLENBQUEsTUFIK0UsQ0FJMUUsT0FBTyxDQUFDLGNBQUQsQ0FBUCxDQUF3QixTQUF4QixDQUowRSxDQVkxRSxpQkFaMEUsSUFldEYsQ0FBQSxDQWZzRixDQWdCdEYsQ0FoQnNGLENBbUIxRixDQUFJLENBQUMsV0FBTCxDQUFtQixVQUFnRCxJQUEvQyxDQUFBLENBQStDLHdEQUF4QyxDQUFDLE1BQU0sQ0FBQyxFQUFSLENBQVksV0FBVyxDQUFDLEVBQXhCLENBQTRCLEVBQUUsQ0FBRSxFQUFoQyxDQUF3QyxDQVNsRSxNQUx1QixRQUFuQixRQUFPLENBQUEsQ0FBSSxDQUFDLEVBS2hCLEVBSkMsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxnQkFBUixDQUF5QixDQUF6QixDQUFzQyxDQUFJLENBQUMsTUFBM0MsQ0FJRCxDQUFPLENBQ1AsQ0E3QnlGLENBOEIxRixDQUFJLENBQUMsRUFBTCxDQUFVLFNBQUMsQ0FBRCxDQUE0QyxJQUFwQyxDQUFBLENBQW9DLHdEQUEvQixDQUFJLENBQUMsS0FBTCxDQUFXLEtBQVgsQ0FBaUIsT0FBakIsRUFBK0IsQ0FDakQsQ0FBRyxDQUFHLENBQUksQ0FBQyxLQUFMLENBQVcsS0FBWCxDQUFpQixHQUFqQixDQUFxQixLQURzQixDQUdyRCxNQUFPLElBQUksQ0FBQSxTQUFTLENBQUMsVUFBZCxDQUNOLENBQUcsQ0FBQyxJQURFLENBRU4sQ0FBRyxDQUFDLE1BRkUsQ0FHTixDQUhNLENBSU4sQ0FKTSxDQUtOLENBTE0sQ0FPUCxDQXhDeUYsSUEwQ3RGLENBQUEsQ0ExQ3NGLENBeUN0RixDQUFJLENBQUcsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxFQUFSLENBekMrRSxDQTJDMUYsQ0FBSSxDQUFDLFFBQUwsQ0FBZ0IsRUEzQzBFLENBNEMxRixDQUFJLENBQUMsS0FBTCxDQUFhLEdBQUksb0JBNUN5RSxDQTZDMUYsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxNQUFYLENBQW9CLENBN0NzRSxDQThDMUYsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxXQUFYLENBQXlCLENBOUNpRSxDQStDMUYsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxXQUFYLENBQXlCLENBL0NpRSxDQWdEMUYsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxJQUFYLENBQWtCLENBaER3RSxDQWlEMUYsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxFQUFYLENBQWdCLENBQUksQ0FBQyxFQWpEcUUsQ0FrRDFGLENBQUksQ0FBQyxLQUFMLENBQVcsV0FBWCxDQUF5QixDQUFJLENBQUMsV0FsRDRELElBbUR0RixDQUFBLENBQUcsQ0FBRyxLQUFLLEtBQUwsQ0FBVyxDQUFYLENBbkRnRixDQW9EdEYsQ0FBTyxDQUFHLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixDQUFvQixJQUFwQixDQUEwQixJQUExQixDQXBENEUsQ0FxRHRGLENBQVcsQ0FBRyxDQUFJLENBQUMsUUFBTCxDQUFjLENBQWQsQ0FyRHdFLENBd0QxRixHQUFJLENBQUosQ0FDQyxNQUFPLENBQUEsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxnQkFBWCxDQUNMLENBQUksQ0FBQyxLQUFMLENBQVcsZUFBWCxDQUNDLENBREQsQ0FESyxDQUlMLENBQUksQ0FBQyxLQUFMLENBQVcsZUFBWCxFQUpLLEVBS0osRUFMSCxDQU9BLENBQVMsQ0FBRyxDQUFJLENBQUMsS0FBTCxDQUFXLGdCQUFYLENBQ1gsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxlQUFYLENBQ0MsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxVQUFYLEVBREQsQ0FFQyxDQUZELENBRFcsQ0FLWCxDQUFJLENBQUMsS0FBTCxDQUFXLGVBQVgsRUFMVyxFQU1WLEVBdEV1RixDQXdFekYsQ0FBUyxDQUFDLE9BQVYsQ0FBa0IsQ0FBbEIsQ0F4RXlGLENBeUV6RixDQUFTLENBQUMsR0FBVixDQUFjLEdBQWQsQ0F6RXlGLENBMkUxRixDQUFFLENBQUcsQ0FBUyxDQUFDLHFCQUFWLEVBM0VxRixDQTRFMUYsQ0FBRSxDQUFDLEdBQUgsQ0FBUyxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUUsQ0FBQyxHQUFILENBQU8sUUFBUCxFQUFYLENBNUVpRixDQTZFMUYsQ0FBRSxDQUFDLEdBQUgsQ0FBTyxjQUFQLENBQXdCLENBQUMsQ0FBRCxDQTdFa0UsQ0E4RTFGLENBQUUsQ0FBQyxPQUFILENBQWEsT0FBTyxDQUFDLFVBQVIsQ0FBbUIsQ0FBRSxDQUFDLEdBQXRCLEVBQTJCLFNBQTNCLEVBOUU2RSxJQStFdEYsQ0FBQSxDQUFRLENBQUcsQ0FDZCxNQUFNLENBQUUsQ0FBRSxDQUFDLElBQUgsYUFBZSxDQUFFLENBQUMsT0FBbEIsQ0FETSxDQUVkLFVBQVUsQ0FBRSxDQUZFLENBL0UyRSxDQW1GdEYsQ0FBVyxDQUFHLE9BQU8sQ0FDeEIsTUFEaUIsQ0FDVixDQUFXLENBQUMsT0FBWixDQUFvQixPQUFwQixDQUE2QixTQUE3QixDQURVLEVBRWpCLE9BRmlCLENBRVQsQ0FGUyxDQUVDLENBQUMsSUFBSSxDQUFFLENBQVAsQ0FGRCxDQW5Gd0UsQ0F1RjFGLENBQUksQ0FBQyxRQUFMLENBQWMsT0FBZCxDQUFzQixTQUFBLENBQUMsQ0FBSSxDQUMxQixDQUFXLENBQUMsT0FBWixDQUFvQixDQUFDLENBQUMsSUFBdEIsQ0FBNEIsQ0FBQyxDQUFDLE1BQTlCLENBQ0EsQ0FGRCxDQXZGMEYsSUEwRnRGLENBQUEsQ0FBTSxDQUFHLENBQVcsQ0FBQyxNQUFaLEVBMUY2RSxDQTJGdEYsQ0FBSyxDQUFHLE9BQU8sQ0FBQyxVQUFSLENBQW1CLENBQW5CLEVBQTJCLFFBQTNCLEVBM0Y4RSxDQWlHMUYsTUFMQSxDQUFBLENBQU0sQ0FBRyxDQUNSLEdBQUcsQ0FBRSxDQURHLENBRVIsR0FBRyxDQUFFLENBRkcsQ0FHUixJQUFJLENBQUUsQ0FBRSxDQUFDLElBQUgsYUFBZSxDQUFFLENBQUMsT0FBbEIsQ0FIRSxDQUtULENBQU8sQ0FDUCxDLFNBR0YsTUFBTSxDQUFDLE9BQVAsQ0FBaUIsVzs7Ozs7dy9CQzNVYixDQUFBLEdBQUcsQ0FBRyxDQUNULEtBQUssQ0FBRSxnQkFERSxDQUVULEtBQUssQ0FBRSxnQkFGRSxDQUdULEVBQUUsQ0FBRSxnQkFISyxDQUlULElBQUksQ0FBRSxrQkFKRyxDQUtULE9BQU8sQ0FBRSxrQkFMQSxDQU1ULE9BQU8sQ0FBRSxrQkFOQSxDQU9ULFdBQVcsQ0FBRSxzQkFQSixDQVFULFNBQVMsQ0FBRSxvQkFSRixDQVNULElBQUksQ0FBRSxlQVRHLENBVVQsTUFBTSxDQUFFLGlCQVZDLENBV1QsU0FBUyxDQUFFLG9CQVhGLENBWVQsTUFBTSxDQUFFLGlCQVpDLENBYVQsVUFBVSxDQUFFLHFCQWJILEMsQ0FnQk4sNkJBQTZCLENBQUcsQ0FDbkMsZUFEbUMsQ0FFbkMsVUFGbUMsQyxDQUtoQyx5QkFBeUIsQ0FBRyxTQUFDLENBQUQsQ0FBMEIsSUFBbEIsQ0FBQSxDQUFrQiw2REFDckQsQ0FBTSxDQUFHLEVBRDRDLENBVXpELE1BUkksQ0FBQSxDQVFKLEdBUEMsQ0FBTSxDQUFHLEdBT1YsRUFMbUIsSUFBZixHQUFBLENBQUssQ0FBQyxJQUtWLENBSkMsQ0FBTSxlQUFTLENBQUssQ0FBQyxJQUFmLGVBQXdCLENBQUssQ0FBQyxVQUE5QixLQUlQLENBSDBCLFFBQWYsR0FBQSxDQUFLLENBQUMsSUFHakIsR0FGQyxDQUFNLGFBQVEsQ0FBSyxDQUFDLElBQWQsYUFBc0IsQ0FBSyxDQUFDLFVBQTVCLEtBRVAsRUFBTyxDQUNQLEMsQ0FFRyxPQUFPLENBQUcsVUFBWSxDQUd6QixPQUhjLENBQUEsQ0FHZCx3REFIa0IsRUFHbEIsQ0FGSSxDQUFNLENBQUcsRUFFYixDQURJLENBQUssQ0FBRyxnRUFDWixDQUFTLENBQUMsQ0FBRyxDQUFiLENBQWdCLENBQUMsQ0FBRyxDQUFwQixDQUF5QixDQUFDLEVBQUksQ0FBOUIsQ0FDQyxDQUFNLEVBQUksQ0FBSyxDQUFDLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBSSxDQUFDLE1BQUwsR0FBZ0IsQ0FBSyxDQUFDLE1BQWpDLENBQUQsQ0FBZixDQUVELE1BQU8sQ0FBQSxDQUNQLEMsQ0FFSyxVLFlBQ0wsWUFBb0MsWUFBdkIsQ0FBdUIsd0RBQWYsQ0FBQyxPQUFPLENBQUUsRUFBVixDQUFlLHlCQUNuQyxHQUFNLENBQUEsQ0FBSSxDQUFHLElBQWIsQ0FDQSxDQUFJLENBQUMsVUFBTCxDQUFrQixTQUZpQixDQUduQyxDQUFJLENBQUMsS0FBTCxDQUFhLENBSHNCLENBSW5DLENBQUssQ0FBQyxHQUFOLENBQVksQ0FDWCxLQUFLLENBQUUsQ0FDTixJQUFJLENBQUUsQ0FEQSxDQUVOLE1BQU0sQ0FBRSxDQUZGLENBREksQ0FLWCxHQUFHLENBQUUsQ0FDSixJQUFJLENBQUUsQ0FERixDQUVKLE1BQU0sQ0FBRSxDQUZKLENBTE0sQ0FTWCxJQUFJLENBQUUsTUFUSyxDQUp1QixDQWVuQyxDQUFLLENBQUMsU0FBTixDQUFrQiw0QkFBVSxDQUFJLENBQUMsS0FBTCxDQUFXLEdBQVgsQ0FBZSxLQUFmLENBQXFCLElBQS9CLGFBQXVDLENBQUksQ0FBQyxLQUFMLENBQVcsR0FBWCxDQUFlLEtBQWYsQ0FBcUIsTUFBNUQsYUFBc0UsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYLENBQWUsR0FBZixDQUFtQixJQUF6RixhQUFpRyxDQUFJLENBQUMsS0FBTCxDQUFXLEdBQVgsQ0FBZSxHQUFmLENBQW1CLE1BQXBILE1BZmlCLENBaUJuQyxDQUFLLENBQUMsaUJBQU4sQ0FBMEIsR0FBSSxDQUFBLEdBakJLLENBa0JuQyxDQUFLLENBQUMsSUFBTixDQUFhLENBQUssQ0FBQyxPQWxCZ0IsQ0FtQmhDLENBQUssQ0FBQyxPQUFOLENBQWdCLENBQUssQ0FBQyxPQW5CVSxDQW9CaEMsQ0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFkLENBQXFCLEVBcEJXLENBcUJoQyxDQUFLLENBQUMsT0FBTixDQUFjLElBQWQsQ0FBcUIsTUFyQlcsQ0FzQmhDLENBQUssQ0FBQyxlQUFOLENBQXdCLFVBQU0sSUFDekIsQ0FBQSxDQUFNLENBQUcsQ0FBSyxDQUFDLE9BRFUsQ0FFekIsQ0FBVSxDQUFHLENBQ2hCLE9BQU8sQ0FBRSxDQUNQLEdBQUcsQ0FBRSxHQUFJLENBQUEsR0FERixDQUVQLE9BQU8sQ0FBRSxHQUFJLENBQUEsR0FGTixDQUdQLFNBQVMsQ0FBRSxHQUFJLENBQUEsR0FIUixDQUlQLE1BQU0sQ0FBRSxHQUFJLENBQUEsR0FKTCxDQUtQLE1BQU0sQ0FBRSxDQUxELENBRE8sQ0FRaEIsY0FBYyxDQUFFLENBQUssQ0FBQyxPQUFOLENBQWMsY0FSZCxDQVNoQixXQUFXLENBQUUsQ0FBSyxDQUFDLE9BQU4sQ0FBYyxXQVRYLENBRlksQ0FhN0IsQ0FBVSxDQUFDLElBQVgsQ0FBa0IsRUFiVyxDQWM3QixDQUFVLENBQUMsaUJBQVgsR0FkNkIsQ0FlN0IsQ0FBVSxDQUFDLElBQVgsQ0FBa0IsQ0FBSyxDQUFDLEdBQU4sQ0FBVSxJQWZDLENBZ0I3QixDQUFLLENBQUMsT0FBTixDQUFnQixDQUNoQixDQXZDK0IsQ0F5Q2hDLENBQUssQ0FBQyxPQUFOLENBQWdCLFNBQUMsQ0FBRCxDQUFVLENBQ3pCLENBQUssQ0FBQyxHQUFOLENBQVUsSUFBVixDQUFpQixDQUNqQixDQTNDK0IsQ0E2Q2hDLENBQUssQ0FBQyxPQUFOLENBQWdCLFVBQU0sUUFDakIsQ0FBQSxDQUFJLENBQUcsQ0FBSyxDQUFDLEdBQU4sQ0FBVSxJQURBLENBRWpCLENBQUcsQ0FBRyxDQUFLLENBQUMsT0FGSyxDQUdkLENBQUcsRUFBSSxDQUFHLENBQUMsT0FIRyxFQUlwQixDQUFJLFdBQU0sQ0FBRyxDQUFDLElBQVYsY0FBbUIsQ0FBbkIsQ0FKZ0IsQ0FLcEIsQ0FBRyxDQUFHLENBQUcsQ0FBQyxPQUFKLENBQVksTUFMRSxDQU9yQixNQUFPLENBQUEsQ0FDUCxDQXJEK0IsQ0F1RGhDLENBQUssQ0FBQyxnQkFBTixDQUF5QixVQUFNLENBQzlCLENBQUssQ0FBQyxPQUFOLENBQWdCLENBQUssQ0FBQyxPQUFOLENBQWMsT0FBZCxDQUFzQixNQUN0QyxDQXpEK0IsQ0EyRGhDLENBQUssQ0FBQyxtQkFBTixDQUE0QixTQUFDLENBQUQsQ0FBUyxJQUNoQyxDQUFBLENBQUksQ0FBRyxDQUR5QixDQUVoQyxDQUFNLENBQUcsQ0FBSSxDQUFDLE1BQUwsQ0FBWSxNQUFaLENBQW1CLENBQUksQ0FBQyxXQUF4QixDQUFxQyxDQUFJLENBQUMsV0FBMUMsQ0FBdUQsQ0FBdkQsQ0FBNEQsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYLENBQWUsS0FBZixDQUFxQixJQUFqRixDQUZ1QixDQUdwQyxNQUFPLENBQUEsQ0FDUCxDQS9EK0IsQ0FpRWhDLENBQUssQ0FBQyxPQUFOLENBQWMsY0FBZCxDQUErQixVQUFpQyxJQUFoQyxDQUFBLENBQWdDLHdEQUEzQixFQUEyQixDQUF2QixDQUF1Qix3REFBbEIsQ0FBSyxDQUFDLE9BQVksT0FDM0QsQ0FBQSxDQUFFLENBQUMsT0FBSCxDQUFXLEdBQVgsQ0FBZSxHQUFmLENBQW1CLENBQW5CLENBRDJELENBRXZELENBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLEdBQWYsQ0FBbUIsQ0FBbkIsQ0FGdUQsQ0FJM0QsQ0FBRSxDQUFDLE9BQUgsQ0FBVyxPQUFYLENBQW1CLEdBQW5CLENBQXVCLENBQXZCLENBSjJELENBS3ZELENBQUUsQ0FBQyxPQUFILENBQVcsT0FBWCxDQUFtQixHQUFuQixDQUF1QixDQUF2QixDQUx1RCxDQU8zRCxDQUFFLENBQUMsT0FBSCxDQUFXLFNBQVgsQ0FBcUIsR0FBckIsQ0FBeUIsQ0FBekIsQ0FQMkQsQ0FRdkQsQ0FBRSxDQUFDLE9BQUgsQ0FBVyxTQUFYLENBQXFCLEdBQXJCLENBQXlCLENBQXpCLENBUnVELEdBVTNELENBQUUsQ0FBQyxPQUFILENBQVcsTUFBWCxDQUFrQixHQUFsQixDQUFzQixDQUF0QixDQVYyRCxFQVd2RCxDQUFFLENBQUMsT0FBSCxDQUFXLE1BQVgsQ0FBa0IsR0FBbEIsQ0FBc0IsQ0FBdEIsQ0FHUixDQS9FK0IsQ0FpRmhDLENBQUssQ0FBQyxPQUFOLENBQWMsV0FBZCxDQUE0QixVQUErQixJQUE5QixDQUFBLENBQThCLHdEQUEzQixFQUEyQixDQUF2QixDQUF1Qix3REFBbEIsQ0FBSyxDQUFDLE9BQVksU0FDckQsQ0FEcUQsTUFLdEQsU0FBQSxDQUFFLENBQUMsY0FBSCxFQUFtQyxDQUFFLENBQUMsY0FBSCxDQUFrQixDQUFsQixDQUFzQixDQUF0QixDQUxtQixNQVN0RCxDQUFFLENBQUMsT0FBSCxFQUFjLENBQUUsQ0FBQyxPQUFILENBQVcsTUFBekIsRUFBbUMsQ0FBRSxDQUFDLE9BQUgsQ0FBVyxNQUFYLENBQWtCLE9BVEMsR0FVbEQsQ0FBRSxDQUFDLFdBQUgsQ0FBZSxDQUFmLENBQW1CLENBQUUsQ0FBQyxPQUFILENBQVcsTUFBOUIsQ0FWa0QsQ0FjMUQsQ0EvRitCLENBaUdoQyxDQUFLLENBQUMsZUFBTixFQUNILEMsK0RBRWdCLEMsQ0FBMEIsSUFBbkIsQ0FBQSxDQUFtQix3REFBSixFQUFJLENBQ3BDLENBQUksQ0FBRyxJQUQ2QixDQUcxQyxNQURBLENBQUEsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxnQkFBWCxFQUNBLENBQU8sQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxDQUFFLENBQUssQ0FBQyxNQUFOLENBQWUsQ0FBYyxDQUFDLE1BQTlCLENBQXVDLEdBRHhCLENBRXZCLFdBQVcsQ0FBRSxDQUFLLENBQUMsV0FBTixDQUFvQixDQUFjLENBQUMsV0FBbkMsQ0FBaUQsR0FGdkMsQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxDQUFLLENBQUMsRUFBUCxDQUFXLENBQWMsQ0FBQyxFQUExQixDQUE4QixHQUE5QixDQUFSLENBSG1CLENBQWpCLENBS1AsQyxzQ0FFYSxDQUNiLEdBQU0sQ0FBQSxDQUFJLENBQUcsSUFBYixDQUdBLE1BRkEsQ0FBQSxDQUFJLENBQUMsS0FBTCxDQUFXLGVBQVgsRUFFQSxDQURBLENBQUksQ0FBQyxLQUFMLENBQVcsT0FBWCxDQUFtQixpQkFBbkIsR0FDQSxDQUFPLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sQ0FBRSxHQURlLENBRXZCLFdBQVcsQ0FBRSx3QkFGVSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLHdCQUFELENBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLCtDQUVxQixDLENBQU0sQyxDQUFpQixDQUM1QyxHQUFJLENBQUEsQ0FBSSxDQUFHLElBQVgsQ0FDQSxNQUFPLENBQUEsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxDQUFFLENBQUksQ0FBQyxNQUFMLENBQWMsR0FBZCxDQUFvQixDQUFlLENBQUMsTUFEckIsQ0FFdkIsV0FBVyx1Q0FBaUMsQ0FBSSxDQUFDLFdBQXRDLGNBQXNELENBQWUsQ0FBQyxXQUF0RSxLQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsOEJBQUQsQ0FBaUMsQ0FBSSxDQUFDLEVBQXRDLENBQTBDLElBQTFDLENBQWdELENBQWUsQ0FBQyxFQUFoRSxDQUFvRSxHQUFwRSxDQUFSLENBSG1CLENBQWpCLENBS1AsQywwQ0FFZ0IsQyxDQUFJLEMsQ0FBWSxDQUNoQyxHQUFJLENBQUEsQ0FBSSxDQUFHLElBQVgsQ0FDQSxNQUFPLENBQUEsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxDQUFFLENBQUUsQ0FBRyxDQUFVLENBQUMsTUFERCxDQUV2QixXQUFXLGNBQU8sQ0FBUCxlQUFjLENBQVUsQ0FBQyxXQUF6QixLQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsS0FBRCxDQUFPLENBQVAsQ0FBVyxLQUFYLENBQWlCLENBQVUsQ0FBQyxFQUE1QixDQUFnQyxHQUFoQyxDQUFSLENBSG1CLENBQWpCLENBS1AsQyxpREFFdUIsQyxDQUFNLEMsQ0FBTSxDLENBQVksSUFDekMsQ0FBQSxDQUFJLENBQUcsSUFEa0MsQ0FFM0MsQ0FBYyxDQUFHLENBRjBCLENBTS9DLE1BSGEsSUFBVCxHQUFBLENBR0osR0FGQyxDQUFjLGFBQU8sQ0FBUCxNQUVmLEVBQU8sQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUwsYUFBYSxDQUFVLENBQUMsTUFBeEIsQ0FEaUIsQ0FFdkIsV0FBVyxZQUFNLENBQU4sYUFBd0IsQ0FBVSxDQUFDLFdBQW5DLEtBRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxHQUFELENBQU0sQ0FBTixDQUFzQixHQUF0QixDQUEyQixDQUFVLENBQUMsRUFBdEMsQ0FBMEMsR0FBMUMsQ0FBUixDQUhtQixDQUFqQixDQUtQLEMsMENBRWdCLEMsQ0FBaUIsQyxDQUF3QixJQUNuRCxDQUFBLENBQUksQ0FBRyxJQUQ0QyxDQUVyRCxDQUFNLENBQUcsSUFGNEMsQ0FrQnpELE1BZEksVUFBQSxDQWNKLEVBYkMsQ0FBc0IsQ0FBRyxDQWExQixDQVpDLENBQU0sQ0FBRyxDQUNSLE1BQU0sQ0FBRSxDQUFzQixDQUFDLE1BRHZCLENBRVIsV0FBVyxDQUFFLENBQXNCLENBQUMsV0FGNUIsQ0FHUixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQXNCLENBQUMsRUFBeEIsQ0FBUixDQUhJLENBWVYsRUFOQyxDQUFNLENBQUcsQ0FDUixNQUFNLENBQUUsQ0FBZSxDQUFDLE1BQWhCLENBQXlCLEdBQXpCLENBQStCLENBQXNCLENBQUMsTUFEdEQsQ0FFUixXQUFXLENBQUUsQ0FBZSxDQUFDLFdBQWhCLENBQThCLEdBQTlCLENBQW9DLENBQXNCLENBQUMsV0FGaEUsQ0FHUixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQWUsQ0FBQyxFQUFqQixDQUFxQixHQUFyQixDQUEwQixDQUFzQixDQUFDLEVBQWpELENBQVIsQ0FISSxDQU1WLENBQU8sQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FBakIsQ0FDUCxDLDJDQUVpQixDLENBQUcsQyxDQUFJLEMsQ0FBRyxJQUN2QixDQUFBLENBQUksQ0FBRyxJQURnQixDQUV2QixDQUFLLENBQUcsRUFGZSxDQWdDM0IsTUEzQkUsQ0FBQSxDQTJCRixDQTVCTSxJQTRCTixHQTdCUSxDQTZCUixDQTNCVSxPQTJCVixDQXpCTSxJQXlCTixHQTdCUSxDQTZCUixDQXhCVSxNQXdCVixDQXRCTSxLQXNCTixHQTdCUSxDQTZCUixDQXJCVSxNQXFCVixDQW5CTSxLQW1CTixHQTdCUSxDQTZCUixDQWxCVSxRQWtCVixDQWhCTSxHQWdCTixHQTdCUSxDQTZCUixDQWZVLE1BZVYsQ0FiTSxHQWFOLEdBN0JRLENBNkJSLENBWlUsTUFZVixDQVZNLElBVU4sR0E3QlEsQ0E2QlIsQ0FUVSxRQVNWLENBUE0sSUFPTixHQTdCUSxDQTZCUixDQU5VLFFBTVYsQ0FIVSxDQUdWLENBQU8sQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUMsQ0FBQyxNQUFQLFNBQWdCLENBQWhCLFNBQXdCLENBQUMsQ0FBQyxNQUExQixDQURpQixDQUV2QixXQUFXLG9DQUE2QixDQUE3QixlQUFvQyxDQUFDLENBQUMsV0FBdEMsYUFBcUQsQ0FBQyxDQUFDLFdBQXZELEtBRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQywyQkFBRCxDQUE2QixDQUE3QixDQUFpQyxLQUFqQyxDQUF1QyxDQUFDLENBQUMsRUFBekMsQ0FBNkMsR0FBN0MsQ0FBa0QsQ0FBQyxDQUFDLEVBQXBELENBQXdELEdBQXhELENBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLHlDQUVlLEMsQ0FBTSxDQUNyQixHQUFJLENBQUEsQ0FBSSxDQUFHLElBQVgsQ0FDQSxNQUFPLENBQUEsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUwsQ0FEaUIsQ0FFdkIsV0FBVyxXQUFLLENBQUwsQ0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxXQUFJLENBQUosRUFBUixDQUhtQixDQUFqQixDQUtQLEMsbUNBNkNTLEMsQ0FBZ0IsQ0FDekIsR0FBTSxDQUFBLENBQUksQ0FBRyxJQUFiLENBQ0EsTUFBTyxDQUFBLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sQ0FBRSxDQURlLENBRXZCLFdBQVcsQ0FBRSxDQUZVLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsQ0FBRCxDQUFSLENBSG1CLENBSXZCLFNBQVMsR0FKYyxDQUFqQixDQU1QLEMsNENBRWtCLEMsQ0FBWSxDQUM5QixHQUFJLENBQUEsQ0FBSSxDQUFHLElBQVgsQ0FDQSxNQUFPLENBQUEsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxZQUFNLENBQVUsQ0FBQyxNQUFqQixLQURpQixDQUV2QixXQUFXLFlBQU0sQ0FBVSxDQUFDLFdBQWpCLEtBRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxHQUFELENBQU0sQ0FBVSxDQUFDLEVBQWpCLENBQXFCLEdBQXJCLENBQVIsQ0FIbUIsQ0FJdkIsS0FBSyxDQUFFLENBQVUsQ0FBQyxXQUpLLENBQWpCLENBTVAsQyxvREFFMEIsQyxDQUFHLEMsQ0FBRyxDQUNoQyxHQUFJLENBQUEsQ0FBSSxDQUFHLElBQVgsQ0FlQSxNQWRpQixRQUFiLFFBQU8sQ0FBQSxDQWNYLEdBYkMsQ0FBQyxDQUFHLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3BCLE1BQU0sQ0FBRSxFQURZLENBRXBCLFdBQVcsQ0FBRSxHQUZPLENBR3BCLEVBQUUsQ0FBRSxHQUhnQixDQUFqQixDQWFMLEVBUGlCLFFBQWIsUUFBTyxDQUFBLENBT1gsR0FOQyxDQUFDLENBQUcsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDcEIsTUFBTSxDQUFFLEVBRFksQ0FFcEIsV0FBVyxDQUFFLFdBRk8sQ0FHcEIsRUFBRSxDQUFFLFdBSGdCLENBQWpCLENBTUwsRUFBTyxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFlBQU0sQ0FBQyxDQUFDLE1BQVIsYUFBa0IsQ0FBQyxDQUFDLE1BQXBCLEtBRGlCLENBRXZCLFdBQVcsa0JBQVksQ0FBQyxDQUFDLFdBQWQsYUFBNkIsQ0FBQyxDQUFDLFdBQS9CLEtBRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxTQUFELENBQVksQ0FBQyxDQUFDLEVBQWQsQ0FBa0IsR0FBbEIsQ0FBdUIsQ0FBQyxDQUFDLEVBQXpCLENBQTZCLEdBQTdCLENBQVIsQ0FIbUIsQ0FJdkIsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLFdBQUgsQ0FBZ0IsQ0FBQyxDQUFDLFdBQWxCLENBSmUsQ0FBakIsQ0FNUCxDLHVDQUV3QyxJQUE1QixDQUFBLENBQTRCLHdEQUFoQixFQUFnQixDQUFaLENBQVksd0NBQ3BDLENBQUksQ0FBRyxJQUQ2QixPQUV4QyxDQUFBLENBQUksQ0FBQyxLQUFMLENBQVcsR0FBWCxDQUFlLElBQWYsQ0FBc0IsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxPQUFYLENBQW1CLElBRkQsQ0FHcEMsU0FBQSxDQUhvQyxDQUloQyxDQUFJLENBQUMsV0FBTCxFQUpnQyxDQU1qQyxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBVyxDQUFDLE1BQWpCLFNBQTBCLENBQVUsQ0FBQyxNQUFyQyxLQURpQixDQUV2QixXQUFXLFdBQUssQ0FBVyxDQUFDLFdBQWpCLFNBQStCLENBQVUsQ0FBQyxXQUExQyxLQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsQ0FBVyxDQUFDLEVBQWIsQ0FBaUIsQ0FBVSxDQUFDLEVBQTVCLENBQWdDLEdBQWhDLENBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLHdDQUVjLEMsQ0FBWSxDQUMxQixHQUFNLENBQUEsQ0FBSSxDQUFHLElBQWIsQ0FFQSxNQURBLENBQUEsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYLENBQWUsSUFBZixDQUFzQixDQUN0QixDQUFPLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sV0FBSyxDQUFMLENBRGlCLENBRXZCLFdBQVcsYUFBTSxDQUFOLE1BRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxJQUFELENBQU0sQ0FBTixDQUFrQixJQUFsQixDQUFSLENBSG1CLENBQWpCLENBS1AsQyw0Q0FFa0IsQyxDQUFRLElBQ3BCLENBQUEsQ0FBSSxDQUFHLElBRGEsQ0FFdEIsQ0FBVSxDQUFHLEVBRlMsQ0FTMUIsTUFOQSxDQUFBLENBQU0sQ0FBQyxNQUFQLENBQWMsT0FBZCxDQUFzQixTQUFDLENBQUQsQ0FBSyxDQUFMLENBQWUsQ0FDdEIsQ0FBVixHQUFBLENBRGdDLEdBRW5DLENBQVUsRUFBSSxHQUZxQixFQUlwQyxDQUFVLGNBQVEsQ0FBUixNQUNWLENBTEQsQ0FNQSxDQUFPLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sWUFBTSxDQUFNLENBQUMsTUFBYixLQURpQixDQUV2QixXQUFXLFlBQU0sQ0FBTixLQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsR0FBRCxDQUFNLENBQU4sQ0FBa0IsR0FBbEIsQ0FBUixDQUhtQixDQUFqQixDQUtQLEMsZ0RBRXNCLEMsQ0FBTSxDLENBQU0sQyxDQUFPLElBQ3JDLENBQUEsQ0FBSSxDQUFHLElBRDhCLENBRW5DLENBQUssQ0FBRyxDQUFJLENBQUMsS0FGc0IsQ0FHekMsR0FBSSxDQUFJLEdBQUksQ0FBQSxHQUFaLENBQ0MsOEJBQXdCLENBQXhCLGlDQUFvRCxDQUFLLENBQUMsU0FBTixFQUFwRCxFQUVELEdBQUksQ0FBSyxDQUFDLE9BQU4sQ0FBYyxjQUFkLENBQTZCLENBQTdCLENBQUosQ0FDQyw4QkFBd0IsQ0FBeEIsd0RBQTJFLENBQUssQ0FBQyxTQUFOLEVBQTNFLEVBY0QsTUFaYSxLQUFULEdBQUEsQ0FZSixFQVhDLENBQUssQ0FBQyxPQUFOLENBQWMsT0FBZCxDQUFzQixHQUF0QixDQUEwQixHQUExQixDQUE4QixDQUE5QixJQVdELENBVGEsU0FBVCxHQUFBLENBU0osRUFSQyxDQUFLLENBQUMsT0FBTixDQUFjLE9BQWQsQ0FBc0IsT0FBdEIsQ0FBOEIsR0FBOUIsQ0FBa0MsQ0FBbEMsSUFRRCxDQU5hLFdBQVQsR0FBQSxDQU1KLEVBTEMsQ0FBSyxDQUFDLE9BQU4sQ0FBYyxPQUFkLENBQXNCLFNBQXRCLENBQWdDLEdBQWhDLENBQW9DLENBQXBDLElBS0QsQ0FIYSxRQUFULEdBQUEsQ0FHSixFQUZDLENBQUssQ0FBQyxPQUFOLENBQWMsT0FBZCxDQUFzQixNQUF0QixDQUE2QixHQUE3QixDQUFpQyxDQUFqQyxJQUVELENBQU8sQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUwsYUFBYSxDQUFJLENBQUMsTUFBbEIsZUFBOEIsQ0FBSyxDQUFDLE1BQXBDLENBRGlCLENBRXZCLFdBQVcsK0NBQXdDLENBQXhDLG9CQUFzRCxDQUFJLENBQUMsV0FBM0QsbUJBQWdGLENBQUssQ0FBQyxXQUF0RixNQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsc0NBQUQsQ0FBd0MsQ0FBeEMsQ0FBOEMsVUFBOUMsQ0FBeUQsQ0FBSSxDQUFDLEVBQTlELENBQWtFLFNBQWxFLENBQTZFLENBQUssQ0FBQyxFQUFuRixDQUF1RixJQUF2RixDQUFSLENBSG1CLENBQWpCLENBS1AsQyw2Q0FFbUIsQyxDQUFZLENBQy9CLEdBQU0sQ0FBQSxDQUFJLENBQUcsSUFBYixDQUVBLE1BREEsQ0FBQSxDQUFJLENBQUMsS0FBTCxDQUFXLGdCQUFYLEVBQ0EsQ0FBTyxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBVSxDQUFDLE1BQWhCLEtBRGlCLENBRXZCLFdBQVcsV0FBSyxDQUFVLENBQUMsV0FBaEIsS0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQVUsQ0FBQyxFQUFaLENBQWdCLEdBQWhCLENBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLHlDQUVlLEMsQ0FBWSxDLENBQWdCLENBQzNDLEdBQUksQ0FBQSxDQUFJLENBQUcsSUFBWCxDQUQyQyxNQUV2QyxVQUFBLENBRnVDLENBR25DLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sQ0FBRSxDQUFVLENBQUMsTUFESSxDQUV2QixXQUFXLENBQUUsQ0FBVSxDQUFDLFdBRkQsQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxDQUFVLENBQUMsRUFBWixDQUFSLENBSG1CLENBQWpCLENBSG1DLENBU3BDLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sV0FBSyxDQUFVLENBQUMsTUFBaEIsYUFBMEIsQ0FBYyxDQUFDLE1BQXpDLENBRGlCLENBRXZCLFdBQVcsV0FBSyxDQUFVLENBQUMsV0FBaEIsYUFBK0IsQ0FBYyxDQUFDLFdBQTlDLENBRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxDQUFVLENBQUMsRUFBWixDQUFnQixHQUFoQixDQUFxQixDQUFjLENBQUMsRUFBcEMsQ0FBUixDQUhtQixDQUFqQixDQUtQLEMscUNBRVcsQyxDQUFNLEMsQ0FBVSxDLENBQVUsSUFDL0IsQ0FBQSxDQUFJLENBQUcsSUFEd0IsQ0FFL0IsQ0FBSyxDQUFHLENBQUksQ0FBQyxLQUZrQixPQUliLHNCQUFwQixHQUFBLENBQUksQ0FBQyxVQUo0QixDQUtuQixLQUFiLEdBQUEsQ0FMZ0MsQ0FNNUIsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUksQ0FBQyxNQUFWLGFBQW9CLENBQXBCLENBRGlCLENBRXZCLFdBQVcsV0FBSyxDQUFJLENBQUMsV0FBVixlQUEwQixDQUExQixNQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsQ0FBSSxDQUFDLEVBQU4sQ0FBVSxLQUFWLENBQWdCLENBQWhCLENBQTBCLElBQTFCLENBQVIsQ0FIbUIsQ0FBakIsQ0FONEIsQ0FZbkIsU0FBYixHQUFBLENBWmdDLENBYS9CLENBQVEsQ0FBQyxNQWJzQixDQWUzQixDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBSSxDQUFDLE1BQVYsU0FBbUIsQ0FBUSxDQUFDLE1BQTVCLENBRGlCLENBRXZCLFdBQVcsV0FBSyxDQUFJLENBQUMsV0FBVixhQUF5QixDQUFRLENBQUMsTUFBVCxDQUFnQixDQUFoQixDQUF6QixhQUErQyxDQUFRLENBQUMsTUFBVCxDQUFnQixDQUFoQixDQUEvQyxDQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsQ0FBSSxDQUFDLEVBQU4sQ0FBVSxHQUFWLENBQWUsQ0FBUSxDQUFDLE1BQVQsQ0FBZ0IsQ0FBaEIsQ0FBZixDQUFtQyxHQUFuQyxDQUF3QyxDQUFRLENBQUMsTUFBVCxDQUFnQixDQUFoQixDQUF4QyxDQUFSLENBSG1CLENBQWpCLENBZjJCLENBc0I1QixDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBSSxDQUFDLE1BQVYsYUFBb0IsQ0FBUSxDQUFDLE1BQTdCLEtBRGlCLENBRXZCLFdBQVcsV0FBSyxDQUFJLENBQUMsV0FBVixhQUF5QixDQUFRLENBQUMsS0FBbEMsQ0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQUksQ0FBQyxFQUFOLENBQVUsR0FBVixDQUFlLENBQVEsQ0FBQyxLQUF4QixDQUFSLENBSG1CLENBQWpCLENBdEI0QixDQTZCN0IsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUwsQ0FEaUIsQ0FFdkIsV0FBVyxhQUFNLENBQU4sTUFGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLElBQUQsQ0FBTSxDQUFOLENBQVksSUFBWixDQUFSLENBSG1CLENBQWpCLENBN0I2QixDQW9DakMsU0FBQSxDQXBDaUMsQ0FzQ2hDLENBQUksR0FBSSxDQUFBLEdBdEN3QixDQXVDNUIsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUwsQ0FEaUIsQ0FFdkIsV0FBVyxXQUFLLEdBQUcsQ0FBQyxDQUFELENBQVIsQ0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQUosQ0FBUixDQUhtQixDQUFqQixDQXZDNEIsQ0E2QzJCLENBQUMsQ0FBNUQsR0FBQSw2QkFBNkIsQ0FBQyxPQUE5QixDQUFzQyxLQUFLLFVBQTNDLENBN0NnQyxDQW9EN0IsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUwsQ0FEaUIsQ0FFdkIsV0FBVyw4QkFBdUIsQ0FBdkIsT0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLHFCQUFELENBQXVCLENBQXZCLENBQTZCLEtBQTdCLENBQVIsQ0FIbUIsQ0FBakIsQ0FwRDZCLENBOEM1QixDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBTCxDQURpQixDQUV2QixXQUFXLFdBQUssQ0FBTCxDQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsQ0FBRCxDQUFSLENBSG1CLENBQWpCLENBOUM0QixDQTJEcEIsS0FBYixHQUFBLENBM0RpQyxDQTZEN0IsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUksQ0FBQyxNQUFWLGFBQW9CLENBQXBCLENBRGlCLENBRXZCLFdBQVcsV0FBSyxDQUFJLENBQUMsV0FBVixlQUEwQixDQUExQixPQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsQ0FBSSxDQUFDLEVBQU4sQ0FBVSxLQUFWLENBQWdCLENBQWhCLENBQTBCLEtBQTFCLENBQVIsQ0FIbUIsQ0FBakIsQ0E3RDZCLENBbUU3QixDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBSSxDQUFDLE1BQVYsU0FBbUIsQ0FBUSxDQUFDLE1BQTVCLENBRGlCLENBRXZCLFdBQVcsV0FBSyxDQUFJLENBQUMsV0FBVixTQUF3QixDQUFRLENBQUMsV0FBakMsQ0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQUksQ0FBQyxFQUFOLENBQVUsQ0FBUSxDQUFDLEVBQW5CLENBQVIsQ0FIbUIsQ0FBakIsQ0FNUixDLGlDQUVPLEMsQ0FBWSxDLENBQVEsQ0FDM0IsR0FBTSxDQUFBLENBQUksQ0FBRyxJQUFiLENBQ0EsR0FBSSxTQUFBLENBQUosQ0FDQyxNQUFPLENBQUEsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUwsQ0FEaUIsQ0FFdkIsV0FBVyxXQUFLLENBQUwsQ0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQUQsQ0FBUixDQUhtQixDQUl2QixNQUFNLENBQUUsQ0FBQyxDQUFELENBSmUsQ0FBakIsQ0FBUCxDQU9ELEdBQUksQ0FBQSxDQUFZLENBQUcsQ0FBTSxDQUFDLE1BQVAsQ0FBYyxLQUFkLEVBQW5CLENBRUEsTUFEQSxDQUFBLENBQVksQ0FBQyxPQUFiLENBQXFCLENBQXJCLENBQ0EsQ0FBTyxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBTCxhQUFtQixDQUFNLENBQUMsTUFBMUIsQ0FEaUIsQ0FFdkIsV0FBVyxXQUFLLENBQUwsYUFBbUIsQ0FBTSxDQUFDLFdBQTFCLENBRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxDQUFELENBQWEsR0FBYixDQUFrQixDQUFNLENBQUMsRUFBekIsQ0FBUixDQUhtQixDQUl2QixNQUFNLENBQUUsQ0FKZSxDQUFqQixDQU1QLEMsMkNBRWlCLEMsQ0FBUSxDQUN6QixHQUFNLENBQUEsQ0FBSSxDQUFHLElBQWIsQ0FDQSxNQUFPLENBQUEsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxrQkFBWSxDQUFaLENBRGlCLENBRXZCLFdBQVcsQ0FBRSxDQUFJLENBQUMsS0FBTCxDQUFXLG1CQUFYLENBQStCLENBQS9CLENBRlUsQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxDQUFJLENBQUMsS0FBTCxDQUFXLG1CQUFYLENBQStCLENBQS9CLENBQUQsQ0FBUixDQUhtQixDQUFqQixDQUtQLEMsMENBRWdCLEMsQ0FBZ0IsQ0FDaEMsR0FBTSxDQUFBLENBQUksQ0FBRyxJQUFiLENBRGdDLE1BRTVCLFVBQUEsQ0FGNEIsQ0FHeEIsQ0FBSSxDQUFDLFdBQUwsRUFId0IsQ0FLekIsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQWMsQ0FBQyxNQUFwQixDQURpQixDQUV2QixXQUFXLFdBQUssQ0FBYyxDQUFDLFdBQXBCLENBRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxDQUFjLENBQUMsRUFBaEIsQ0FBUixDQUhtQixDQUFqQixDQUtQLEMsMkNBRWlCLEMsQ0FBTSxDLENBQWlCLENBQ3hDLEdBQU0sQ0FBQSxDQUFJLENBQUcsSUFBYixDQUNBLE1BQU8sQ0FBQSxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBSSxDQUFDLE1BQVYsYUFBb0IsQ0FBZSxDQUFDLE1BQXBDLEtBRGlCLENBRXZCLFdBQVcsV0FBSyxDQUFJLENBQUMsV0FBVixhQUF5QixDQUFlLENBQUMsV0FBekMsS0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQUksQ0FBQyxFQUFOLENBQVUsR0FBVixDQUFlLENBQWUsQ0FBQyxFQUEvQixDQUFtQyxHQUFuQyxDQUFSLENBSG1CLENBQWpCLENBS1AsQyxtQ0FFUyxDLENBQWtCLEMsQ0FBVSxDLENBQVksQ0FDakQsR0FBTSxDQUFBLENBQUksQ0FBRyxJQUFiLENBRGlELE1BRWhDLEtBQWIsR0FBQSxDQUY2QyxDQUd6QyxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBZ0IsQ0FBQyxNQUF0QixhQUFnQyxDQUFVLENBQUMsTUFBM0MsQ0FEaUIsQ0FFdkIsV0FBVyxXQUFLLENBQWdCLENBQUMsV0FBdEIsZUFBc0MsQ0FBVSxDQUFDLFdBQWpELE9BRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxDQUFnQixDQUFDLEVBQWxCLENBQXNCLEtBQXRCLENBQTRCLENBQVUsQ0FBQyxFQUF2QyxDQUEyQyxLQUEzQyxDQUFSLENBSG1CLENBQWpCLENBSHlDLENBU3pDLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sV0FBSyxDQUFnQixDQUFDLE1BQXRCLFNBQStCLENBQVUsQ0FBQyxNQUExQyxDQURpQixDQUV2QixXQUFXLFdBQUssQ0FBZ0IsQ0FBQyxXQUF0QixTQUFvQyxDQUFVLENBQUMsV0FBL0MsQ0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQWdCLENBQUMsRUFBbEIsQ0FBc0IsQ0FBVSxDQUFDLEVBQWpDLENBQVIsQ0FIbUIsQ0FBakIsQ0FNUixDLHdDQUVjLEMsQ0FBSSxDQUNsQixNQUFPLENBQUEsQ0FDUCxDLHdDQUVjLEMsQ0FBWSxDLENBQWlCLENBQzNDLEdBQU0sQ0FBQSxDQUFJLENBQUcsSUFBYixDQUVBLE1BREEsQ0FBQSxDQUFJLENBQUMsS0FBTCxDQUFXLGdCQUFYLEVBQ0EsQ0FBTyxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBVSxDQUFDLE1BQWhCLFNBQXlCLENBQWUsQ0FBQyxNQUF6QyxLQURpQixDQUV2QixXQUFXLCtCQUF5QixDQUFlLENBQUMsV0FBekMsS0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLHNCQUFELENBQXlCLENBQWUsQ0FBQyxFQUF6QyxDQUE2QyxHQUE3QyxDQUFSLENBSG1CLENBQWpCLENBS1AsQyx5Q0FFZSxDLENBQUcsQ0FDbEIsR0FBTSxDQUFBLENBQUksQ0FBRyxJQUFiLENBQ0EsTUFBTyxDQUFBLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sV0FBSyxDQUFMLENBRGlCLENBRXZCLFdBQVcsV0FBSyxDQUFMLENBRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsV0FBSSxDQUFKLEVBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLHVDQUVhLEMsQ0FBTyxJQUNkLENBQUEsQ0FBSSxDQUFHLElBRE8sQ0FHaEIsQ0FBTyxDQUFHLGtDQUF5QixJQUF6QixDQUE4QixDQUE5QixDQUhNLENBSWhCLENBQUksQ0FBRyxDQUFPLENBQUMsQ0FBRCxDQUpFLENBS2hCLENBQVMsQ0FBRyxDQUFPLENBQUMsQ0FBRCxDQUxILENBTWhCLENBQUcsQ0FBRyxJQUFNLENBQUksQ0FBQyxPQUFMLENBQWEsT0FBYixDQUFzQixHQUF0QixFQUEyQixPQUEzQixDQUFtQyxLQUFuQyxDQUEwQyxNQUExQyxDQUFOLENBQTBELEdBTmhELENBT2hCLENBQU0sbUJBQWMsQ0FBZCxlQUFzQixDQUF0QixPQVBVLENBU3BCLE1BQU8sQ0FBQSxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBTCxDQURpQixDQUV2QixXQUFXLENBQUUsQ0FGVSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQUQsQ0FBUixDQUhtQixDQUFqQixDQUtQLEMsMkNBRWlCLEMsQ0FBWSxDQUM3QixHQUFNLENBQUEsQ0FBSSxDQUFHLElBQWIsQ0FDQSxNQUFPLENBQUEsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxrQkFBWSxDQUFVLENBQUMsTUFBdkIsQ0FEaUIsQ0FFdkIsV0FBVyxrQkFBWSxDQUFVLENBQUMsV0FBdkIsQ0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLFNBQUQsQ0FBWSxDQUFVLENBQUMsRUFBdkIsQ0FBUixDQUhtQixDQUFqQixDQUtQLEMsc0NBRWEsQ0FDYixHQUFNLENBQUEsQ0FBSSxDQUFHLElBQWIsQ0FFQSxNQURBLENBQUEsQ0FBSSxDQUFDLEtBQUwsQ0FBVyxlQUFYLEVBQ0EsQ0FBTyxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLENBQUUsR0FEZSxDQUV2QixXQUFXLENBQUUsbUNBRlUsQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxtQ0FBRCxDQUFSLENBSG1CLENBQWpCLENBS1AsQywwQ0FFZ0IsQyxDQUFZLEMsQ0FBZ0IsQyxDQUFhLElBQ25ELENBQUEsQ0FBSSxDQUFHLElBRDRDLENBRW5ELENBQUssQ0FBRyxDQUFJLENBQUMsS0FGc0MsQ0FHckQsQ0FBZSxDQUFHLEVBSG1DLENBb0N6RCxNQWhDMEIsR0FBdEIsR0FBQSxDQUFVLENBQUMsTUFnQ2YsR0EvQkMsQ0FBVyxDQUFHLENBK0JmLENBOUJDLENBQWMsQ0FBRyxDQThCbEIsRUE1QkksU0FBQSxDQTRCSixHQTNCQyxDQUFXLENBQUcsQ0EyQmYsQ0ExQkMsQ0FBYyxDQUFHLENBQ2hCLE1BQU0sQ0FBRSxFQURRLENBRWhCLFdBQVcsQ0FBRSxJQUZHLENBR2hCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsSUFBRCxDQUFSLENBSFksQ0FJaEIsTUFBTSxDQUFFLEVBSlEsQ0EwQmxCLEVBbEJJLFNBQUEsQ0FrQkosR0FqQkMsQ0FBYyxDQUFHLENBQ2hCLE1BQU0sQ0FBRSxFQURRLENBRWhCLFdBQVcsQ0FBRSxJQUZHLENBR2hCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsSUFBRCxDQUFSLENBSFksQ0FJaEIsTUFBTSxDQUFFLEVBSlEsQ0FpQmxCLEVBVEEsQ0FBYyxDQUFDLE1BQWYsQ0FBc0IsT0FBdEIsQ0FBOEIsU0FBQyxDQUFELENBQU0sQ0FBTixDQUFnQixDQUM3QyxDQUFlLEVBQUksOERBRVQsQ0FBRyxDQUFDLENBQUQsQ0FGTSw2QkFHSixDQUhJLDBCQUdrQixDQUFHLENBQUMsQ0FBRCxDQUhyQixrQkFHaUMsQ0FIakMsTUFJbkIsS0FDQSxDQU5ELENBU0EsQ0FEQSxDQUFLLENBQUMsZ0JBQU4sRUFDQSxDQUFPLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sV0FBSyxDQUFjLENBQUMsTUFBcEIsU0FBNkIsQ0FBVSxDQUFDLE1BQXhDLFNBQWlELENBQVcsQ0FBQyxNQUE3RCxLQURpQixDQUV2QixXQUFXLFdBQUssQ0FBVSxDQUFDLFdBQWhCLFNBQThCLENBQTlCLFNBQWdELENBQVcsQ0FBQyxXQUE1RCxNQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsQ0FBVSxDQUFDLEVBQVosQ0FBZ0IsQ0FBaEIsQ0FBaUMsQ0FBVyxDQUFDLEVBQTdDLENBQWlELElBQWpELENBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLHlDQUVlLEMsQ0FBb0IsQyxDQUFxQixDQUN4RCxHQUFNLENBQUEsQ0FBSSxDQUFHLElBQWIsQ0FJQSxNQUhBLENBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxpQkFBWixDQUdBLENBRkEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFaLENBQWdDLENBQWhDLENBRUEsQ0FBTyxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFlBQU0sQ0FBa0IsQ0FBQyxNQUF6QixLQURpQixDQUV2QixXQUFXLFdBQUssQ0FBa0IsQ0FBQyxXQUF4QixDQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsQ0FBa0IsQ0FBQyxFQUFwQixDQUFSLENBSG1CLENBSXZCLE1BQU0sQ0FBRSxDQUFrQixDQUFDLE1BSkosQ0FBakIsQ0FPUCxDLDZDQUVtQixDLENBQStCLEMsQ0FBb0IsQ0FDdEUsR0FBTSxDQUFBLENBQUksQ0FBRyxJQUFiLENBQ0EsR0FBSSxTQUFBLENBQUosQ0FDQyxNQUFPLENBQUEsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQTZCLENBQUMsTUFBbkMsQ0FEaUIsQ0FFdkIsV0FBVyxXQUFLLENBQTZCLENBQUMsV0FBbkMsQ0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQTZCLENBQUMsRUFBL0IsQ0FBUixDQUhtQixDQUl2QixNQUFNLENBQUUsQ0FBQyxDQUE2QixDQUFDLEtBQS9CLENBSmUsQ0FBakIsQ0FBUCxDQU9ELEdBQUksQ0FBQSxDQUFjLENBQUcsQ0FBa0IsQ0FBQyxNQUFuQixDQUEwQixLQUExQixFQUFyQixDQUVBLE1BREEsQ0FBQSxDQUFjLENBQUMsT0FBZixDQUF1QixDQUE2QixDQUFDLEtBQXJELENBQ0EsQ0FBTyxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBNkIsQ0FBQyxNQUFuQyxhQUE2QyxDQUFrQixDQUFDLE1BQWhFLENBRGlCLENBRXZCLFdBQVcsQ0FBRSxFQUZVLENBR3ZCLEVBQUUsQ0FBRSxFQUhtQixDQUl2QixNQUFNLENBQUUsQ0FKZSxDQUFqQixDQU1QLEMsd0RBRThCLEMsQ0FBWSxDLENBQVksQ0FDdEQsR0FBTSxDQUFBLENBQUksQ0FBRyxJQUFiLENBQ0EsTUFBTyxDQUFBLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sV0FBSyxDQUFMLGFBQW1CLENBQVUsQ0FBQyxNQUE5QixDQURpQixDQUV2QixXQUFXLENBQUUsRUFGVSxDQUd2QixFQUFFLENBQUUsRUFIbUIsQ0FJdkIsS0FBSyxDQUFFLENBQUMsQ0FBRCxDQUFhLENBQVUsQ0FBQyxXQUF4QixDQUpnQixDQUFqQixDQU1QLEMsOENBRW9CLEMsQ0FBWSxDQUNoQyxHQUFNLENBQUEsQ0FBSSxDQUFHLElBQWIsQ0FDQSxNQUFPLENBQUEsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxjQUFRLENBQVIsQ0FEaUIsQ0FFdkIsV0FBVyxDQUFFLEVBRlUsQ0FHdkIsRUFBRSxDQUFFLEVBSG1CLENBSXZCLEtBQUssQ0FBRSxDQUFDLENBQUQsQ0FKZ0IsQ0FBakIsQ0FNUCxDLHdDQUVjLEMsQ0FBSyxDQUNuQixHQUFNLENBQUEsQ0FBSSxDQUFHLElBQWIsQ0FDQSxHQUFJLENBQUcsQ0FBQyxTQUFSLENBQ0MsTUFBTyxDQUFBLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQWpCLENBQVAsQ0FFRCxHQUFJLENBQUEsQ0FBUyxDQUFHLENBQUcsQ0FDbEIsT0FEZSxDQUNQLGVBRE8sQ0FDVSxFQURWLEVBRWYsT0FGZSxDQUVQLE1BRk8sQ0FFQyxLQUZELEVBR2YsT0FIZSxDQUdQLE1BSE8sQ0FHQyxLQUhELENBQWhCLENBT0EsTUFIQSxDQUFBLE9BQU8sQ0FBQyxHQUFSLG9CQUNNLENBRE4sMkJBRVksQ0FGWixFQUdBLENBQU8sQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQUwsQ0FEaUIsQ0FFdkIsV0FBVyxDQUFFLENBRlUsQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxDQUFELENBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLDBDQUVnQixDLENBQVUsQyxDQUFZLENBQ3RDLEdBQU0sQ0FBQSxDQUFJLENBQUcsSUFBYixDQUNBLE1BQU8sQ0FBQSxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBTCxhQUFpQixDQUFVLENBQUMsTUFBNUIsQ0FEaUIsQ0FFdkIsV0FBVyxXQUFLLENBQUwsU0FBZ0IsQ0FBVSxDQUFDLFdBQTNCLENBRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxDQUFELENBQVcsQ0FBVSxDQUFDLEVBQXRCLENBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLHdDQUVjLEMsQ0FBUSxDLENBQVMsQ0FDL0IsR0FBTSxDQUFBLENBQUksQ0FBRyxJQUFiLENBRCtCLE1BRTNCLFVBQUEsQ0FGMkIsQ0FHdkIsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxlQUFTLENBQU0sQ0FBQyxNQUFoQixDQURpQixDQUV2QixXQUFXLHNCQUFnQixDQUFNLENBQUMsV0FBdkIsTUFGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLGFBQUQsQ0FBZ0IsQ0FBTSxDQUFDLEVBQXZCLENBQTJCLElBQTNCLENBQVIsQ0FIbUIsQ0FBakIsQ0FIdUIsQ0FTeEIsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxlQUFTLENBQU0sQ0FBQyxNQUFoQixrQkFBK0IsQ0FBTyxDQUFDLE1BQXZDLENBRGlCLENBRXZCLFdBQVcsc0JBQWdCLENBQU0sQ0FBQyxXQUF2QixlQUF3QyxDQUFPLENBQUMsV0FBaEQsTUFGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLGFBQUQsQ0FBZ0IsQ0FBTSxDQUFDLEVBQXZCLENBQTJCLEtBQTNCLENBQWtDLENBQU8sQ0FBQyxFQUExQyxDQUE4QyxJQUE5QyxDQUFSLENBSG1CLENBQWpCLENBS1AsQyxpQ0FFTyxDLENBQVMsQyxDQUFTLENBQ3pCLEdBQU0sQ0FBQSxDQUFJLENBQUcsSUFBYixDQUR5QixNQUVyQixVQUFBLENBRnFCLENBR2pCLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sV0FBSyxDQUFPLENBQUMsTUFBYixDQURpQixDQUV2QixXQUFXLFdBQUssQ0FBTyxDQUFDLFdBQWIsQ0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQU8sQ0FBQyxFQUFULENBQVIsQ0FIbUIsQ0FBakIsQ0FIaUIsQ0FTbEIsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQU8sQ0FBQyxNQUFiLGFBQXVCLENBQU8sQ0FBQyxNQUEvQixDQURpQixDQUV2QixXQUFXLFdBQUssQ0FBTyxDQUFDLFdBQWIsYUFBNEIsQ0FBTyxDQUFDLFdBQXBDLENBRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxDQUFPLENBQUMsRUFBVCxDQUFhLEdBQWIsQ0FBa0IsQ0FBTyxDQUFDLEVBQTFCLENBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLGtDQUVRLEMsQ0FBZ0IsQ0FDeEIsR0FBTSxDQUFBLENBQUksQ0FBRyxJQUFiLENBQ0EsTUFBTyxDQUFBLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sV0FBSyxDQUFjLENBQUMsTUFBcEIsQ0FEaUIsQ0FFdkIsV0FBVyxXQUFLLENBQWMsQ0FBQyxXQUFwQixDQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsQ0FBYyxDQUFDLEVBQWhCLENBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLDBDQUU4QyxJQUEvQixDQUFBLENBQStCLHdEQUFoQixFQUFnQixDQUFaLENBQVksd0NBQ3hDLENBQUksQ0FBRyxJQURpQyxPQUUxQyxVQUFBLENBRjBDLENBR3RDLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sQ0FBRSxFQURlLENBRXZCLFdBQVcsQ0FBRSxFQUZVLENBR3ZCLEVBQUUsQ0FBRSxFQUhtQixDQUl2QixLQUFLLEdBSmtCLENBQWpCLENBSHNDLEVBVXpDLENBQWMsQ0FBQyxLQVYwQixHQVc3QyxDQUFjLENBQUMsV0FBZixFQUE4QixHQVhlLENBWTdDLENBQWMsQ0FBQyxFQUFmLENBQWtCLEdBQWxCLENBQXNCLENBQUMsR0FBRCxDQUF0QixDQVo2QyxFQWN2QyxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFdBQUssQ0FBYyxDQUFDLE1BQXBCLFNBQTZCLENBQVUsQ0FBQyxNQUF4QyxLQURpQixDQUV2QixXQUFXLFdBQUssQ0FBYyxDQUFDLFdBQXBCLFNBQWtDLENBQVUsQ0FBQyxXQUE3QyxDQUZZLENBR3ZCLEVBQUUsQ0FBRSxDQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsQ0FBYyxDQUFDLEVBQWhCLENBQW9CLENBQVUsQ0FBQyxFQUEvQixDQUFSLENBSG1CLENBSXZCLEtBQUssR0FKa0IsQ0FBakIsQ0FkdUMsQ0FvQjlDLEMseUNBRWtELElBQXBDLENBQUEsQ0FBb0Msd0RBQXRCLEVBQXNCLENBQWxCLENBQWtCLHdDQUFaLENBQVksd0NBQzVDLENBQUksQ0FBRyxJQURxQyxPQUU5QyxVQUFBLENBRjhDLENBRzFDLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sQ0FBRSxFQURlLENBRXZCLFdBQVcsQ0FBRSxFQUZVLENBR3ZCLEVBQUUsQ0FBRSxFQUhtQixDQUl2QixLQUFLLEdBSmtCLENBQWpCLENBSDBDLEVBVTdDLENBQWEsQ0FBQyxLQVYrQixHQVdqRCxDQUFhLENBQUMsV0FBZCxFQUE2QixHQVhvQixDQVlqRCxDQUFhLENBQUMsRUFBZCxDQUFpQixHQUFqQixDQUFxQixDQUFDLEdBQUQsQ0FBckIsQ0FaaUQsRUFjM0MsQ0FBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FDdkIsTUFBTSxXQUFLLENBQWEsQ0FBQyxNQUFuQixhQUE2QixDQUE3QixhQUFxQyxDQUFVLENBQUMsTUFBaEQsQ0FEaUIsQ0FFdkIsV0FBVyxXQUFLLENBQWEsQ0FBQyxXQUFuQixjQUFrQyxDQUFsQyxlQUEyQyxDQUFVLENBQUMsV0FBdEQsQ0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLENBQWEsQ0FBQyxFQUFmLENBQW1CLElBQW5CLENBQXdCLENBQXhCLENBQThCLEtBQTlCLENBQW9DLENBQVUsQ0FBQyxFQUEvQyxDQUFSLENBSG1CLENBSXZCLEtBQUssR0FKa0IsQ0FBakIsQ0FkMkMsQ0FvQmxELEMsd0NBRWMsQyxDQUFNLEMsQ0FBZSxDLENBQWdCLEMsQ0FBVyxDQUM5RCxHQUFNLENBQUEsQ0FBSSxDQUFHLElBQWIsQ0FDQSxHQUFJLFNBQUEsQ0FBSixDQUNDLE1BQU8sQ0FBQSxDQUFJLENBQUMsV0FBTCxDQUFpQixDQUN2QixNQUFNLFlBQU0sQ0FBSSxDQUFDLE1BQVgsYUFBcUIsQ0FBYSxDQUFDLE1BQW5DLE1BRGlCLENBRXZCLFdBQVcsaUNBQTBCLENBQUksQ0FBQyxXQUEvQixnQkFBZ0QsQ0FBYSxDQUFDLFdBQTlELE1BRlksQ0FHdkIsRUFBRSxDQUFFLENBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyx3QkFBRCxDQUEwQixDQUFJLENBQUMsRUFBL0IsQ0FBbUMsTUFBbkMsQ0FBMEMsQ0FBYSxDQUFDLEVBQXhELENBQTRELElBQTVELENBQVIsQ0FIbUIsQ0FBakIsQ0FBUCxDQU1ELEdBQUksQ0FBSSxDQUFDLE1BQUwsR0FBZ0IsQ0FBUyxDQUFDLE1BQTlCLENBQ0MsbURBQTZDLENBQUksQ0FBQyxNQUFsRCxrQkFBaUUsQ0FBUyxDQUFDLE1BQTNFLGNBQXNGLEtBQUssQ0FBQyxTQUFOLEVBQXRGLEVBRUQsTUFBTyxDQUFBLENBQUksQ0FBQyxXQUFMLENBQWlCLENBQ3ZCLE1BQU0sWUFBTSxDQUFJLENBQUMsTUFBWCxhQUFxQixDQUFhLENBQUMsTUFBbkMsYUFBNkMsQ0FBYyxDQUFDLE1BQTVELGNBQXVFLENBQVMsQ0FBQyxNQUFqRixLQURpQixDQUV2QixXQUFXLGlDQUEwQixDQUFJLENBQUMsV0FBL0IsZ0JBQWdELENBQWEsQ0FBQyxXQUE5RCxjQUE4RSxDQUFjLENBQUMsV0FBN0YsS0FGWSxDQUd2QixFQUFFLENBQUUsQ0FBSSxDQUFDLEVBQUwsQ0FBUSxDQUFDLHdCQUFELENBQTBCLENBQUksQ0FBQyxFQUEvQixDQUFtQyxNQUFuQyxDQUEwQyxDQUFhLENBQUMsRUFBeEQsQ0FBNEQsSUFBNUQsQ0FBa0UsQ0FBYyxDQUFDLEVBQWpGLENBQXFGLEdBQXJGLENBQVIsQ0FIbUIsQ0FBakIsQ0FLUCxDLGtCQUdhLFU7Ozs7bUpDcnlCZixHQUFJLENBQUEsTUFBTSxDQUFJLFVBQVUsQ0EyM0J4QixRQUFTLENBQUEsQ0FBVCxFQUFtQixDQUNqQixLQUFLLEVBQUwsQ0FBVSxFQUNYLENBNzNCdUIsR0FDcEIsQ0FBQSxDQUFDLENBQUMsU0FBUyxDQUFULENBQVcsQ0FBWCxDQUFhLENBQWIsQ0FBZSxDQUFmLENBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUwsQ0FBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQWhCLENBQXVCLENBQUMsRUFBeEIsQ0FBMkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFELENBQUYsQ0FBRCxDQUFRLENBQW5DLENBQXFDLENBQUMsTUFBTyxDQUFBLENBQUUsQ0FEL0MsQ0FDZ0QsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEcEQsQ0FDMkQsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEL0QsQ0FDc0UsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEMUUsQ0FDaUYsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEckYsQ0FDNEYsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLENBQUgsQ0FEaEcsQ0FDc0csQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEMUcsQ0FDaUgsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEckgsQ0FDNEgsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEaEksQ0FDdUksQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEM0ksQ0FDa0osQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEdEosQ0FDNkosQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEakssQ0FDd0ssQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FENUssQ0FDbUwsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEdkwsQ0FDOEwsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEbE0sQ0FDeU0sQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEN00sQ0FDb04sQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEeE4sQ0FDK04sQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEbk8sQ0FDME8sQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEOU8sQ0FDcVAsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEelAsQ0FDZ1EsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEcFEsQ0FDMlEsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEL1EsQ0FDc1IsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEMVIsQ0FDaVMsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEclMsQ0FDNFMsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEaFQsQ0FDdVQsQ0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFHLEVBQUgsQ0FEM1QsQ0FDa1UsQ0FBRyxDQUFDLENBQUMsQ0FBRCxD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QUFPLEdBQVAsQ0FDUCxNQUNBLElBQUssRUFBTCxDQUFPLE1BQU8sSUFBUCxDQUNQLE1BQ0EsSUFBSyxFQUFMLENBQU8sTUFBTyxJQUFQLENBQ1AsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEVBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sRUFBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLE1BQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sSUFBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixNQUNBLElBQUssR0FBTCxDQUFRLE1BQU8sR0FBUCxDQUNSLE1BQ0EsSUFBSyxHQUFMLENBQVEsTUFBTyxHQUFQLENBQ1IsTUFDQSxJQUFLLEdBQUwsQ0FBUSxNQUFPLEdBQVAsQ0FDUixN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QUFLLENBQUMsV0FBTixDQUFrQixRQUFRLENBQUMsS0FBM0IsQ0FHakIsQ0FGQSxRQUFRLENBQUMsRUFBVCxDQUFjLEtBQUssQ0FBQyxXQUFOLENBQWtCLFFBQVEsQ0FBQyxFQUEzQixDQUVkLENBREEsUUFBUSxDQUFDLElBQVQsQ0FBZ0IsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsUUFBUSxDQUFDLElBQTNCLENBQ2hCLENBQU8sUUFDUixDOzs7OztBQzdRRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzVKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2phQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDdklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7OztBQ3ZLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDem5DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDemFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3hlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDemlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNoRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0dUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzU5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxudmFyIEtfTUFYX0xFTkdUSCA9IDB4N2ZmZmZmZmZcbmV4cG9ydHMua01heExlbmd0aCA9IEtfTUFYX0xFTkdUSFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBQcmludCB3YXJuaW5nIGFuZCByZWNvbW1lbmQgdXNpbmcgYGJ1ZmZlcmAgdjQueCB3aGljaCBoYXMgYW4gT2JqZWN0XG4gKiAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBXZSByZXBvcnQgdGhhdCB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBpZiB0aGUgYXJlIG5vdCBzdWJjbGFzc2FibGVcbiAqIHVzaW5nIF9fcHJvdG9fXy4gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWBcbiAqIChTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOCkuIElFIDEwIGxhY2tzIHN1cHBvcnRcbiAqIGZvciBfX3Byb3RvX18gYW5kIGhhcyBhIGJ1Z2d5IHR5cGVkIGFycmF5IGltcGxlbWVudGF0aW9uLlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICBjb25zb2xlLmVycm9yKFxuICAgICdUaGlzIGJyb3dzZXIgbGFja3MgdHlwZWQgYXJyYXkgKFVpbnQ4QXJyYXkpIHN1cHBvcnQgd2hpY2ggaXMgcmVxdWlyZWQgYnkgJyArXG4gICAgJ2BidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuJ1xuICApXG59XG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgLy8gQ2FuIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkP1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ3BhcmVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldFxuICB9XG59KVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoID4gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBsZW5ndGggKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICBidWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYnVmXG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICE9IG51bGwgJiZcbiAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG5mdW5jdGlvbiBmcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHZhbHVlKVxuICB9XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgIClcbiAgfVxuXG4gIHZhciB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiAmJiB2YWx1ZS52YWx1ZU9mKClcbiAgaWYgKHZhbHVlT2YgIT0gbnVsbCAmJiB2YWx1ZU9mICE9PSB2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZU9mLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICB2YXIgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdKCdzdHJpbmcnKSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoXG4gICAgKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICApXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbkJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbkJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBzaXplICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IGJ1Zi53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgYnVmID0gYnVmLnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIGJ1ZltpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgdmFyIGJ1ZlxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0IChvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW4pXG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iailcbiAgfVxuXG4gIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwgS19NQVhfTEVOR1RIYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBLX01BWF9MRU5HVEgudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiZcbiAgICBiICE9PSBCdWZmZXIucHJvdG90eXBlIC8vIHNvIEJ1ZmZlci5pc0J1ZmZlcihCdWZmZXIucHJvdG90eXBlKSB3aWxsIGJlIGZhbHNlXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoaXNJbnN0YW5jZShhLCBVaW50OEFycmF5KSkgYSA9IEJ1ZmZlci5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpXG4gIGlmIChpc0luc3RhbmNlKGIsIFVpbnQ4QXJyYXkpKSBiID0gQnVmZmVyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aClcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICApXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoaXNJbnN0YW5jZShidWYsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgfVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzSW5zdGFuY2Uoc3RyaW5nLCBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIG9yIEFycmF5QnVmZmVyLiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2Ygc3RyaW5nXG4gICAgKVxuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIG11c3RNYXRjaCA9IChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gPT09IHRydWUpXG4gIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkge1xuICAgICAgICAgIHJldHVybiBtdXN0TWF0Y2ggPyAtMSA6IHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZlcmAgbnBtIHBhY2thZ2UpXG4vLyB0byBkZXRlY3QgYSBCdWZmZXIgaW5zdGFuY2UuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBgaW5zdGFuY2VvZiBCdWZmZXJgXG4vLyByZWxpYWJseSBpbiBhIGJyb3dzZXJpZnkgY29udGV4dCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGRpZmZlcmVudFxuLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyXG4vLyBpbnN0YW5jZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSBhbm90aGVyIGNvcHkgb2YgdGhlIGBidWZmZXJgIHBhY2thZ2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNTRcbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csICckMSAnKS50cmltKClcbiAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGFyZ2V0ID0gQnVmZmVyLmZyb20odGFyZ2V0LCB0YXJnZXQub2Zmc2V0LCB0YXJnZXQuYnl0ZUxlbmd0aClcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHRhcmdldClcbiAgICApXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0IC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJyArIHZhbCArXG4gICAgICAgICdcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXIgb3IgVWludDhBcnJheSBvYmplY3RzIGZyb20gb3RoZXIgY29udGV4dHMgKGkuZS4gaWZyYW1lcykgZG8gbm90IHBhc3Ncbi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0luc3RhbmNlIChvYmosIHR5cGUpIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHxcbiAgICAob2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZSlcbn1cbmZ1bmN0aW9uIG51bWJlcklzTmFOIChvYmopIHtcbiAgLy8gRm9yIElFMTEgc3VwcG9ydFxuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiLy8gLmRpcm5hbWUsIC5iYXNlbmFtZSwgYW5kIC5leHRuYW1lIG1ldGhvZHMgYXJlIGV4dHJhY3RlZCBmcm9tIE5vZGUuanMgdjguMTEuMSxcbi8vIGJhY2twb3J0ZWQgYW5kIHRyYW5zcGxpdGVkIHdpdGggQmFiZWwsIHdpdGggYmFja3dhcmRzLWNvbXBhdCBmaXhlc1xuXG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlXG4vLyBtdXN0IGJlIG5vIHNsYXNoZXMsIGVtcHR5IGVsZW1lbnRzLCBvciBkZXZpY2UgbmFtZXMgKGM6XFwpIGluIHRoZSBhcnJheVxuLy8gKHNvIGFsc28gbm8gbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyAtIGl0IGRvZXMgbm90IGRpc3Rpbmd1aXNoXG4vLyByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgcGF0aHMpXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cywgYWxsb3dBYm92ZVJvb3QpIHtcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6IHByb2Nlc3MuY3dkKCk7XG5cbiAgICAvLyBTa2lwIGVtcHR5IGFuZCBpbnZhbGlkIGVudHJpZXNcbiAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH0gZWxzZSBpZiAoIXBhdGgpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckF0KDApID09PSAnLyc7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICByZXR1cm4gKChyZXNvbHZlZEFic29sdXRlID8gJy8nIDogJycpICsgcmVzb2x2ZWRQYXRoKSB8fCAnLic7XG59O1xuXG4vLyBwYXRoLm5vcm1hbGl6ZShwYXRoKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLFxuICAgICAgdHJhaWxpbmdTbGFzaCA9IHN1YnN0cihwYXRoLCAtMSkgPT09ICcvJztcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIWlzQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICBpZiAoIXBhdGggJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHBhdGg7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5qb2luID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBleHBvcnRzLm5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsIGZ1bmN0aW9uKHAsIGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBwICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH0pLmpvaW4oJy8nKSk7XG59O1xuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlbGF0aXZlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgZnJvbSA9IGV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XG4gIHRvID0gZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7XG5cbiAgZnVuY3Rpb24gdHJpbShhcnIpIHtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGZvciAoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgIGlmIChhcnJbc3RhcnRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBlbmQgPj0gMDsgZW5kLS0pIHtcbiAgICAgIGlmIChhcnJbZW5kXSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBhcnIuc2xpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0ICsgMSk7XG4gIH1cblxuICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xuICB2YXIgdG9QYXJ0cyA9IHRyaW0odG8uc3BsaXQoJy8nKSk7XG5cbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTtcbiAgdmFyIHNhbWVQYXJ0c0xlbmd0aCA9IGxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgIHNhbWVQYXJ0c0xlbmd0aCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgb3V0cHV0UGFydHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFBhcnRzLnB1c2goJy4uJyk7XG4gIH1cblxuICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO1xuXG4gIHJldHVybiBvdXRwdXRQYXJ0cy5qb2luKCcvJyk7XG59O1xuXG5leHBvcnRzLnNlcCA9ICcvJztcbmV4cG9ydHMuZGVsaW1pdGVyID0gJzonO1xuXG5leHBvcnRzLmRpcm5hbWUgPSBmdW5jdGlvbiAocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aCArICcnO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7XG4gIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICB2YXIgaGFzUm9vdCA9IGNvZGUgPT09IDQ3IC8qLyovO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDE7IC0taSkge1xuICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXG4gICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuIGhhc1Jvb3QgPyAnLycgOiAnLic7XG4gIGlmIChoYXNSb290ICYmIGVuZCA9PT0gMSkge1xuICAgIC8vIHJldHVybiAnLy8nO1xuICAgIC8vIEJhY2t3YXJkcy1jb21wYXQgZml4OlxuICAgIHJldHVybiAnLyc7XG4gIH1cbiAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTtcbn07XG5cbmZ1bmN0aW9uIGJhc2VuYW1lKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcblxuICB2YXIgc3RhcnQgPSAwO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICB2YXIgaTtcblxuICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAvLyBwYXRoIGNvbXBvbmVudFxuICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICBlbmQgPSBpICsgMTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuICcnO1xuICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbn1cblxuLy8gVXNlcyBhIG1peGVkIGFwcHJvYWNoIGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSwgYXMgZXh0IGJlaGF2aW9yIGNoYW5nZWRcbi8vIGluIG5ldyBOb2RlLmpzIHZlcnNpb25zLCBzbyBvbmx5IGJhc2VuYW1lKCkgYWJvdmUgaXMgYmFja3BvcnRlZCBoZXJlXG5leHBvcnRzLmJhc2VuYW1lID0gZnVuY3Rpb24gKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IGJhc2VuYW1lKHBhdGgpO1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuZXhwb3J0cy5leHRuYW1lID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcbiAgdmFyIHN0YXJ0RG90ID0gLTE7XG4gIHZhciBzdGFydFBhcnQgPSAwO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXG4gIHZhciBwcmVEb3RTdGF0ZSA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAvLyBleHRlbnNpb25cbiAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgZW5kID0gaSArIDE7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA0NiAvKi4qLykge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cbiAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSlcbiAgICAgICAgICBzdGFydERvdCA9IGk7XG4gICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKVxuICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0RG90ICE9PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcbiAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICBwcmVEb3RTdGF0ZSA9IC0xO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGFydERvdCA9PT0gLTEgfHwgZW5kID09PSAtMSB8fFxuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nXG4gICAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbn07XG5cbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InXG4gICAgPyBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH1cbiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvLyBQdXJwb3NlOlxuLy8gQXR0ZW1wdHMgdG8gaW50ZXJjZXB0IGJhY2t0aWNrIHN0cmluZ3MgKGApXG4vLyB0byBpbXBsZW1lbnQgaW50ZXJwb2xhdGlvbi5cblxuLy8gVXNhZ2U6XG4vLyBUbyBiZSBpbnN0YW50aWF0ZWQgaW4gU2NvcGVQYXJzZXIucGFyc2UoKS5cbi8vIFRoZSBgbGV4YCBtZXRob2QgaXMgdG8gYmUgdXNlZCB0byBpbnRlcmNlcHQgSklTT05cbi8vIG5hdGl2ZSBgcGFyc2VyLmxleGVyLmxleGAgbWV0aG9kLlxuXG4vLyBQcm9wZXJ0aWVzOlxuLy8gcGFyc2VyOiBbT2JqZWN0XSBSZWZlcmVuY2UgdG8gU2NvcGVQYXJzZXIgaW5zdGFuY2UuXG4vLyBcbi8vIHN0YXRlOiB7XG4vLyAgaW5CYWNrdGljazogW2Jvb2xdIEFyZSB3ZSBpbnNpZGUgYSBiYWNrdGljayBzdHJpbmc/IGAuLihoZXJlKS4uYFxuLy8gIGluQmFja3RpY2tFeHByOiBbYm9vbF0gQXJlIHdlIGluc2lkZSBhbiBpbnRlcnBvbGF0aW9uPyAkey4uKGhlcmUpLi59XG4vLyB9XG5cbi8vIE1ldGhvZHM6XG4vLyBjb25zdHJ1Y3RvciAoc3ApXG4vLyBcbi8vICBBcmd1bWVudHM6XG4vLyAgc3A6IFtPYmplY3RdIFJlZmVyZW5jZSB0byBTY29wZVBhcnNlclxuLy9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyBsZXggKGN0eClcbi8vXG4vLyAgQXJndW1lbnRzOlxuLy8gICBjdHg6IFtPYmplY3RdIFNob3VsZCByZWZlcmVuY2UgJ3RoaXMnIGZyb20gb3ZlcndyaXR0ZW4gXG4vLyAgICAgICAgJ3BhcnNlci5sZXhlci5sZXgnIG1ldGhvZC5cbi8vXG4vLyAgUmV0dXJuOiBbQm9vbF1cbi8vICAgW3RydWVdOiAgIEZvdW5kIGEgYmFja3RpY2stc3RyaW5nIGFuZCBkaWQgdGhlIHdvcmsuXG4vLyAgIFtmYWxzZV06ICBOb3QgYSBiYWNrdGljay1zdHJpbmcsIG5vdCBvdXIgam9iLlxuXG5jbGFzcyBCYWNrdGlja1Byb2Nlc3NvciB7XG5cdGNvbnN0cnVjdG9yIChzcCkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdHNlbGYuc3AgPSBzcDtcblx0XHRzZWxmLnN0YXRlID0ge1xuXHRcdFx0aW5CYWNrdGljazogZmFsc2UsXG5cdFx0XHRpbkJhY2t0aWNrRXhwcjogZmFsc2UsXG5cdFx0XHRidFN0cmluZzogXCJcIixcblx0XHRcdGV4cHJCb2R5OiBcIlwiLFxuXHRcdFx0ZXhwckJyYWNlRGVwdGg6IDBcblx0XHR9O1xuXHR9XG5cblx0bGV4IChjdHgpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRjb25zdCBzdGF0ZSA9IHNlbGYuc3RhdGU7XG5cblx0XHQvL2NvbnNvbGUubG9nKFwiaW5CYWNrdGljazpcIiwgc3RhdGUuaW5CYWNrdGljayk7XG5cdFx0Ly8gTG9vayBmb3IgYCB0b2tlblxuXHRcdGlmIChjdHgueXl0ZXh0ID09PSBcImBcIikge1xuXHRcdFx0Ly8gU3dpdGNoIGluQmFja3RpY2sgZmxhZ1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcImZvdW5kIGA6IHN3YXBwaW5nIGluQmFja3RpY2tcIik7XG5cdFx0XHRzdGF0ZS5pbkJhY2t0aWNrID0gIXN0YXRlLmluQmFja3RpY2s7XG5cdFx0fVxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIGluc2lkZSBvZiBhIGJhY2t0aWNrIHN0cmluZzpcblx0XHRpZiAoc3RhdGUuaW5CYWNrdGljaykge1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcImluIGJhY2t0aWNrIHN0cmluZ1wiKTtcblx0XHRcdC8vY29uc29sZS5sb2coc3RhdGUpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcInl5dGV4dDpcIiwgSlNPTi5zdHJpbmdpZnkoY3R4Lnl5dGV4dCkpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcIl9pbnB1dDpcIiwgY3R4Ll9pbnB1dCk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwibWF0Y2g6XCIsIGN0eC5tYXRjaCk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwibWF0Y2hlZDpcIiwgY3R4Lm1hdGNoZWQpO1xuXHRcdFx0bGV0IGlucHV0TWF0Y2gsIHRlc3RNYXRjaDtcblxuXHRcdFx0Ly8gU2V0IGJ0U3RyaW5nIHRvIGFuIGVtcHR5IHN0cmluZy5cblx0XHRcdHN0YXRlLmJ0U3RyaW5nID0gXCJcIjtcblxuXHRcdFx0Ly8gUmVnRXhwIGZvciBleHByZXNzaW9uLXdyYXBwZXIgdG9rZW5zXG5cdFx0XHQvLyBUT0RPOiBpbXBsZW1lbnQgc3VwcG9ydCBmb3IgJyR7Li57Li59Li59J1xuXHRcdFx0bGV0IGJ0RXhwclJlZ2V4ID0gL14oPzooXFxzKilcXCRcXHsoLiopKS9ndXM7XG5cblx0XHRcdGxldCBidEV4cHJCb2R5UmVnZXggPSAvXihbXlxce1xcfV0qKShcXHt8XFx9KSguKikvZ3VzO1xuXG5cdFx0XHQvLyBSZWdFeHAgZm9yIG5vbi1leHByZXNzaW9uLXdyYXBwZXIgdG9rZW5zXG5cdFx0XHRsZXQgYnRCb2R5UmVnZXggPSAvXigoPzpcXFxcYHxbXmBdKD8hXFx7KSkqKSguKikvZ3VzO1xuXG5cdFx0XHQvLyBCZWdpbiB3YWxraW5nIHNvdXJjZTpcblx0XHRcdC8vIFRoZSBnb2FsIGlzIHRvIHB1c2ggbm9uLWV4cHIgY2hhcnNcblx0XHRcdC8vIG9udG8gdGhlIHN0YWNrLCBhbmQgcHVzaCB0cmFuc2xhdGVkXG5cdFx0XHQvLyBleHByZXNzaW9ucyBpbiB0aGUgcGxhY2Ugb2Ygc291cmNlLWNvZGVcblx0XHRcdC8vIG9uIHRoZSBzdGFjay5cblx0XHRcdC8vIFRoZSByZXN1bHQgc2hvdWxkIGJlIGEgdmFsaWQgSmF2YVNjcmlwdFxuXHRcdFx0Ly8gYmFjay10aWNrIHN0cmluZyB3aXRoIHNlbWktb3B0aW1pc3RpY1xuXHRcdFx0Ly8gcGFyc2VkIHNvdXJjZS1jb2RlIHdpdGhpbi4gU3ludGF4IHNob3VsZFxuXHRcdFx0Ly8gYmUgY2hlY2tlZCwgYnV0IHJ1bnRpbWUgdmFsaWRpdHkgc2hvdWxkIG5vdC5cblx0XHRcdHdoaWxlKHRydWUpIHtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImxvb3BpbmcuLlwiKTtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcInl5dGV4dDpcIiwgSlNPTi5zdHJpbmdpZnkoY3R4Lnl5dGV4dCkpO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKHN0YXRlKTtcblx0XHRcdFx0aWYgKGN0eC5faW5wdXQubGVuZ3RoIDwgMSkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiaW5wdXQgZXhoYXVzdGVkLlwiKTtcblx0XHRcdFx0XHRwcm9jZXNzLmV4aXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc3RhdGUuaW5CYWNrdGlja0V4cHIpIHtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiaW4gYmFja3RpY2tFeHByOlwiKTtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwieXl0ZXh0OlwiLCBKU09OLnN0cmluZ2lmeShjdHgueXl0ZXh0KSk7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcIl9pbnB1dDpcIiwgSlNPTi5zdHJpbmdpZnkoY3R4Ll9pbnB1dCkpO1xuXHRcdFx0XHRcdGlucHV0TWF0Y2ggPSBjdHguX2lucHV0Lm1hdGNoKGJ0RXhwckJvZHlSZWdleClcblx0XHRcdFx0XHRpZiAoaW5wdXRNYXRjaCkge1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImZvdW5kIGJyYWNlXCIpO1xuXHRcdFx0XHRcdFx0bGV0IGJ0RXhwckJvZHlNYXRjaCA9IGJ0RXhwckJvZHlSZWdleC5leGVjKGN0eC5faW5wdXQpO1xuXG5cdFx0XHRcdFx0XHRsZXQgW1xuXHRcdFx0XHRcdFx0XHRvcmlnaW5hbCxcblx0XHRcdFx0XHRcdFx0cHJlZml4LFxuXHRcdFx0XHRcdFx0XHRicmFjZSxcblx0XHRcdFx0XHRcdFx0bGVmdG92ZXJzXG5cdFx0XHRcdFx0XHRdID0gYnRFeHByQm9keU1hdGNoO1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS5leHByQm9keSArPSBwcmVmaXg7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwic3RhdGUgYm9keTpcIiwgSlNPTi5zdHJpbmdpZnkoc3RhdGUuZXhwckJvZHkpKTtcblx0XHRcdFx0XHRcdGlmIChicmFjZSA9PT0gXCJ7XCIpIHtcblx0XHRcdFx0XHRcdFx0c3RhdGUuZXhwckJyYWNlRGVwdGggKz0gMTtcblx0XHRcdFx0XHRcdFx0c3RhdGUuZXhwckJvZHkgKz0gXCJ7XCI7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGJyYWNlID09PSBcIn1cIikge1xuXHRcdFx0XHRcdFx0XHRpZiAoc3RhdGUuZXhwckJyYWNlRGVwdGggPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUuZXhwckJyYWNlRGVwdGggLT0gMTtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5leHByQm9keSArPSBcIn1cIjtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5pbkJhY2t0aWNrRXhwciA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdGxldCBuZXdFeHByU3JjID0gc2VsZi5zcC50cmF2ZXJzZShcblx0XHRcdFx0XHRcdFx0XHRcdHNlbGYuc3AucGFyc2Uoc3RhdGUuZXhwckJvZHkgKyBcIjtcIikgLy8gQWRkIHNlbWktY29sb24gdG8gZW5kIG9mIHNjb3BlIHNvdXJjZS5cblx0XHRcdFx0XHRcdFx0XHQpLnRyYW5zbGF0aW9uLnJlcGxhY2UoLzskLywgXCJcIik7ICAgLy8gUmVtb3ZlIHNlbWktY29sb24gZnJvbSBlbmQgb2YgSlMgY29kZS5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5leHByQm9keSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUuYnRTdHJpbmcgKz0gbmV3RXhwclNyYyArIFwifVwiO1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLmluQmFja3RpY2sgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjdHguX2lucHV0ID0gbGVmdG92ZXJzO1xuXHRcdFx0XHRcdFx0Y3R4Lm1hdGNoID0gcHJlZml4ICsgYnJhY2U7XG5cdFx0XHRcdFx0XHRjdHgueXl0ZXh0ICs9IGN0eC5tYXRjaDtcblx0XHRcdFx0XHRcdGN0eC5tYXRjaGVkICs9IGN0eC5tYXRjaDtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcImJyYWNlIG1pc2FsaWdubWVudC5cIik7XG5cdFx0XHRcdFx0cHJvY2Vzcy5leGl0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBc3NpZ24gaW5wdXRNYXRjaCB0aGUgUmVnRXhwIG1hdGNoIGZvciBhXG5cdFx0XHRcdC8vIGJhY2t0aWNrIGV4cHJlc3Npb24gYCR7Li59YFxuXHRcdFx0XHRpbnB1dE1hdGNoID0gY3R4Ll9pbnB1dC5tYXRjaChidEV4cHJSZWdleCk7XG5cblx0XHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIHJlc3VsdCBvZiB0aGF0IG1hdGNoIGlzIHRydXRoeVxuXHRcdFx0XHRpZiAoaW5wdXRNYXRjaCkge1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJmb3VuZCBleHByIG1hdGNoXCIpO1xuXHRcdFx0XHRcdC8vIFdlIGhhdmUgYSBtYXRjaC0gZ2V0IGl0OlxuXHRcdFx0XHRcdGxldCBidEV4cHJNYXRjaCA9IGJ0RXhwclJlZ2V4LmV4ZWMoY3R4Ll9pbnB1dCk7XG5cblx0XHRcdFx0XHQvLyBTZXBlcmF0ZSB0aGUgY2FwdHVyZSBncm91cHMgaW50byA0IHZhcmlhYmxlcy5cblx0XHRcdFx0XHRsZXQgW1xuXHRcdFx0XHRcdFx0YnRFeHByT3JpZ2luYWwsXG5cdFx0XHRcdFx0XHRidEV4cHJTcGFjZXMsXG5cdFx0XHRcdFx0XHQvL2J0RXhwclNyYyxcblx0XHRcdFx0XHRcdGJ0RXhwckxlZnRvdmVyc1xuXHRcdFx0XHRcdF0gPSBidEV4cHJNYXRjaDtcblxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJidEV4cHJNYXRjaDpcIik7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcIm9yaWdpbmFsOlwiLCBKU09OLnN0cmluZ2lmeShidEV4cHJPcmlnaW5hbCkpO1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJidEV4cHJTcGFjZXM6XCIsIEpTT04uc3RyaW5naWZ5KGJ0RXhwclNwYWNlcykpO1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJidEV4cHJTcmM6XCIsIEpTT04uc3RyaW5naWZ5KGJ0RXhwclNyYykpO1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJidEV4cHJMZWZ0b3ZlcnM6XCIsIEpTT04uc3RyaW5naWZ5KGJ0RXhwckxlZnRvdmVycykpO1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coKTtcblx0XHRcdFx0XHQvLyBTZXQgdGhlIHN0YXRlLlxuXHRcdFx0XHRcdC8vIFNpbmNlIHdlJ3JlIGxvb2tpbmcgZm9yIGV4cHJlc3Npb25zIG5vdyxcblx0XHRcdFx0XHQvLyB0dXJuIG9mZiBiYWNrLXRpY2sgcGFyc2luZy5cblx0XHRcdFx0XHRzdGF0ZS5pbkJhY2t0aWNrID0gZmFsc2U7XG5cdFx0XHRcdFx0c3RhdGUuaW5CYWNrdGlja0V4cHIgPSB0cnVlO1xuXHRcdFx0XHRcdHN0YXRlLmV4cHJCcmFjZURlcHRoID0gMDtcblxuXHRcdFx0XHRcdGN0eC5faW5wdXQgPSBidEV4cHJMZWZ0b3ZlcnM7XG5cdFx0XHRcdFx0Y3R4Lm1hdGNoID0gYnRFeHByU3BhY2VzICsgXCIke1wiO1xuXHRcdFx0XHRcdGN0eC55eXRleHQgKz0gY3R4Lm1hdGNoO1xuXHRcdFx0XHRcdGN0eC5tYXRjaGVkICs9IGN0eC5tYXRjaDtcblx0XHRcdFx0XHRzdGF0ZS5idFN0cmluZyArPSBjdHgubWF0Y2g7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0Lypcblx0XHRcdFx0XHQvLyBDb252ZXJ0IHRoZSBTY29wZSBjb2RlIGludG8gSmF2YVNjcmlwdDpcblx0XHRcdFx0XHRsZXQgbmV3RXhwclNyYyA9IHNlbGYuc3AudHJhdmVyc2UoXG5cdFx0XHRcdFx0XHRzZWxmLnNwLnBhcnNlKGJ0RXhwclNyYyArIFwiO1wiKSAvLyBBZGQgc2VtaS1jb2xvbiB0byBlbmQgb2Ygc2NvcGUgc291cmNlLlxuXHRcdFx0XHRcdCkudHJhbnNsYXRpb24ucmVwbGFjZSgvOyQvLCBcIlwiKTsgICAvLyBSZW1vdmUgc2VtaS1jb2xvbiBmcm9tIGVuZCBvZiBKUyBjb2RlLlxuXG5cdFx0XHRcdFx0Ly8gRG9uZSBwYXJzaW5nIGV4cHJlc3Npb24sIFxuXHRcdFx0XHRcdC8vIHR1cm4gYmFjayBvbiBiYWNrLXRpY2sgcGFyc2luZyxcblx0XHRcdFx0XHRzdGF0ZS5pbkJhY2t0aWNrID0gdHJ1ZTtcblxuXHRcdFx0XHRcdC8vIFJlcGxhY2UgaW5wdXQgd2l0aCBuZXcgaW5wdXQsIHdoaWxlIHNldHRpbmcgdGhlIG1hdGNoLlxuXHRcdFx0XHRcdGN0eC5faW5wdXQgPSBjdHguX2lucHV0LnJlcGxhY2UoYnRFeHByUmVnZXgsICgpID0+IHtcblx0XHRcdFx0XHRcdGxldCBsaW5lcyA9IGJ0RXhwclNyYy5zcGxpdChcIlxcblwiKTtcblx0XHRcdFx0XHRcdGxldCBsZW5ndGggPSBsaW5lcy5wb3AoKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRsZXQgbmV3bGluZXMgPSBsaW5lcy5sZW5ndGg7IFxuXHRcdFx0XHRcdFx0bGV0IGNvbCA9IGN0eC55eWxsb2MubGFzdF9jb2x1bW47XG5cblx0XHRcdFx0XHRcdGlmIChuZXdsaW5lcyA+IDApIHtcblx0XHRcdFx0XHRcdFx0Y29sID0gbGVuZ3RoO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29sICs9IGxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y3R4Lnl5bGxvYyA9IHtcblx0XHRcdFx0XHRcdFx0Zmlyc3RfbGluZTogY3R4Lnl5bGxvYy5sYXN0X2xpbmUsXG5cdFx0XHRcdFx0XHRcdGZpcnN0X2NvbHVtbjogY3R4Lnl5bGxvYy5sYXN0X2NvbHVtbixcblx0XHRcdFx0XHRcdFx0bGFzdF9saW5lOiBjdHgueXlsbG9jLmxhc3RfbGluZSArIG5ld2xpbmVzLFxuXHRcdFx0XHRcdFx0XHRsYXN0X2NvbHVtbjogY29sXG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHQvLyBTZXQgbWF0Y2ggdG8gdGhlIHRyYW5zbGF0ZWQgZXhwcmVzc2lvbjpcblx0XHRcdFx0XHRcdGN0eC5tYXRjaCA9IGJ0RXhwclNwYWNlcyArICckeycgKyBidEV4cHJTcmMgKyAnfSc7XG5cdFx0XHRcdFx0XHRjdHgubWF0Y2hlZCArPSBjdHgubWF0Y2g7XG5cdFx0XHRcdFx0XHRzdGF0ZS5idFN0cmluZyArPSBidEV4cHJTcGFjZXMgKyAnJHsnICsgbmV3RXhwclNyYyArICd9Jztcblx0XHRcdFx0XHRcdC8vIFJldHVybiB3aGF0ZXZlciBpcyBsZWZ0b3ZlciBmcm9tIF9pbnB1dFxuXHRcdFx0XHRcdFx0Ly8gYWZ0ZXIgdGhlIG1hdGNoLlxuXHRcdFx0XHRcdFx0cmV0dXJuIGJ0RXhwckxlZnRvdmVycztcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdC8vIEFkZCB0aGlzIG1hdGNoIHRvIHl5dGV4dFxuXHRcdFx0XHRcdGN0eC55eXRleHQgKz0gY3R4Lm1hdGNoO1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJzZXQgbWF0Y2ggdG8gZXhwciBhbmQgYWRqdXN0ZWQgaW5wdXQuXCIpO1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJtYXRjaDpcXG5gYGBcXG5cIiwgY3R4Lm1hdGNoLCBcIlxcbmBgYFwiKTtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwibWF0Y2hlZDpcXG5gYGBcXG5cIiwgY3R4Lm1hdGNoZWQsIFwiXFxuYGBgXCIpO1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJfaW5wdXQ6XFxuYGBgXFxuXCIsIGN0eC5faW5wdXQsIFwiXFxuYGBgXCIpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdCovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBc3NpZ24gaW5wdXRNYXRjaCB0aGUgUmVnRXhwIG1hdGNoIGZvciBhXG5cdFx0XHRcdC8vIG5vbi1leHByZXNzaW9uLlxuXHRcdFx0XHRpbnB1dE1hdGNoID0gY3R4Ll9pbnB1dC5tYXRjaChidEJvZHlSZWdleCk7XG5cblx0XHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIHJlc3VsdCBvZiB0aGF0IG1hdGNoIGlzIHRydXRoeVxuXHRcdFx0XHRpZiAoaW5wdXRNYXRjaCkge1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJmb3VuZCBub24tZXhwcjpcIiwgSlNPTi5zdHJpbmdpZnkoY3R4Ll9pbnB1dCkpO1xuXHRcdFx0XHRcdC8vIElmIHRoZSBpbnB1dCBpcyBhIGJhY2t0aWNrLCBicmVhayB0aGUgbG9vcC5cblx0XHRcdFx0XHQvLyBOZXh0IHRpbWUgdGhlIGxleGVyIGdvZXMgYXJvdW5kLCBpdCBzaG91bGRcblx0XHRcdFx0XHQvLyBzZWUgdGhlICdgJyBhbmQgYWRqdXN0IHRoZSBzdGF0ZSBhY2NvcmRpbmdseS5cblx0XHRcdFx0XHRpZiAoY3R4Ll9pbnB1dFswXSA9PT0gXCJgXCIpIHtcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJmb3VuZCB0ZXJtaW5hdGluZyBgIGNoYXIsIGJyZWFraW5nIGxvb3AuXCIpO1xuXHRcdFx0XHRcdFx0Y3R4Ll9pbnB1dCA9IGN0eC5faW5wdXQuc3Vic3RyKDEpO1xuXHRcdFx0XHRcdFx0Y3R4Lnl5dGV4dCArPSBcImBcIjtcblx0XHRcdFx0XHRcdGN0eC5tYXRjaCA9IFwiYFwiO1xuXHRcdFx0XHRcdFx0Y3R4Lm1hdGNoZWQgKz0gXCJgXCI7XG5cdFx0XHRcdFx0XHRzdGF0ZS5pbkJhY2t0aWNrID0gZmFsc2U7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwieXl0ZXh0OlwiLCBKU09OLnN0cmluZ2lmeShjdHgueXl0ZXh0KSk7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwibWF0Y2g6XFxuYGBgXFxuXCIsIGN0eC5tYXRjaCwgXCJcXG5gYGBcIik7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwibWF0Y2hlZDpcXG5gYGBcXG5cIiwgY3R4Lm1hdGNoZWQsIFwiXFxuYGBgXCIpO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcIl9pbnB1dDpcXG5gYGBcXG5cIiwgY3R4Ll9pbnB1dCwgXCJcXG5gYGBcIik7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBSZXBsYWNlIGlucHV0IHdpdGggbmV3IGlucHV0LCB3aGlsZSBzZXR0aW5nIHRoZSBtYXRjaC5cblx0XHRcdFx0XHRjdHguX2lucHV0ID0gY3R4Ll9pbnB1dC5yZXBsYWNlKGJ0Qm9keVJlZ2V4LCAob3JpZ2luYWwsIG1hdGNoLCBsZWZ0b3ZlcnMpID0+IHtcblx0XHRcdFx0XHRcdGxldCBsaW5lcyA9IG1hdGNoLnNwbGl0KFwiXFxuXCIpO1xuXHRcdFx0XHRcdFx0bGV0IGxlbmd0aCA9IGxpbmVzLnBvcCgpLmxlbmd0aDtcblx0XHRcdFx0XHRcdGxldCBuZXdsaW5lcyA9IGxpbmVzLmxlbmd0aDsgXG5cdFx0XHRcdFx0XHRsZXQgY29sID0gY3R4Lnl5bGxvYy5sYXN0X2NvbHVtbjtcblxuXHRcdFx0XHRcdFx0aWYgKG5ld2xpbmVzID4gMCkge1xuXHRcdFx0XHRcdFx0XHRjb2wgPSBsZW5ndGg7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb2wgKz0gbGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjdHgueXlsbG9jID0ge1xuXHRcdFx0XHRcdFx0XHRmaXJzdF9saW5lOiBjdHgueXlsbG9jLmxhc3RfbGluZSxcblx0XHRcdFx0XHRcdFx0Zmlyc3RfY29sdW1uOiBjdHgueXlsbG9jLmxhc3RfY29sdW1uLFxuXHRcdFx0XHRcdFx0XHRsYXN0X2xpbmU6IGN0eC55eWxsb2MubGFzdF9saW5lICsgbmV3bGluZXMsXG5cdFx0XHRcdFx0XHRcdGxhc3RfY29sdW1uOiBjb2xcblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdC8vIFNldCBtYXRjaCB0byB0aGUgbm9uLWV4cHJlc3Npb24gY2hhcnNcblx0XHRcdFx0XHRcdGN0eC5tYXRjaCA9IG1hdGNoO1xuXHRcdFx0XHRcdFx0Y3R4Lm1hdGNoZWQgKz0gY3R4Lm1hdGNoO1xuXHRcdFx0XHRcdFx0Ly8gUmV0dXJuIHdoYXRldmVyIGlzIGxlZnRvdmVyIGZyb20gX2lucHV0XG5cdFx0XHRcdFx0XHQvLyBhZnRlciB0aGUgbWF0Y2guXG5cdFx0XHRcdFx0XHRyZXR1cm4gbGVmdG92ZXJzO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdC8vIEFkZCB0aGlzIG1hdGNoIHRvIHRoZSBzdGF0ZS5idFN0cmluZy5cblxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJ5eXRleHQgKGJlZm9yZSk6XCIsIEpTT04uc3RyaW5naWZ5KGN0eC55eXRleHQpKTtcblx0XHRcdFx0XHRzdGF0ZS5idFN0cmluZyArPSBjdHgubWF0Y2g7XG5cdFx0XHRcdFx0Y3R4Lnl5dGV4dCArPSBjdHgubWF0Y2g7XG5cblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwic2V0IG1hdGNoIHRvIG5vbi1leHByIGFuZCBhZGp1c3RlZCBpbnB1dC5cIik7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcInl5dGV4dCAoYWZ0ZXIpOlwiLCBKU09OLnN0cmluZ2lmeShjdHgueXl0ZXh0KSk7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcIm1hdGNoOlxcbmBgYFxcblwiLCBjdHgubWF0Y2gsIFwiXFxuYGBgXCIpO1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJtYXRjaGVkOlxcbmBgYFxcblwiLCBjdHgubWF0Y2hlZCwgXCJcXG5gYGBcIik7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcIl9pbnB1dDpcXG5gYGBcXG5cIiwgY3R4Ll9pbnB1dCwgXCJcXG5gYGBcIik7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkJhY2t0aWNrIFByb2Nlc3NvciBpbiBiYWQgc3RhdGUuXCIpO1xuXHRcdFx0XHRwcm9jZXNzLmV4aXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBiU3RyaW5nIHRvIHRoZSBmaW5hbCBtYXRjaC5cblx0XHRcdC8vIFN1cnJvdW5kIGJhY2t0aWNrcyBiZWNhc2Ugd2UgYXRlIHRoZW0gXG5cdFx0XHQvLyBkdXJpbmcgdGhlIGxleC5cblx0XHRcdC8vY29uc29sZS5sb2coXCJzZXR0aW5nIGJ0U3RyaW5nOlwiLCBzdGF0ZS5idFN0cmluZyk7XG5cdFx0XHRjdHgueXkuc2NvcGVTdGF0ZS5idFN0cmluZyA9IFwiYFwiICsgc3RhdGUuYnRTdHJpbmcgKyBcImBcIjtcblx0XHRcdHN0YXRlLmJ0U3RyaW5nID0gXCJcIjtcblxuXHRcdFx0Ly8gUmV0dXJuIHRoZSAnYCcgdG8gdGVsbCBKaXNvbiB0aGlzIGJ0U3RyaW5nIGlzIGRvbmUuXG5cdFx0XHRyZXR1cm4gJ2AnO1xuXHRcdH1cblxuXHRcdC8vIE11c3Qgbm90IGhhdmUgZG9uZSBhbnl0aGluZywgcmV0dXJuIGZhbHNlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYWNrdGlja1Byb2Nlc3NvcjsiLCJmdW5jdGlvbiBpbmRlbnRTdHJpbmcobCkge1xuXHR2YXIgciA9IFwiXCI7XG5cdHZhciBpO1xuXHRmb3IoaSA9IDA7IGkgPCBsOyBpICs9IDEpIHtcblx0XHRyICs9IGkgKyBcIiBcIjtcblx0fVxuXHRyZXR1cm4gcjtcbn1cblxuY2xhc3MgU2NvcGVBc3Qge1xuXHRjb25zdHJ1Y3RvciAoZGF0YSwgdHlwZSwgYm9keSkge1xuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cdFx0dGhpcy5ib2R5ID0gYm9keTtcblx0XHR0aGlzLmxvYyA9IHtcblx0XHRcdHN0YXJ0OiB7XG5cdFx0XHRcdGxpbmU6IGRhdGEubGV4ZXIueXlsbG9jLmZpcnN0X2xpbmUsXG5cdFx0XHRcdGNvbHVtbjogZGF0YS5sZXhlci55eWxsb2MuZmlyc3RfY29sdW1uXG5cdFx0XHR9LFxuXHRcdFx0ZW5kOiB7XG5cdFx0XHRcdGxpbmU6IGRhdGEubGV4ZXIueXlsbG9jLmxhc3RfbGluZSxcblx0XHRcdFx0Y29sdW1uOiBkYXRhLmxleGVyLnl5bGxvYy5sYXN0X2NvbHVtblxuXHRcdFx0fVxuXHRcdH07XG5cdFx0dGhpcy5yYXcgPSBkYXRhLmxleGVyLm1hdGNoZWQ7XG5cdFx0dGhpcy5saW5lID0gZGF0YS5sZXhlci55eWxsb2MuZmlyc3RfbGluZTtcblx0fVxuXG5cdGdldCAoaW5kZW50KSB7XG5cdFx0dmFyIHIgPSBpbmRlbnRTdHJpbmcoaW5kZW50KSArIFwiKFwiICsgdGhpcy50eXBlO1xuXHRcdHZhciByZW0gPSB0aGlzLmJvZHk7XG5cdFx0aWYocmVtLmxlbmd0aCA9PSAxICYmICEocmVtWzBdIGluc3RhbmNlb2YgYXN0KSkge1xuXHRcdFx0ciArPSBcIiAnXCIrcmVtWzBdK1wiJ1wiO1xuXHRcdH0gZWxzZSBmb3IoIGkgaW4gcmVtICkge1xuXHRcdFx0aWYoIHJlbVtpXSBpbnN0YW5jZW9mIGFzdCApIHtcblx0XHRcdFx0ciArPSBcIlxcblwiICsgcmVtW2ldLmdldChpbmRlbnQrMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyICs9IFwiXFxuXCIgKyBpbmRlbnRTdHJpbmcoaW5kZW50KzEpO1xuXHRcdFx0XHRyICs9IFwiJ1wiK3JlbVtpXStcIidcIjtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHIgKyAvKlwiXFxuXCIgKyBpbmRlbnRTdHJpbmcoaW5kZW50KSArKi8gXCIpXCI7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NvcGVBc3Q7IiwicmVxdWlyZShcInNvdXJjZS1tYXAtc3VwcG9ydFwiKS5pbnN0YWxsKCk7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCAqIGFzIE1vZHVsZSBmcm9tIFwibW9kdWxlXCI7XG5pbXBvcnQgKiBhcyBwYXJzZXIgZnJvbSBcIi4vcGFyc2VyLmpzXCI7XG5pbXBvcnQgU2NvcGVBc3QgZnJvbSBcIi4vU2NvcGVBc3QuanNcIjtcbmltcG9ydCBTY29wZVJ1bGVzIGZyb20gXCIuL1Njb3BlUnVsZXMuanNcIjtcbmltcG9ydCBCYWNrdGlja1Byb2Nlc3NvciBmcm9tIFwiLi9CYWNrdGlja1Byb2Nlc3Nvci5qc1wiO1xuaW1wb3J0ICogYXMgc291cmNlTWFwIGZyb20gXCJzb3VyY2UtbWFwXCI7XG5pbXBvcnQgKiBhcyBjb21iaW5lIGZyb20gXCJjb21iaW5lLXNvdXJjZS1tYXBcIjtcbmltcG9ydCAqIGFzIGNvbnZlcnQgZnJvbSBcImNvbnZlcnQtc291cmNlLW1hcFwiO1xuXG5jbGFzcyBTY29wZVBhcnNlciB7XG5cdGNvbnN0cnVjdG9yICgpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRzZWxmLnBhcnNlciA9IG5ldyBwYXJzZXIuUGFyc2VyKCk7XG5cdFx0c2VsZi5ydWxlcyA9IG5ldyBTY29wZVJ1bGVzKCk7XG5cdFx0Ly9jb25zb2xlLmxvZyhzZWxmLnBhcnNlci5sZXhlci5sZXgudG9TdHJpbmcoKSk7XG5cdFx0Ly9jb25zb2xlLmxvZyhzZWxmLnBhcnNlci5sZXhlci5uZXh0LnRvU3RyaW5nKCkpO1xuXHRcdC8qXG5cdFx0bGV0IGppc29uTGV4ZXIgPSBzZWxmLnBhcnNlci5sZXhlci5sZXg7XG5cdFx0c2VsZi5wYXJzZXIueXkuc2NvcGVTdGF0ZSA9IHtcblx0XHRcdGluQmFja3RpY2s6IGZhbHNlLFxuXHRcdFx0aW5CYWNrdGlja0V4cHI6IGZhbHNlXG5cdFx0fTtcblx0XHRsZXQgb25jZSA9IGZhbHNlO1xuXHRcdFxuXHRcdHNlbGYucGFyc2VyLmxleGVyLmxleCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmICghb25jZSkge1xuXHRcdFx0XHRvbmNlID0gIW9uY2U7XG5cdFx0XHRcdC8vY29uc29sZS5sb2codGhpcyk7XG5cdFx0XHRcdC8vY29uc29sZS5sb2codGhpcy5ydWxlcyk7XG5cdFx0XHR9XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwiaW50ZXJjZXB0ZWQgbGV4XCIpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcImluIGJhY2t0aWNrOlwiLCB0aGlzLnl5LnNjb3BlU3RhdGUuaW5CYWNrdGljayk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwieXl0ZXh0OlwiLCBKU09OLnN0cmluZ2lmeSh0aGlzLnl5dGV4dCkpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcImlucHV0OlwiLCB0aGlzLmlucHV0KCkpO1xuXHRcdFx0aWYgKHRoaXMueXl0ZXh0ID09PSBcImBcIikge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwic3dpdGNoZWQgYmFja3RpY2sgc3RhdGVcIik7XG5cdFx0XHRcdHRoaXMueXkuc2NvcGVTdGF0ZS5pbkJhY2t0aWNrID0gIXRoaXMueXkuc2NvcGVTdGF0ZS5pbkJhY2t0aWNrXG5cdFx0XHRcblx0XHRcdH0gZWxzZSBpZiAodGhpcy55eS5zY29wZVN0YXRlLmluQmFja3RpY2spIHtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyAoXCJhdHRlbXB0aW5nIHNraXBcIik7XG5cdFx0XHRcdC8vbGV0IG5leHQgPSB0aGlzLm5leHQoKTtcblx0XHRcdFx0bGV0IGlucHV0TWF0Y2gsIHRlc3RNYXRjaDtcblx0XHRcdFx0bGV0IGZpbmFsTWF0Y2ggPSBcIlwiO1xuXHRcdFx0XHRsZXQgYnRFeHByUmVnZXggPSAvXig/OihcXHMqKVxcJFxceyhbXlxcfV0qKVxcfSguKikpL2d1cztcblx0XHRcdFx0bGV0IGJ0Qm9keVJlZ2V4ID0gL14oKD86XFxcXGB8W15gXSg/IVxceykpKikoLiopL2d1cztcblxuXHRcdFx0XHR0aGlzLl9pbnB1dCA9IHRoaXMueXl0ZXh0ICsgdGhpcy5faW5wdXQ7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coXCJidEV4cHJSZWdleDpcIiwgYnRFeHByUmVnZXgpO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiYnRCb2R5UmVnZXg6XCIsIGJ0Qm9keVJlZ2V4KTtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcIm1hdGNoOlwiLCB0aGlzLm1hdGNoKTtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcIm1hdGNoZWQ6XCIsIHRoaXMubWF0Y2hlZCk7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRjb25zdCBidEJvZHkgPSA1Nztcblx0XHRcdFx0XHRjb25zdCBidEV4cHJTdGFydCA9IDU2O1xuXHRcdFx0XHRcdC8vY29uc3QgYnRFeHByRW5kID0gPz8/XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImJ0LWlucHV0OlwiLCB0aGlzLl9pbnB1dCk7XG5cdFx0XHRcdFx0aWYgKGlucHV0TWF0Y2ggPSB0aGlzLl9pbnB1dC5tYXRjaChidEV4cHJSZWdleCkpIHtcblx0XHRcdFx0XHRcdGxldCBidEV4cHJNYXRjaCA9IGJ0RXhwclJlZ2V4LmV4ZWModGhpcy5faW5wdXQpO1xuXHRcdFx0XHRcdFx0bGV0IFtcblx0XHRcdFx0XHRcdFx0YnRFeHByT3JpZ2luYWwsXG5cdFx0XHRcdFx0XHRcdGJ0RXhwclNwYWNlcyxcblx0XHRcdFx0XHRcdFx0YnRFeHByU3JjLFxuXHRcdFx0XHRcdFx0XHRidEV4cHJMZWZ0b3ZlcnNcblx0XHRcdFx0XHRcdF0gPSBidEV4cHJNYXRjaDtcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJidEV4cHJNYXRjaDpcIiwgYnRFeHByTWF0Y2gpO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImJ0RXhwck9yaWdpbmFsOlwiLCBidEV4cHJPcmlnaW5hbCk7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiYnRFeHByU3JjOlwiLCBidEV4cHJTcmMpO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImJ0RXhwckxlZnRvdmVyczpcIiwgYnRFeHByTGVmdG92ZXJzKTtcblx0XHRcdFx0XHRcdHRoaXMueXkuc2NvcGVTdGF0ZS5pbkJhY2t0aWNrID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR0aGlzLnl5LnNjb3BlU3RhdGUuaW5CYWNrdGlja0V4cHIgPSB0cnVlO1xuXHRcdFx0XHRcdFx0bGV0IG5ld0V4cHJTcmMgPSBzZWxmLnRyYXZlcnNlKHNlbGYucGFyc2UoYnRFeHByU3JjICsgXCI7XCIpKS50cmFuc2xhdGlvbi5yZXBsYWNlKC87JC8sIFwiXCIpO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcInBhcnNlIHJlc3VsdDpcIik7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKG5ld0V4cHJTcmMpO1xuXHRcdFx0XHRcdFx0dGhpcy55eS5zY29wZVN0YXRlLmluQmFja3RpY2sgPSB0cnVlO1xuXHRcdFx0XHRcdFx0dGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5yZXBsYWNlKGJ0RXhwclJlZ2V4LCAoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGxldCBwcmV2Q2hhciA9IHRoaXMubWF0Y2guc3Vic3RyKHRoaXMubWF0Y2gubGVuZ3RoIC0xKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tYXRjaCA9IGJ0RXhwclNwYWNlcyArICckeycgKyBuZXdFeHByU3JjICsgXCJ9XCI7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwcmV2Q2hhciArIGJ0RXhwckxlZnRvdmVycztcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0ZmluYWxNYXRjaCArPSB0aGlzLm1hdGNoO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImE6IHRoaXMubWF0Y2ggYWZ0ZXIgcmVwbGFjZW1lbnQ6XCIsIHRoaXMubWF0Y2gpO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImE6IHRoaXMuX2lucHV0IGFmdGVyIHJlcGxhY2VtZW50OlwiLCB0aGlzLl9pbnB1dCk7XG5cdFx0XHRcdFx0XHQvL3Byb2Nlc3MuZXhpdCgpO1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChpbnB1dE1hdGNoID0gdGhpcy5faW5wdXQubWF0Y2goYnRCb2R5UmVnZXgpKSB7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5faW5wdXRbMF0gPT09IFwiYFwiKSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHQvL3RoaXMuaW5wdXQoKTtcblx0XHRcdFx0XHRcdFx0Ly90aGlzLnl5dGV4dCA9IFwiYFwiO1xuXHRcdFx0XHRcdFx0XHQvL3JldHVybiB0aGlzLmxleCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bGV0IG1hdGNoID0gYnRCb2R5UmVnZXguZXhlYyh0aGlzLl9pbnB1dCk7XG5cdFx0XHRcdFx0XHR0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnJlcGxhY2UoYnRCb2R5UmVnZXgsIChvcmlnaW5hbCwgbWF0Y2gsIGxlZnRvdmVycykgPT4ge1xuXHRcdFx0XHRcdFx0XHRsZXQgcHJldkNoYXIgPSB0aGlzLm1hdGNoLnN1YnN0cih0aGlzLm1hdGNoLmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1hdGNoID0gbWF0Y2g7XG5cdFx0XHRcdFx0XHRcdGZpbmFsTWF0Y2ggKz0gbWF0Y2g7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwcmV2Q2hhciArIGxlZnRvdmVycztcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImI6IHRoaXMubWF0Y2ggYWZ0ZXIgcmVwbGFjZW1lbnQ6XCIsIHRoaXMubWF0Y2gpO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImI6IHRoaXMuX2lucHV0IGFmdGVyIHJlcGxhY2VtZW50OlwiLCB0aGlzLl9pbnB1dCk7XG5cdFx0XHRcdFx0XHQvL3Byb2Nlc3MuZXhpdCgpO1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRlc3RNYXRjaCA9IHRoaXMubmV4dCgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlKCh0ZXN0TWF0Y2ggIT09IGZhbHNlKSAmJiB0aGlzLmlucHV0KCkpO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwibWF0Y2g6XCIsIHRoaXMubWF0Y2gpO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwibWF0Y2hlZDpcIiwgdGhpcy5tYXRjaGVkKTtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImxhc3RNYXRjaDpcIiwgXCJgXCIgKyBmaW5hbE1hdGNoICsgXCJgXCIpO1xuXHRcdFx0XHR0aGlzLnl5LnNjb3BlU3RhdGUuYnRTdHJpbmcgPSBcImBcIiArIGZpbmFsTWF0Y2ggKyBcImBcIjtcblx0XHRcdFx0cmV0dXJuIHRlc3RNYXRjaD90ZXN0TWF0Y2g6amlzb25MZXhlci5jYWxsKHRoaXMpO1xuXHRcdFx0fVxuXHRcdFx0bGV0IHJlc3VsdCA9IGppc29uTGV4ZXIuY2FsbCh0aGlzKTtcblx0XHRcdC8vY29uc29sZS5sb2coXCJyZXN1bHQ6XCIpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhyZXN1bHQpO1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9O1xuXHRcdCovXG5cdFx0c2VsZi5wYXJzZXIueXkuc2NvcGVBc3QgPSBTY29wZUFzdDtcblx0fVxuXG5cdGxpYnJhcnlVdGlscyAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJ1bnRpbWU6IHJlcXVpcmUoJy4vc2NvcGVSdW50aW1lLmpzJyksXG5cdFx0XHRhcGk6IHJlcXVpcmUoJy4vc2NvcGVSdW50aW1lQXBpLmpzJylcblx0XHR9O1xuXHR9XG5cblx0cGFyc2UgKGNvZGUpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRsZXQgamlzb25MZXhlciA9IHNlbGYucGFyc2VyLmxleGVyLmxleDtcblx0XHRzZWxmLnBhcnNlci55eS5zY29wZVN0YXRlID0ge307XG5cdFx0bGV0IGJ0UHJvY2Vzc29yID0gbmV3IEJhY2t0aWNrUHJvY2Vzc29yKHNlbGYpO1xuXG5cdFx0c2VsZi5wYXJzZXIubGV4ZXIubGV4ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0bGV0IGNvZGU7XG5cblx0XHRcdGNvZGUgPSBidFByb2Nlc3Nvci5sZXgodGhpcyk7XG5cdFx0XHRpZiAoY29kZSAhPT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuIGNvZGU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gamlzb25MZXhlci5jYWxsKHRoaXMpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnBhcnNlci5wYXJzZShjb2RlKTtcblx0fVxuXG5cdHRyYXZlcnNlIChvYmopIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRsZXQgcmVzdWx0ID0gXCJcIjtcblx0XHRpZiAob2JqID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXHRcdGlmIChvYmoudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gb2JqO1xuXHRcdH1cblx0XHRpZiAob2JqLmxvYyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRsZXQgbmFtZSA9IHNlbGYucnVsZXMuc3RhdGUubG9jLm5hbWU7XG5cdFx0XHRzZWxmLnJ1bGVzLnN0YXRlLmxvYyA9IG9iai5sb2M7XG5cdFx0XHRzZWxmLnJ1bGVzLnN0YXRlLmxvYy5uYW1lID0gbmFtZTtcblx0XHR9XG5cblx0XHRpZiAob2JqLmJvZHkgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0bGV0IGxhc3RQYXJlbnQgPSBzZWxmLnJ1bGVzLnBhcmVudE5vZGU7XG5cdFx0XHRvYmoudHJhdmVyc2VkQm9keSA9IFtdO1xuXHRcdFx0b2JqLmJvZHkuZm9yRWFjaCgoaSkgPT4ge1xuXHRcdFx0XHRzZWxmLnJ1bGVzLnBhcmVudE5vZGUgPSBvYmoudHlwZTtcblx0XHRcdFx0b2JqLnRyYXZlcnNlZEJvZHkucHVzaChzZWxmLnRyYXZlcnNlKGkpKTtcblx0XHRcdH0pO1xuXHRcdFx0c2VsZi5ydWxlcy5wYXJlbnROb2RlID0gbGFzdFBhcmVudDtcblx0XHR9XG5cdFx0aWYgKHNlbGYucnVsZXNbb2JqLnR5cGVdKSB7XG5cdFx0XHRzZWxmLnJ1bGVzLnN0YXRlLnNldE5hbWUob2JqLnR5cGUpO1xuXHRcdFx0aWYgKG9iai5ib2R5IGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdFx0cmV0dXJuIHNlbGYucnVsZXNbb2JqLnR5cGVdKC4uLm9iai50cmF2ZXJzZWRCb2R5KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYucnVsZXMuc3RhdGUubG9jLnNvdXJjZUNvZGUgPSBvYmouYm9keTtcblx0XHRcdFx0cmV0dXJuIHNlbGYucnVsZXNbb2JqLnR5cGVdKG9iai5ib2R5KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc29sZS5sb2coYCR7b2JqLnR5cGV9IG5vdCBpbXBsZW1lbnRlZGApO1xuXHRcdHJldHVybiBcIk5vdCBpbXBsZW1lbnRlZFwiO1xuXHR9XG5cblx0aW1wb3J0IChzcmNGaWxlbmFtZSwgbGliRmlsZW5hbWUsIGZpbGVuYW1lLCBsaW5lT2Zmc2V0KSB7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdGZpbGVuYW1lID0gSlNPTi5wYXJzZShmaWxlbmFtZSk7XG5cdFx0bGV0IG1TcmNGaWxlbmFtZSA9IHBhdGgucmVzb2x2ZShwYXRoLmRpcm5hbWUoc3JjRmlsZW5hbWUpLCBmaWxlbmFtZSk7XG5cdFx0aWYgKCFmcy5leGlzdHNTeW5jKG1TcmNGaWxlbmFtZSkpIHtcblx0XHRcdGxldCBwYWNrYWdlc0RpciA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi4vcGFja2FnZXNcIik7XG5cdFx0XHRsZXQgcGFja2FnZXMgPSBmcy5yZWFkZGlyU3luYyhwYWNrYWdlc0Rpcik7XG5cdFx0XHRpZiAocGFja2FnZXMuaW5kZXhPZihmaWxlbmFtZSkgIT09IC0xKSB7XG5cdFx0XHRcdGxldCBzY29wZVBhY2thZ2VEaXIgPSBwYXRoLmpvaW4ocGFja2FnZXNEaXIsIGZpbGVuYW1lKTtcblx0XHRcdFx0bGV0IHNwbiA9IHJlcXVpcmUocGF0aC5qb2luKHNjb3BlUGFja2FnZURpciwgXCJzcG4uanNvblwiKSk7XG5cdFx0XHRcdGxldCBtYWluID0gcGF0aC5qb2luKHNjb3BlUGFja2FnZURpciwgc3BuLm1haW4pO1xuXHRcdFx0XHRtU3JjRmlsZW5hbWUgPSBwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKHNyY0ZpbGVuYW1lKSwgbWFpbik7XG5cdFx0XHRcdFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBGaWxlIFwiJHtmaWxlbmFtZX1cIiBkb2Vzbid0IGV4aXN0ICR7c2VsZi5ydWxlcy5zdGF0ZS5lcnJvclRhaWwoKX1gKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKC9cXC5zYyQvLnRlc3QobVNyY0ZpbGVuYW1lKSkge1xuXHRcdFx0bGV0IG1MaWJGaWxlbmFtZSA9IHBhdGgucmVzb2x2ZShwYXRoLmRpcm5hbWUobGliRmlsZW5hbWUpLCBmaWxlbmFtZS5yZXBsYWNlKC9cXC5zYyQvLCBcIi5qc1wiKSk7XG5cdFx0XHRsZXQgbUNvZGUgPSBmcy5yZWFkRmlsZVN5bmMobVNyY0ZpbGVuYW1lLCAndXRmOCcpO1xuXHRcdFx0bGV0IG1SZXN1bHQgPSBuZXcgU2NvcGVQYXJzZXIoKS50cmFuc2xhdGUobUNvZGUsIG1TcmNGaWxlbmFtZSwgbUxpYkZpbGVuYW1lKTtcblx0XHRcdGxldCBtTGliRGlybmFtZSA9IHBhdGguZGlybmFtZShtTGliRmlsZW5hbWUpO1xuXHRcdFx0aWYgKCFmcy5leGlzdHNTeW5jKG1MaWJEaXJuYW1lKSkge1xuXHRcdFx0XHRmcy5ta2RpclN5bmMobUxpYkRpcm5hbWUpO1xuXHRcdFx0fVxuXHRcdFx0ZnMud3JpdGVGaWxlU3luYyhtTGliRmlsZW5hbWUsIG1SZXN1bHQuY29kZSk7XG5cdFx0XHRsZXQgZmlsZSA9IHtcblx0XHRcdFx0c291cmNlOiBtUmVzdWx0LmNvZGUsXG5cdFx0XHRcdHNvdXJjZUZpbGU6IG1MaWJGaWxlbmFtZVxuXHRcdFx0fTtcblx0XHRcdHNlbGYuaW1wb3J0ZWQucHVzaCh7XG5cdFx0XHRcdGZpbGU6IGZpbGUsXG5cdFx0XHRcdG9mZnNldDoge1xuXHRcdFx0XHRcdGxpbmU6IGxpbmVPZmZzZXRcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gYHNjb3BlLmltcG9ydCgke0pTT04uc3RyaW5naWZ5KG1MaWJGaWxlbmFtZSl9KWA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBgc2NvcGUuaW1wb3J0KCR7SlNPTi5zdHJpbmdpZnkobVNyY0ZpbGVuYW1lKX0pYDtcblx0XHR9XG5cdH1cblxuXHR0cmFuc2xhdGUgKGNvZGUsIHNyY0ZpbGVuYW1lPVwiTk8gU09VUkNFIEZJTEVcIiwgbGliRmlsZW5hbWU9XCJOTyBMSUIgRklMRVwiLCBhc0luY2x1ZGU9ZmFsc2UpIHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0bGV0IHNjb3BlUnVudGltZSA9IFwiXCI7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHNjb3BlUnVudGltZSA9IHJlcXVpcmUoXCIuL3ByZWRlZnMuanNcIikoX19kaXJuYW1lKTtcblx0XHRcdC8qc2NvcGVSdW50aW1lICs9ICcjIS91c3IvYmluL2VudiBub2RlXFxuJyArXG5cdFx0XHRcdCdcInVzZSBzdHJpY3RcIjsnICtcblx0XHRcdFx0J2dsb2JhbC5fX3Njb3BlZGlyPV9fZGlybmFtZTsnICtcblx0XHRcdFx0J3JlcXVpcmUoXCJzb3VyY2UtbWFwLXN1cHBvcnRcIikuaW5zdGFsbCgpOycgK1xuXHRcdFx0XHQnY29uc3Qgc2NvcGU9cmVxdWlyZShcIicgKyBwYXRoLmpvaW4oX19kaXJuYW1lLCBcInNjb3BlUnVudGltZS5qc1wiKSArICdcIik7JyArXG5cdFx0XHRcdCdjb25zdCBTY29wZUFwaT1yZXF1aXJlKFwiJyArIHBhdGguam9pbihfX2Rpcm5hbWUsIFwic2NvcGVSdW50aW1lQXBpLmpzXCIpICsgJ1wiKShzY29wZSk7JzsqL1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzY29wZVJ1bnRpbWUgPSAnXCJ1c2Ugc3RyaWN0XCI7Jztcblx0XHR9XG5cdFx0Ly9sZXQgc2NvcGVSdW50aW1lRXJyb3JIYW5kbGVyID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsIFwic2NvcGVSdW50aW1lRXJyb3JIYW5kbGVyLmpzXCIpLCBcInV0ZjhcIik7XG5cdFx0bGV0IHJlc3VsdDtcblx0XHRsZXQgdHJhdmVyc2FsO1xuXHRcdC8vbGV0IHNvdXJjZU5vZGVzID0gW107XG5cdFx0Ly9sZXQgbG9jc01hcHBlZCA9IFtdO1xuXHRcdHNlbGYubWFwQW5kUGFyc2UgPSAoZGF0YSA9IHtzb3VyY2U6XCJcIiwgdHJhbnNsYXRpb246XCJcIiwgc246IFwiXCJ9KSA9PiB7XG5cdFx0XHQvL2NvbnNvbGUubG9nKGRhdGEuc291cmNlKTtcblx0XHRcdC8vbGV0IGxvYyA9IHNlbGYucnVsZXMuc3RhdGUubG9jLnN0YXJ0O1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhzZWxmLnJ1bGVzLnN0YXRlLmdldE5hbWUoKSk7XG5cdFx0XHRpZiAodHlwZW9mIGRhdGEuc24gIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0ZGF0YS5zbi5zZXRTb3VyY2VDb250ZW50KHNyY0ZpbGVuYW1lLCBkYXRhLnNvdXJjZSk7XG5cdFx0XHR9XG5cdFx0XHQvL3NvdXJjZU5vZGVzLnB1c2goc24pO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhkYXRhLnNvdXJjZSwgbG9jKTtcblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH07XG5cdFx0c2VsZi5zbiA9IChjaHVuaywgbmFtZT1zZWxmLnJ1bGVzLnN0YXRlLmdldE5hbWUoKSkgPT4ge1xuXHRcdFx0bGV0IGxvYyA9IHNlbGYucnVsZXMuc3RhdGUubG9jLnN0YXJ0O1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcImNodW5rOlwiLCBjaHVuayk7XG5cdFx0XHRyZXR1cm4gbmV3IHNvdXJjZU1hcC5Tb3VyY2VOb2RlKFxuXHRcdFx0XHRsb2MubGluZSwgXG5cdFx0XHRcdGxvYy5jb2x1bW4sIFxuXHRcdFx0XHRzcmNGaWxlbmFtZSwgXG5cdFx0XHRcdGNodW5rLFxuXHRcdFx0XHRuYW1lXG5cdFx0XHQpO1xuXHRcdH07XG5cdFx0bGV0IG5vZGUgPSBzZWxmLnNuKFwiXCIpO1xuXHRcdGxldCBzbTtcblx0XHRzZWxmLmltcG9ydGVkID0gW107XG5cdFx0c2VsZi5ydWxlcyA9IG5ldyBTY29wZVJ1bGVzKCk7XG5cdFx0c2VsZi5ydWxlcy5wYXJzZXIgPSBzZWxmO1xuXHRcdHNlbGYucnVsZXMuc3JjRmlsZW5hbWUgPSBzcmNGaWxlbmFtZTtcblx0XHRzZWxmLnJ1bGVzLmxpYkZpbGVuYW1lID0gbGliRmlsZW5hbWU7XG5cdFx0c2VsZi5ydWxlcy5ub2RlID0gbm9kZTtcblx0XHRzZWxmLnJ1bGVzLnNuID0gc2VsZi5zbjtcblx0XHRzZWxmLnJ1bGVzLm1hcEFuZFBhcnNlID0gc2VsZi5tYXBBbmRQYXJzZTtcblx0XHRsZXQgYXN0ID0gdGhpcy5wYXJzZShjb2RlKTtcblx0XHRsZXQgYXN0SlNPTiA9IEpTT04uc3RyaW5naWZ5KGFzdCwgbnVsbCwgJyAgJyk7XG5cdFx0bGV0IHBhcnNlUmVzdWx0ID0gc2VsZi50cmF2ZXJzZShhc3QpO1xuXHRcdC8vc2NvcGVSdW50aW1lID0gYmFiZWxDb3JlLnRyYW5zZm9ybShzY29wZVJ1bnRpbWUsIHtwcmVzZXRzOiBbJ21pbmlmeS1lczIwMTUnXX0pO1xuXHRcdC8vY29uc29sZS5sb2coc2NvcGVSdW50aW1lKTtcblx0XHRpZiAoYXNJbmNsdWRlKSB7XG5cdFx0XHRyZXR1cm4gc2VsZi5ydWxlcy5pbnZva2VFeHByZXNzaW9uKFxuXHRcdFx0XHRcdHNlbGYucnVsZXMuc2NvcGVFeHByZXNzaW9uKFxuXHRcdFx0XHRcdFx0cGFyc2VSZXN1bHRcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdHNlbGYucnVsZXMuaW52b2tlQXJndW1lbnRzKClcblx0XHRcdFx0KS5zblxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0cmF2ZXJzYWwgPSBzZWxmLnJ1bGVzLmludm9rZUV4cHJlc3Npb24oXG5cdFx0XHRcdHNlbGYucnVsZXMuc2NvcGVFeHByZXNzaW9uKFxuXHRcdFx0XHRcdHNlbGYucnVsZXMuc2NvcGVTdGFydCgpLFxuXHRcdFx0XHRcdHBhcnNlUmVzdWx0XG5cdFx0XHRcdCksXG5cdFx0XHRcdHNlbGYucnVsZXMuaW52b2tlQXJndW1lbnRzKClcblx0XHRcdCkuc247XG5cblx0XHRcdHRyYXZlcnNhbC5wcmVwZW5kKHNjb3BlUnVudGltZSk7XG5cdFx0XHR0cmF2ZXJzYWwuYWRkKFwiO1wiKTtcblx0XHR9XG5cdFx0c20gPSB0cmF2ZXJzYWwudG9TdHJpbmdXaXRoU291cmNlTWFwKCk7XG5cdFx0c20ubWFwID0gSlNPTi5wYXJzZShzbS5tYXAudG9TdHJpbmcoKSk7XG5cdFx0c20ubWFwLnNvdXJjZXNDb250ZW50ID0gW2NvZGVdO1xuXHRcdHNtLmNvbW1lbnQgPSBjb252ZXJ0LmZyb21PYmplY3Qoc20ubWFwKS50b0NvbW1lbnQoKTtcblx0XHRsZXQgbWFpbkZpbGUgPSB7XG5cdFx0XHRzb3VyY2U6IHNtLmNvZGUgKyBgXFxuJHtzbS5jb21tZW50fWAsXG5cdFx0XHRzb3VyY2VGaWxlOiBsaWJGaWxlbmFtZVxuXHRcdH07XG5cdFx0bGV0IGNvbWJpbmF0aW9uID0gY29tYmluZS5cblx0XHRcdGNyZWF0ZShsaWJGaWxlbmFtZS5yZXBsYWNlKC9cXC5qcyQvLCBcIi5taW4uanNcIikpLlxuXHRcdFx0YWRkRmlsZShtYWluRmlsZSwge2xpbmU6IDF9KTtcblx0XHRcblx0XHRzZWxmLmltcG9ydGVkLmZvckVhY2gobyA9PiB7XG5cdFx0XHRjb21iaW5hdGlvbi5hZGRGaWxlKG8uZmlsZSwgby5vZmZzZXQpO1xuXHRcdH0pO1xuXHRcdGxldCBiYXNlNjQgPSBjb21iaW5hdGlvbi5iYXNlNjQoKTtcblx0XHRsZXQgbmV3U20gPSBjb252ZXJ0LmZyb21CYXNlNjQoYmFzZTY0KS50b09iamVjdCgpO1xuXHRcdHJlc3VsdCA9IHtcblx0XHRcdGFzdDogYXN0SlNPTixcblx0XHRcdG1hcDogbmV3U20sXG5cdFx0XHRjb2RlOiBzbS5jb2RlICsgYFxcbiR7c20uY29tbWVudH1gXG5cdFx0fTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2NvcGVQYXJzZXI7IiwiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5cbmxldCBhcGkgPSB7XG5cdHByaW50OiBcIlNjb3BlQXBpLnByaW50XCIsXG5cdGRlYnVnOiBcIlNjb3BlQXBpLmRlYnVnXCIsXG5cdGlmOiBcIlNjb3BlQXBpWydpZiddXCIsXG5cdGVhY2g6IFwiU2NvcGVBcGlbJ2VhY2gnXVwiLFxuXHRjb21waWxlOiBcIlNjb3BlQXBpLmNvbXBpbGVcIixcblx0cHJvbWlzZTogXCJTY29wZUFwaS5wcm9taXNlXCIsXG5cdGRlcmVmZXJlbmNlOiBcIlNjb3BlQXBpLmRlcmVmZXJlbmNlXCIsXG5cdEJTT050b01hcDogXCJTY29wZUFwaS5CU09OdG9NYXBcIixcblx0dG9KUzogXCJTY29wZUFwaS50b0pTXCIsXG5cdHRvSlNPTjogXCJTY29wZUFwaS50b0pTT05cIixcblx0Y3JlYXRlVGFnOiBcIlNjb3BlQXBpLmNyZWF0ZVRhZ1wiLFxuXHRnZXRUYWc6IFwiU2NvcGVBcGkuZ2V0VGFnXCIsXG5cdGdldEFsbFRhZ3M6IFwiU2NvcGVBcGkuZ2V0QWxsVGFnc1wiXG59O1xuXG5sZXQgYWxsb3dlZFVuZGVmaW5lZElkRXhwcmVzc2lvbnMgPSBbXG5cdFwieG1sRXhwcmVzc2lvblwiLFxuXHRcImludm9rZUlkXCJcbl07XG5cbmxldCBidWlsZEFyZ1BhcnRGcm9tQXNzb2NQYXJ0ID0gKGFzc29jLCBhZGRUbyA9IGZhbHNlKSA9PiB7XG5cdGxldCByZXN1bHQgPSBcIlwiO1xuXHRpZiAoYWRkVG8pIHtcblx0XHRyZXN1bHQgPSBcIixcIjtcblx0fVxuXHRpZiAoYXNzb2MudHlwZSA9PT0gXCJpZFwiKSB7XG5cdFx0cmVzdWx0ICs9IGBbXCIke2Fzc29jLm5hbWV9XCIsJHthc3NvYy5leHByZXNzaW9ufV1gO1xuXHR9IGVsc2UgaWYgKGFzc29jLnR5cGUgPT09IFwic3RyaW5nXCIpIHtcblx0XHRyZXN1bHQgKz0gYFske2Fzc29jLm5hbWV9LCR7YXNzb2MuZXhwcmVzc2lvbn1dYDtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5sZXQgcmFuZFN0ciA9IChsZW49MTYpID0+IHtcblx0bGV0IHJlc3VsdCA9IFwiXCI7XG5cdGxldCBjaGFycyA9IFwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIjtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuXHRcdHJlc3VsdCArPSBjaGFyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFycy5sZW5ndGgpXTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5jbGFzcyBTY29wZVJ1bGVzIHtcblx0Y29uc3RydWN0b3IgKHN0YXRlID0ge2NvbnRleHQ6IHt9fSkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdHNlbGYucGFyZW50Tm9kZSA9IFwicHJvZ3JhbVwiO1xuXHRcdHNlbGYuc3RhdGUgPSBzdGF0ZTtcblx0XHRzdGF0ZS5sb2MgPSB7XG5cdFx0XHRzdGFydDoge1xuXHRcdFx0XHRsaW5lOiAwLFxuXHRcdFx0XHRjb2x1bW46IDBcblx0XHRcdH0sXG5cdFx0XHRlbmQ6IHtcblx0XHRcdFx0bGluZTogMCxcblx0XHRcdFx0Y29sdW1uOiAwXG5cdFx0XHR9LFxuXHRcdFx0bmFtZTogXCJyb290XCJcblx0XHR9XG5cdFx0c3RhdGUuZXJyb3JUYWlsID0gKCkgPT4gYFske3NlbGYuc3RhdGUubG9jLnN0YXJ0LmxpbmV9OiR7c2VsZi5zdGF0ZS5sb2Muc3RhcnQuY29sdW1ufS0ke3NlbGYuc3RhdGUubG9jLmVuZC5saW5lfToke3NlbGYuc3RhdGUubG9jLmVuZC5jb2x1bW59XWA7XG5cdFx0Ly9zdGF0ZS5pZEJ1YmJsZSA9IFtcInRoaXNcIl07XG5cdFx0c3RhdGUuaW1wb3J0RXhwcmVzc2lvbnMgPSBuZXcgTWFwKCk7XG5cdFx0c3RhdGUucm9vdCA9IHN0YXRlLmNvbnRleHQ7XG5cdCAgICBzdGF0ZS5jb250ZXh0ID0gc3RhdGUuY29udGV4dDtcblx0ICAgIHN0YXRlLmNvbnRleHQuYXJncyA9IFtdO1xuXHQgICAgc3RhdGUuY29udGV4dC5uYW1lID0gXCJyb290XCI7XG5cdCAgICBzdGF0ZS5uZXdDaGlsZENvbnRleHQgPSAoKSA9PiB7XG5cdCAgICBcdGxldCBwYXJlbnQgPSBzdGF0ZS5jb250ZXh0O1xuXHQgICAgXHRsZXQgbmV3Q29udGV4dCA9IHtcblx0ICAgIFx0XHRzY29waW5nOiB7XG5cdFx0XHQgICAgICBsZXQ6IG5ldyBNYXAoKSxcblx0XHRcdCAgICAgIHByaXZhdGU6IG5ldyBNYXAoKSxcblx0XHRcdCAgICAgIHByb3RlY3RlZDogbmV3IE1hcCgpLFxuXHRcdFx0ICAgICAgcHVibGljOiBuZXcgTWFwKCksXG5cdFx0XHQgICAgICBwYXJlbnQ6IHBhcmVudFxuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgZGVmaW5lZExvY2FsbHk6IHN0YXRlLmNvbnRleHQuZGVmaW5lZExvY2FsbHksXG5cdFx0XHQgICAgaWRBdmFpbGFibGU6IHN0YXRlLmNvbnRleHQuaWRBdmFpbGFibGVcblx0ICAgIFx0fTtcblx0ICAgIFx0bmV3Q29udGV4dC5hcmdzID0gW107XG5cdCAgICBcdG5ld0NvbnRleHQuaW5BcnJheURlZmluaXRpb24gPSBmYWxzZTtcblx0ICAgIFx0bmV3Q29udGV4dC5uYW1lID0gc3RhdGUubG9jLm5hbWU7XG5cdCAgICBcdHN0YXRlLmNvbnRleHQgPSBuZXdDb250ZXh0O1xuXHQgICAgfTtcblxuXHQgICAgc3RhdGUuc2V0TmFtZSA9IChuYW1lKSA9PiB7XG5cdCAgICBcdHN0YXRlLmxvYy5uYW1lID0gbmFtZTtcblx0ICAgIH07XG5cblx0ICAgIHN0YXRlLmdldE5hbWUgPSAoKSA9PiB7XG5cdCAgICBcdGxldCBuYW1lID0gc3RhdGUubG9jLm5hbWU7XG5cdCAgICBcdGxldCBjdHggPSBzdGF0ZS5jb250ZXh0O1xuXHQgICAgXHR3aGlsZSAoY3R4ICYmIGN0eC5zY29waW5nKSB7XG5cdCAgICBcdFx0bmFtZSA9IGAke2N0eC5uYW1lfS0+JHtuYW1lfWA7XG5cdCAgICBcdFx0Y3R4ID0gY3R4LnNjb3BpbmcucGFyZW50O1xuXHQgICAgXHR9XG5cdCAgICBcdHJldHVybiBuYW1lO1xuXHQgICAgfTtcblxuXHQgICAgc3RhdGUuc2V0UGFyZW50Q29udGV4dCA9ICgpID0+IHtcblx0ICAgIFx0c3RhdGUuY29udGV4dCA9IHN0YXRlLmNvbnRleHQuc2NvcGluZy5wYXJlbnQ7XG5cdCAgICB9O1xuXG5cdCAgICBzdGF0ZS5uZXdJbXBvcnRFeHByZXNzaW9uID0gKHN0cikgPT4ge1xuXHQgICAgXHRsZXQgc2VsZiA9IHRoaXM7XG5cdCAgICBcdGxldCByZXN1bHQgPSBzZWxmLnBhcnNlci5pbXBvcnQoc2VsZi5zcmNGaWxlbmFtZSwgc2VsZi5saWJGaWxlbmFtZSwgc3RyLCBzZWxmLnN0YXRlLmxvYy5zdGFydC5saW5lKTtcblx0ICAgIFx0cmV0dXJuIHJlc3VsdDtcblx0ICAgIH07XG5cblx0ICAgIHN0YXRlLmNvbnRleHQuZGVmaW5lZExvY2FsbHkgPSAoaWQgPSBcIlwiLCBtZSA9IHN0YXRlLmNvbnRleHQpID0+IHtcblx0ICAgIFx0aWYgKG1lLnNjb3BpbmcubGV0LmhhcyhpZCkpIHtcblx0ICAgIFx0XHRyZXR1cm4gbWUuc2NvcGluZy5sZXQuZ2V0KGlkKTtcblx0ICAgIFx0fVxuXHQgICAgXHRpZiAobWUuc2NvcGluZy5wcml2YXRlLmhhcyhpZCkpIHtcblx0ICAgIFx0XHRyZXR1cm4gbWUuc2NvcGluZy5wcml2YXRlLmdldChpZCk7XG5cdCAgICBcdH1cblx0ICAgIFx0aWYgKG1lLnNjb3BpbmcucHJvdGVjdGVkLmhhcyhpZCkpIHtcblx0ICAgIFx0XHRyZXR1cm4gbWUuc2NvcGluZy5wcm90ZWN0ZWQuZ2V0KGlkKTtcblx0ICAgIFx0fVxuXHQgICAgXHRpZiAobWUuc2NvcGluZy5wdWJsaWMuaGFzKGlkKSkge1xuXHQgICAgXHRcdHJldHVybiBtZS5zY29waW5nLnB1YmxpYy5nZXQoaWQpO1xuXHQgICAgXHR9XG5cdCAgICBcdHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgc3RhdGUuY29udGV4dC5pZEF2YWlsYWJsZSA9IChpZD1cIlwiLCBtZSA9IHN0YXRlLmNvbnRleHQpID0+IHtcblx0ICAgIFx0aWYgKCFtZSkge1xuXHQgICAgXHRcdHJldHVybiBmYWxzZTtcblx0ICAgIFx0fVxuXG5cdCAgICBcdGlmIChtZS5kZWZpbmVkTG9jYWxseSAhPT0gdW5kZWZpbmVkICYmIG1lLmRlZmluZWRMb2NhbGx5KGlkLCBtZSkpIHtcblx0ICAgIFx0XHRyZXR1cm4gdHJ1ZTtcblx0ICAgIFx0fVxuXG5cdCAgICBcdGlmIChtZS5zY29waW5nICYmIG1lLnNjb3BpbmcucGFyZW50ICYmIG1lLnNjb3BpbmcucGFyZW50LnNjb3BpbmcpIHtcblx0ICAgIFx0XHRyZXR1cm4gbWUuaWRBdmFpbGFibGUoaWQsIG1lLnNjb3BpbmcucGFyZW50KTtcblx0ICAgIFx0fVxuXG5cdCAgICBcdHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgc3RhdGUubmV3Q2hpbGRDb250ZXh0KCk7XG5cdH1cblxuXHRhcnJheUV4cHJlc3Npb24gKHN0YXJ0LCBleHByZXNzaW9uTGlzdD1cIlwiKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0c2VsZi5zdGF0ZS5zZXRQYXJlbnRDb250ZXh0KCk7XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBzdGFydC5zb3VyY2UgKyBleHByZXNzaW9uTGlzdC5zb3VyY2UgKyBcIl1cIiwgXG5cdFx0XHR0cmFuc2xhdGlvbjogc3RhcnQudHJhbnNsYXRpb24gKyBleHByZXNzaW9uTGlzdC50cmFuc2xhdGlvbiArIFwiKVwiLFxuXHRcdFx0c246IHNlbGYuc24oW3N0YXJ0LnNuLCBleHByZXNzaW9uTGlzdC5zbiwgXCIpXCJdKVxuXHRcdH0pO1xuXHR9XG5cblx0YXJyYXlTdGFydCAoKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0c2VsZi5zdGF0ZS5uZXdDaGlsZENvbnRleHQoKTtcblx0XHRzZWxmLnN0YXRlLmNvbnRleHQuaW5BcnJheURlZmluaXRpb24gPSB0cnVlO1xuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogXCJbXCIsIFxuXHRcdFx0dHJhbnNsYXRpb246IFwic2NvcGUuYXJyYXlFeHByZXNzaW9uKFwiLFxuXHRcdFx0c246IHNlbGYuc24oW1wic2NvcGUuYXJyYXlFeHByZXNzaW9uKFwiXSlcblx0XHR9KTtcblx0fVxuXG5cdGFzc2lnbm1lbnRFeHByZXNzaW9uIChuYW1lLCBhc3NpZ25tZW50VmFsdWUpIHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBuYW1lLnNvdXJjZSArIFwiPVwiICsgYXNzaWdubWVudFZhbHVlLnNvdXJjZSxcblx0XHRcdHRyYW5zbGF0aW9uOiBgc2NvcGUuYXNzaWdubWVudEV4cHJlc3Npb24oWyR7bmFtZS50cmFuc2xhdGlvbn1dLCR7YXNzaWdubWVudFZhbHVlLnRyYW5zbGF0aW9ufSlgLFxuXHRcdFx0c246IHNlbGYuc24oW1wic2NvcGUuYXNzaWdubWVudEV4cHJlc3Npb24oW1wiLCBuYW1lLnNuLCBcIl0sXCIsIGFzc2lnbm1lbnRWYWx1ZS5zbiwgXCIpXCJdKVxuXHRcdH0pO1xuXHR9XG5cblx0YXNzaWdubWVudFZhbHVlIChvcCwgZXhwcmVzc2lvbikge1xuXHRcdGxldCBzZWxmID0gdGhpcztcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IG9wICsgZXhwcmVzc2lvbi5zb3VyY2UsXG5cdFx0XHR0cmFuc2xhdGlvbjogYFtcIiR7b3B9XCIsJHtleHByZXNzaW9uLnRyYW5zbGF0aW9ufV1gLFxuXHRcdFx0c246IHNlbGYuc24oWydbXCInLCBvcCwgJ1wiLCcsIGV4cHJlc3Npb24uc24sICddJ10pXG5cdFx0fSk7XG5cdH1cblxuXHRhc3NvY2lhdGl2ZURlY2xhcmF0aW9uIChuYW1lLCB0eXBlLCBleHByZXNzaW9uKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0bGV0IHRyYW5zbGF0ZWROYW1lID0gbmFtZTtcblx0XHRpZiAodHlwZSA9PT0gXCJpZFwiKSB7XG5cdFx0XHR0cmFuc2xhdGVkTmFtZSA9IGBcIiR7bmFtZX1cImA7XG5cdFx0fVxuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYCR7bmFtZX06JHtleHByZXNzaW9uLnNvdXJjZX1gLFxuXHRcdFx0dHJhbnNsYXRpb246IGBbJHt0cmFuc2xhdGVkTmFtZX0sJHtleHByZXNzaW9uLnRyYW5zbGF0aW9ufV1gLFxuXHRcdFx0c246IHNlbGYuc24oW1wiW1wiLCB0cmFuc2xhdGVkTmFtZSwgXCIsXCIsIGV4cHJlc3Npb24uc24sIFwiXVwiXSlcblx0XHR9KTtcblx0fVxuXG5cdGFzc29jaWF0aXZlTGlzdCAoYXNzb2NpYXRpdmVMaXN0LCBhc3NvY2lhdGl2ZURlY2xhcmF0aW9uKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0bGV0IHJlc3VsdCA9IG51bGw7XG5cdFx0bGV0IG5hbWUgPSAnJztcblx0XHRpZiAoYXNzb2NpYXRpdmVEZWNsYXJhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRhc3NvY2lhdGl2ZURlY2xhcmF0aW9uID0gYXNzb2NpYXRpdmVMaXN0O1xuXHRcdFx0cmVzdWx0ID0ge1xuXHRcdFx0XHRzb3VyY2U6IGFzc29jaWF0aXZlRGVjbGFyYXRpb24uc291cmNlLFxuXHRcdFx0XHR0cmFuc2xhdGlvbjogYXNzb2NpYXRpdmVEZWNsYXJhdGlvbi50cmFuc2xhdGlvbixcblx0XHRcdFx0c246IHNlbGYuc24oW2Fzc29jaWF0aXZlRGVjbGFyYXRpb24uc25dKVxuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0ge1xuXHRcdFx0XHRzb3VyY2U6IGFzc29jaWF0aXZlTGlzdC5zb3VyY2UgKyBcIixcIiArIGFzc29jaWF0aXZlRGVjbGFyYXRpb24uc291cmNlLFxuXHRcdFx0XHR0cmFuc2xhdGlvbjogYXNzb2NpYXRpdmVMaXN0LnRyYW5zbGF0aW9uICsgXCIsXCIgKyBhc3NvY2lhdGl2ZURlY2xhcmF0aW9uLnRyYW5zbGF0aW9uLFxuXHRcdFx0XHRzbjogc2VsZi5zbihbYXNzb2NpYXRpdmVMaXN0LnNuLCBcIixcIiwgYXNzb2NpYXRpdmVEZWNsYXJhdGlvbi5zbl0pXG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHJlc3VsdCk7XG5cdH1cblxuXHRiaW5hcnlFeHByZXNzaW9uIChhLCBvcCwgYikge1xuXHRcdGxldCBzZWxmID0gdGhpcztcblx0XHRsZXQgc3JjT3AgPSBcIlwiO1xuXHRcdHN3aXRjaCAob3ApIHtcblx0XHRcdGNhc2UgXCImJlwiOlxuXHRcdFx0XHRzcmNPcCA9ICcgYW5kICc7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInx8XCI6XG5cdFx0XHRcdHNyY09wID0gJyBvciAnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCI9PT1cIjpcblx0XHRcdFx0c3JjT3AgPSAnIGlzICc7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcIiE9PVwiOlxuXHRcdFx0XHRzcmNPcCA9ICcgaXNudCAnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCI+XCI6XG5cdFx0XHRcdHNyY09wID0gJyBndCAnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCI8XCI6XG5cdFx0XHRcdHNyY09wID0gJyBsdCAnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCI+PVwiOlxuXHRcdFx0XHRzcmNPcCA9ICcgZ3RlcSAnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCI8PVwiOlxuXHRcdFx0XHRzcmNPcCA9ICcgbHRlcSAnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHNyY09wID0gb3A7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGAke2Euc291cmNlfSR7c3JjT3B9JHtiLnNvdXJjZX1gLFxuXHRcdFx0dHJhbnNsYXRpb246IGBzY29wZS5iaW5hcnlFeHByZXNzaW9uKFwiJHtvcH1cIiwke2EudHJhbnNsYXRpb259LCR7Yi50cmFuc2xhdGlvbn0pYCxcblx0XHRcdHNuOiBzZWxmLnNuKFsnc2NvcGUuYmluYXJ5RXhwcmVzc2lvbihcIicsIG9wLCAnXCIsJywgYS5zbiwgJywnLCBiLnNuLCAnKSddKVxuXHRcdH0pO1xuXHR9XG5cblx0Ym9vbGVhbkxpdGVyYWwgKGJvb2wpIHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgJHtib29sfWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogYCR7Ym9vbH1gLFxuXHRcdFx0c246IHNlbGYuc24oW2Ake2Jvb2x9YF0pXG5cdFx0fSk7XG5cdH1cbi8qXG5cdGJhY2t0aWNrQm9keUV4cHJlc3Npb24gKGV4cHJlc3Npb24pIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGV4cHJlc3Npb24uc291cmNlLFxuXHRcdFx0dHJhbnNsYXRpb246IGV4cHJlc3Npb24udHJhbnNsYXRpb24sXG5cdFx0XHRzbjogc2VsZi5zbihbZXhwcmVzc2lvbi5zbl0pXG5cdFx0fSk7XG5cdH1cblxuXHRiYWNrdGlja0JvZHlTdHJpbmcgKGNoYXIpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGNoYXIsXG5cdFx0XHR0cmFuc2xhdGlvbjogY2hhcixcblx0XHRcdHNuOiBjaGFyXG5cdFx0fSk7XG5cdH1cblxuXHRiYWNrdGlja0JvZHkgKGJhY2t0aWNrQm9keSwgYmFja3RpY2tCb2R5UGFydCkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdGlmIChiYWNrdGlja0JvZHkgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0XHRzb3VyY2U6IFwiXCIsXG5cdFx0XHRcdHRyYW5zbGF0aW9uOiBcIlwiLFxuXHRcdFx0XHRzbjogXCJcIlxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYmFja3RpY2tCb2R5LnNvdXJjZSArIGJhY2t0aWNrQm9keVBhcnQuc291cmNlLFxuXHRcdFx0dHJhbnNsYXRpb246IGJhY2t0aWNrQm9keS50cmFuc2xhdGlvbiArIGJhY2t0aWNrQm9keVBhcnQudHJhbnNsYXRpb24sXG5cdFx0XHRzbjogc2VsZi5zbihbYmFja3RpY2tCb2R5LnNuLCBiYWNrdGlja0JvZHlQYXJ0LnNuXSlcblx0XHR9KTtcblx0fVxuXG5cdGJhY2t0aWNrU3RyaW5nIChiYWNrdGlja0JvZHkpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6ICdgJyArIGJhY2t0aWNrQm9keS5zb3VyY2UgKyAnYCcsXG5cdFx0XHR0cmFuc2xhdGlvbjogJ2AnICsgYmFja3RpY2tCb2R5LnRyYW5zbGF0aW9uICsgJ2AnLFxuXHRcdFx0c246IHNlbGYuc24oWydgJywgYmFja3RpY2tCb2R5LnNuLCAnYCddKVxuXHRcdH0pO1xuXHR9XG4qL1xuXHRidFN0cmluZyAoYmFja3RpY2tTdHJpbmcpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGJhY2t0aWNrU3RyaW5nLFxuXHRcdFx0dHJhbnNsYXRpb246IGJhY2t0aWNrU3RyaW5nLFxuXHRcdFx0c246IHNlbGYuc24oW2JhY2t0aWNrU3RyaW5nXSksXG5cdFx0XHRpc0JTdHJpbmc6IHRydWVcblx0XHR9KTtcblx0fVxuXG5cdGJyYWNrZXRFeHByZXNzaW9uIChleHByZXNzaW9uKSB7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYFske2V4cHJlc3Npb24uc291cmNlfV1gLFxuXHRcdFx0dHJhbnNsYXRpb246IGBbJHtleHByZXNzaW9uLnRyYW5zbGF0aW9ufV1gLFxuXHRcdFx0c246IHNlbGYuc24oW1wiW1wiLCBleHByZXNzaW9uLnNuLCBcIl1cIl0pLFxuXHRcdFx0dmFsdWU6IGV4cHJlc3Npb24udHJhbnNsYXRpb25cblx0XHR9KTtcblx0fVxuXG5cdGJyYWNrZXRTZWxlY3RvckV4cHJlc3Npb24gKGEsIGIpIHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0aWYgKHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRhID0gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRcdHNvdXJjZTogXCJcIixcblx0XHRcdFx0dHJhbnNsYXRpb246IFwiMFwiLFxuXHRcdFx0XHRzbjogXCIwXCJcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdGIgPSBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdFx0c291cmNlOiBcIlwiLFxuXHRcdFx0XHR0cmFuc2xhdGlvbjogXCJ1bmRlZmluZWRcIixcblx0XHRcdFx0c246IFwidW5kZWZpbmVkXCJcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGBbJHthLnNvdXJjZX06JHtiLnNvdXJjZX1dYCxcblx0XHRcdHRyYW5zbGF0aW9uOiBgLnNsaWNlKCR7YS50cmFuc2xhdGlvbn0sJHtiLnRyYW5zbGF0aW9ufSlgLFxuXHRcdFx0c246IHNlbGYuc24oW1wiLnNsaWNlKFwiLCBhLnNuLCBcIixcIiwgYi5zbiwgXCIpXCJdKSxcblx0XHRcdHZhbHVlczogW2EudHJhbnNsYXRpb24sIGIudHJhbnNsYXRpb25dXG5cdFx0fSk7XG5cdH1cblxuXHRjb250cm9sQ29kZSAoY29udHJvbENvZGU9XCJcIiwgZXhwcmVzc2lvbikge1xuXHRcdGxldCBzZWxmID0gdGhpcztcblx0XHRzZWxmLnN0YXRlLmxvYy5uYW1lID0gc2VsZi5zdGF0ZS5jb250ZXh0Lm5hbWU7XG5cdFx0aWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2UoKTtcblx0XHR9XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgJHtjb250cm9sQ29kZS5zb3VyY2V9JHtleHByZXNzaW9uLnNvdXJjZX07YCxcblx0XHRcdHRyYW5zbGF0aW9uOiBgJHtjb250cm9sQ29kZS50cmFuc2xhdGlvbn0ke2V4cHJlc3Npb24udHJhbnNsYXRpb259O2AsXG5cdFx0XHRzbjogc2VsZi5zbihbY29udHJvbENvZGUuc24sIGV4cHJlc3Npb24uc24sIFwiO1wiXSlcblx0XHR9KTtcblx0fVxuXG5cdGRlY2xhcmF0aW9uSWQgKGlkZW50aWZpZXIpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRzZWxmLnN0YXRlLmxvYy5uYW1lID0gaWRlbnRpZmllcjtcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGAke2lkZW50aWZpZXJ9YCxcblx0XHRcdHRyYW5zbGF0aW9uOiBgXCIke2lkZW50aWZpZXJ9XCJgLFxuXHRcdFx0c246IHNlbGYuc24oWydcIicsIGlkZW50aWZpZXIsICdcIiddKVxuXHRcdH0pO1xuXHR9XG5cblx0ZGVjbGFyYXRpb25JZExpc3QgKGlkTGlzdCkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdGxldCBzdHJpbmdMaXN0ID0gXCJcIjtcblx0XHRpZExpc3QudmFsdWVzLmZvckVhY2goKGlkLCBpbmRleCkgPT4ge1xuXHRcdFx0aWYgKGluZGV4ICE9PSAwKSB7XG5cdFx0XHRcdHN0cmluZ0xpc3QgKz0gXCIsXCI7XG5cdFx0XHR9XG5cdFx0XHRzdHJpbmdMaXN0ICs9IGBcIiR7aWR9XCJgO1xuXHRcdH0pO1xuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYFske2lkTGlzdC5zb3VyY2V9XWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogYFske3N0cmluZ0xpc3R9XWAsXG5cdFx0XHRzbjogc2VsZi5zbihbXCJbXCIsIHN0cmluZ0xpc3QsIFwiXVwiXSlcblx0XHR9KTtcblx0fVxuXG5cdGRlY2xhcmF0aW9uRXhwcmVzc2lvbiAodHlwZSwgbmFtZSwgdmFsdWUpIHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0Y29uc3Qgc3RhdGUgPSBzZWxmLnN0YXRlO1xuXHRcdGlmIChuYW1lIGluIGFwaSkge1xuXHRcdFx0dGhyb3cgYFN5bnRheCBFcnJvcjogJyR7bmFtZX0nIGlzIGEgcmVzZXJ2ZWQgd29yZCAke3N0YXRlLmVycm9yVGFpbCgpfWA7XG5cdFx0fVxuXHRcdGlmIChzdGF0ZS5jb250ZXh0LmRlZmluZWRMb2NhbGx5KG5hbWUpKSB7XG5cdFx0XHR0aHJvdyBgU3ludGF4IEVycm9yOiAnJHtuYW1lfScgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGluIHRoaXMgY29udGV4dC4gJHtzdGF0ZS5lcnJvclRhaWwoKX1gO1xuXHRcdH1cblx0XHRpZiAodHlwZSA9PT0gXCJsZXRcIikge1xuXHRcdFx0c3RhdGUuY29udGV4dC5zY29waW5nLmxldC5zZXQobmFtZSwgdHJ1ZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlID09PSBcInByaXZhdGVcIikge1xuXHRcdFx0c3RhdGUuY29udGV4dC5zY29waW5nLnByaXZhdGUuc2V0KG5hbWUsIHRydWUpO1xuXHRcdH1cblx0XHRpZiAodHlwZSA9PT0gXCJwcm90ZWN0ZWRcIikge1xuXHRcdFx0c3RhdGUuY29udGV4dC5zY29waW5nLnByb3RlY3RlZC5zZXQobmFtZSwgdHJ1ZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlID09PSBcInB1YmxpY1wiKSB7XG5cdFx0XHRzdGF0ZS5jb250ZXh0LnNjb3BpbmcucHVibGljLnNldChuYW1lLCB0cnVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgJHt0eXBlfSAke25hbWUuc291cmNlfSA9ICR7dmFsdWUuc291cmNlfWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogYHNjb3BlLmRlY2xhcmF0aW9uRXhwcmVzc2lvbih7dHlwZTpcIiR7dHlwZX1cIixuYW1lOiR7bmFtZS50cmFuc2xhdGlvbn0sdmFsdWU6JHt2YWx1ZS50cmFuc2xhdGlvbn19KWAsXG5cdFx0XHRzbjogc2VsZi5zbihbJ3Njb3BlLmRlY2xhcmF0aW9uRXhwcmVzc2lvbih7dHlwZTpcIicsIHR5cGUsICdcIixuYW1lOicsIG5hbWUuc24sICcsdmFsdWU6JywgdmFsdWUuc24sICd9KSddKVxuXHRcdH0pO1xuXHR9XG5cblx0ZW1wdHlNYXBFeHByZXNzaW9uIChhcnJheVN0YXJ0KSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0c2VsZi5zdGF0ZS5zZXRQYXJlbnRDb250ZXh0KCk7XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgJHthcnJheVN0YXJ0LnNvdXJjZX1dYCxcblx0XHRcdHRyYW5zbGF0aW9uOiBgJHthcnJheVN0YXJ0LnRyYW5zbGF0aW9ufSlgLFxuXHRcdFx0c246IHNlbGYuc24oW2FycmF5U3RhcnQuc24sICcpJ10pXG5cdFx0fSk7XG5cdH1cblxuXHRleHByZXNzaW9uTGlzdCAoZXhwcmVzc2lvbiwgZXhwcmVzc2lvbkxpc3QpIHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0aWYgKGV4cHJlc3Npb25MaXN0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdFx0c291cmNlOiBleHByZXNzaW9uLnNvdXJjZSwgXG5cdFx0XHRcdHRyYW5zbGF0aW9uOiBleHByZXNzaW9uLnRyYW5zbGF0aW9uLFxuXHRcdFx0XHRzbjogc2VsZi5zbihbZXhwcmVzc2lvbi5zbl0pXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgJHtleHByZXNzaW9uLnNvdXJjZX0sJHtleHByZXNzaW9uTGlzdC5zb3VyY2V9YCxcblx0XHRcdHRyYW5zbGF0aW9uOiBgJHtleHByZXNzaW9uLnRyYW5zbGF0aW9ufSwke2V4cHJlc3Npb25MaXN0LnRyYW5zbGF0aW9ufWAsXG5cdFx0XHRzbjogc2VsZi5zbihbZXhwcmVzc2lvbi5zbiwgXCIsXCIsIGV4cHJlc3Npb25MaXN0LnNuXSlcblx0XHR9KTtcblx0fVxuXHRcblx0aWRlbnRpZmllciAobmFtZSwgbm90YXRpb24sIGNoaWxkcmVuKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0Y29uc3Qgc3RhdGUgPSBzZWxmLnN0YXRlO1xuXG5cdFx0aWYgKHNlbGYucGFyZW50Tm9kZSA9PT0gXCJhc3NpZ25tZW50RXhwcmVzc2lvblwiKSB7XG5cdFx0XHRpZiAobm90YXRpb24gPT09ICdkb3QnKSB7XG5cdFx0XHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdFx0XHRzb3VyY2U6IGAke25hbWUuc291cmNlfS4ke2NoaWxkcmVufWAsXG5cdFx0XHRcdFx0dHJhbnNsYXRpb246IGAke25hbWUudHJhbnNsYXRpb259LFwiJHtjaGlsZHJlbn1cImAsXG5cdFx0XHRcdFx0c246IHNlbGYuc24oW25hbWUuc24sICcsXCInLCBjaGlsZHJlbiwgJ1wiJ10pXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG5vdGF0aW9uID09PSBcImJyYWNrZXRcIikge1xuXHRcdFx0XHRpZiAoY2hpbGRyZW4udmFsdWVzKSB7XG5cdFx0XHRcdFx0Ly9zZWxmLnN0YXRlLmxvYy5uYW1lID0gYCR7c2VsZi5zdGF0ZS5sb2MubmFtZX1bJHtjaGlsZHJlblswXX06JHtjaGlsZHJlblsxXX1dYDtcblx0XHRcdFx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRcdFx0XHRzb3VyY2U6IGAke25hbWUuc291cmNlfSR7Y2hpbGRyZW4uc291cmNlfWAsXG5cdFx0XHRcdFx0XHR0cmFuc2xhdGlvbjogYCR7bmFtZS50cmFuc2xhdGlvbn0sJHtjaGlsZHJlbi52YWx1ZXNbMF19LCR7Y2hpbGRyZW4udmFsdWVzWzFdfWAsXG5cdFx0XHRcdFx0XHRzbjogc2VsZi5zbihbbmFtZS5zbiwgXCIsXCIsIGNoaWxkcmVuLnZhbHVlc1swXSwgXCIsXCIsIGNoaWxkcmVuLnZhbHVlc1sxXV0pXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9zZWxmLnN0YXRlLmxvYy5uYW1lID0gYCR7c2VsZi5zdGF0ZS5sb2MubmFtZX1bJHtjaGlsZHJlbn1dYDtcblx0XHRcdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0XHRcdHNvdXJjZTogYCR7bmFtZS5zb3VyY2V9WyR7Y2hpbGRyZW4uc291cmNlfV1gLFxuXHRcdFx0XHRcdHRyYW5zbGF0aW9uOiBgJHtuYW1lLnRyYW5zbGF0aW9ufSwke2NoaWxkcmVuLnZhbHVlfWAsXG5cdFx0XHRcdFx0c246IHNlbGYuc24oW25hbWUuc24sIFwiLFwiLCBjaGlsZHJlbi52YWx1ZV0pXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0Ly9zZWxmLnN0YXRlLmxvYy5uYW1lID0gYCR7bmFtZX1gO1xuXHRcdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0XHRzb3VyY2U6IGAke25hbWV9YCxcblx0XHRcdFx0dHJhbnNsYXRpb246IGBcIiR7bmFtZX1cImAsXG5cdFx0XHRcdHNuOiBzZWxmLnNuKFsnXCInLCBuYW1lLCAnXCInXSlcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmIChjaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHQvL3NlbGYuc3RhdGUubG9jLm5hbWUgPSBgJHtuYW1lfWA7XG5cdFx0XHRpZiAobmFtZSBpbiBhcGkpIHtcblx0XHRcdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0XHRcdHNvdXJjZTogYCR7bmFtZX1gLFxuXHRcdFx0XHRcdHRyYW5zbGF0aW9uOiBgJHthcGlbbmFtZV19YCxcblx0XHRcdFx0XHRzbjogc2VsZi5zbihbYXBpW25hbWVdXSlcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYWxsb3dlZFVuZGVmaW5lZElkRXhwcmVzc2lvbnMuaW5kZXhPZih0aGlzLnBhcmVudE5vZGUpICE9PSAtMSkge1xuXHRcdFx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRcdFx0c291cmNlOiBgJHtuYW1lfWAsXG5cdFx0XHRcdFx0dHJhbnNsYXRpb246IGAke25hbWV9YCxcblx0XHRcdFx0XHRzbjogc2VsZi5zbihbbmFtZV0pXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0XHRzb3VyY2U6IGAke25hbWV9YCxcblx0XHRcdFx0dHJhbnNsYXRpb246IGBzY29wZS5pZGVudGlmaWVyKFwiJHtuYW1lfVwiKWAsXG5cdFx0XHRcdHNuOiBzZWxmLnNuKFsnc2NvcGUuaWRlbnRpZmllcihcIicsIG5hbWUsICdcIiknXSlcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRpZiAobm90YXRpb24gPT09ICdkb3QnKSB7XG5cdFx0XHQvL3NlbGYuc3RhdGUubG9jLm5hbWUgPSBgJHtzZWxmLnN0YXRlLmxvYy5uYW1lfS4ke2NoaWxkcmVufWA7XG5cdFx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRcdHNvdXJjZTogYCR7bmFtZS5zb3VyY2V9LiR7Y2hpbGRyZW59YCxcblx0XHRcdFx0dHJhbnNsYXRpb246IGAke25hbWUudHJhbnNsYXRpb259W1wiJHtjaGlsZHJlbn1cIl1gLFxuXHRcdFx0XHRzbjogc2VsZi5zbihbbmFtZS5zbiwgJ1tcIicsIGNoaWxkcmVuLCAnXCJdJ10pXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0XHRzb3VyY2U6IGAke25hbWUuc291cmNlfSR7Y2hpbGRyZW4uc291cmNlfWAsXG5cdFx0XHRcdHRyYW5zbGF0aW9uOiBgJHtuYW1lLnRyYW5zbGF0aW9ufSR7Y2hpbGRyZW4udHJhbnNsYXRpb259YCxcblx0XHRcdFx0c246IHNlbGYuc24oW25hbWUuc24sIGNoaWxkcmVuLnNuXSlcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdGlkTGlzdCAoaWRlbnRpZmllciwgaWRMaXN0KSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0aWYgKGlkTGlzdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRcdHNvdXJjZTogYCR7aWRlbnRpZmllcn1gLFxuXHRcdFx0XHR0cmFuc2xhdGlvbjogYCR7aWRlbnRpZmllcn1gLFxuXHRcdFx0XHRzbjogc2VsZi5zbihbaWRlbnRpZmllcl0pLFxuXHRcdFx0XHR2YWx1ZXM6IFtpZGVudGlmaWVyXVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGxldCBpZExpc3RWYWx1ZXMgPSBpZExpc3QudmFsdWVzLnNsaWNlKCk7XG5cdFx0aWRMaXN0VmFsdWVzLnVuc2hpZnQoaWRlbnRpZmllcik7XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgJHtpZGVudGlmaWVyfSwke2lkTGlzdC5zb3VyY2V9YCxcblx0XHRcdHRyYW5zbGF0aW9uOiBgJHtpZGVudGlmaWVyfSwke2lkTGlzdC50cmFuc2xhdGlvbn1gLFxuXHRcdFx0c246IHNlbGYuc24oW2lkZW50aWZpZXIsIFwiLFwiLCBpZExpc3Quc25dKSxcblx0XHRcdHZhbHVlczogaWRMaXN0VmFsdWVzXG5cdFx0fSk7XG5cdH1cblxuXHRpbXBvcnRFeHByZXNzaW9uIChzdHJpbmcpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGBpbXBvcnQgJHtzdHJpbmd9YCxcblx0XHRcdHRyYW5zbGF0aW9uOiBzZWxmLnN0YXRlLm5ld0ltcG9ydEV4cHJlc3Npb24oc3RyaW5nKSxcblx0XHRcdHNuOiBzZWxmLnNuKFtzZWxmLnN0YXRlLm5ld0ltcG9ydEV4cHJlc3Npb24oc3RyaW5nKV0pXG5cdFx0fSk7XG5cdH1cblxuXHRpbnZva2VBcmd1bWVudHMgKGV4cHJlc3Npb25MaXN0KSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0aWYgKGV4cHJlc3Npb25MaXN0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKCk7XG5cdFx0fVxuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYCR7ZXhwcmVzc2lvbkxpc3Quc291cmNlfWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogYCR7ZXhwcmVzc2lvbkxpc3QudHJhbnNsYXRpb259YCxcblx0XHRcdHNuOiBzZWxmLnNuKFtleHByZXNzaW9uTGlzdC5zbl0pXG5cdFx0fSk7XG5cdH1cblxuXHRpbnZva2VFeHByZXNzaW9uIChuYW1lLCBpbnZva2VBcmd1bWVudHMpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGAke25hbWUuc291cmNlfSgke2ludm9rZUFyZ3VtZW50cy5zb3VyY2V9KWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogYCR7bmFtZS50cmFuc2xhdGlvbn0oJHtpbnZva2VBcmd1bWVudHMudHJhbnNsYXRpb259KWAsXG5cdFx0XHRzbjogc2VsZi5zbihbbmFtZS5zbiwgJygnLCBpbnZva2VBcmd1bWVudHMuc24sICcpJ10pXG5cdFx0fSk7XG5cdH1cblxuXHRpbnZva2VJZCAoaW52b2tlRXhwcmVzc2lvbiwgbm90YXRpb24sIGlkZW50aWZpZXIpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRpZiAobm90YXRpb24gPT09ICdkb3QnKSB7XG5cdFx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRcdHNvdXJjZTogYCR7aW52b2tlRXhwcmVzc2lvbi5zb3VyY2V9LiR7aWRlbnRpZmllci5zb3VyY2V9YCxcblx0XHRcdFx0dHJhbnNsYXRpb246IGAke2ludm9rZUV4cHJlc3Npb24udHJhbnNsYXRpb259W1wiJHtpZGVudGlmaWVyLnRyYW5zbGF0aW9ufVwiXWAsXG5cdFx0XHRcdHNuOiBzZWxmLnNuKFtpbnZva2VFeHByZXNzaW9uLnNuLCAnW1wiJywgaWRlbnRpZmllci5zbiwgJ1wiXSddKVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdFx0c291cmNlOiBgJHtpbnZva2VFeHByZXNzaW9uLnNvdXJjZX0ke2lkZW50aWZpZXIuc291cmNlfWAsXG5cdFx0XHRcdHRyYW5zbGF0aW9uOiBgJHtpbnZva2VFeHByZXNzaW9uLnRyYW5zbGF0aW9ufSR7aWRlbnRpZmllci50cmFuc2xhdGlvbn1gLFxuXHRcdFx0XHRzbjogc2VsZi5zbihbaW52b2tlRXhwcmVzc2lvbi5zbiwgaWRlbnRpZmllci5zbl0pXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRpbnZva2VUcmFja2VyIChpZCkge1xuXHRcdHJldHVybiBpZDtcblx0fVxuXG5cdG1hcEV4cHJlc3Npb24gKGFycmF5U3RhcnQsIGFzc29jaWF0aXZlTGlzdCkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdHNlbGYuc3RhdGUuc2V0UGFyZW50Q29udGV4dCgpO1xuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYCR7YXJyYXlTdGFydC5zb3VyY2V9JHthc3NvY2lhdGl2ZUxpc3Quc291cmNlfV1gLFxuXHRcdFx0dHJhbnNsYXRpb246IGBzY29wZS5tYXBFeHByZXNzaW9uKCR7YXNzb2NpYXRpdmVMaXN0LnRyYW5zbGF0aW9ufSlgLFxuXHRcdFx0c246IHNlbGYuc24oW1wic2NvcGUubWFwRXhwcmVzc2lvbihcIiwgYXNzb2NpYXRpdmVMaXN0LnNuLCBcIilcIl0pXG5cdFx0fSk7XG5cdH1cblx0XG5cdG51bWVyaWNMaXRlcmFsIChuKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgJHtufWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogYCR7bn1gLFxuXHRcdFx0c246IHNlbGYuc24oW2Ake259YF0pXG5cdFx0fSk7XG5cdH1cblxuXHRyZWdleExpdGVyYWwgKHJlZ2V4KSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0Ly9jb25zb2xlLmxvZyhyZWdleCk7XG5cdFx0bGV0IG1hdGNoZXMgPSAvXlxcLyguKilcXC8oW2EtekEtWl0qKSQvcy5leGVjKHJlZ2V4KTtcblx0XHRsZXQgYm9keSA9IG1hdGNoZXNbMV07XG5cdFx0bGV0IG1vZGlmaWVycyA9IG1hdGNoZXNbMl07XG5cdFx0bGV0IHN0ciA9IFwiYFwiICsgYm9keS5yZXBsYWNlKC9cXFxcXFwvL2csIFwiL1wiKS5yZXBsYWNlKC9cXFxcL2csIFwiXFxcXFxcXFxcIikgKyBcImBcIjtcblx0XHRsZXQgcmVzdWx0ID0gYFhSZWdFeHAoJHtzdHJ9LFwiJHttb2RpZmllcnN9XCIpYFxuXHRcdC8vY29uc29sZS5sb2cocmVzdWx0KTtcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGAke3JlZ2V4fWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogcmVzdWx0LFxuXHRcdFx0c246IHNlbGYuc24oW3Jlc3VsdF0pXG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm5FeHByZXNzaW9uIChleHByZXNzaW9uKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgcmV0dXJuICR7ZXhwcmVzc2lvbi5zb3VyY2V9YCxcblx0XHRcdHRyYW5zbGF0aW9uOiBgcmV0dXJuICR7ZXhwcmVzc2lvbi50cmFuc2xhdGlvbn1gLFxuXHRcdFx0c246IHNlbGYuc24oW1wicmV0dXJuIFwiLCBleHByZXNzaW9uLnNuXSlcblx0XHR9KTtcblx0fVxuXG5cdHNjb3BlU3RhcnQgKCkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdHNlbGYuc3RhdGUubmV3Q2hpbGRDb250ZXh0KCk7XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBcIntcIixcblx0XHRcdHRyYW5zbGF0aW9uOiBcInNjb3BlLmNyZWF0ZVNjb3BlKGZ1bmN0aW9uKGFyZ3Mpe1wiLFxuXHRcdFx0c246IHNlbGYuc24oW1wic2NvcGUuY3JlYXRlU2NvcGUoZnVuY3Rpb24oYXJncyl7XCJdKVxuXHRcdH0pO1xuXHR9XG5cblx0c2NvcGVFeHByZXNzaW9uIChzY29wZVN0YXJ0LCBzY29wZUFyZ3VtZW50cywgY29udHJvbENvZGUpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRjb25zdCBzdGF0ZSA9IHNlbGYuc3RhdGU7XG5cdFx0bGV0IGFyZ0RlY2xhcmF0aW9ucyA9IFwiXCI7XG5cdFx0aWYgKHNjb3BlU3RhcnQuc291cmNlICE9PSBcIntcIikge1xuXHRcdFx0Y29udHJvbENvZGUgPSBzY29wZUFyZ3VtZW50cztcblx0XHRcdHNjb3BlQXJndW1lbnRzID0gc2NvcGVTdGFydDtcblx0XHR9XG5cdFx0aWYgKGNvbnRyb2xDb2RlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnRyb2xDb2RlID0gc2NvcGVBcmd1bWVudHM7XG5cdFx0XHRzY29wZUFyZ3VtZW50cyA9IHtcblx0XHRcdFx0c291cmNlOiBcIlwiLFxuXHRcdFx0XHR0cmFuc2xhdGlvbjogXCJbXVwiLFxuXHRcdFx0XHRzbjogc2VsZi5zbihbXCJbXVwiXSksXG5cdFx0XHRcdHZhbHVlczogW11cblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKHNjb3BlQXJndW1lbnRzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHNjb3BlQXJndW1lbnRzID0ge1xuXHRcdFx0XHRzb3VyY2U6IFwiXCIsXG5cdFx0XHRcdHRyYW5zbGF0aW9uOiBcIltdXCIsXG5cdFx0XHRcdHNuOiBzZWxmLnNuKFtcIltdXCJdKSxcblx0XHRcdFx0dmFsdWVzOiBbXVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRzY29wZUFyZ3VtZW50cy52YWx1ZXMuZm9yRWFjaCgoYXJnLCBpbmRleCkgPT4ge1xuXHRcdFx0YXJnRGVjbGFyYXRpb25zICs9ICdzY29wZS5kZWNsYXJhdGlvbkV4cHJlc3Npb24oeycgK1xuXHRcdFx0XHQndHlwZTpcImxldFwiLCcgK1xuXHRcdFx0XHRgbmFtZTpcIiR7YXJnWzBdfVwiLGAgK1xuXHRcdFx0XHRgdmFsdWU6YXJnc1ske2luZGV4fV09PT11bmRlZmluZWQ/JHthcmdbMV19OmFyZ3NbJHtpbmRleH1dYCArXG5cdFx0XHQnfSk7Jztcblx0XHR9KTtcblxuXHRcdHN0YXRlLnNldFBhcmVudENvbnRleHQoKTtcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGAke3Njb3BlQXJndW1lbnRzLnNvdXJjZX0ke3Njb3BlU3RhcnQuc291cmNlfSR7Y29udHJvbENvZGUuc291cmNlfX1gLFxuXHRcdFx0dHJhbnNsYXRpb246IGAke3Njb3BlU3RhcnQudHJhbnNsYXRpb259JHthcmdEZWNsYXJhdGlvbnN9JHtjb250cm9sQ29kZS50cmFuc2xhdGlvbn19KWAsXG5cdFx0XHRzbjogc2VsZi5zbihbc2NvcGVTdGFydC5zbiwgYXJnRGVjbGFyYXRpb25zLCBjb250cm9sQ29kZS5zbiwgXCJ9KVwiXSlcblx0XHR9KTtcblx0fVxuXG5cdHNjb3BlQXJndW1lbnRzIChzY29wZUFyZ3VtZW50c0xpc3QsIHNjb3BlQXJndW1lbnRTcHJlYWQpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRjb25zb2xlLmxvZyhcInNjb3BlQXJndW1lbnRzOlwiKTtcblx0XHRjb25zb2xlLmxvZyhzY29wZUFyZ3VtZW50c0xpc3QsIHNjb3BlQXJndW1lbnRTcHJlYWQpO1xuXHRcdFxuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYCgke3Njb3BlQXJndW1lbnRzTGlzdC5zb3VyY2V9KWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogYCR7c2NvcGVBcmd1bWVudHNMaXN0LnRyYW5zbGF0aW9ufWAsXG5cdFx0XHRzbjogc2VsZi5zbihbc2NvcGVBcmd1bWVudHNMaXN0LnNuXSksXG5cdFx0XHR2YWx1ZXM6IHNjb3BlQXJndW1lbnRzTGlzdC52YWx1ZXNcblx0XHR9KTtcblx0XHRcblx0fVxuXHRcblx0c2NvcGVBcmd1bWVudHNMaXN0IChzY29wZUFyZ3VtZW50c0xpc3REZWNsYXJhdGlvbiwgc2NvcGVBcmd1bWVudHNMaXN0KSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0aWYgKHNjb3BlQXJndW1lbnRzTGlzdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRcdHNvdXJjZTogYCR7c2NvcGVBcmd1bWVudHNMaXN0RGVjbGFyYXRpb24uc291cmNlfWAsXG5cdFx0XHRcdHRyYW5zbGF0aW9uOiBgJHtzY29wZUFyZ3VtZW50c0xpc3REZWNsYXJhdGlvbi50cmFuc2xhdGlvbn1gLFxuXHRcdFx0XHRzbjogc2VsZi5zbihbc2NvcGVBcmd1bWVudHNMaXN0RGVjbGFyYXRpb24uc25dKSxcblx0XHRcdFx0dmFsdWVzOiBbc2NvcGVBcmd1bWVudHNMaXN0RGVjbGFyYXRpb24udmFsdWVdXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0bGV0IHNjb3BlQXJnVmFsdWVzID0gc2NvcGVBcmd1bWVudHNMaXN0LnZhbHVlcy5zbGljZSgpO1xuXHRcdHNjb3BlQXJnVmFsdWVzLnVuc2hpZnQoc2NvcGVBcmd1bWVudHNMaXN0RGVjbGFyYXRpb24udmFsdWUpO1xuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYCR7c2NvcGVBcmd1bWVudHNMaXN0RGVjbGFyYXRpb24uc291cmNlfSwke3Njb3BlQXJndW1lbnRzTGlzdC5zb3VyY2V9YCxcblx0XHRcdHRyYW5zbGF0aW9uOiBcIlwiLFxuXHRcdFx0c246IFwiXCIsXG5cdFx0XHR2YWx1ZXM6IHNjb3BlQXJnVmFsdWVzXG5cdFx0fSk7XG5cdH1cblx0XG5cdHNjb3BlQXJndW1lbnRzTGlzdERlY2xhcmF0aW9uIChpZGVudGlmaWVyLCBleHByZXNzaW9uKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgJHtpZGVudGlmaWVyfToke2V4cHJlc3Npb24uc291cmNlfWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogXCJcIixcblx0XHRcdHNuOiBcIlwiLFxuXHRcdFx0dmFsdWU6IFtpZGVudGlmaWVyLCBleHByZXNzaW9uLnRyYW5zbGF0aW9uXVxuXHRcdH0pO1xuXHR9XG5cblx0c2NvcGVBcmd1bWVudFNwcmVhZCAoaWRlbnRpZmllcikge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYC4uLiR7aWRlbnRpZmllcn1gLFxuXHRcdFx0dHJhbnNsYXRpb246IFwiXCIsXG5cdFx0XHRzbjogXCJcIixcblx0XHRcdHZhbHVlOiBbaWRlbnRpZmllcl1cblx0XHR9KTtcblx0fVxuXG5cdHN0cmluZ0xpdGVyYWwgKHN0cikge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdGlmIChzdHIuaXNCU3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZShzdHIpO1xuXHRcdH1cblx0XHRsZXQgcGFyc2VkU3RyID0gc3RyLlxuXHRcdFx0cmVwbGFjZSgvXFxcXFxcclxcbnxcXFxcXFxuL21nLCBcIlwiKS5cblx0XHRcdHJlcGxhY2UoL1xcbi9tZywgXCJcXFxcblwiKS5cblx0XHRcdHJlcGxhY2UoL1xcci9tZywgXCJcXFxcclwiKTtcblx0XHRjb25zb2xlLmxvZyhgXG5cdHN0cjogJHtzdHJ9XG5cdHBhcnNlZFN0cjogJHtwYXJzZWRTdHJ9YCk7XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgJHtzdHJ9YCxcblx0XHRcdHRyYW5zbGF0aW9uOiBwYXJzZWRTdHIsXG5cdFx0XHRzbjogc2VsZi5zbihbcGFyc2VkU3RyXSlcblx0XHR9KTtcblx0fVxuXG5cdHVuYXJ5RXhwcmVzc2lvbiAob3BlcmF0b3IsIGV4cHJlc3Npb24pIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRzb3VyY2U6IGAke29wZXJhdG9yfSAke2V4cHJlc3Npb24uc291cmNlfWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogYCR7b3BlcmF0b3J9JHtleHByZXNzaW9uLnRyYW5zbGF0aW9ufWAsXG5cdFx0XHRzbjogc2VsZi5zbihbb3BlcmF0b3IsIGV4cHJlc3Npb24uc25dKVxuXHRcdH0pO1xuXHR9XG5cblx0dXNlRXhwcmVzc2lvbiAodXNhYmxlLCB1c2VPbmx5KSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0aWYgKHVzZU9ubHkgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0XHRzb3VyY2U6IGB1c2UgJHt1c2FibGUuc291cmNlfWAsXG5cdFx0XHRcdHRyYW5zbGF0aW9uOiBgc2NvcGUudXNlKFske3VzYWJsZS50cmFuc2xhdGlvbn1dKWAsXG5cdFx0XHRcdHNuOiBzZWxmLnNuKFtcInNjb3BlLnVzZShbXCIsIHVzYWJsZS5zbiwgXCJdKVwiXSlcblx0XHRcdH0pXG5cdFx0fVxuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYHVzZSAke3VzYWJsZS5zb3VyY2V9IG9ubHkgJHt1c2VPbmx5LnNvdXJjZX1gLFxuXHRcdFx0dHJhbnNsYXRpb246IGBzY29wZS51c2UoWyR7dXNhYmxlLnRyYW5zbGF0aW9ufV0sWyR7dXNlT25seS50cmFuc2xhdGlvbn1dKWAsXG5cdFx0XHRzbjogc2VsZi5zbihbXCJzY29wZS51c2UoW1wiLCB1c2FibGUuc24sIFwiXSxbXCIsIHVzZU9ubHkuc24sIFwiXSlcIl0pXG5cdFx0fSk7XG5cdH1cblxuXHR1c2FibGUgKHVzYWJsZTEsIHVzYWJsZTIpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRpZiAodXNhYmxlMiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gc2VsZi5tYXBBbmRQYXJzZSh7XG5cdFx0XHRcdHNvdXJjZTogYCR7dXNhYmxlMS5zb3VyY2V9YCxcblx0XHRcdFx0dHJhbnNsYXRpb246IGAke3VzYWJsZTEudHJhbnNsYXRpb259YCxcblx0XHRcdFx0c246IHNlbGYuc24oW3VzYWJsZTEuc25dKVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYCR7dXNhYmxlMS5zb3VyY2V9LCR7dXNhYmxlMi5zb3VyY2V9YCxcblx0XHRcdHRyYW5zbGF0aW9uOiBgJHt1c2FibGUxLnRyYW5zbGF0aW9ufSwke3VzYWJsZTIudHJhbnNsYXRpb259YCxcblx0XHRcdHNuOiBzZWxmLnNuKFt1c2FibGUxLnNuLCBcIixcIiwgdXNhYmxlMi5zbl0pXG5cdFx0fSk7XG5cdH1cblxuXHR1c2VPbmx5IChleHByZXNzaW9uTGlzdCkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYCR7ZXhwcmVzc2lvbkxpc3Quc291cmNlfWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogYCR7ZXhwcmVzc2lvbkxpc3QudHJhbnNsYXRpb259YCxcblx0XHRcdHNuOiBzZWxmLnNuKFtleHByZXNzaW9uTGlzdC5zbl0pXG5cdFx0fSk7XG5cdH1cblxuXHR4bWxDb250cm9sQ29kZSAoeG1sQ29udHJvbENvZGU9XCJcIiwgZXhwcmVzc2lvbikge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdFx0c291cmNlOiBcIlwiLFxuXHRcdFx0XHR0cmFuc2xhdGlvbjogXCJcIixcblx0XHRcdFx0c246IFwiXCIsXG5cdFx0XHRcdGZpcnN0OiB0cnVlXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKCF4bWxDb250cm9sQ29kZS5maXJzdCkge1xuXHRcdFx0eG1sQ29udHJvbENvZGUudHJhbnNsYXRpb24gKz0gXCIsXCI7XG5cdFx0XHR4bWxDb250cm9sQ29kZS5zbi5hZGQoW1wiLFwiXSk7XG5cdFx0fVxuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYCR7eG1sQ29udHJvbENvZGUuc291cmNlfSR7ZXhwcmVzc2lvbi5zb3VyY2V9O2AsXG5cdFx0XHR0cmFuc2xhdGlvbjogYCR7eG1sQ29udHJvbENvZGUudHJhbnNsYXRpb259JHtleHByZXNzaW9uLnRyYW5zbGF0aW9ufWAsXG5cdFx0XHRzbjogc2VsZi5zbihbeG1sQ29udHJvbENvZGUuc24sIGV4cHJlc3Npb24uc25dKSxcblx0XHRcdGZpcnN0OiBmYWxzZVxuXHRcdH0pO1xuXHR9XG5cblx0eG1sQXR0cmlidXRlcyAoeG1sQXR0cmlidXRlcz1cIlwiLCBuYW1lLCBleHByZXNzaW9uKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0aWYgKG5hbWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0XHRzb3VyY2U6IFwiXCIsXG5cdFx0XHRcdHRyYW5zbGF0aW9uOiBcIlwiLFxuXHRcdFx0XHRzbjogXCJcIixcblx0XHRcdFx0Zmlyc3Q6IHRydWVcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAoIXhtbEF0dHJpYnV0ZXMuZmlyc3QpIHtcblx0XHRcdHhtbEF0dHJpYnV0ZXMudHJhbnNsYXRpb24gKz0gXCIsXCI7XG5cdFx0XHR4bWxBdHRyaWJ1dGVzLnNuLmFkZChbXCIsXCJdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHNlbGYubWFwQW5kUGFyc2Uoe1xuXHRcdFx0c291cmNlOiBgJHt4bWxBdHRyaWJ1dGVzLnNvdXJjZX0gJHtuYW1lfT0ke2V4cHJlc3Npb24uc291cmNlfWAsXG5cdFx0XHR0cmFuc2xhdGlvbjogYCR7eG1sQXR0cmlidXRlcy50cmFuc2xhdGlvbn1cIiR7bmFtZX1cIjoke2V4cHJlc3Npb24udHJhbnNsYXRpb259YCxcblx0XHRcdHNuOiBzZWxmLnNuKFt4bWxBdHRyaWJ1dGVzLnNuLCAnXCInLCBuYW1lLCAnXCI6JywgZXhwcmVzc2lvbi5zbl0pLFxuXHRcdFx0Zmlyc3Q6IGZhbHNlXG5cdFx0fSk7XG5cdH1cblxuXHR4bWxFeHByZXNzaW9uIChuYW1lLCB4bWxBdHRyaWJ1dGVzLCB4bWxDb250cm9sQ29kZSwgY2xvc2VOYW1lKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0aWYgKHhtbENvbnRyb2xDb2RlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdFx0c291cmNlOiBgPCR7bmFtZS5zb3VyY2V9ICR7eG1sQXR0cmlidXRlcy5zb3VyY2V9Lz5gLFxuXHRcdFx0XHR0cmFuc2xhdGlvbjogYHNjb3BlLnhtbEV4cHJlc3Npb24oXCIke25hbWUudHJhbnNsYXRpb259XCIseyR7eG1sQXR0cmlidXRlcy50cmFuc2xhdGlvbn19KWAsXG5cdFx0XHRcdHNuOiBzZWxmLnNuKFsnc2NvcGUueG1sRXhwcmVzc2lvbihcIicsIG5hbWUuc24sICdcIix7JywgeG1sQXR0cmlidXRlcy5zbiwgJ30pJ10pXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKG5hbWUuc291cmNlICE9PSBjbG9zZU5hbWUuc291cmNlKSB7XG5cdFx0XHR0aHJvdyBgU3ludGF4IEVycm9yOiBVbm1hdGNoaW5nIFhNTCBUYWdzOiA8JHtuYW1lLnNvdXJjZX0+Li4uPC8ke2Nsb3NlTmFtZS5zb3VyY2V9PiAke3N0YXRlLmVycm9yVGFpbCgpfWA7XG5cdFx0fVxuXHRcdHJldHVybiBzZWxmLm1hcEFuZFBhcnNlKHtcblx0XHRcdHNvdXJjZTogYDwke25hbWUuc291cmNlfSAke3htbEF0dHJpYnV0ZXMuc291cmNlfT4ke3htbENvbnRyb2xDb2RlLnNvdXJjZX08LyR7Y2xvc2VOYW1lLnNvdXJjZX0+YCxcblx0XHRcdHRyYW5zbGF0aW9uOiBgc2NvcGUueG1sRXhwcmVzc2lvbihcIiR7bmFtZS50cmFuc2xhdGlvbn1cIix7JHt4bWxBdHRyaWJ1dGVzLnRyYW5zbGF0aW9ufX0sJHt4bWxDb250cm9sQ29kZS50cmFuc2xhdGlvbn0pYCxcblx0XHRcdHNuOiBzZWxmLnNuKFsnc2NvcGUueG1sRXhwcmVzc2lvbihcIicsIG5hbWUuc24sICdcIix7JywgeG1sQXR0cmlidXRlcy5zbiwgJ30sJywgeG1sQ29udHJvbENvZGUuc24sICcpJ10pXG5cdFx0fSk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NvcGVSdWxlczsiLCIvKiBwYXJzZXIgZ2VuZXJhdGVkIGJ5IGppc29uIDAuNC4xOCAqL1xuLypcbiAgUmV0dXJucyBhIFBhcnNlciBvYmplY3Qgb2YgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG5cbiAgUGFyc2VyOiB7XG4gICAgeXk6IHt9XG4gIH1cblxuICBQYXJzZXIucHJvdG90eXBlOiB7XG4gICAgeXk6IHt9LFxuICAgIHRyYWNlOiBmdW5jdGlvbigpLFxuICAgIHN5bWJvbHNfOiB7YXNzb2NpYXRpdmUgbGlzdDogbmFtZSA9PT4gbnVtYmVyfSxcbiAgICB0ZXJtaW5hbHNfOiB7YXNzb2NpYXRpdmUgbGlzdDogbnVtYmVyID09PiBuYW1lfSxcbiAgICBwcm9kdWN0aW9uc186IFsuLi5dLFxuICAgIHBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQsIHl5bGVuZywgeXlsaW5lbm8sIHl5LCB5eXN0YXRlLCAkJCwgXyQpLFxuICAgIHRhYmxlOiBbLi4uXSxcbiAgICBkZWZhdWx0QWN0aW9uczogey4uLn0sXG4gICAgcGFyc2VFcnJvcjogZnVuY3Rpb24oc3RyLCBoYXNoKSxcbiAgICBwYXJzZTogZnVuY3Rpb24oaW5wdXQpLFxuXG4gICAgbGV4ZXI6IHtcbiAgICAgICAgRU9GOiAxLFxuICAgICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbihzdHIsIGhhc2gpLFxuICAgICAgICBzZXRJbnB1dDogZnVuY3Rpb24oaW5wdXQpLFxuICAgICAgICBpbnB1dDogZnVuY3Rpb24oKSxcbiAgICAgICAgdW5wdXQ6IGZ1bmN0aW9uKHN0ciksXG4gICAgICAgIG1vcmU6IGZ1bmN0aW9uKCksXG4gICAgICAgIGxlc3M6IGZ1bmN0aW9uKG4pLFxuICAgICAgICBwYXN0SW5wdXQ6IGZ1bmN0aW9uKCksXG4gICAgICAgIHVwY29taW5nSW5wdXQ6IGZ1bmN0aW9uKCksXG4gICAgICAgIHNob3dQb3NpdGlvbjogZnVuY3Rpb24oKSxcbiAgICAgICAgdGVzdF9tYXRjaDogZnVuY3Rpb24ocmVnZXhfbWF0Y2hfYXJyYXksIHJ1bGVfaW5kZXgpLFxuICAgICAgICBuZXh0OiBmdW5jdGlvbigpLFxuICAgICAgICBsZXg6IGZ1bmN0aW9uKCksXG4gICAgICAgIGJlZ2luOiBmdW5jdGlvbihjb25kaXRpb24pLFxuICAgICAgICBwb3BTdGF0ZTogZnVuY3Rpb24oKSxcbiAgICAgICAgX2N1cnJlbnRSdWxlczogZnVuY3Rpb24oKSxcbiAgICAgICAgdG9wU3RhdGU6IGZ1bmN0aW9uKCksXG4gICAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24oY29uZGl0aW9uKSxcblxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICByYW5nZXM6IGJvb2xlYW4gICAgICAgICAgIChvcHRpb25hbDogdHJ1ZSA9PT4gdG9rZW4gbG9jYXRpb24gaW5mbyB3aWxsIGluY2x1ZGUgYSAucmFuZ2VbXSBtZW1iZXIpXG4gICAgICAgICAgICBmbGV4OiBib29sZWFuICAgICAgICAgICAgIChvcHRpb25hbDogdHJ1ZSA9PT4gZmxleC1saWtlIGxleGluZyBiZWhhdmlvdXIgd2hlcmUgdGhlIHJ1bGVzIGFyZSB0ZXN0ZWQgZXhoYXVzdGl2ZWx5IHRvIGZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gpXG4gICAgICAgICAgICBiYWNrdHJhY2tfbGV4ZXI6IGJvb2xlYW4gIChvcHRpb25hbDogdHJ1ZSA9PT4gbGV4ZXIgcmVnZXhlcyBhcmUgdGVzdGVkIGluIG9yZGVyIGFuZCBmb3IgZWFjaCBtYXRjaGluZyByZWdleCB0aGUgYWN0aW9uIGNvZGUgaXMgaW52b2tlZDsgdGhlIGxleGVyIHRlcm1pbmF0ZXMgdGhlIHNjYW4gd2hlbiBhIHRva2VuIGlzIHJldHVybmVkIGJ5IHRoZSBhY3Rpb24gY29kZSlcbiAgICAgICAgfSxcblxuICAgICAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbih5eSwgeXlfLCAkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLCBZWV9TVEFSVCksXG4gICAgICAgIHJ1bGVzOiBbLi4uXSxcbiAgICAgICAgY29uZGl0aW9uczoge2Fzc29jaWF0aXZlIGxpc3Q6IG5hbWUgPT0+IHNldH0sXG4gICAgfVxuICB9XG5cblxuICB0b2tlbiBsb2NhdGlvbiBpbmZvIChAJCwgXyQsIGV0Yy4pOiB7XG4gICAgZmlyc3RfbGluZTogbixcbiAgICBsYXN0X2xpbmU6IG4sXG4gICAgZmlyc3RfY29sdW1uOiBuLFxuICAgIGxhc3RfY29sdW1uOiBuLFxuICAgIHJhbmdlOiBbc3RhcnRfbnVtYmVyLCBlbmRfbnVtYmVyXSAgICAgICAod2hlcmUgdGhlIG51bWJlcnMgYXJlIGluZGV4ZXMgaW50byB0aGUgaW5wdXQgc3RyaW5nLCByZWd1bGFyIHplcm8tYmFzZWQpXG4gIH1cblxuXG4gIHRoZSBwYXJzZUVycm9yIGZ1bmN0aW9uIHJlY2VpdmVzIGEgJ2hhc2gnIG9iamVjdCB3aXRoIHRoZXNlIG1lbWJlcnMgZm9yIGxleGVyIGFuZCBwYXJzZXIgZXJyb3JzOiB7XG4gICAgdGV4dDogICAgICAgIChtYXRjaGVkIHRleHQpXG4gICAgdG9rZW46ICAgICAgICh0aGUgcHJvZHVjZWQgdGVybWluYWwgdG9rZW4sIGlmIGFueSlcbiAgICBsaW5lOiAgICAgICAgKHl5bGluZW5vKVxuICB9XG4gIHdoaWxlIHBhcnNlciAoZ3JhbW1hcikgZXJyb3JzIHdpbGwgYWxzbyBwcm92aWRlIHRoZXNlIG1lbWJlcnMsIGkuZS4gcGFyc2VyIGVycm9ycyBkZWxpdmVyIGEgc3VwZXJzZXQgb2YgYXR0cmlidXRlczoge1xuICAgIGxvYzogICAgICAgICAoeXlsbG9jKVxuICAgIGV4cGVjdGVkOiAgICAoc3RyaW5nIGRlc2NyaWJpbmcgdGhlIHNldCBvZiBleHBlY3RlZCB0b2tlbnMpXG4gICAgcmVjb3ZlcmFibGU6IChib29sZWFuOiBUUlVFIHdoZW4gdGhlIHBhcnNlciBoYXMgYSBlcnJvciByZWNvdmVyeSBydWxlIGF2YWlsYWJsZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIGVycm9yKVxuICB9XG4qL1xudmFyIHBhcnNlciA9IChmdW5jdGlvbigpe1xudmFyIG89ZnVuY3Rpb24oayx2LG8sbCl7Zm9yKG89b3x8e30sbD1rLmxlbmd0aDtsLS07b1trW2xdXT12KTtyZXR1cm4gb30sJFYwPVsyLDQxXSwkVjE9WzEsNDJdLCRWMj1bMSwzMV0sJFYzPVsxLDQzXSwkVjQ9WzEsOV0sJFY1PVsxLDE5XSwkVjY9WzEsMjBdLCRWNz1bMSwyMV0sJFY4PVsxLDIyXSwkVjk9WzEsMTFdLCRWYT1bMSwxNV0sJFZiPVsxLDE2XSwkVmM9WzEsMTddLCRWZD1bMSwyM10sJFZlPVsxLDI0XSwkVmY9WzEsMjVdLCRWZz1bMSwyN10sJFZoPVsxLDQxXSwkVmk9WzEsMzNdLCRWaj1bMSwzNF0sJFZrPVsxLDE4XSwkVmw9WzEsMzZdLCRWbT1bMSw0NV0sJFZuPVsxLDQ2XSwkVm89WzEsNDddLCRWcD1bMSw0OF0sJFZxPVsxLDQ5XSwkVnI9WzEsNTBdLCRWcz1bMSw1MV0sJFZ0PVsxLDUyXSwkVnU9WzEsNTNdLCRWdj1bMSw1NF0sJFZ3PVsxLDU1XSwkVng9WzEsNTZdLCRWeT1bMSw1N10sJFZ6PVsxLDU4XSwkVkE9WzEsNTldLCRWQj1bMSw2MF0sJFZDPVs1LDE2LDE3LDE5LDI3LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ4LDU5LDgxLDkxLDk0XSwkVkQ9WzEsNjZdLCRWRT1bMSw2OF0sJFZGPVsxLDcxXSwkVkc9WzEsODBdLCRWSD1bMSw4OF0sJFZJPVsxLDkxXSwkVko9WzEsOTBdLCRWSz1bMiw4MV0sJFZMPVs1LDgsMTIsMTQsMTYsMTcsMTksMjcsMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDgsNTgsNTksNjQsODEsODgsOTEsOTRdLCRWTT1bMiw2M10sJFZOPVsyLDc2XSwkVk89WzUsMTYsMTcsMTksMjcsMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDgsNTgsNTksODEsODgsOTEsOTRdLCRWUD1bOCwxNiwyMSwyNyw0MSw1Miw1Myw1NCw1NSw1OCw2Miw2Myw2NSw2OSw3MCw3MSw3Miw3OCw4Myw4NCw4NSw4OV0sJFZRPVsyMSwyNiwyOF0sJFZSPVs1OSw4MV0sJFZTPVsxLDEzM10sJFZUPVsxLDEzOV0sJFZVPVs1LDgsMTYsMTcsMTksMjcsMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDgsNTgsNTksNjQsODEsOTEsOTRdLCRWVj1bNSwxNiwxNywxOSwyNyw0OCw1OSw4MSw5MSw5NF0sJFZXPVs1LDE2LDE3LDE5LDI3LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ4LDU5LDgxLDg4LDkxLDk0XSwkVlg9WzEsMTQ1XSwkVlk9WzEsMTQ4XSwkVlo9WzUsNTldLCRWXz1bMTYsOTEsOTRdLCRWJD1bNSwxOV0sJFYwMT1bMSwxNjFdLCRWMTE9WzEsMTYyXSwkVjIxPVs1LDE2LDE3LDE5LDI3LDMwLDMxLDM0LDM1LDM2LDM3LDM4LDM5LDQ4LDU5LDgxLDkxLDk0XSwkVjMxPVs1LDE2LDE3LDE5LDI3LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQ4LDU5LDgxLDkxLDk0XSwkVjQxPVs1LDE2LDE3LDE5LDI3LDM0LDM1LDM2LDM3LDM4LDM5LDQ4LDU5LDgxLDkxLDk0XSwkVjUxPVs1LDE2LDE3LDE5LDI3LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQ4LDU5LDgxLDkxLDk0XSwkVjYxPVs1LDE2LDE3LDE5LDI3LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ4LDU5LDgxLDkxLDk0XSwkVjcxPVs4LDE2LDIxLDQxLDUyLDUzLDU0LDU1LDU4LDYyLDYzLDY1LDY5LDcwLDcxLDcyLDc4LDgzLDg0LDg1LDg5LDkzXTtcbnZhciBwYXJzZXIgPSB7dHJhY2U6IGZ1bmN0aW9uIHRyYWNlICgpIHsgfSxcbnl5OiB7fSxcbnN5bWJvbHNfOiB7XCJlcnJvclwiOjIsXCJhcnJheVwiOjMsXCJhcnJheVN0YXJ0XCI6NCxcIl1cIjo1LFwiYXNzb2NpYXRpdmVMaXN0XCI6NixcImV4cHJlc3Npb25MaXN0XCI6NyxcIltcIjo4LFwiYXNzaWdubWVudEV4cHJlc3Npb25cIjo5LFwiaWRcIjoxMCxcImFzc2lnbm1lbnRWYWx1ZVwiOjExLFwiPVwiOjEyLFwiZXhwcmVzc2lvblwiOjEzLFwiKz1cIjoxNCxcImFzc29jaWF0aXZlRGVjbGFyYXRpb25cIjoxNSxcIklERU5USUZJRVJcIjoxNixcIjpcIjoxNyxcInN0cmluZ1wiOjE4LFwiLFwiOjE5LFwiYnRPcFN0YXJ0XCI6MjAsXCJgXCI6MjEsXCJidE9wRW5kXCI6MjIsXCJidEJvZHlcIjoyMyxcImJ0U3RyaW5nXCI6MjQsXCJidFBhcnRcIjoyNSxcIiR7XCI6MjYsXCJ9XCI6MjcsXCJCVENIQVJcIjoyOCxcImJpbmFyeUV4cHJlc3Npb25cIjoyOSxcIkFORFwiOjMwLFwiT1JcIjozMSxcIjwmXCI6MzIsXCImPlwiOjMzLFwiSVNcIjozNCxcIklTTlRcIjozNSxcIkdUXCI6MzYsXCJMVFwiOjM3LFwiR1RFUVwiOjM4LFwiTFRFUVwiOjM5LFwiK1wiOjQwLFwiLVwiOjQxLFwiKlwiOjQyLFwiL1wiOjQzLFwiXlwiOjQ0LFwiJVwiOjQ1LFwiYnJhY2tldEV4cHJlc3Npb25cIjo0NixcImNvbnRyb2xDb2RlXCI6NDcsXCI7XCI6NDgsXCJkZWNsYXJhdGlvbklkXCI6NDksXCJpZExpc3RcIjo1MCxcImRlY2xhcmF0aW9uRXhwcmVzc2lvblwiOjUxLFwiTEVUXCI6NTIsXCJQUklWQVRFXCI6NTMsXCJQUk9URUNURURcIjo1NCxcIlBVQkxJQ1wiOjU1LFwiaW1wb3J0XCI6NTYsXCJ1c2VcIjo1NyxcIihcIjo1OCxcIilcIjo1OSxcImxpdGVyYWxcIjo2MCxcImludm9rZVwiOjYxLFwiUkVUVVJOXCI6NjIsXCIhXCI6NjMsXCIuXCI6NjQsXCJJTVBPUlRcIjo2NSxcImludm9rZVRyYWNrZXJcIjo2NixcImludm9rZUFyZ3VtZW50c1wiOjY3LFwic2NvcGVcIjo2OCxcIlRSVUVcIjo2OSxcIkZBTFNFXCI6NzAsXCJOVU1CRVJcIjo3MSxcIlJFR0VYUEJPRFlcIjo3MixcInhtbFwiOjczLFwicHJvZ3JhbVwiOjc0LFwiRU9GXCI6NzUsXCJzY29wZUFyZ3VtZW50c1wiOjc2LFwic2NvcGVTdGFydFwiOjc3LFwie1wiOjc4LFwic2NvcGVBcmd1bWVudHNMaXN0XCI6NzksXCJzY29wZUFyZ3VtZW50U3ByZWFkXCI6ODAsXCIuLi5cIjo4MSxcInNjb3BlQXJndW1lbnRzTGlzdERlY2xhcmF0aW9uXCI6ODIsXCJRU1RSSU5HXCI6ODMsXCJBU1RSSU5HXCI6ODQsXCJVU0VcIjo4NSxcInVzYWJsZVwiOjg2LFwidXNlT25seVwiOjg3LFwiT05MWVwiOjg4LFwiPFwiOjg5LFwieG1sQXR0cmlidXRlc1wiOjkwLFwiPlwiOjkxLFwieG1sQ29udHJvbENvZGVcIjo5MixcIjwvXCI6OTMsXCIvPlwiOjk0LFwiJGFjY2VwdFwiOjAsXCIkZW5kXCI6MX0sXG50ZXJtaW5hbHNfOiB7MjpcImVycm9yXCIsNTpcIl1cIiw4OlwiW1wiLDEyOlwiPVwiLDE0OlwiKz1cIiwxNjpcIklERU5USUZJRVJcIiwxNzpcIjpcIiwxOTpcIixcIiwyMTpcImBcIiwyNjpcIiR7XCIsMjc6XCJ9XCIsMjg6XCJCVENIQVJcIiwzMDpcIkFORFwiLDMxOlwiT1JcIiwzMjpcIjwmXCIsMzM6XCImPlwiLDM0OlwiSVNcIiwzNTpcIklTTlRcIiwzNjpcIkdUXCIsMzc6XCJMVFwiLDM4OlwiR1RFUVwiLDM5OlwiTFRFUVwiLDQwOlwiK1wiLDQxOlwiLVwiLDQyOlwiKlwiLDQzOlwiL1wiLDQ0OlwiXlwiLDQ1OlwiJVwiLDQ4OlwiO1wiLDUyOlwiTEVUXCIsNTM6XCJQUklWQVRFXCIsNTQ6XCJQUk9URUNURURcIiw1NTpcIlBVQkxJQ1wiLDU4OlwiKFwiLDU5OlwiKVwiLDYyOlwiUkVUVVJOXCIsNjM6XCIhXCIsNjQ6XCIuXCIsNjU6XCJJTVBPUlRcIiw2OTpcIlRSVUVcIiw3MDpcIkZBTFNFXCIsNzE6XCJOVU1CRVJcIiw3MjpcIlJFR0VYUEJPRFlcIiw3NTpcIkVPRlwiLDc4Olwie1wiLDgxOlwiLi4uXCIsODM6XCJRU1RSSU5HXCIsODQ6XCJBU1RSSU5HXCIsODU6XCJVU0VcIiw4ODpcIk9OTFlcIiw4OTpcIjxcIiw5MTpcIj5cIiw5MzpcIjwvXCIsOTQ6XCIvPlwifSxcbnByb2R1Y3Rpb25zXzogWzAsWzMsMl0sWzMsM10sWzMsM10sWzQsMV0sWzksMl0sWzExLDJdLFsxMSwyXSxbMTEsNF0sWzE1LDNdLFsxNSwzXSxbNiwxXSxbNiwzXSxbMjAsMV0sWzIyLDJdLFsyNCwyXSxbMjMsMF0sWzIzLDJdLFsyNSwzXSxbMjUsMV0sWzI5LDNdLFsyOSwzXSxbMjksM10sWzI5LDNdLFsyOSwzXSxbMjksM10sWzI5LDNdLFsyOSwzXSxbMjksM10sWzI5LDNdLFsyOSwzXSxbMjksM10sWzI5LDNdLFsyOSwzXSxbMjksM10sWzI5LDNdLFs0Niw1XSxbNDYsNF0sWzQ2LDRdLFs0NiwzXSxbNDYsM10sWzQ3LDBdLFs0NywzXSxbNDksMV0sWzQ5LDNdLFs1MSw0XSxbNTEsNF0sWzUxLDRdLFs1MSw0XSxbMTMsMV0sWzEzLDFdLFsxMywxXSxbMTMsMV0sWzEzLDJdLFsxMywxXSxbMTMsM10sWzEzLDFdLFsxMywxXSxbMTMsMV0sWzEzLDJdLFsxMywyXSxbNywxXSxbNywzXSxbMTAsMV0sWzEwLDNdLFsxMCwyXSxbNTAsMV0sWzUwLDNdLFs1NiwyXSxbNjYsMl0sWzYxLDNdLFs2MSw0XSxbNjEsNF0sWzYxLDNdLFs2MSwyXSxbNjEsNF0sWzY3LDBdLFs2NywxXSxbNjAsMV0sWzYwLDFdLFs2MCwxXSxbNjAsMV0sWzYwLDFdLFs2MCwxXSxbNjAsMV0sWzYwLDFdLFs3NCwyXSxbNjgsNF0sWzY4LDNdLFs3NywxXSxbNzYsNF0sWzc2LDNdLFs3NiwzXSxbNzYsMl0sWzgwLDJdLFs3OSwxXSxbNzksM10sWzgyLDNdLFsxOCwxXSxbMTgsMV0sWzE4LDFdLFs1NywyXSxbNTcsM10sWzg2LDFdLFs4NiwxXSxbODYsMV0sWzg2LDNdLFs4NiwzXSxbODYsM10sWzg3LDRdLFs3Myw4XSxbNzMsNF0sWzkwLDBdLFs5MCw0XSxbOTIsMF0sWzkyLDNdXSxcbnBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQsIHl5bGVuZywgeXlsaW5lbm8sIHl5LCB5eXN0YXRlIC8qIGFjdGlvblsxXSAqLywgJCQgLyogdnN0YWNrICovLCBfJCAvKiBsc3RhY2sgKi8pIHtcbi8qIHRoaXMgPT0geXl2YWwgKi9cblxudmFyICQwID0gJCQubGVuZ3RoIC0gMTtcbnN3aXRjaCAoeXlzdGF0ZSkge1xuY2FzZSAxOlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnZW1wdHlNYXBFeHByZXNzaW9uJywgWyQkWyQwLTFdXSk7XG5icmVhaztcbmNhc2UgMjpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ21hcEV4cHJlc3Npb24nLCBbJCRbJDAtMl0sICQkWyQwLTFdXSk7XG5icmVhaztcbmNhc2UgMzpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2FycmF5RXhwcmVzc2lvbicsIFskJFskMC0yXSwgJCRbJDAtMV1dKTtcbmJyZWFrO1xuY2FzZSA0OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnYXJyYXlTdGFydCcsIFtdKTtcbmJyZWFrO1xuY2FzZSA1OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnYXNzaWdubWVudEV4cHJlc3Npb24nLCBbJCRbJDAtMV0sICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDY6IGNhc2UgNzpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2Fzc2lnbm1lbnRWYWx1ZScsIFskJFskMC0xXSwgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgODpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2Fzc2lnbm1lbnRWYWx1ZScsIFsnW109JywgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgOTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2Fzc29jaWF0aXZlRGVjbGFyYXRpb24nLCBbJCRbJDAtMl0sICdpZCcsICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDEwOlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnYXNzb2NpYXRpdmVEZWNsYXJhdGlvbicsIFskJFskMC0yXSwgJ3N0cmluZycsICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDExOlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnYXNzb2NpYXRpdmVMaXN0JywgWyQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDEyOlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnYXNzb2NpYXRpdmVMaXN0JywgWyQkWyQwLTJdLCAkJFskMF1dKTtcbmJyZWFrO1xuY2FzZSAxNDpcbnRoaXMuJCA9IHl5LnNjb3BlU3RhdGUuYnRTdHJpbmc7XG5icmVhaztcbmNhc2UgMTU6IGNhc2UgMTk6XG50aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgMTY6XG50aGlzLiQgPSBcIlwiO1xuYnJlYWs7XG5jYXNlIDE3OlxudGhpcy4kID0gJCRbJDAtMV0gKyAkJFskMF07XG5icmVhaztcbmNhc2UgMTg6XG50aGlzLiQgPSAnJHsnICsgJCRbJDAtMV0udHJhbnNsYXRpb24gKyAnfSc7XG5icmVhaztcbmNhc2UgMjA6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdiaW5hcnlFeHByZXNzaW9uJywgWyQkWyQwLTJdLCAnJiYnLCAkJFskMF1dKTtcbmJyZWFrO1xuY2FzZSAyMTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2JpbmFyeUV4cHJlc3Npb24nLCBbJCRbJDAtMl0sICd8fCcsICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDIyOlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnYmluYXJ5RXhwcmVzc2lvbicsIFskJFskMC0yXSwgJzwmJywgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgMjM6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdiaW5hcnlFeHByZXNzaW9uJywgWyQkWyQwLTJdLCAnJj4nLCAkJFskMF1dKTtcbmJyZWFrO1xuY2FzZSAyNDpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2JpbmFyeUV4cHJlc3Npb24nLCBbJCRbJDAtMl0sICc9PT0nLCAkJFskMF1dKTtcbmJyZWFrO1xuY2FzZSAyNTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2JpbmFyeUV4cHJlc3Npb24nLCBbJCRbJDAtMl0sICchPT0nLCAkJFskMF1dKTtcbmJyZWFrO1xuY2FzZSAyNjpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2JpbmFyeUV4cHJlc3Npb24nLCBbJCRbJDAtMl0sICc+JywgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgMjc6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdiaW5hcnlFeHByZXNzaW9uJywgWyQkWyQwLTJdLCAnPCcsICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDI4OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnYmluYXJ5RXhwcmVzc2lvbicsIFskJFskMC0yXSwgJz49JywgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgMjk6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdiaW5hcnlFeHByZXNzaW9uJywgWyQkWyQwLTJdLCAnPD0nLCAkJFskMF1dKTtcbmJyZWFrO1xuY2FzZSAzMDogY2FzZSAzMTogY2FzZSAzMjogY2FzZSAzMzogY2FzZSAzNDogY2FzZSAzNTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2JpbmFyeUV4cHJlc3Npb24nLCBbJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF1dKTtcbmJyZWFrO1xuY2FzZSAzNjpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2JyYWNrZXRTZWxlY3RvckV4cHJlc3Npb24nLCBbJCRbJDAtM10sICQkWyQwLTFdXSk7XG5icmVhaztcbmNhc2UgMzc6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdicmFja2V0U2VsZWN0b3JFeHByZXNzaW9uJywgWzAsICQkWyQwLTFdXSk7XG5icmVhaztcbmNhc2UgMzg6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdicmFja2V0U2VsZWN0b3JFeHByZXNzaW9uJywgWyQkWyQwLTJdLCB1bmRlZmluZWRdKTtcbmJyZWFrO1xuY2FzZSAzOTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2JyYWNrZXRTZWxlY3RvckV4cHJlc3Npb24nLCBbMCwgdW5kZWZpbmVkXSk7XG5icmVhaztcbmNhc2UgNDA6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdicmFja2V0RXhwcmVzc2lvbicsIFskJFskMC0xXV0pO1xuYnJlYWs7XG5jYXNlIDQxOlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnY29udHJvbENvZGUnLCBbXSk7XG5icmVhaztcbmNhc2UgNDI6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdjb250cm9sQ29kZScsIFskJFskMC0yXSwgJCRbJDAtMV1dKTtcbmJyZWFrO1xuY2FzZSA0MzpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2RlY2xhcmF0aW9uSWQnLCBbJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgNDQ6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdkZWNsYXJhdGlvbklkTGlzdCcsIFskJFskMC0xXV0pO1xuYnJlYWs7XG5jYXNlIDQ1OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnZGVjbGFyYXRpb25FeHByZXNzaW9uJywgWydsZXQnLCAkJFskMC0yXSwgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgNDY6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdkZWNsYXJhdGlvbkV4cHJlc3Npb24nLCBbJ3ByaXZhdGUnLCAkJFskMC0yXSwgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgNDc6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdkZWNsYXJhdGlvbkV4cHJlc3Npb24nLCBbJ3Byb3RlY3RlZCcsICQkWyQwLTJdLCAkJFskMF1dKTtcbmJyZWFrO1xuY2FzZSA0ODpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2RlY2xhcmF0aW9uRXhwcmVzc2lvbicsIFsncHVibGljJywgJCRbJDAtMl0sICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDQ5OiBjYXNlIDUwOiBjYXNlIDUxOiBjYXNlIDUyOiBjYXNlIDU0OiBjYXNlIDU2OiBjYXNlIDU3OiBjYXNlIDU4OiBjYXNlIDgzOiBjYXNlIDg0OiBjYXNlIDg1OiBjYXNlIDk4OiBjYXNlIDk5OlxudGhpcy4kID0gJCRbJDBdXG5icmVhaztcbmNhc2UgNTM6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICd1bmFyeUV4cHJlc3Npb24nLFsnLScsICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDU1OlxudGhpcy4kID0gJCRbJDAtMV1cbmJyZWFrO1xuY2FzZSA1OTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ3JldHVybkV4cHJlc3Npb24nLCBbJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgNjA6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICd1bmFyeUV4cHJlc3Npb24nLFsnIScsICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDYxOlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnZXhwcmVzc2lvbkxpc3QnLCBbJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgNjI6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdleHByZXNzaW9uTGlzdCcsIFskJFskMC0yXSwgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgNjM6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdpZGVudGlmaWVyJywgWyQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDY0OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnaWRlbnRpZmllcicsIFskJFskMC0yXSwgJ2RvdCcsICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDY1OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnaWRlbnRpZmllcicsIFskJFskMC0xXSwgJ2JyYWNrZXQnLCAkJFskMF1dKTtcbmJyZWFrO1xuY2FzZSA2NjpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2lkTGlzdCcsIFskJFskMF1dKTtcbmJyZWFrO1xuY2FzZSA2NzpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2lkTGlzdCcsIFskJFskMC0yXSwgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgNjg6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdpbXBvcnRFeHByZXNzaW9uJywgWyQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDY5OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnaW52b2tlVHJhY2tlcicsIFskJFskMC0xXV0pO1xuYnJlYWs7XG5jYXNlIDcwOlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnaW52b2tlRXhwcmVzc2lvbicsIFskJFskMC0yXSwgJCRbJDAtMV1dKTtcbmJyZWFrO1xuY2FzZSA3MTogY2FzZSA3MjogY2FzZSA3NTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ2ludm9rZUV4cHJlc3Npb24nLCBbJCRbJDAtM10sICQkWyQwLTFdXSk7XG5icmVhaztcbmNhc2UgNzM6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdpbnZva2VJZCcsIFskJFskMC0yXSwgJ2RvdCcsICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDc0OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnaW52b2tlSWQnLCBbJCRbJDAtMV0sICdicmFja2V0JywgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgNzY6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdpbnZva2VBcmd1bWVudHMnLCBbXSk7XG5icmVhaztcbmNhc2UgNzc6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdpbnZva2VBcmd1bWVudHMnLCBbJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgNzg6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdib29sZWFuTGl0ZXJhbCcsIHRydWUpO1xuYnJlYWs7XG5jYXNlIDc5OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnYm9vbGVhbkxpdGVyYWwnLCBmYWxzZSk7XG5icmVhaztcbmNhc2UgODA6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdudW1lcmljTGl0ZXJhbCcsIE51bWJlcigkJFskMF0pKTtcbmJyZWFrO1xuY2FzZSA4MTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ3N0cmluZ0xpdGVyYWwnLCBbJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgODI6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdyZWdleExpdGVyYWwnLCBbJCRbJDBdXSlcbmJyZWFrO1xuY2FzZSA4NjpcbnJldHVybiAkJFskMC0xXVxuYnJlYWs7XG5jYXNlIDg3OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnc2NvcGVFeHByZXNzaW9uJywgWyQkWyQwLTJdLCAkJFskMC0zXSwgJCRbJDAtMV1dKTtcbmJyZWFrO1xuY2FzZSA4ODpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ3Njb3BlRXhwcmVzc2lvbicsIFskJFskMC0yXSwgJCRbJDAtMV1dKTtcbmJyZWFrO1xuY2FzZSA4OTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ3Njb3BlU3RhcnQnLCBbXSk7XG5icmVhaztcbmNhc2UgOTA6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdzY29wZUFyZ3VtZW50cycsIFskJFskMC0yXSwgJCRbJDAtMV1dKTtcbmJyZWFrO1xuY2FzZSA5MTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ3Njb3BlQXJndW1lbnRzJywgWyQkWyQwLTFdLCBcInJlbWFpbmluZ0FyZ3VtZW50c1wiXSk7XG5icmVhaztcbmNhc2UgOTI6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdzY29wZUFyZ3VtZW50cycsIFt1bmRlZmluZWQsICQkWyQwLTFdXSk7XG5icmVhaztcbmNhc2UgOTM6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdzY29wZUFyZ3VtZW50cycsIFt1bmRlZmluZWQsIHVuZGVmaW5lZF0pXG5icmVhaztcbmNhc2UgOTQ6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdzY29wZUFyZ3VtZW50U3ByZWFkJywgWyQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDk1OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAnc2NvcGVBcmd1bWVudHNMaXN0JywgWyQkWyQwXV0pXG5icmVhaztcbmNhc2UgOTY6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdzY29wZUFyZ3VtZW50c0xpc3QnLCBbJCRbJDAtMl0sICQkWyQwXV0pXG5icmVhaztcbmNhc2UgOTc6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdzY29wZUFyZ3VtZW50c0xpc3REZWNsYXJhdGlvbicsIFskJFskMC0yXSwgJCRbJDBdXSlcbmJyZWFrO1xuY2FzZSAxMDA6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICdidFN0cmluZycsIFskJFskMF1dKTtcbmJyZWFrO1xuY2FzZSAxMDE6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICd1c2VFeHByZXNzaW9uJywgWyQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDEwMjpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ3VzZUV4cHJlc3Npb24nLCBbJCRbJDAtMV0sICQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDEwMzogY2FzZSAxMDQ6IGNhc2UgMTA1OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAndXNhYmxlJywgWyQkWyQwXV0pO1xuYnJlYWs7XG5jYXNlIDEwNjogY2FzZSAxMDc6IGNhc2UgMTA4OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAndXNhYmxlJywgWyQkWyQwLTJdLCAkJFskMF1dKTtcbmJyZWFrO1xuY2FzZSAxMDk6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICd1c2VPbmx5JywgWyQkWyQwLTFdXSk7XG5icmVhaztcbmNhc2UgMTEwOlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAneG1sRXhwcmVzc2lvbicsIFskJFskMC02XSwgJCRbJDAtNV0sICQkWyQwLTNdLCAkJFskMC0xXV0pO1xuYnJlYWs7XG5jYXNlIDExMTpcbnRoaXMuJCA9IG5ldyB5eS5zY29wZUFzdCh5eSwgJ3htbEV4cHJlc3Npb24nLCBbJCRbJDAtMl0sICQkWyQwLTFdXSk7XG5icmVhaztcbmNhc2UgMTEyOlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAneG1sQXR0cmlidXRlcycsIFtdKTtcbmJyZWFrO1xuY2FzZSAxMTM6XG50aGlzLiQgPSBuZXcgeXkuc2NvcGVBc3QoeXksICd4bWxBdHRyaWJ1dGVzJywgWyQkWyQwLTNdLCAkJFskMC0yXSwgJCRbJDBdXSk7XG5icmVhaztcbmNhc2UgMTE0OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAneG1sQ29udHJvbENvZGUnLCBbXSk7XG5icmVhaztcbmNhc2UgMTE1OlxudGhpcy4kID0gbmV3IHl5LnNjb3BlQXN0KHl5LCAneG1sQ29udHJvbENvZGUnLCBbJCRbJDAtMl0sICQkWyQwLTFdXSk7XG5icmVhaztcbn1cbn0sXG50YWJsZTogW28oWzgsMTYsMjEsNDEsNTIsNTMsNTQsNTUsNTgsNjIsNjMsNjUsNjksNzAsNzEsNzIsNzUsNzgsODMsODQsODUsODldLCRWMCx7NzQ6MSw0NzoyfSksezE6WzNdfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzo0LDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjk6MTAsNDE6JFY0LDUxOjgsNTI6JFY1LDUzOiRWNiw1NDokVjcsNTU6JFY4LDU2OjYsNTc6Nyw1ODokVjksNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc1OlsxLDNdLDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LHsxOlsyLDg2XX0sezMwOiRWbSwzMTokVm4sMzI6JFZvLDMzOiRWcCwzNDokVnEsMzU6JFZyLDM2OiRWcywzNzokVnQsMzg6JFZ1LDM5OiRWdiw0MDokVncsNDE6JFZ4LDQyOiRWeSw0MzokVnosNDQ6JFZBLDQ1OiRWQiw0ODpbMSw0NF19LG8oJFZDLFsyLDQ5XSksbygkVkMsWzIsNTBdLHs1ODpbMSw2MV19KSxvKCRWQyxbMiw1MV0pLG8oJFZDLFsyLDUyXSksezM6MzAsNDozOSw4OiRWMSw5OjUsMTA6MTMsMTM6NjIsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sbygkVkMsWzIsNTRdKSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzo2MywxNjpbMSw2OV0sMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDU5OiRWRCw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDc5OjY0LDgwOjY1LDgxOiRWRSw4Mjo2Nyw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LG8oJFZDLFsyLDU2XSksbygkVkMsWzIsNTddLHsxMTo3MCw0Njo3Miw4OlsxLDc2XSwxMjpbMSw3NF0sMTQ6WzEsNzVdLDU4OlsxLDczXSw2NDokVkZ9KSxvKCRWQyxbMiw1OF0sezQ2Ojc4LDg6JFZHLDU4OlsxLDc5XSw2NDpbMSw3N119KSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzo4MSwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzo4MiwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7MTg6ODMsMjA6NDAsMjE6JFYzLDI0OjM1LDgzOiRWaSw4NDokVmp9LHsxMDo4NiwxNjokVjIsNTY6ODcsNTg6JFZILDY1OiRWYyw2ODo4NSw3NjozNyw3NzozOCw3ODokVmgsODY6ODR9LHs4OiRWSSwxNjokVkosNDk6ODl9LHs4OiRWSSwxNjokVkosNDk6OTJ9LHs4OiRWSSwxNjokVkosNDk6OTN9LHs4OiRWSSwxNjokVkosNDk6OTR9LG8oJFZDLFsyLDc4XSksbygkVkMsWzIsNzldKSxvKCRWQyxbMiw4MF0pLG8oJFZDLCRWSyksbygkVkMsWzIsODJdKSxvKCRWQyxbMiw4M10pLG8oJFZDLFsyLDg0XSx7NTg6WzEsOTVdfSksbygkVkMsWzIsODVdKSxvKCRWTCwkVk0pLHszOjMwLDQ6MzksNzo5Nyw4OiRWMSw5OjUsMTA6MTMsMTM6OTgsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw1OTokVk4sNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjc6OTYsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LG8oJFZPLFsyLDk4XSksbygkVk8sWzIsOTldKSxvKCRWTyxbMiwxMDBdKSx7MTA6OTksMTY6JFYyfSx7Nzc6MTAwLDc4OiRWaH0sbygkVlAsJFYwLHs0NzoxMDF9KSx7MzozMCw0OjM5LDU6WzEsMTAyXSw2OjEwMyw3OjEwNCw4OiRWMSw5OjUsMTA6MTMsMTM6OTgsMTU6MTA1LDE2OlsxLDEwNl0sMTg6MTA3LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sbygkVlEsWzIsMTZdLHsyMjoxMDgsMjM6MTA5fSksbygkVlAsWzIsODldKSxvKFs1LDgsMTYsMjEsNDEsNTIsNTMsNTQsNTUsNTgsNjIsNjMsNjUsNjksNzAsNzEsNzIsNzgsODMsODQsODUsODldLFsyLDRdKSxvKCRWUSxbMiwxM10pLG8oWzgsMTYsMjEsMjcsNDEsNTIsNTMsNTQsNTUsNTgsNjIsNjMsNjUsNjksNzAsNzEsNzIsNzUsNzgsODMsODQsODUsODldLFsyLDQyXSksezM6MzAsNDozOSw4OiRWMSw5OjUsMTA6MTMsMTM6MTEwLDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjk6MTAsNDE6JFY0LDUxOjgsNTI6JFY1LDUzOiRWNiw1NDokVjcsNTU6JFY4LDU2OjYsNTc6Nyw1ODokVjksNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjExMSwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoxMTIsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezM6MzAsNDozOSw4OiRWMSw5OjUsMTA6MTMsMTM6MTEzLDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjk6MTAsNDE6JFY0LDUxOjgsNTI6JFY1LDUzOiRWNiw1NDokVjcsNTU6JFY4LDU2OjYsNTc6Nyw1ODokVjksNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjExNCwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoxMTUsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezM6MzAsNDozOSw4OiRWMSw5OjUsMTA6MTMsMTM6MTE2LDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjk6MTAsNDE6JFY0LDUxOjgsNTI6JFY1LDUzOiRWNiw1NDokVjcsNTU6JFY4LDU2OjYsNTc6Nyw1ODokVjksNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjExNywxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoxMTgsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezM6MzAsNDozOSw4OiRWMSw5OjUsMTA6MTMsMTM6MTE5LDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjk6MTAsNDE6JFY0LDUxOjgsNTI6JFY1LDUzOiRWNiw1NDokVjcsNTU6JFY4LDU2OjYsNTc6Nyw1ODokVjksNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjEyMCwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoxMjEsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezM6MzAsNDozOSw4OiRWMSw5OjUsMTA6MTMsMTM6MTIyLDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjk6MTAsNDE6JFY0LDUxOjgsNTI6JFY1LDUzOiRWNiw1NDokVjcsNTU6JFY4LDU2OjYsNTc6Nyw1ODokVjksNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjEyMywxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoxMjQsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezM6MzAsNDozOSw4OiRWMSw5OjUsMTA6MTMsMTM6MTI1LDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjk6MTAsNDE6JFY0LDUxOjgsNTI6JFY1LDUzOiRWNiw1NDokVjcsNTU6JFY4LDU2OjYsNTc6Nyw1ODokVjksNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LHszOjMwLDQ6MzksNzo5Nyw4OiRWMSw5OjUsMTA6MTMsMTM6OTgsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw1OTokVk4sNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjc6MTI2LDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSxvKCRWQyxbMiw1M10pLHszMDokVm0sMzE6JFZuLDMyOiRWbywzMzokVnAsMzQ6JFZxLDM1OiRWciwzNjokVnMsMzc6JFZ0LDM4OiRWdSwzOTokVnYsNDA6JFZ3LDQxOiRWeCw0MjokVnksNDM6JFZ6LDQ0OiRWQSw0NTokVkIsNTk6WzEsMTI3XX0sezU5OlsxLDEyOV0sODA6MTI4LDgxOiRWRX0sezU5OlsxLDEzMF19LHs3ODpbMiw5M119LG8oJFZSLFsyLDk1XSx7MTk6WzEsMTMxXX0pLHsxNjpbMSwxMzJdfSxvKFs4LDEyLDE0LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDU4LDU5LDY0XSwkVk0sezE3OiRWU30pLG8oJFZDLFsyLDVdKSx7MTY6WzEsMTM0XX0sbygkVkwsWzIsNjVdKSxvKFs4LDE2LDIxLDQxLDUyLDUzLDU0LDU1LDU4LDU5LDYyLDYzLDY1LDY5LDcwLDcxLDcyLDc4LDgzLDg0LDg1LDg5XSxbMiw2OV0pLHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjEzNSwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoxMzYsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezM6MzAsNDozOSw1OlsxLDEzN10sODokVjEsOTo1LDEwOjEzLDEzOjEzOCwxNjokVjIsMTc6JFZULDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezEwOjE0MCwxNjokVjJ9LG8oJFZVLFsyLDc0XSksezM6MzAsNDozOSw3Ojk3LDg6JFYxLDk6NSwxMDoxMywxMzo5OCwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDU5OiRWTiw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2NzoxNDEsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjEzOCwxNjokVjIsMTc6JFZULDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sbygkVlYsWzIsNTldLHszMDokVm0sMzE6JFZuLDMyOiRWbywzMzokVnAsMzQ6JFZxLDM1OiRWciwzNjokVnMsMzc6JFZ0LDM4OiRWdSwzOTokVnYsNDA6JFZ3LDQxOiRWeCw0MjokVnksNDM6JFZ6LDQ0OiRWQSw0NTokVkJ9KSxvKCRWQyxbMiw2MF0pLG8oJFZPLFsyLDY4XSksbyhbNSwxNiwxNywyNywzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NCw0NSw0OCw1OSw4MSw5MSw5NF0sWzIsMTAxXSx7ODc6MTQyLDE5OlsxLDE0M10sODg6WzEsMTQ0XX0pLG8oJFZXLFsyLDEwM10pLG8oJFZXLFsyLDEwNF0sezQ2OjcyLDg6JFZHLDY0OiRWRn0pLG8oJFZXLFsyLDEwNV0pLHsxNjokVlgsNTk6JFZELDc5OjY0LDgwOjY1LDgxOiRWRSw4Mjo2N30sezEyOlsxLDE0Nl19LHsxMjpbMiw0M119LHsxNjokVlksNTA6MTQ3fSx7MTI6WzEsMTQ5XX0sezEyOlsxLDE1MF19LHsxMjpbMSwxNTFdfSx7MzozMCw0OjM5LDc6OTcsODokVjEsOTo1LDEwOjEzLDEzOjk4LDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjk6MTAsNDE6JFY0LDUxOjgsNTI6JFY1LDUzOiRWNiw1NDokVjcsNTU6JFY4LDU2OjYsNTc6Nyw1ODokVjksNTk6JFZOLDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY3OjE1Miw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezU5OlsxLDE1M119LHs1OTpbMiw3N119LG8oJFZaLFsyLDYxXSx7MTk6WzEsMTU0XSwzMDokVm0sMzE6JFZuLDMyOiRWbywzMzokVnAsMzQ6JFZxLDM1OiRWciwzNjokVnMsMzc6JFZ0LDM4OiRWdSwzOTokVnYsNDA6JFZ3LDQxOiRWeCw0MjokVnksNDM6JFZ6LDQ0OiRWQSw0NTokVkJ9KSxvKCRWXyxbMiwxMTJdLHs0Njo3Miw5MDoxNTUsODokVkcsNjQ6JFZGfSksbygkVlAsJFYwLHs0NzoxNTZ9KSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzo0LDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjc6WzEsMTU3XSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sbygkVkMsWzIsMV0pLHs1OlsxLDE1OF0sMTk6WzEsMTU5XX0sezU6WzEsMTYwXX0sbygkViQsWzIsMTFdKSxvKFs1LDgsMTIsMTQsMTksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNTgsNjRdLCRWTSx7MTc6JFYwMX0pLG8oWzUsMTksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDVdLCRWSyx7MTc6JFYxMX0pLG8oJFZPLFsyLDE1XSksezIxOlsxLDE2M10sMjU6MTY0LDI2OlsxLDE2NV0sMjg6WzEsMTY2XX0sbygkVjIxLFsyLDIwXSx7MzI6JFZvLDMzOiRWcCw0MDokVncsNDE6JFZ4LDQyOiRWeSw0MzokVnosNDQ6JFZBLDQ1OiRWQn0pLG8oJFYyMSxbMiwyMV0sezMyOiRWbywzMzokVnAsNDA6JFZ3LDQxOiRWeCw0MjokVnksNDM6JFZ6LDQ0OiRWQSw0NTokVkJ9KSxvKCRWMzEsWzIsMjJdLHs0MDokVncsNDE6JFZ4LDQyOiRWeSw0MzokVnosNDQ6JFZBLDQ1OiRWQn0pLG8oJFYzMSxbMiwyM10sezQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVjQxLFsyLDI0XSx7MzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVjQxLFsyLDI1XSx7MzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVjQxLFsyLDI2XSx7MzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVjQxLFsyLDI3XSx7MzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVjQxLFsyLDI4XSx7MzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVjQxLFsyLDI5XSx7MzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVjUxLFsyLDMwXSx7NDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVjUxLFsyLDMxXSx7NDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVjYxLFsyLDMyXSx7NDQ6JFZBLDQ1OiRWQn0pLG8oJFY2MSxbMiwzM10sezQ0OiRWQSw0NTokVkJ9KSxvKCRWQyxbMiwzNF0pLG8oJFZDLFsyLDM1XSksezU5OlsxLDE2N119LG8oJFZDLFsyLDU1XSksezU5OlsxLDE2OF19LHs3ODpbMiw5MV19LHs3ODpbMiw5Ml19LHsxNjokVlgsNzk6MTY5LDgyOjY3fSx7NTk6WzIsOTRdfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoxNzAsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sbygkVkwsWzIsNjRdKSxvKCRWVixbMiw2XSx7MzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDM0OiRWcSwzNTokVnIsMzY6JFZzLDM3OiRWdCwzODokVnUsMzk6JFZ2LDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVlYsWzIsN10sezMwOiRWbSwzMTokVm4sMzI6JFZvLDMzOiRWcCwzNDokVnEsMzU6JFZyLDM2OiRWcywzNzokVnQsMzg6JFZ1LDM5OiRWdiw0MDokVncsNDE6JFZ4LDQyOiRWeSw0MzokVnosNDQ6JFZBLDQ1OiRWQn0pLHsxMjpbMSwxNzFdfSx7NTpbMSwxNzNdLDE3OlsxLDE3Ml0sMzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDM0OiRWcSwzNTokVnIsMzY6JFZzLDM3OiRWdCwzODokVnUsMzk6JFZ2LDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSx7MzozMCw0OjM5LDU6WzEsMTc1XSw4OiRWMSw5OjUsMTA6MTMsMTM6MTc0LDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjk6MTAsNDE6JFY0LDUxOjgsNTI6JFY1LDUzOiRWNiw1NDokVjcsNTU6JFY4LDU2OjYsNTc6Nyw1ODokVjksNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LG8oWzUsMTYsMTcsMTksMjcsMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDgsNTgsNTksNjQsODEsOTEsOTRdLFsyLDczXSx7NDY6NzIsODokVkd9KSx7NTk6WzEsMTc2XX0sbygkVkMsWzIsMTAyXSksezEwOjE3OCwxNjokVjIsNTY6MTc5LDU4OiRWSCw2NTokVmMsNjg6MTc3LDc2OjM3LDc3OjM4LDc4OiRWaH0sezU4OlsxLDE4MF19LHsxNzokVlN9LHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjE4MSwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7NTpbMSwxODJdfSx7NTpbMiw2Nl0sMTk6WzEsMTgzXX0sezM6MzAsNDozOSw4OiRWMSw5OjUsMTA6MTMsMTM6MTg0LDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjk6MTAsNDE6JFY0LDUxOjgsNTI6JFY1LDUzOiRWNiw1NDokVjcsNTU6JFY4LDU2OjYsNTc6Nyw1ODokVjksNjA6MTIsNjE6MTQsNjI6JFZhLDYzOiRWYiw2NTokVmMsNjY6MzIsNjg6MjksNjk6JFZkLDcwOiRWZSw3MTokVmYsNzI6JFZnLDczOjI4LDc2OjM3LDc3OjM4LDc4OiRWaCw4MzokVmksODQ6JFZqLDg1OiRWayw4OTokVmx9LHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjE4NSwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoxODYsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezU5OlsxLDE4N119LG8oJFZVLFsyLDcwXSksezM6MzAsNDozOSw3OjE4OCw4OiRWMSw5OjUsMTA6MTMsMTM6OTgsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezE2OlsxLDE5MV0sOTE6WzEsMTg5XSw5NDpbMSwxOTBdfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzo0LDE2OiRWMiwxODoyNiwyMDo0MCwyMTokVjMsMjQ6MzUsMjc6WzEsMTkyXSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sbygkVk8sWzIsODhdKSxvKCRWQyxbMiwyXSksezE1OjE5MywxNjpbMSwxOTRdLDE4OjE5NSwyMDo0MCwyMTokVjMsMjQ6MzUsODM6JFZpLDg0OiRWan0sbygkVkMsWzIsM10pLHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjE5NiwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoxOTcsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sbygkVk8sWzIsMTRdKSxvKCRWUSxbMiwxN10pLHszOjMwLDQ6MzksODokVjEsOTo1LDEwOjEzLDEzOjE5OCwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSxvKCRWUSxbMiwxOV0pLG8oJFZVLFsyLDcyXSksezc4OlsyLDkwXX0sbygkVlIsWzIsOTZdKSxvKFsxOSw1OSw4MV0sWzIsOTddLHszMDokVm0sMzE6JFZuLDMyOiRWbywzMzokVnAsMzQ6JFZxLDM1OiRWciwzNjokVnMsMzc6JFZ0LDM4OiRWdSwzOTokVnYsNDA6JFZ3LDQxOiRWeCw0MjokVnksNDM6JFZ6LDQ0OiRWQSw0NTokVkJ9KSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoxOTksMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sezM6MzAsNDozOSw1OlsxLDIwMV0sODokVjEsOTo1LDEwOjEzLDEzOjIwMCwxNjokVjIsMTg6MjYsMjA6NDAsMjE6JFYzLDI0OjM1LDI5OjEwLDQxOiRWNCw1MTo4LDUyOiRWNSw1MzokVjYsNTQ6JFY3LDU1OiRWOCw1Njo2LDU3OjcsNTg6JFY5LDYwOjEyLDYxOjE0LDYyOiRWYSw2MzokVmIsNjU6JFZjLDY2OjMyLDY4OjI5LDY5OiRWZCw3MDokVmUsNzE6JFZmLDcyOiRWZyw3MzoyOCw3NjozNyw3NzozOCw3ODokVmgsODM6JFZpLDg0OiRWaiw4NTokVmssODk6JFZsfSxvKCRWTCxbMiw0MF0pLHs1OlsxLDIwMl0sMzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDM0OiRWcSwzNTokVnIsMzY6JFZzLDM3OiRWdCwzODokVnUsMzk6JFZ2LDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSxvKCRWTCxbMiwzOV0pLG8oJFZVLFsyLDc1XSksbygkVlcsWzIsMTA2XSksbygkVlcsWzIsMTA3XSx7NDY6NzIsODokVkcsNjQ6JFZGfSksbygkVlcsWzIsMTA4XSksezM6MzAsNDozOSw3OjIwMyw4OiRWMSw5OjUsMTA6MTMsMTM6OTgsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sbygkVlYsWzIsNDVdLHszMDokVm0sMzE6JFZuLDMyOiRWbywzMzokVnAsMzQ6JFZxLDM1OiRWciwzNjokVnMsMzc6JFZ0LDM4OiRWdSwzOTokVnYsNDA6JFZ3LDQxOiRWeCw0MjokVnksNDM6JFZ6LDQ0OiRWQSw0NTokVkJ9KSx7MTI6WzIsNDRdfSx7MTY6JFZZLDUwOjIwNH0sbygkVlYsWzIsNDZdLHszMDokVm0sMzE6JFZuLDMyOiRWbywzMzokVnAsMzQ6JFZxLDM1OiRWciwzNjokVnMsMzc6JFZ0LDM4OiRWdSwzOTokVnYsNDA6JFZ3LDQxOiRWeCw0MjokVnksNDM6JFZ6LDQ0OiRWQSw0NTokVkJ9KSxvKCRWVixbMiw0N10sezMwOiRWbSwzMTokVm4sMzI6JFZvLDMzOiRWcCwzNDokVnEsMzU6JFZyLDM2OiRWcywzNzokVnQsMzg6JFZ1LDM5OiRWdiw0MDokVncsNDE6JFZ4LDQyOiRWeSw0MzokVnosNDQ6JFZBLDQ1OiRWQn0pLG8oJFZWLFsyLDQ4XSx7MzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDM0OiRWcSwzNTokVnIsMzY6JFZzLDM3OiRWdCwzODokVnUsMzk6JFZ2LDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksbygkVlUsWzIsNzFdKSxvKCRWWixbMiw2Ml0pLG8oJFY3MSxbMiwxMTRdLHs5MjoyMDV9KSxvKCRWQyxbMiwxMTFdKSx7MTI6WzEsMjA2XX0sbygkVk8sWzIsODddKSxvKCRWJCxbMiwxMl0pLHsxNzokVjAxfSx7MTc6JFYxMX0sbygkViQsWzIsOV0sezMwOiRWbSwzMTokVm4sMzI6JFZvLDMzOiRWcCwzNDokVnEsMzU6JFZyLDM2OiRWcywzNzokVnQsMzg6JFZ1LDM5OiRWdiw0MDokVncsNDE6JFZ4LDQyOiRWeSw0MzokVnosNDQ6JFZBLDQ1OiRWQn0pLG8oJFYkLFsyLDEwXSx7MzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDM0OiRWcSwzNTokVnIsMzY6JFZzLDM3OiRWdCwzODokVnUsMzk6JFZ2LDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSksezI3OlsxLDIwN10sMzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDM0OiRWcSwzNTokVnIsMzY6JFZzLDM3OiRWdCwzODokVnUsMzk6JFZ2LDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCfSxvKCRWQyxbMiw4XSksezU6WzEsMjA4XSwzMDokVm0sMzE6JFZuLDMyOiRWbywzMzokVnAsMzQ6JFZxLDM1OiRWciwzNjokVnMsMzc6JFZ0LDM4OiRWdSwzOTokVnYsNDA6JFZ3LDQxOiRWeCw0MjokVnksNDM6JFZ6LDQ0OiRWQSw0NTokVkJ9LG8oJFZMLFsyLDM4XSksbygkVkwsWzIsMzddKSx7NTk6WzEsMjA5XX0sezU6WzIsNjddfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoyMTEsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbCw5MzpbMSwyMTBdfSx7MzozMCw0OjM5LDg6JFYxLDk6NSwxMDoxMywxMzoyMTIsMTY6JFYyLDE4OjI2LDIwOjQwLDIxOiRWMywyNDozNSwyOToxMCw0MTokVjQsNTE6OCw1MjokVjUsNTM6JFY2LDU0OiRWNyw1NTokVjgsNTY6Niw1Nzo3LDU4OiRWOSw2MDoxMiw2MToxNCw2MjokVmEsNjM6JFZiLDY1OiRWYyw2NjozMiw2ODoyOSw2OTokVmQsNzA6JFZlLDcxOiRWZiw3MjokVmcsNzM6MjgsNzY6MzcsNzc6MzgsNzg6JFZoLDgzOiRWaSw4NDokVmosODU6JFZrLDg5OiRWbH0sbygkVlEsWzIsMThdKSxvKCRWTCxbMiwzNl0pLG8oJFZDLFsyLDEwOV0pLHsxMDoyMTMsMTY6JFYyfSx7MzA6JFZtLDMxOiRWbiwzMjokVm8sMzM6JFZwLDM0OiRWcSwzNTokVnIsMzY6JFZzLDM3OiRWdCwzODokVnUsMzk6JFZ2LDQwOiRWdyw0MTokVngsNDI6JFZ5LDQzOiRWeiw0NDokVkEsNDU6JFZCLDQ4OlsxLDIxNF19LG8oJFZfLFsyLDExM10sezMwOiRWbSwzMTokVm4sMzI6JFZvLDMzOiRWcCwzNDokVnEsMzU6JFZyLDM2OiRWcywzNzokVnQsMzg6JFZ1LDM5OiRWdiw0MDokVncsNDE6JFZ4LDQyOiRWeSw0MzokVnosNDQ6JFZBLDQ1OiRWQn0pLHs4OiRWRyw0Njo3Miw2NDokVkYsOTE6WzEsMjE1XX0sbygkVjcxLFsyLDExNV0pLG8oJFZDLFsyLDExMF0pXSxcbmRlZmF1bHRBY3Rpb25zOiB7MzpbMiw4Nl0sNjY6WzIsOTNdLDkwOlsyLDQzXSw5NzpbMiw3N10sMTI5OlsyLDkxXSwxMzA6WzIsOTJdLDEzMjpbMiw5NF0sMTY4OlsyLDkwXSwxODI6WzIsNDRdLDIwNDpbMiw2N119LFxucGFyc2VFcnJvcjogZnVuY3Rpb24gcGFyc2VFcnJvciAoc3RyLCBoYXNoKSB7XG4gICAgaWYgKGhhc2gucmVjb3ZlcmFibGUpIHtcbiAgICAgICAgdGhpcy50cmFjZShzdHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihzdHIpO1xuICAgICAgICBlcnJvci5oYXNoID0gaGFzaDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufSxcbnBhcnNlOiBmdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICAgIHZhciBzZWxmID0gdGhpcywgc3RhY2sgPSBbMF0sIHRzdGFjayA9IFtdLCB2c3RhY2sgPSBbbnVsbF0sIGxzdGFjayA9IFtdLCB0YWJsZSA9IHRoaXMudGFibGUsIHl5dGV4dCA9ICcnLCB5eWxpbmVubyA9IDAsIHl5bGVuZyA9IDAsIHJlY292ZXJpbmcgPSAwLCBURVJST1IgPSAyLCBFT0YgPSAxO1xuICAgIHZhciBhcmdzID0gbHN0YWNrLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICB2YXIgbGV4ZXIgPSBPYmplY3QuY3JlYXRlKHRoaXMubGV4ZXIpO1xuICAgIHZhciBzaGFyZWRTdGF0ZSA9IHsgeXk6IHt9IH07XG4gICAgZm9yICh2YXIgayBpbiB0aGlzLnl5KSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy55eSwgaykpIHtcbiAgICAgICAgICAgIHNoYXJlZFN0YXRlLnl5W2tdID0gdGhpcy55eVtrXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXhlci5zZXRJbnB1dChpbnB1dCwgc2hhcmVkU3RhdGUueXkpO1xuICAgIHNoYXJlZFN0YXRlLnl5LmxleGVyID0gbGV4ZXI7XG4gICAgc2hhcmVkU3RhdGUueXkucGFyc2VyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGxleGVyLnl5bGxvYyA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsZXhlci55eWxsb2MgPSB7fTtcbiAgICB9XG4gICAgdmFyIHl5bG9jID0gbGV4ZXIueXlsbG9jO1xuICAgIGxzdGFjay5wdXNoKHl5bG9jKTtcbiAgICB2YXIgcmFuZ2VzID0gbGV4ZXIub3B0aW9ucyAmJiBsZXhlci5vcHRpb25zLnJhbmdlcztcbiAgICBpZiAodHlwZW9mIHNoYXJlZFN0YXRlLnl5LnBhcnNlRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gc2hhcmVkU3RhdGUueXkucGFyc2VFcnJvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhcnNlRXJyb3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykucGFyc2VFcnJvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gcG9wU3RhY2sobikge1xuICAgICAgICBzdGFjay5sZW5ndGggPSBzdGFjay5sZW5ndGggLSAyICogbjtcbiAgICAgICAgdnN0YWNrLmxlbmd0aCA9IHZzdGFjay5sZW5ndGggLSBuO1xuICAgICAgICBsc3RhY2subGVuZ3RoID0gbHN0YWNrLmxlbmd0aCAtIG47XG4gICAgfVxuICAgIF90b2tlbl9zdGFjazpcbiAgICAgICAgdmFyIGxleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbjtcbiAgICAgICAgICAgIHRva2VuID0gbGV4ZXIubGV4KCkgfHwgRU9GO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IHNlbGYuc3ltYm9sc19bdG9rZW5dIHx8IHRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9O1xuICAgIHZhciBzeW1ib2wsIHByZUVycm9yU3ltYm9sLCBzdGF0ZSwgYWN0aW9uLCBhLCByLCB5eXZhbCA9IHt9LCBwLCBsZW4sIG5ld1N0YXRlLCBleHBlY3RlZDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodGhpcy5kZWZhdWx0QWN0aW9uc1tzdGF0ZV0pIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN5bWJvbCA9PT0gbnVsbCB8fCB0eXBlb2Ygc3ltYm9sID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb24gPSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF07XG4gICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICd1bmRlZmluZWQnIHx8ICFhY3Rpb24ubGVuZ3RoIHx8ICFhY3Rpb25bMF0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyU3RyID0gJyc7XG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHAgaW4gdGFibGVbc3RhdGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRlcm1pbmFsc19bcF0gJiYgcCA+IFRFUlJPUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQucHVzaCgnXFwnJyArIHRoaXMudGVybWluYWxzX1twXSArICdcXCcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGV4ZXIuc2hvd1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGVyclN0ciA9ICdQYXJzZSBlcnJvciBvbiBsaW5lICcgKyAoeXlsaW5lbm8gKyAxKSArICc6XFxuJyArIGxleGVyLnNob3dQb3NpdGlvbigpICsgJ1xcbkV4cGVjdGluZyAnICsgZXhwZWN0ZWQuam9pbignLCAnKSArICcsIGdvdCBcXCcnICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyAnXFwnJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSAnUGFyc2UgZXJyb3Igb24gbGluZSAnICsgKHl5bGluZW5vICsgMSkgKyAnOiBVbmV4cGVjdGVkICcgKyAoc3ltYm9sID09IEVPRiA/ICdlbmQgb2YgaW5wdXQnIDogJ1xcJycgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArICdcXCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZUVycm9yKGVyclN0ciwge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsZXhlci5tYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogbGV4ZXIueXlsaW5lbm8sXG4gICAgICAgICAgICAgICAgICAgIGxvYzogeXlsb2MsXG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uWzBdIGluc3RhbmNlb2YgQXJyYXkgJiYgYWN0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGFyc2UgRXJyb3I6IG11bHRpcGxlIGFjdGlvbnMgcG9zc2libGUgYXQgc3RhdGU6ICcgKyBzdGF0ZSArICcsIHRva2VuOiAnICsgc3ltYm9sKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGFjdGlvblswXSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XG4gICAgICAgICAgICB2c3RhY2sucHVzaChsZXhlci55eXRleHQpO1xuICAgICAgICAgICAgbHN0YWNrLnB1c2gobGV4ZXIueXlsbG9jKTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goYWN0aW9uWzFdKTtcbiAgICAgICAgICAgIHN5bWJvbCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIXByZUVycm9yU3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgeXlsZW5nID0gbGV4ZXIueXlsZW5nO1xuICAgICAgICAgICAgICAgIHl5dGV4dCA9IGxleGVyLnl5dGV4dDtcbiAgICAgICAgICAgICAgICB5eWxpbmVubyA9IGxleGVyLnl5bGluZW5vO1xuICAgICAgICAgICAgICAgIHl5bG9jID0gbGV4ZXIueXlsbG9jO1xuICAgICAgICAgICAgICAgIGlmIChyZWNvdmVyaW5nID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZWNvdmVyaW5nLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBwcmVFcnJvclN5bWJvbDtcbiAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgbGVuID0gdGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVsxXTtcbiAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aCAtIGxlbl07XG4gICAgICAgICAgICB5eXZhbC5fJCA9IHtcbiAgICAgICAgICAgICAgICBmaXJzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2xpbmUsXG4gICAgICAgICAgICAgICAgbGFzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfbGluZSxcbiAgICAgICAgICAgICAgICBmaXJzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfY29sdW1uLFxuICAgICAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfY29sdW1uXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHJhbmdlcykge1xuICAgICAgICAgICAgICAgIHl5dmFsLl8kLnJhbmdlID0gW1xuICAgICAgICAgICAgICAgICAgICBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLnJhbmdlWzBdLFxuICAgICAgICAgICAgICAgICAgICBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLnJhbmdlWzFdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIgPSB0aGlzLnBlcmZvcm1BY3Rpb24uYXBwbHkoeXl2YWwsIFtcbiAgICAgICAgICAgICAgICB5eXRleHQsXG4gICAgICAgICAgICAgICAgeXlsZW5nLFxuICAgICAgICAgICAgICAgIHl5bGluZW5vLFxuICAgICAgICAgICAgICAgIHNoYXJlZFN0YXRlLnl5LFxuICAgICAgICAgICAgICAgIGFjdGlvblsxXSxcbiAgICAgICAgICAgICAgICB2c3RhY2ssXG4gICAgICAgICAgICAgICAgbHN0YWNrXG4gICAgICAgICAgICBdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgc3RhY2sgPSBzdGFjay5zbGljZSgwLCAtMSAqIGxlbiAqIDIpO1xuICAgICAgICAgICAgICAgIHZzdGFjayA9IHZzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7XG4gICAgICAgICAgICAgICAgbHN0YWNrID0gbHN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVswXSk7XG4gICAgICAgICAgICB2c3RhY2sucHVzaCh5eXZhbC4kKTtcbiAgICAgICAgICAgIGxzdGFjay5wdXNoKHl5dmFsLl8kKTtcbiAgICAgICAgICAgIG5ld1N0YXRlID0gdGFibGVbc3RhY2tbc3RhY2subGVuZ3RoIC0gMl1dW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDFdXTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gobmV3U3RhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufX07XG4vKiBnZW5lcmF0ZWQgYnkgamlzb24tbGV4IDAuMy40ICovXG52YXIgbGV4ZXIgPSAoZnVuY3Rpb24oKXtcbnZhciBsZXhlciA9ICh7XG5cbkVPRjoxLFxuXG5wYXJzZUVycm9yOmZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG4gICAgICAgIGlmICh0aGlzLnl5LnBhcnNlcikge1xuICAgICAgICAgICAgdGhpcy55eS5wYXJzZXIucGFyc2VFcnJvcihzdHIsIGhhc2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4vLyByZXNldHMgdGhlIGxleGVyLCBzZXRzIG5ldyBpbnB1dFxuc2V0SW5wdXQ6ZnVuY3Rpb24gKGlucHV0LCB5eSkge1xuICAgICAgICB0aGlzLnl5ID0geXkgfHwgdGhpcy55eSB8fCB7fTtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5fbW9yZSA9IHRoaXMuX2JhY2t0cmFjayA9IHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnl5bGluZW5vID0gdGhpcy55eWxlbmcgPSAwO1xuICAgICAgICB0aGlzLnl5dGV4dCA9IHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2ggPSAnJztcbiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjayA9IFsnSU5JVElBTCddO1xuICAgICAgICB0aGlzLnl5bGxvYyA9IHtcbiAgICAgICAgICAgIGZpcnN0X2xpbmU6IDEsXG4gICAgICAgICAgICBmaXJzdF9jb2x1bW46IDAsXG4gICAgICAgICAgICBsYXN0X2xpbmU6IDEsXG4gICAgICAgICAgICBsYXN0X2NvbHVtbjogMFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbMCwwXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbi8vIGNvbnN1bWVzIGFuZCByZXR1cm5zIG9uZSBjaGFyIGZyb20gdGhlIGlucHV0XG5pbnB1dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjaCA9IHRoaXMuX2lucHV0WzBdO1xuICAgICAgICB0aGlzLnl5dGV4dCArPSBjaDtcbiAgICAgICAgdGhpcy55eWxlbmcrKztcbiAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgdGhpcy5tYXRjaCArPSBjaDtcbiAgICAgICAgdGhpcy5tYXRjaGVkICs9IGNoO1xuICAgICAgICB2YXIgbGluZXMgPSBjaC5tYXRjaCgvKD86XFxyXFxuP3xcXG4pLiovZyk7XG4gICAgICAgIGlmIChsaW5lcykge1xuICAgICAgICAgICAgdGhpcy55eWxpbmVubysrO1xuICAgICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9saW5lKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbisrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZVsxXSsrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZSgxKTtcbiAgICAgICAgcmV0dXJuIGNoO1xuICAgIH0sXG5cbi8vIHVuc2hpZnRzIG9uZSBjaGFyIChvciBhIHN0cmluZykgaW50byB0aGUgaW5wdXRcbnVucHV0OmZ1bmN0aW9uIChjaCkge1xuICAgICAgICB2YXIgbGVuID0gY2gubGVuZ3RoO1xuICAgICAgICB2YXIgbGluZXMgPSBjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gY2ggKyB0aGlzLl9pbnB1dDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLnl5dGV4dC5zdWJzdHIoMCwgdGhpcy55eXRleHQubGVuZ3RoIC0gbGVuKTtcbiAgICAgICAgLy90aGlzLnl5bGVuZyAtPSBsZW47XG4gICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcbiAgICAgICAgdmFyIG9sZExpbmVzID0gdGhpcy5tYXRjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuICAgICAgICB0aGlzLm1hdGNoID0gdGhpcy5tYXRjaC5zdWJzdHIoMCwgdGhpcy5tYXRjaC5sZW5ndGggLSAxKTtcbiAgICAgICAgdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gMSk7XG5cbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHRoaXMueXlsaW5lbm8gLT0gbGluZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IHRoaXMueXlsbG9jLnJhbmdlO1xuXG4gICAgICAgIHRoaXMueXlsbG9jID0ge1xuICAgICAgICAgICAgZmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSxcbiAgICAgICAgICAgIGxhc3RfbGluZTogdGhpcy55eWxpbmVubyArIDEsXG4gICAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsaW5lcyA/XG4gICAgICAgICAgICAgICAgKGxpbmVzLmxlbmd0aCA9PT0gb2xkTGluZXMubGVuZ3RoID8gdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIDogMClcbiAgICAgICAgICAgICAgICAgKyBvbGRMaW5lc1tvbGRMaW5lcy5sZW5ndGggLSBsaW5lcy5sZW5ndGhdLmxlbmd0aCAtIGxpbmVzWzBdLmxlbmd0aCA6XG4gICAgICAgICAgICAgIHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbiAtIGxlblxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFtyWzBdLCByWzBdICsgdGhpcy55eWxlbmcgLSBsZW5dO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4vLyBXaGVuIGNhbGxlZCBmcm9tIGFjdGlvbiwgY2FjaGVzIG1hdGNoZWQgdGV4dCBhbmQgYXBwZW5kcyBpdCBvbiBuZXh0IGFjdGlvblxubW9yZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4vLyBXaGVuIGNhbGxlZCBmcm9tIGFjdGlvbiwgc2lnbmFscyB0aGUgbGV4ZXIgdGhhdCB0aGlzIHJ1bGUgZmFpbHMgdG8gbWF0Y2ggdGhlIGlucHV0LCBzbyB0aGUgbmV4dCBtYXRjaGluZyBydWxlIChyZWdleCkgc2hvdWxkIGJlIHRlc3RlZCBpbnN0ZWFkLlxucmVqZWN0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2JhY2t0cmFjayA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKCdMZXhpY2FsIGVycm9yIG9uIGxpbmUgJyArICh0aGlzLnl5bGluZW5vICsgMSkgKyAnLiBZb3UgY2FuIG9ubHkgaW52b2tlIHJlamVjdCgpIGluIHRoZSBsZXhlciB3aGVuIHRoZSBsZXhlciBpcyBvZiB0aGUgYmFja3RyYWNraW5nIHBlcnN1YXNpb24gKG9wdGlvbnMuYmFja3RyYWNrX2xleGVyID0gdHJ1ZSkuXFxuJyArIHRoaXMuc2hvd1Bvc2l0aW9uKCksIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICAgICAgICAgIHRva2VuOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMueXlsaW5lbm9cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuLy8gcmV0YWluIGZpcnN0IG4gY2hhcmFjdGVycyBvZiB0aGUgbWF0Y2hcbmxlc3M6ZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgdGhpcy51bnB1dCh0aGlzLm1hdGNoLnNsaWNlKG4pKTtcbiAgICB9LFxuXG4vLyBkaXNwbGF5cyBhbHJlYWR5IG1hdGNoZWQgaW5wdXQsIGkuZS4gZm9yIGVycm9yIG1lc3NhZ2VzXG5wYXN0SW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFzdCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIHRoaXMubWF0Y2gubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIChwYXN0Lmxlbmd0aCA+IDIwID8gJy4uLic6JycpICsgcGFzdC5zdWJzdHIoLTIwKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgfSxcblxuLy8gZGlzcGxheXMgdXBjb21pbmcgaW5wdXQsIGkuZS4gZm9yIGVycm9yIG1lc3NhZ2VzXG51cGNvbWluZ0lucHV0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm1hdGNoO1xuICAgICAgICBpZiAobmV4dC5sZW5ndGggPCAyMCkge1xuICAgICAgICAgICAgbmV4dCArPSB0aGlzLl9pbnB1dC5zdWJzdHIoMCwgMjAtbmV4dC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobmV4dC5zdWJzdHIoMCwyMCkgKyAobmV4dC5sZW5ndGggPiAyMCA/ICcuLi4nIDogJycpKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgfSxcblxuLy8gZGlzcGxheXMgdGhlIGNoYXJhY3RlciBwb3NpdGlvbiB3aGVyZSB0aGUgbGV4aW5nIGVycm9yIG9jY3VycmVkLCBpLmUuIGZvciBlcnJvciBtZXNzYWdlc1xuc2hvd1Bvc2l0aW9uOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZSA9IHRoaXMucGFzdElucHV0KCk7XG4gICAgICAgIHZhciBjID0gbmV3IEFycmF5KHByZS5sZW5ndGggKyAxKS5qb2luKFwiLVwiKTtcbiAgICAgICAgcmV0dXJuIHByZSArIHRoaXMudXBjb21pbmdJbnB1dCgpICsgXCJcXG5cIiArIGMgKyBcIl5cIjtcbiAgICB9LFxuXG4vLyB0ZXN0IHRoZSBsZXhlZCB0b2tlbjogcmV0dXJuIEZBTFNFIHdoZW4gbm90IGEgbWF0Y2gsIG90aGVyd2lzZSByZXR1cm4gdG9rZW5cbnRlc3RfbWF0Y2g6ZnVuY3Rpb24obWF0Y2gsIGluZGV4ZWRfcnVsZSkge1xuICAgICAgICB2YXIgdG9rZW4sXG4gICAgICAgICAgICBsaW5lcyxcbiAgICAgICAgICAgIGJhY2t1cDtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJhY2t0cmFja19sZXhlcikge1xuICAgICAgICAgICAgLy8gc2F2ZSBjb250ZXh0XG4gICAgICAgICAgICBiYWNrdXAgPSB7XG4gICAgICAgICAgICAgICAgeXlsaW5lbm86IHRoaXMueXlsaW5lbm8sXG4gICAgICAgICAgICAgICAgeXlsbG9jOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmZpcnN0X2xpbmUsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RfbGluZTogdGhpcy5sYXN0X2xpbmUsXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHl5dGV4dDogdGhpcy55eXRleHQsXG4gICAgICAgICAgICAgICAgbWF0Y2g6IHRoaXMubWF0Y2gsXG4gICAgICAgICAgICAgICAgbWF0Y2hlczogdGhpcy5tYXRjaGVzLFxuICAgICAgICAgICAgICAgIG1hdGNoZWQ6IHRoaXMubWF0Y2hlZCxcbiAgICAgICAgICAgICAgICB5eWxlbmc6IHRoaXMueXlsZW5nLFxuICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgX21vcmU6IHRoaXMuX21vcmUsXG4gICAgICAgICAgICAgICAgX2lucHV0OiB0aGlzLl9pbnB1dCxcbiAgICAgICAgICAgICAgICB5eTogdGhpcy55eSxcbiAgICAgICAgICAgICAgICBjb25kaXRpb25TdGFjazogdGhpcy5jb25kaXRpb25TdGFjay5zbGljZSgwKSxcbiAgICAgICAgICAgICAgICBkb25lOiB0aGlzLmRvbmVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgICAgIGJhY2t1cC55eWxsb2MucmFuZ2UgPSB0aGlzLnl5bGxvYy5yYW5nZS5zbGljZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmVzID0gbWF0Y2hbMF0ubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICBpZiAobGluZXMpIHtcbiAgICAgICAgICAgIHRoaXMueXlsaW5lbm8gKz0gbGluZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueXlsbG9jID0ge1xuICAgICAgICAgICAgZmlyc3RfbGluZTogdGhpcy55eWxsb2MubGFzdF9saW5lLFxuICAgICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vICsgMSxcbiAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sXG4gICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgP1xuICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdLmxlbmd0aCAtIGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdLm1hdGNoKC9cXHI/XFxuPy8pWzBdLmxlbmd0aCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9jb2x1bW4gKyBtYXRjaFswXS5sZW5ndGhcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy55eXRleHQgKz0gbWF0Y2hbMF07XG4gICAgICAgIHRoaXMubWF0Y2ggKz0gbWF0Y2hbMF07XG4gICAgICAgIHRoaXMubWF0Y2hlcyA9IG1hdGNoO1xuICAgICAgICB0aGlzLnl5bGVuZyA9IHRoaXMueXl0ZXh0Lmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gW3RoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArPSB0aGlzLnl5bGVuZ107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbW9yZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9iYWNrdHJhY2sgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZShtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICB0aGlzLm1hdGNoZWQgKz0gbWF0Y2hbMF07XG4gICAgICAgIHRva2VuID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwodGhpcywgdGhpcy55eSwgdGhpcywgaW5kZXhlZF9ydWxlLCB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV0pO1xuICAgICAgICBpZiAodGhpcy5kb25lICYmIHRoaXMuX2lucHV0KSB7XG4gICAgICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9iYWNrdHJhY2spIHtcbiAgICAgICAgICAgIC8vIHJlY292ZXIgY29udGV4dFxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBiYWNrdXApIHtcbiAgICAgICAgICAgICAgICB0aGlzW2tdID0gYmFja3VwW2tdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBydWxlIGFjdGlvbiBjYWxsZWQgcmVqZWN0KCkgaW1wbHlpbmcgdGhlIG5leHQgcnVsZSBzaG91bGQgYmUgdGVzdGVkIGluc3RlYWQuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbi8vIHJldHVybiBuZXh0IG1hdGNoIGluIGlucHV0XG5uZXh0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRU9GO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faW5wdXQpIHtcbiAgICAgICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9rZW4sXG4gICAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICAgIHRlbXBNYXRjaCxcbiAgICAgICAgICAgIGluZGV4O1xuICAgICAgICBpZiAoIXRoaXMuX21vcmUpIHtcbiAgICAgICAgICAgIHRoaXMueXl0ZXh0ID0gJyc7XG4gICAgICAgICAgICB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5fY3VycmVudFJ1bGVzKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRlbXBNYXRjaCA9IHRoaXMuX2lucHV0Lm1hdGNoKHRoaXMucnVsZXNbcnVsZXNbaV1dKTtcbiAgICAgICAgICAgIGlmICh0ZW1wTWF0Y2ggJiYgKCFtYXRjaCB8fCB0ZW1wTWF0Y2hbMF0ubGVuZ3RoID4gbWF0Y2hbMF0ubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoID0gdGVtcE1hdGNoO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJhY2t0cmFja19sZXhlcikge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMudGVzdF9tYXRjaCh0ZW1wTWF0Y2gsIHJ1bGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JhY2t0cmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBydWxlIGFjdGlvbiBjYWxsZWQgcmVqZWN0KCkgaW1wbHlpbmcgYSBydWxlIE1JU21hdGNoLlxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZTogdGhpcyBpcyBhIGxleGVyIHJ1bGUgd2hpY2ggY29uc3VtZXMgaW5wdXQgd2l0aG91dCBwcm9kdWNpbmcgYSB0b2tlbiAoZS5nLiB3aGl0ZXNwYWNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmZsZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgdG9rZW4gPSB0aGlzLnRlc3RfbWF0Y2gobWF0Y2gsIHJ1bGVzW2luZGV4XSk7XG4gICAgICAgICAgICBpZiAodG9rZW4gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZWxzZTogdGhpcyBpcyBhIGxleGVyIHJ1bGUgd2hpY2ggY29uc3VtZXMgaW5wdXQgd2l0aG91dCBwcm9kdWNpbmcgYSB0b2tlbiAoZS5nLiB3aGl0ZXNwYWNlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pbnB1dCA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRU9GO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VFcnJvcignTGV4aWNhbCBlcnJvciBvbiBsaW5lICcgKyAodGhpcy55eWxpbmVubyArIDEpICsgJy4gVW5yZWNvZ25pemVkIHRleHQuXFxuJyArIHRoaXMuc2hvd1Bvc2l0aW9uKCksIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICAgICAgICAgIHRva2VuOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMueXlsaW5lbm9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuLy8gcmV0dXJuIG5leHQgbWF0Y2ggdGhhdCBoYXMgYSB0b2tlblxubGV4OmZ1bmN0aW9uIGxleCAoKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5uZXh0KCk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxleCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuLy8gYWN0aXZhdGVzIGEgbmV3IGxleGVyIGNvbmRpdGlvbiBzdGF0ZSAocHVzaGVzIHRoZSBuZXcgbGV4ZXIgY29uZGl0aW9uIHN0YXRlIG9udG8gdGhlIGNvbmRpdGlvbiBzdGFjaylcbmJlZ2luOmZ1bmN0aW9uIGJlZ2luIChjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjay5wdXNoKGNvbmRpdGlvbik7XG4gICAgfSxcblxuLy8gcG9wIHRoZSBwcmV2aW91c2x5IGFjdGl2ZSBsZXhlciBjb25kaXRpb24gc3RhdGUgb2ZmIHRoZSBjb25kaXRpb24gc3RhY2tcbnBvcFN0YXRlOmZ1bmN0aW9uIHBvcFN0YXRlICgpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2sucG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1swXTtcbiAgICAgICAgfVxuICAgIH0sXG5cbi8vIHByb2R1Y2UgdGhlIGxleGVyIHJ1bGUgc2V0IHdoaWNoIGlzIGFjdGl2ZSBmb3IgdGhlIGN1cnJlbnRseSBhY3RpdmUgbGV4ZXIgY29uZGl0aW9uIHN0YXRlXG5fY3VycmVudFJ1bGVzOmZ1bmN0aW9uIF9jdXJyZW50UnVsZXMgKCkge1xuICAgICAgICBpZiAodGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggJiYgdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXV0ucnVsZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW1wiSU5JVElBTFwiXS5ydWxlcztcbiAgICAgICAgfVxuICAgIH0sXG5cbi8vIHJldHVybiB0aGUgY3VycmVudGx5IGFjdGl2ZSBsZXhlciBjb25kaXRpb24gc3RhdGU7IHdoZW4gYW4gaW5kZXggYXJndW1lbnQgaXMgcHJvdmlkZWQgaXQgcHJvZHVjZXMgdGhlIE4tdGggcHJldmlvdXMgY29uZGl0aW9uIHN0YXRlLCBpZiBhdmFpbGFibGVcbnRvcFN0YXRlOmZ1bmN0aW9uIHRvcFN0YXRlIChuKSB7XG4gICAgICAgIG4gPSB0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDEgLSBNYXRoLmFicyhuIHx8IDApO1xuICAgICAgICBpZiAobiA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1tuXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIklOSVRJQUxcIjtcbiAgICAgICAgfVxuICAgIH0sXG5cbi8vIGFsaWFzIGZvciBiZWdpbihjb25kaXRpb24pXG5wdXNoU3RhdGU6ZnVuY3Rpb24gcHVzaFN0YXRlIChjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5iZWdpbihjb25kaXRpb24pO1xuICAgIH0sXG5cbi8vIHJldHVybiB0aGUgbnVtYmVyIG9mIHN0YXRlcyBjdXJyZW50bHkgb24gdGhlIHN0YWNrXG5zdGF0ZVN0YWNrU2l6ZTpmdW5jdGlvbiBzdGF0ZVN0YWNrU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoO1xuICAgIH0sXG5vcHRpb25zOiB7XCJmbGV4XCI6dHJ1ZSxcImNhc2UtaW5zZW5zaXRpdmVcIjp0cnVlfSxcbnBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eSx5eV8sJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucyxZWV9TVEFSVCkge1xudmFyIFlZU1RBVEU9WVlfU1RBUlQ7XG5zd2l0Y2goJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucykge1xuY2FzZSAwOi8qIHNraXAgd2hpdGVzcGFjZSAqL1xuYnJlYWs7XG5jYXNlIDE6Lyogb25lIGxpbmUgY29tbWVudCAqL1xuYnJlYWs7XG5jYXNlIDI6LyogYmxvY2sgY29tbWVudCAqL1xuYnJlYWs7XG5jYXNlIDM6cmV0dXJuIDgxO1xuYnJlYWs7XG5jYXNlIDQ6cmV0dXJuIDE0O1xuYnJlYWs7XG5jYXNlIDU6cmV0dXJuIDEyO1xuYnJlYWs7XG5jYXNlIDY6cmV0dXJuIDkzO1xuYnJlYWs7XG5jYXNlIDc6cmV0dXJuIDk0O1xuYnJlYWs7XG5jYXNlIDg6cmV0dXJuICc8PSc7XG5icmVhaztcbmNhc2UgOTpyZXR1cm4gJz49JztcbmJyZWFrO1xuY2FzZSAxMDpyZXR1cm4gMzI7XG5icmVhaztcbmNhc2UgMTE6cmV0dXJuIDMzO1xuYnJlYWs7XG5jYXNlIDEyOnJldHVybiA4OTtcbmJyZWFrO1xuY2FzZSAxMzpyZXR1cm4gOTE7XG5icmVhaztcbmNhc2UgMTQ6cmV0dXJuIDc4O1xuYnJlYWs7XG5jYXNlIDE1OnJldHVybiAyNztcbmJyZWFrO1xuY2FzZSAxNjpyZXR1cm4gODtcbmJyZWFrO1xuY2FzZSAxNzpyZXR1cm4gNTtcbmJyZWFrO1xuY2FzZSAxODpyZXR1cm4gNTg7XG5icmVhaztcbmNhc2UgMTk6cmV0dXJuIDU5O1xuYnJlYWs7XG5jYXNlIDIwOnJldHVybiAxNztcbmJyZWFrO1xuY2FzZSAyMTpyZXR1cm4gNjQ7XG5icmVhaztcbmNhc2UgMjI6cmV0dXJuIDE5O1xuYnJlYWs7XG5jYXNlIDIzOnJldHVybiA0ODtcbmJyZWFrO1xuY2FzZSAyNDpyZXR1cm4gNDA7XG5icmVhaztcbmNhc2UgMjU6cmV0dXJuIDQxO1xuYnJlYWs7XG5jYXNlIDI2OnJldHVybiA0MjtcbmJyZWFrO1xuY2FzZSAyNzpyZXR1cm4gNDU7XG5icmVhaztcbmNhc2UgMjg6cmV0dXJuIDQ0O1xuYnJlYWs7XG5jYXNlIDI5OnJldHVybiA4NDtcbmJyZWFrO1xuY2FzZSAzMDpyZXR1cm4gODM7XG5icmVhaztcbmNhc2UgMzE6cmV0dXJuIDY1O1xuYnJlYWs7XG5jYXNlIDMyOnJldHVybiA4NTtcbmJyZWFrO1xuY2FzZSAzMzpyZXR1cm4gODg7XG5icmVhaztcbmNhc2UgMzQ6cmV0dXJuICdJTlRPJztcbmJyZWFrO1xuY2FzZSAzNTpyZXR1cm4gJ0FTJztcbmJyZWFrO1xuY2FzZSAzNjpyZXR1cm4gNTI7XG5icmVhaztcbmNhc2UgMzc6cmV0dXJuIDU1O1xuYnJlYWs7XG5jYXNlIDM4OnJldHVybiA1NDtcbmJyZWFrO1xuY2FzZSAzOTpyZXR1cm4gNTM7XG5icmVhaztcbmNhc2UgNDA6cmV0dXJuIDY5O1xuYnJlYWs7XG5jYXNlIDQxOnJldHVybiA3MDtcbmJyZWFrO1xuY2FzZSA0MjpyZXR1cm4gNjI7XG5icmVhaztcbmNhc2UgNDM6cmV0dXJuIDM0O1xuYnJlYWs7XG5jYXNlIDQ0OnJldHVybiAzNTtcbmJyZWFrO1xuY2FzZSA0NTpyZXR1cm4gMzc7XG5icmVhaztcbmNhc2UgNDY6cmV0dXJuIDM2O1xuYnJlYWs7XG5jYXNlIDQ3OnJldHVybiAzODtcbmJyZWFrO1xuY2FzZSA0ODpyZXR1cm4gMzk7XG5icmVhaztcbmNhc2UgNDk6cmV0dXJuIDMwO1xuYnJlYWs7XG5jYXNlIDUwOnJldHVybiAzMDtcbmJyZWFrO1xuY2FzZSA1MTpyZXR1cm4gMzE7XG5icmVhaztcbmNhc2UgNTI6cmV0dXJuIDMxO1xuYnJlYWs7XG5jYXNlIDUzOnJldHVybiA2MztcbmJyZWFrO1xuY2FzZSA1NDpyZXR1cm4gNzE7XG5icmVhaztcbmNhc2UgNTU6cmV0dXJuIDE2O1xuYnJlYWs7XG5jYXNlIDU2OnJldHVybiA3MjtcbmJyZWFrO1xuY2FzZSA1NzpyZXR1cm4gNDM7XG5icmVhaztcbmNhc2UgNTg6cmV0dXJuIDIxO1xuYnJlYWs7XG5jYXNlIDU5OnJldHVybiAyNjtcbmJyZWFrO1xuY2FzZSA2MDpyZXR1cm4gMjg7XG5icmVhaztcbmNhc2UgNjE6cmV0dXJuIDc1O1xuYnJlYWs7XG5jYXNlIDYyOmNvbnNvbGUubG9nKHl5Xy55eXRleHQpO1xuYnJlYWs7XG59XG59LFxucnVsZXM6IFsvXig/OlxccyspL2ksL14oPzpcXC9cXC8uKikvaSwvXig/OlxcL1xcKigufFxcbnxcXHIpKj9cXCpcXC8pL2ksL14oPzpcXC5cXC5cXC4pL2ksL14oPzpcXCs9KS9pLC9eKD86PSkvaSwvXig/OjxcXC8pL2ksL14oPzpcXC8+KS9pLC9eKD86PD0pL2ksL14oPzo+PSkvaSwvXig/OjwmKS9pLC9eKD86Jj4pL2ksL14oPzo8KS9pLC9eKD86PikvaSwvXig/OlxceykvaSwvXig/OlxcfSkvaSwvXig/OlxcWykvaSwvXig/OlxcXSkvaSwvXig/OlxcKCkvaSwvXig/OlxcKSkvaSwvXig/OjopL2ksL14oPzpcXC4pL2ksL14oPzosKS9pLC9eKD86OykvaSwvXig/OlxcKykvaSwvXig/Oi0pL2ksL14oPzpcXCopL2ksL14oPzolKS9pLC9eKD86XFxeKS9pLC9eKD86JyhcXFxcJ3xbXlxcJ10pKicpL2ksL14oPzpcIihcXFxcXCJ8W15cXFwiXSkqXCIpL2ksL14oPzppbXBvcnQpL2ksL14oPzp1c2UpL2ksL14oPzpvbmx5KS9pLC9eKD86aW50bykvaSwvXig/OmFzKS9pLC9eKD86bGV0KS9pLC9eKD86cHVibGljKS9pLC9eKD86cHJvdGVjdGVkKS9pLC9eKD86cHJpdmF0ZSkvaSwvXig/OnRydWUpL2ksL14oPzpmYWxzZSkvaSwvXig/OnJldHVybikvaSwvXig/OmlzKS9pLC9eKD86aXNudCkvaSwvXig/Omx0KS9pLC9eKD86Z3QpL2ksL14oPzpndGVxKS9pLC9eKD86bHRlcSkvaSwvXig/OiYmKS9pLC9eKD86YW5kKS9pLC9eKD86XFx8XFx8KS9pLC9eKD86b3IpL2ksL14oPzohKS9pLC9eKD86WzAtOV0rKD86XFwuWzAtOV0rKT8pL2ksL14oPzpbYS16QS1aXyRdW2EtekEtWjAtOV9cXC0kXSopL2ksL14oPzpcXC8oPzpcXFxcXFwvfFteXFwvXSkrXFwvW2EtekEtWl0qKS9pLC9eKD86XFwvKS9pLC9eKD86YCkvaSwvXig/OlxcJFxceykvaSwvXig/OihcXFxcYHxbXlxcYF0pKS9pLC9eKD86JCkvaSwvXig/Oi4pL2ldLFxuY29uZGl0aW9uczoge1wiSU5JVElBTFwiOntcInJ1bGVzXCI6WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNTksNjAsNjEsNjJdLFwiaW5jbHVzaXZlXCI6dHJ1ZX19XG59KTtcbnJldHVybiBsZXhlcjtcbn0pKCk7XG5wYXJzZXIubGV4ZXIgPSBsZXhlcjtcbmZ1bmN0aW9uIFBhcnNlciAoKSB7XG4gIHRoaXMueXkgPSB7fTtcbn1cblBhcnNlci5wcm90b3R5cGUgPSBwYXJzZXI7cGFyc2VyLlBhcnNlciA9IFBhcnNlcjtcbnJldHVybiBuZXcgUGFyc2VyO1xufSkoKTtcblxuXG5pZiAodHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuZXhwb3J0cy5wYXJzZXIgPSBwYXJzZXI7XG5leHBvcnRzLlBhcnNlciA9IHBhcnNlci5QYXJzZXI7XG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFyc2VyLnBhcnNlLmFwcGx5KHBhcnNlciwgYXJndW1lbnRzKTsgfTtcbmV4cG9ydHMubWFpbiA9IGZ1bmN0aW9uIGNvbW1vbmpzTWFpbiAoYXJncykge1xuICAgIGlmICghYXJnc1sxXSkge1xuICAgICAgICBjb25zb2xlLmxvZygnVXNhZ2U6ICcrYXJnc1swXSsnIEZJTEUnKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbiAgICB2YXIgc291cmNlID0gcmVxdWlyZSgnZnMnKS5yZWFkRmlsZVN5bmMocmVxdWlyZSgncGF0aCcpLm5vcm1hbGl6ZShhcmdzWzFdKSwgXCJ1dGY4XCIpO1xuICAgIHJldHVybiBleHBvcnRzLnBhcnNlci5wYXJzZShzb3VyY2UpO1xufTtcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiByZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBleHBvcnRzLm1haW4ocHJvY2Vzcy5hcmd2LnNsaWNlKDEpKTtcbn1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IFNDT1BFX0RJUiA9PiAnIyEvdXNyL2Jpbi9lbnYgbm9kZVxcblwidXNlIHN0cmljdFwiOycgKyBgXG5cdGdsb2JhbC5fX3Njb3BlZGlyID0gX19kaXJuYW1lO1xuXHRyZXF1aXJlKFwic291cmNlLW1hcC1zdXBwb3J0XCIpLmluc3RhbGwoKTtcblx0aWYgKHR5cGVvZiBnbG9iYWwuc2NvcGUgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBcInNjb3BlXCIsIHtcblx0XHRcdHZhbHVlOiByZXF1aXJlKFwiJHtTQ09QRV9ESVJ9L3Njb3BlUnVudGltZS5qc1wiKVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwsIFwiU2NvcGVBcGlcIiwge1xuXHRcdFx0dmFsdWU6IHJlcXVpcmUoXCIke1NDT1BFX0RJUn0vc2NvcGVSdW50aW1lQXBpLmpzXCIpKHNjb3BlKVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwsIFwiWFJlZ0V4cFwiLCB7XG5cdFx0XHR2YWx1ZTogcmVxdWlyZShcInhyZWdleHBcIilcblx0XHR9KTtcblx0fVxuXHRtb2R1bGUuZXhwb3J0cz1gLnJlcGxhY2UoLygoPzwhbmV3fGxldHx2YXJ8Y29uc3R8dHlwZW9mKVxccykrL2csXCJcIik7IiwiaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW5kb3dbXCJnbG9iYWxcIl0gPSB3aW5kb3c7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzVHlwZShpZCwgdHlwZT1cIlwiKSB7XG4gIGlmICh0eXBlb2YgaWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gc3BvdEVycm9yIChpKSB7XG4gICAgbGV0IGRhc2hlcyA9IFwiXCI7XG4gICAgbGV0IHN0ciA9ICdoYXNUeXBlKC4uLCBcIic7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgZW5kID0gdHlwZS5sZW5ndGg7XG4gICAgbGV0IGNoYXJJbmRleCA9IGkgKyAxMjtcbiAgICBpZiAoaSA+IDEwKSB7XG4gICAgICBzdGFydCA9IGkgLSAxMDtcbiAgICAgIHN0ciArPSBcIi4uXCI7XG4gICAgICBjaGFySW5kZXggKz0gMiAtIHN0YXJ0O1xuICAgIH1cbiAgICBpZiAoKGkgKyA1KSA8IHR5cGUubGVuZ3RoKSB7XG4gICAgICBlbmQgPSBpICsgNTtcbiAgICAgIHN0ciArPSB0eXBlLnN1YnN0cihzdGFydCwgZW5kKSArICcuLlwiKSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSB0eXBlLnN1YnN0cihzdGFydCwgZW5kKSArICdcIiknO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJJbmRleDsgaSArPSAxKSB7XG4gICAgICBkYXNoZXMgKz0gXCItXCI7XG4gICAgfVxuICAgIGRhc2hlcyArPSBcIl5cIjtcbiAgICAgIHJldHVybiBgXG4gICAgICAke3N0cn1cbiAgICAgICR7ZGFzaGVzfWA7XG4gIH1cbiAgbGV0IHR5cGVzID0gW107XG4gIHR5cGVzLnBhcmVudCA9IG51bGw7XG4gIGxldCB3b3JkID0gXCJcIjtcbiAgbGV0IHNwYWNlID0gL1xccy87XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGxldCBjaGFyID0gdHlwZVtpXTtcbiAgICBpZihzcGFjZS50ZXN0KGNoYXIpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgc3dpdGNoIChjaGFyKSB7XG4gICAgICBjYXNlIFwiJlwiOlxuICAgICAgICB0eXBlcy5wdXNoKHdvcmQpO1xuICAgICAgICB0eXBlcy5wdXNoKFwiYW5kXCIpO1xuICAgICAgICB3b3JkID0gXCJcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwifFwiOlxuICAgICAgICB0eXBlcy5wdXNoKHdvcmQpO1xuICAgICAgICB0eXBlcy5wdXNoKFwib3JcIik7XG4gICAgICAgIHdvcmQgPSBcIlwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCIoXCI6XG4gICAgICAgIGxldCBjaGlsZCA9IFtdO1xuICAgICAgICBpZiAod29yZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJXb3JkIGJlZm9yZSBzdGFydGluZyBQYXJlbiBhdCBjaGFyOlwiLCBpLCBcIlxcblNvbHV0aW9uOiBVc2UgfCBvciAmIGJlZm9yZSB0aGlzIGdyb3VwLlwiKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhzcG90RXJyb3IoaSkpO1xuICAgICAgICAgIHByb2Nlc3MuZXhpdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IHR5cGVzO1xuICAgICAgICB0eXBlcy5wdXNoKGNoaWxkKTtcbiAgICAgICAgdHlwZXMgPSBjaGlsZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiKVwiOlxuICAgICAgICBpZiAodHlwZXMucGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJFeHRyYSBDbG9zaW5nIFBhcmVuIGF0IGNoYXI6XCIsIGkpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKHNwb3RFcnJvcihpKSk7XG4gICAgICAgICAgcHJvY2Vzcy5leGl0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdvcmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHR5cGVzLnB1c2god29yZCk7XG4gICAgICAgICAgd29yZCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgdHlwZXMgPSB0eXBlcy5wYXJlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgd29yZCArPSBjaGFyO1xuICAgIH1cbiAgfVxuICBpZiAod29yZC5sZW5ndGggPiAwKSB7XG4gICAgdHlwZXMucHVzaCh3b3JkKTtcbiAgfVxuICBmdW5jdGlvbiBjaGVja1R5cGUgKHR5cGUgPSBcIlwiKSB7XG4gICAgaWYgKGlkID09IG51bGwpIHtcbiAgICAgIGlmICh0eXBlID09PSBcIm51bGxcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgcmV0dXJuIGNoZWNrQWxsVHlwZXModHlwZSk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFwibWFwXCIpIHtcbiAgICAgcmV0dXJuIChpZCBpbnN0YW5jZW9mIE1hcCB8fCBpZCBpbnN0YW5jZW9mIE51bWVyaWNNYXApO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gXCJhc3NvY2lhdGl2ZVwiIHx8IHR5cGUgPT09IFwibnVtZXJpY1wiKSB7XG4gICAgICByZXR1cm4gKGlkLnR5cGUgPT09IHR5cGUpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gXCJyZWdleFwiKSB7XG4gICAgICByZXR1cm4gKGlkIGluc3RhbmNlb2YgWFJlZ0V4cCB8fCBpZCBpbnN0YW5jZW9mIFJlZ0VYUCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcInhyZWdleFwiKSB7XG4gICAgICByZXR1cm4gKGlkIGluc3RhbmNlb2YgWFJlZ0V4cCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcInNjb3BlXCIpIHtcbiAgICAgIHJldHVybiAoaWQuX2lzU2NvcGUgPT09IHRydWUpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gXCJqc1wiKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBpZC50eXBlID09PSB1bmRlZmluZWQgJiYgXG4gICAgICAgIGlkLl9pc1Njb3BlID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgIShpZCBpbnN0YW5jZW9mIFhSZWdFeHApXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKHR5cGVvZiBpZCA9PT0gdHlwZSk7XG4gIH1cbiAgZnVuY3Rpb24gY2hlY2tBbGxUeXBlcyAodHlwZXMgPSBbXSkge1xuICAgIGlmICh0eXBlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBjaGVja1R5cGUodHlwZSk7XG4gICAgfVxuICAgIGxldCBzdGF0ZSA9IGZhbHNlO1xuICAgIGxldCBzaWduID0gXCJ8XCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgbGV0IHR5cGUgPSB0eXBlc1tpXTtcbiAgICAgIGlmICh0eXBlID09PSBcIiZcIiB8fCB0eXBlID09PSBcInxcIikge1xuICAgICAgICBzaWduID0gdHlwZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoc2lnbiA9PT0gXCImXCIpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgc3RhdGUgPSBzdGF0ZSAmJiBjaGVja1R5cGUodHlwZSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHNpZ24gPT09IFwifFwiKSB7XG4gICAgICAgIHN0YXRlID0gc3RhdGUgfHwgY2hlY2tUeXBlKHR5cGUpOyBcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG4gIHJldHVybiBjaGVja0FsbFR5cGVzKHR5cGVzKTtcbn1cblxubGV0IHJhbmRTdHIgPSAobGVuPTE2KSA9PiB7XG4gIGxldCByZXN1bHQgPSBcIlwiO1xuICBsZXQgY2hhcnMgPSBcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICByZXN1bHQgKz0gY2hhcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcnMubGVuZ3RoKV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubGV0IGluZGV4UmFuZ2UgPSAoYmVnaW4sIGVuZCwgc2l6ZSkgPT4ge1xuICBpZiAodHlwZW9mIHNpemUgIT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gWzAsMF07XG4gIH1cblxuICBpZiAodHlwZW9mIGJlZ2luICE9PSBcIm51bWJlclwiKSB7XG4gICAgYmVnaW4gPSAwO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmQgIT09IFwibnVtYmVyXCIpIHtcbiAgICBlbmQgPSBzaXplO1xuICB9XG5cbiAgaWYgKGJlZ2luIDwgMCkge1xuICAgIGJlZ2luID0gc2l6ZSArIGJlZ2luO1xuICAgIGlmIChiZWdpbiA8IDApIHtcbiAgICAgIGJlZ2luID0gMDtcbiAgICB9XG4gIH1cbiAgXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kID0gc2l6ZSArIGVuZDtcbiAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgZW5kID0gMDtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID4gc2l6ZSkge1xuICAgIGVuZCA9IHNpemU7XG4gIH1cblxuICBpZiAoYmVnaW4gPj0gZW5kKSB7XG4gICAgcmV0dXJuIFswLDBdO1xuICB9XG5cbiAgcmV0dXJuIFtiZWdpbiwgZW5kXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXAucHJvdG90eXBlLCBcInNsaWNlXCIsIHtcbiAgdmFsdWU6IGZ1bmN0aW9uIHNsaWNlIChiZWdpbj0wLCBlbmQ9dGhpcy5zaXplKSB7XG4gICAgbGV0IGl0ZXJhdG9yID0gdGhpcy5lbnRyaWVzKCk7XG4gICAgbGV0IGFyciA9IFtdO1xuXG4gICAgaWYgKGJlZ2luIDwgMCkge1xuICAgICAgYmVnaW4gPSB0aGlzLnNpemUgKyBiZWdpbjtcbiAgICAgIGlmIChiZWdpbiA8IDApIHtcbiAgICAgICAgYmVnaW4gPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgZW5kID0gdGhpcy5zaXplICsgZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW5kID4gdGhpcy5zaXplKSB7XG4gICAgICBlbmQgPSB0aGlzLnNpemU7XG4gICAgfVxuXG4gICAgaWYgKGJlZ2luID49IGVuZCkge1xuICAgICAgcmV0dXJuIHNjb3BlLm1hcEV4cHJlc3Npb24oKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJlZ2luOyBpICs9IDEpIHtcbiAgICAgIGl0ZXJhdG9yLm5leHQoKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gYmVnaW47IGkgPCBlbmQ7IGkgKz0gMSkge1xuICAgICAgYXJyLnB1c2goaXRlcmF0b3IubmV4dCgpLnZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NvcGUubWFwRXhwcmVzc2lvbiguLi5hcnIpO1xuICB9XG59KTtcblxuY29uc3QgY3JlYXRlUHJveHkgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBwcml2ID0gbmV3IFdlYWtNYXAoKTtcbiAgY29uc3QgaW50UmVnZXhwID0gL15cXC0/XFxkKyQvXG4gIGNvbnN0IG1hcFByb3h5SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gXCJzdHJpbmdcIiAmJiBpbnRSZWdleHAudGVzdChwcm9wKSkge1xuICAgICAgICBwcm9wID0gcGFyc2VJbnQocHJvcCk7XG4gICAgICAgIHJldHVybiB0YXJnZXQuZ2V0KHByb3ApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3AgPT09IFwidG9TdHJpbmdcIikge1xuICAgICAgICBpZiAocHJpdi5nZXQoc2VsZikudHlwZSA9PT0gXCJhc3NvY2lhdGl2ZVwiKSB7XG4gICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBgbWFwOiR7cHJpdi5nZXQoc2VsZikudHlwZX0ge2A7XG4gICAgICAgICAgICBsZXQgZmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsXSBvZiB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgaWYgKCFmaXJzdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIixcIjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdCArPSBgICR7a2V5fSA9PiAke3ZhbH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIFwiIH1cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldC50b1N0cmluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3AgPT09IFwidHlwZVwiKSB7XG4gICAgICAgIHJldHVybiBwcml2LmdldChzZWxmKS50eXBlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0Lmhhcyhwcm9wKSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0LmdldChwcm9wKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wIGluIHRhcmdldCkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtwcm9wXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXS5iaW5kKHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgIH1cbiAgICAgIFxuXG5cblxuXG5cblxuXG4gICAgICBpZiAoaGFzVHlwZShyZWNlaXZlciwgXCJudW1lcmljXCIpKSB7XG4gICAgICAgIGlmIChwcm9wIGluIHRhcmdldC5hcnJheSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiZm91bmQgYXJyYXkgb3BlcmF0aW9uOlwiLCBwcm9wKTtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFycmF5W3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgIC8vIFF1ZXJ5IGVhY2ggaW5zdGFuY2Ugd2hvIGhhcyB0aGUgcHJvcCB3aXRoIHR5cGU6IGZ1bmN0aW9uXG4gICAgICAvLyBSZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gYXJyYXkgd2l0aCB2YWx1ZXNcbiAgICAgIC8vIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnN0YW5jZSBjYWxsaW5nXG4gICAgICAvLyB0aGUgcHJvcCBtZXRob2QuXG4gICAgICBsZXQgdmFscyA9IHRhcmdldC5lbnRyaWVzKCk7XG4gICAgICBsZXQgdmFsc1dpdGhGdW5jID0gW107XG4gICAgICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIHZhbHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWxbcHJvcF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHZhbHNXaXRoRnVuYy5wdXNoKFtrZXksIHZhbF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodmFsc1dpdGhGdW5jLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGlmIChwcml2LmdldChzZWxmKS50eXBlID09PSBcIm51bWVyaWNcIikge1xuICAgICAgICAgIHJldHVybiBzY29wZS5hcnJheUV4cHJlc3Npb24oLi4udmFsc1dpdGhGdW5jLm1hcChpdGVtID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtWzFdW3Byb3BdKC4uLmFyZ3MpO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NvcGUubWFwRXhwcmVzc2lvbiguLi52YWxzV2l0aEZ1bmMubWFwKGl0ZW0gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFtpdGVtWzBdLCBpdGVtWzFdW3Byb3BdKC4uLmFyZ3MpXTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFzOiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0Lmhhcyhwcm9wKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHRhcmdldCwgcHJvcCwgdmFsKSB7XG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIGlmIChwcm9wID09PSBcInR5cGVcIikgeyAvL2Rpc2FsbG93IHNldHRpbmcgJ3R5cGUnXG4gICAgICAgIHJldHVybiBwcml2LmdldCh0aGlzKS50eXBlO1xuICAgICAgfVxuICAgICAgaWYgKHByaXYuZ2V0KHNlbGYpLnR5cGUgPT09IFwiYXNzb2NpYXRpdmVcIikge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0LnNldChwcm9wLCB2YWwpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVQcm94eSAob2JqLCB0eXBlKSB7XG4gICAgbGV0IGhhbmRsZSA9IE9iamVjdC5jcmVhdGUobWFwUHJveHlIYW5kbGVyKTtcbiAgICBwcml2LnNldChoYW5kbGUsIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgIHByaXYuZ2V0KGhhbmRsZSkudHlwZSA9IHR5cGU7XG4gICAgcmV0dXJuIG5ldyBQcm94eShvYmosIGhhbmRsZSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVByb3h5O1xufSgpKTtcblxuY29uc3QgTnVtZXJpY01hcCA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHByaXYgPSBuZXcgV2Vha01hcCgpO1xuICBmdW5jdGlvbiBuZXh0RW50cnkgKGl0ZXJhdG9yRGF0YSwgc2VsZikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXRlcmF0b3JEYXRhLmluZGV4IDwgc2VsZi5zaXplKSB7XG4gICAgICAgIGl0ZXJhdG9yRGF0YS5yZXN1bHQudmFsdWUgPSBbaXRlcmF0b3JEYXRhLmluZGV4LCBzZWxmLmdldChpdGVyYXRvckRhdGEuaW5kZXggKyspXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZXJhdG9yRGF0YS5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiB7ZG9uZTogdHJ1ZX07XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0b3JEYXRhLnJlc3VsdDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBuZXh0S2V5IChpdGVyYXRvckRhdGEsIHNlbGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGl0ZXJhdG9yRGF0YS5pbmRleCA8IHNlbGYuc2l6ZSkge1xuICAgICAgICBpdGVyYXRvckRhdGEucmVzdWx0LnZhbHVlID0gaXRlcmF0b3JEYXRhLmluZGV4ICsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0b3JEYXRhLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIHtkb25lOiB0cnVlfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvckRhdGEucmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHRWYWx1ZSAoaXRlcmF0b3JEYXRhLCBzZWxmKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpdGVyYXRvckRhdGEuaW5kZXggPCBzZWxmLnNpemUpIHtcbiAgICAgICAgaXRlcmF0b3JEYXRhLnJlc3VsdC52YWx1ZSA9IHNlbGYuZ2V0KGl0ZXJhdG9yRGF0YS5pbmRleCArKyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRvckRhdGEuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4ge2RvbmU6IHRydWV9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdG9yRGF0YS5yZXN1bHQ7XG4gICAgfVxuICB9XG4gIGNsYXNzIE51bWVyaWNNYXAge1xuICAgIGNvbnN0cnVjdG9yIChhcnIpIHtcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgY29uc3QgaGlkZGVuID0ge1xuICAgICAgICBhcnJheTogWy4uLmFycl1cbiAgICAgIH07XG4gICAgICBwcml2LnNldCh0aGlzLCBoaWRkZW4pXG5cbiAgICAgIGhpZGRlbi5jcmVhdGVLZXlJdGVyYXRvciA9IGZ1bmN0aW9uIGNyZWF0ZUtleUl0ZXJhdG9yICgpIHtcbiAgICAgICAgcmV0dXJuIGhpZGRlbi5jcmVhdGVJdGVyYXRvcihuZXh0S2V5KTtcbiAgICAgIH1cblxuICAgICAgaGlkZGVuLmNyZWF0ZVZhbHVlSXRlcmF0b3IgPSBmdW5jdGlvbiBjcmVhdGVWYWx1ZUl0ZXJhdG9yICgpIHtcbiAgICAgICAgcmV0dXJuIGhpZGRlbi5jcmVhdGVJdGVyYXRvcihuZXh0VmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBoaWRkZW4uY3JlYXRlRW50cnlJdGVyYXRvciA9IGZ1bmN0aW9uIGNyZWF0ZUVudHJ5SXRlcmF0b3IgKCkge1xuICAgICAgICByZXR1cm4gaGlkZGVuLmNyZWF0ZUl0ZXJhdG9yKG5leHRFbnRyeSk7XG4gICAgICB9XG5cbiAgICAgIGhpZGRlbi5jcmVhdGVJdGVyYXRvciA9IGZ1bmN0aW9uIGNyZWF0ZUl0ZXJhdG9yIChuZXh0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmV4dDogbmV4dCh7XG4gICAgICAgICAgICBpbmRleDogMCxcbiAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHNlbGYpLFxuICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIH07O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gXCJbXCI7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2l6ZTsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IFwiLCBcIlxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSBgJHt0aGlzLmdldChpKX1gO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCArIFwiXVwiO1xuICAgIH1cblxuICAgIGdldCB0eXBlICgpIHtcbiAgICAgIHJldHVybiBcIm51bWVyaWNcIjtcbiAgICB9XG5cbiAgICBnZXQgYXJyYXkgKCkge1xuICAgICAgcmV0dXJuIHByaXYuZ2V0KHRoaXMpLmFycmF5O1xuICAgIH1cblxuICAgIHNldCBhcnJheSAodmFsKSB7XG4gICAgICBpZiAodmFsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHByaXYuZ2V0KHRoaXMpLmFycmF5ID0gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByaXYuZ2V0KHRoaXMpLmFycmF5O1xuICAgIH1cblxuICAgIGdldCAoaW5kZXgpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIC8vIEFsbG93IHJldmVyc2UgaW5kZXhpbmcgbGlrZSBQeXRob24uIGZvb1stMV0gPT09IGZvb1tmb28uc2l6ZSAtIDFdO1xuICAgICAgaWYgKGluZGV4IDwgMCkgeyAvLyAoLTEgJSA1KSBpcyAtMVxuICAgICAgICBpbmRleCA9IChpbmRleCAlIHRoaXMuc2l6ZSkgKyB0aGlzLnNpemU7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5zaXplKSB7XG4gICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hcnJheVtpbmRleF07XG4gICAgfVxuXG4gICAgc2V0IChpbmRleCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1c2ggKC4uLnZhbHVlcykge1xuICAgICAgcmV0dXJuIHRoaXMuYXJyYXkucHVzaCguLi52YWx1ZXMpO1xuICAgIH1cblxuICAgIHNsaWNlIChiZWdpbiA9IDAsIGVuZCA9IHRoaXMuc2l6ZSkge1xuICAgICAgcmV0dXJuIHNjb3BlLmFycmF5RXhwcmVzc2lvbiguLi50aGlzLmFycmF5LnNsaWNlKGJlZ2luLCBlbmQpKTtcbiAgICB9XG5cbiAgICBkZWxldGUgKGluZGV4KSB7XG4gICAgICBpZiAodGhpcy5oYXMoaW5kZXgpKSB7XG4gICAgICAgIHRoaXMuYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY2xlYXIgKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICBlbnRyaWVzICgpIHtcbiAgICAgIHJldHVybiBwcml2LmdldCh0aGlzKS5jcmVhdGVFbnRyeUl0ZXJhdG9yKCk7XG4gICAgfVxuXG4gICAga2V5cyAoKSB7XG4gICAgICByZXR1cm4gcHJpdi5nZXQodGhpcykuY3JlYXRlS2V5SXRlcmF0b3IoKTtcbiAgICB9XG5cbiAgICB2YWx1ZXMgKCkge1xuICAgICAgcmV0dXJuIHByaXYuZ2V0KHRoaXMpLmNyZWF0ZVZhbHVlSXRlcmF0b3IoKTtcbiAgICB9XG5cbiAgICBoYXMgKGluZGV4KSB7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvckVhY2ggKGNhbGxiYWNrLCB0aGlzQXJnPXRoaXMpIHtcbiAgICAgIGZvciAobGV0IFtrZXksIHZhbF0gb2YgdGhpcykge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbCwga2V5LCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgc2l6ZSAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnJheS5sZW5ndGg7XG4gICAgfVxuXG4gICAgc2V0IHNpemUgKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnJheS5sZW5ndGggPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgICByZXR1cm4gcHJpdi5nZXQodGhpcykuY3JlYXRlRW50cnlJdGVyYXRvcigpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gTnVtZXJpY01hcDtcbn0oKSk7XG5cbmNsYXNzIFNjb3BlIHtcbiAgY29uc3RydWN0b3IoY29udGV4dCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuX3Njb3BpbmcgPSB7XG4gICAgICBsZXQ6IHRoaXMubWFwRXhwcmVzc2lvbigpLFxuICAgICAgcHJpdmF0ZTogdGhpcy5tYXBFeHByZXNzaW9uKCksXG4gICAgICBwcm90ZWN0ZWQ6IHRoaXMubWFwRXhwcmVzc2lvbigpLFxuICAgICAgcHVibGljOiB0aGlzLm1hcEV4cHJlc3Npb24oKSxcbiAgICAgIHBhcmVudDogbnVsbFxuICAgIH07XG4gICAgdGhpcy51c2VyVGFncyA9IHRoaXMubWFwRXhwcmVzc2lvbigpO1xuICAgIGxldCBoID0gcmVxdWlyZShcImh5cGVyc2NyaXB0XCIpO1xuICAgIHRoaXMueG1sRXhwcmVzc2lvbiA9ICh0YWcsIGF0dHIsIC4uLmNoaWxkcmVuKSA9PiB7XG4gICAgICBsZXQgbm9kZTtcbiAgICAgIGlmICh0YWcgIT09IFwic3R5bGVcIiAmJiB0YWcgIT09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgbGV0IG5ld0NoaWxkcmVuID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBOdW1lcmljTWFwIHx8IGNoaWxkIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBuZXdDaGlsZHJlbi5wdXNoKC4uLmNoaWxkLnZhbHVlcygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy51c2VyVGFncy5oYXModGFnLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgbGV0IGF0dHJNYXAgPSB0aGlzLm1hcEV4cHJlc3Npb24oKTtcbiAgICAgICAgICBmb3IgKGxldCBuYW1lIGluIGF0dHIpIHtcbiAgICAgICAgICAgIGF0dHJNYXBbbmFtZV0gPSBhdHRyW25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgaHRtbCA9IGgodGFnLCBhdHRyLCAuLi5jaGlsZHJlbik7XG4gICAgICAgICAgJChodG1sKS5kYXRhKFwicmF3QXR0cmlidXRlc1wiLCBhdHRyTWFwKTtcbiAgICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHZvaWRFbGVtZW50cyA9IFtcbiAgICAgICAgXCJhcmVhXCIsXG4gICAgICAgIFwiYmFzZVwiLFxuICAgICAgICBcImJyXCIsXG4gICAgICAgIFwiY29sXCIsXG4gICAgICAgIFwiZW1iZWRcIixcbiAgICAgICAgXCJoclwiLFxuICAgICAgICBcImltZ1wiLFxuICAgICAgICBcImlucHV0XCIsXG4gICAgICAgIFwibGlua1wiLFxuICAgICAgICBcIm1ldGFcIixcbiAgICAgICAgXCJwYXJhbVwiLFxuICAgICAgICBcInNvdXJjZVwiLFxuICAgICAgICBcInRyYWNrXCIsXG4gICAgICAgIFwid2JyXCJcbiAgICAgIF07XG4gICAgICBmdW5jdGlvbiBwcm9jZXNzU3R5bGUgKG0pIHtcbiAgICAgICAgbGV0IHN0eWxlID0gXCJcIjtcbiAgICAgICAgZm9yIChsZXQgW3NlbGVjdG9yLCBib2R5XSBvZiBtKSB7XG4gICAgICAgICAgc3R5bGUgKz0gYCR7c2VsZWN0b3J9e2A7XG4gICAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgICBsZXQgdGVybWluYXRlZCA9IGZhbHNlO1xuICAgICAgICAgIGZvciAobGV0IFtuYW1lLCB2YWx1ZV0gb2YgYm9keSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICAgIHN0eWxlICs9IGB9JHtwcm9jZXNzU3R5bGUobmV3IE1hcChbW3NlbGVjdG9yICsgbmFtZSwgdmFsdWVdXSkpfWA7XG4gICAgICAgICAgICAgIGlmICgoaW5kZXggKyAxKSA8IGJvZHkuc2l6ZSkge1xuICAgICAgICAgICAgICAgIHN0eWxlICs9IGAke3NlbGVjdG9yfXtgO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRlcm1pbmF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHlsZSArPSBgJHtuYW1lfToke3ZhbHVlfTtgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCF0ZXJtaW5hdGVkKSB7XG4gICAgICAgICAgICBzdHlsZSArPSAnfSc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH1cbiAgICAgIGlmICh0YWcgPT09IFwic3R5bGVcIiAmJiBjaGlsZHJlblswXSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICBub2RlID0gaCh0YWcsIFtwcm9jZXNzU3R5bGUoY2hpbGRyZW5bMF0pXSk7XG4gICAgICB9IGVsc2UgaWYodGFnID09PSBcInNjcmlwdFwiKSB7XG4gICAgICAgIG5vZGUgPSBoKHRhZywgLi4uY2hpbGRyZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZSA9IGgodGFnLCAuLi5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBpZiAodGFnID09PSBcInN0eWxlXCIgfHwgdGFnID09PSBcInNjcmlwdFwiKSB7XG4gICAgICAgIG5vZGUuX19kZWZpbmVHZXR0ZXJfXygndGV4dENvbnRlbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGROb2Rlc1swXS52YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZGUuX19kZWZpbmVHZXR0ZXJfXygnaW5uZXJIVE1MJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRleHRDb250ZW50O1xuICAgICAgICB9KTtcbiAgICAgICAgbm9kZS5fX2RlZmluZUdldHRlcl9fKCdvdXRlckhUTUwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGA8JHt0YWd9PiR7dGhpcy5pbm5lckhUTUx9PC8ke3RhZ30+YDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBhIGluIGF0dHIpIHtcbiAgICAgICAgbGV0IHZhbCA9IFwiXCI7XG4gICAgICAgIGlmIChhID09PSBcInN0eWxlXCIgJiYgYXR0clthXSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgIGZvciAobGV0IFtuYW1lLCB2YWx1ZV0gb2YgYXR0clthXSkge1xuICAgICAgICAgICAgdmFsICs9IGAke25hbWV9OiR7dmFsdWV9O2A7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGEgPT09IFwicGF0dGVyblwiICYmIGF0dHJbYV0gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICBsZXQgcmVnRXhwU3RyID0gYXR0clthXS50b1N0cmluZygpO1xuICAgICAgICAgIHZhbCA9IHJlZ0V4cFN0ci5zdWJzdHIoMSwgcmVnRXhwU3RyLmxhc3RJbmRleE9mKFwiL1wiKSAtIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IGF0dHJbYV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGxldCBjb2RlID0gYHNjb3BlLmNyZWF0ZVNjb3BlKCR7dmFsLl9vcmlnaW5hbEZ1bmN0aW9uLnRvU3RyaW5nKCl9KWA7XG4gICAgICAgICAgICB2YWwgPSBgJHtjb2RlfShldmVudClgO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGEsIHZhbCk7XG4gICAgICB9XG4gICAgICBub2RlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAobm9kZS50YWdOYW1lID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZS5vdXRlckhUTUwucmVwbGFjZSgvZ3RcXDsvLCBcIj5cIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBub2RlLm91dGVySFRNTDtcbiAgICAgIH07XG4gICAgICBub2RlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlW2tleV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHJldHVybiBub2RlW2tleV0uYmluZChub2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZVtrZXldO1xuICAgICAgfTtcbiAgICAgIG5vZGUuY2hpbGROb2Rlcy5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZS5jaGlsZE5vZGVzW2tleV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHJldHVybiBub2RlLmNoaWxkTm9kZXNba2V5XS5iaW5kKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlLmNoaWxkTm9kZXNba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gIH1cblxuICBhcnJheUV4cHJlc3Npb24oLi4uaXRlbXMpIHtcbiAgICByZXR1cm4gY3JlYXRlUHJveHkobmV3IE51bWVyaWNNYXAoaXRlbXMpLCBcIm51bWVyaWNcIik7XG4gIH1cblxuICBtYXBFeHByZXNzaW9uKC4uLml0ZW1zKSB7XG4gICAgbGV0IG0gPSBuZXcgTWFwKGl0ZW1zKTtcbiAgICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIGl0ZW1zKSB7XG4gICAgICBtW2tleV0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVQcm94eShtLCBcImFzc29jaWF0aXZlXCIpO1xuICB9XG5cbiAgYXNzaWdubWVudEV4cHJlc3Npb24obmFtZXMsIHZhbFBhcnRzLCBjdHg9dGhpcy5fc2NvcGluZykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBuYW1lO1xuICAgIGxldCBbb3AsIHZhbHVlXSA9IHZhbFBhcnRzO1xuICAgIGxldCBpZDtcbiAgICBpZiAobmFtZXMubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKG5hbWVzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBbaWQsIG5hbWVdID0gbmFtZXM7XG4gICAgICB9IGVsc2UgaWYgKG5hbWVzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICBpZCA9IG5hbWVzWzBdO1xuICAgICAgICBsZXQgW2JlZ2luLCBlbmRdID0gaW5kZXhSYW5nZShuYW1lc1sxXSwgbmFtZXNbMl0sIGlkLnNpemUpO1xuICAgICAgICBpZiAoaWQgaW5zdGFuY2VvZiBOdW1lcmljTWFwKSB7XG4gICAgICAgICAgbGV0IHZhbHVlcyA9IHNlbGYuYXJyYXlFeHByZXNzaW9uKCk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGJlZ2luOyBpIDwgZW5kOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhbHVlcy5hcnJheS5wdXNoKHNlbGYuYXNzaWdubWVudEV4cHJlc3Npb24oW2lkLCBpXSwgdmFsUGFydHMsIGN0eCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9IGVsc2UgaWYgKGlkIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgbGV0IHZhbHVlcyA9IHNlbGYubWFwRXhwcmVzc2lvbigpO1xuICAgICAgICAgIGxldCBrZXlzID0gaWQua2V5cygpO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmVnaW47IGkgKz0gMSkge1xuICAgICAgICAgICAga2V5cy5uZXh0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAobGV0IGkgPSBiZWdpbjsgaSA8IGVuZDsgaSArPSAxKSB7XG4gICAgICAgICAgICBsZXQga2V5ID0ga2V5cy5uZXh0KCkudmFsdWU7XG4gICAgICAgICAgICB2YWx1ZXMuc2V0KGtleSwgc2VsZi5hc3NpZ25tZW50RXhwcmVzc2lvbihbaWQsIGtleV0sIHZhbFBhcnRzLCBjdHgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgUmFuZ2UgQXNzaWdubWVudCBcXGBbOl1cXGAgb24gbm9uLW1hcC5gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWVzW25hbWVzLmxlbmd0aCAtIDFdO1xuICAgIFxuICAgICAgaWYgKGN0eC5sZXQuaGFzKG5hbWUpKSB7XG4gICAgICAgIGlkID0gY3R4LmxldDtcbiAgICAgIH1cbiAgICAgIGlmIChjdHgucHJpdmF0ZS5oYXMobmFtZSkpIHtcbiAgICAgICAgaWQgPSBjdHgucHJpdmF0ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjdHgucHJvdGVjdGVkLmhhcyhuYW1lKSkge1xuICAgICAgICBpZCA9IGN0eC5wcm90ZWN0ZWQ7XG4gICAgICB9XG4gICAgICBpZiAoY3R4LnB1YmxpYy5oYXMobmFtZSkpIHtcbiAgICAgICAgaWQgPSBjdHgucHVibGljO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3dpdGNoKG9wKSB7XG4gICAgICAgIGNhc2UgXCI9XCI6XG4gICAgICAgICAgaWYgKGlkLnNldCkge1xuICAgICAgICAgICAgaWQuc2V0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBpZC5nZXQobmFtZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpZFtuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcIis9XCI6XG4gICAgICAgICAgaWQuc2V0KG5hbWUsIHNlbGYuYmluYXJ5RXhwcmVzc2lvbihcIitcIiwgaWQuZ2V0KG5hbWUpLCB2YWx1ZSkpO1xuICAgICAgICAgIHJldHVybiBpZC5nZXQobmFtZSk7XG4gICAgICAgIGNhc2UgXCJbXT1cIjpcbiAgICAgICAgICByZXR1cm4gc2VsZi5iaW5hcnlFeHByZXNzaW9uKFwiPCZcIiwgaWQuZ2V0KG5hbWUpLCB2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCIqPVwiOlxuICAgICAgICAgIGlkLnNldChuYW1lLCBzZWxmLmJpbmFyeUV4cHJlc3Npb24oXCIqXCIsIGlkLmdldChuYW1lKSwgdmFsdWUpKTtcbiAgICAgICAgICByZXR1cm4gaWQuZ2V0KG5hbWUpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXNzaWdubWVudCBPcGVyYXRvciAnJHtvcH0nIGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3R4LnBhcmVudCkge1xuICAgICAgcmV0dXJuIHNlbGYuYXNzaWdubWVudEV4cHJlc3Npb24oW25hbWVdLCB2YWxQYXJ0cywgY3R4LnBhcmVudCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgSWRlbnRpZmllciAnJHtuYW1lfScgaXMgbm90IGRlZmluZWRgKTtcbiAgfVxuXG4gIGJpbmFyeUV4cHJlc3Npb24ob3AsIGEsIGIpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgc3dpdGNoIChvcCkge1xuICAgICAgY2FzZSBcIiYmXCI6XG4gICAgICAgIHJldHVybiBhICYmIGI7XG4gICAgICBjYXNlIFwifHxcIjpcbiAgICAgICAgcmV0dXJuIGEgfHwgYjtcbiAgICAgIGNhc2UgXCI9PT1cIjpcbiAgICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgICBjYXNlIFwiIT09XCI6XG4gICAgICAgIHJldHVybiBhICE9PSBiO1xuICAgICAgY2FzZSBcIj5cIjpcbiAgICAgICAgcmV0dXJuIGEgPiBiO1xuICAgICAgY2FzZSBcIjxcIjpcbiAgICAgICAgcmV0dXJuIGEgPCBiO1xuICAgICAgY2FzZSBcIj49XCI6XG4gICAgICAgIHJldHVybiBhID49IGI7XG4gICAgICBjYXNlIFwiPD1cIjpcbiAgICAgICAgcmV0dXJuIGEgPD0gYjtcbiAgICAgIGNhc2UgXCImPlwiOlxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiJj46XCIsIGEsIGIpO1xuICAgICAgICBpZiAoaGFzVHlwZShiLCBcIm51bWVyaWNcIikpIHtcbiAgICAgICAgICBiLnB1c2goYSk7XG4gICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFzVHlwZShiLCBcInN0cmluZ1wiKSkge1xuXG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0IHRvIHB1c2ggb24gaW5jb21wYXRpYmxlIHR5cGU6ICcke2F9JyAmPiAnJHtifSdgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiPCZcIjpcbiAgICAgICAgaWYgKGhhc1R5cGUoYSwgXCJudW1lcmljXCIpKSB7XG4gICAgICAgICAgYS5wdXNoKGIpO1xuICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQXR0ZW1wdCB0byBwdXNoIG9uIGluY29tcGF0aWJsZSB0eXBlOiAnJHthfScgPCYgJyR7Yn0nYCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIitcIjpcbiAgICAgICAgaWYgKGhhc1R5cGUoYSwgXCJzdHJpbmd8bnVtYmVyXCIpICYmIGhhc1R5cGUoYiwgXCJzdHJpbmd8bnVtYmVyXCIpKSB7XG4gICAgICAgICAgcmV0dXJuIGEgKyBiO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc1R5cGUoYSwgXCJudW1lcmljXCIpKSB7XG4gICAgICAgICAgbGV0IG5ld0EgPSB0aGlzLmFycmF5RXhwcmVzc2lvbiguLi5hLmFycmF5KTtcbiAgICAgICAgICBuZXdBLnB1c2goYik7XG4gICAgICAgICAgcmV0dXJuIG5ld0E7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0IHRvIGFkZCBpbmNvbXBhdGlibGUgdHlwZXM6ICcke2F9JyArICcke2J9J2ApO1xuICAgICAgY2FzZSBcIi1cIjpcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgY2FzZSBcIipcIjpcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgYiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgcmV0dXJuIGEgKiBiO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBOdW1lcmljTWFwKSB7XG4gICAgICAgICAgbGV0IG5ld0EgPSBzY29wZS5hcnJheUV4cHJlc3Npb24oKTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGI7IGkgKz0gMSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhLnNpemU7IGogKz0gMSkge1xuICAgICAgICAgICAgICBuZXdBLnB1c2goYVtqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXdBO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQXR0ZW1wdCB0byBtdWx0aXBseSBpbmNvbXBhdGlibGUgdHlwZXM6ICcke2F9JyArICcke2J9J2ApO1xuICAgICAgY2FzZSBcIi9cIjpcbiAgICAgICAgcmV0dXJuIGEgLyBiO1xuICAgICAgY2FzZSBcIl5cIjpcbiAgICAgICAgcmV0dXJuIGEgXiBiO1xuICAgICAgY2FzZSBcIiVcIjpcbiAgICAgICAgcmV0dXJuIGEgJSBiO1xuICAgIH1cbiAgfVxuXG4gIGRlY2xhcmF0aW9uRXhwcmVzc2lvbih7IHR5cGUsIG5hbWUsIHZhbHVlIH0pIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgY3R4O1xuXG4gICAgaWYobmFtZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBsZXQgdmFsO1xuICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPD0gaSkge1xuICAgICAgICAgICAgdmFsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWwgPSB2YWx1ZVtpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2goc2VsZi5kZWNsYXJhdGlvbkV4cHJlc3Npb24oe3R5cGU6IHR5cGUsIG5hbWU6IG5hbWVbaV0sIHZhbHVlOiB2YWx9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGYuYXJyYXlFeHByZXNzaW9uKC4uLnJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0IHRvIGl0ZXJhdGUgb3ZlciBub24taXRlcmFibGUgZHVyaW5nIGRlY2xhcmF0aW9uXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAnbGV0Jykge1xuICAgICAgaWYgKHNlbGYuX3Njb3BpbmcubGV0LmhhcyhuYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElkZW50aWZpZXIgJyR7bmFtZX0nIGhhcyBhbHJlYWR5IGJlZW4gZGVjbGFyZWRgKTtcbiAgICAgIH1cbiAgICAgIGN0eCA9IHNlbGYuX3Njb3BpbmcubGV0O1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ3ByaXZhdGUnKSB7XG4gICAgICBpZiAoc2VsZi5fc2NvcGluZy5wcml2YXRlLmhhcyhuYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElkZW50aWZpZXIgJyR7bmFtZX0nIGhhcyBhbHJlYWR5IGJlZW4gZGVjbGFyZWRgKTtcbiAgICAgIH1cbiAgICAgIGN0eCA9IHNlbGYuX3Njb3BpbmcucHJpdmF0ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdwcm90ZWN0ZWQnKSB7XG4gICAgICBpZiAoc2VsZi5fc2NvcGluZy5wcm90ZWN0ZWQuaGFzKG5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSWRlbnRpZmllciAnJHtuYW1lfScgaGFzIGFscmVhZHkgYmVlbiBkZWNsYXJlZGApO1xuICAgICAgfVxuICAgICAgY3R4ID0gc2VsZi5fc2NvcGluZy5wcm90ZWN0ZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAncHVibGljJykge1xuICAgICAgaWYgKHNlbGYuX3Njb3BpbmcucHVibGljLmhhcyhuYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElkZW50aWZpZXIgJyR7bmFtZX0nIGhhcyBhbHJlYWR5IGJlZW4gZGVjbGFyZWRgKTtcbiAgICAgIH1cbiAgICAgIGN0eCA9IHNlbGYuX3Njb3BpbmcucHVibGljO1xuICAgIH1cblxuICAgIGN0eC5zZXQobmFtZSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGRlcmVmZXJlbmNlSWRlbnRpZmllciAobmFtZSwgY3R4PXRoaXMuX3Njb3BpbmcpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoY3R4LmxldC5oYXMobmFtZSkpIHtcbiAgICAgIHJldHVybiBjdHgubGV0LmRlbGV0ZShuYW1lKTtcbiAgICB9XG4gICAgaWYgKGN0eC5wcml2YXRlLmhhcyhuYW1lKSkge1xuICAgICAgcmV0dXJuIGN0eC5wcml2YXRlLmRlbGV0ZShuYW1lKTtcbiAgICB9XG4gICAgaWYgKGN0eC5wcm90ZWN0ZWQuaGFzKG5hbWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnByb3RlY3RlZC5kZWxldGUobmFtZSk7XG4gICAgfVxuICAgIGlmIChjdHgucHVibGljLmhhcyhuYW1lKSkge1xuICAgICAgcmV0dXJuIGN0eC5wdWJsaWMuZGVsZXRlKG5hbWUpO1xuICAgIH1cbiAgICBpZiAoY3R4LnBhcmVudCkge1xuICAgICAgcmV0dXJuIHNlbGYuZGVyZWZlcmVuY2VJZGVudGlmaWVyKG5hbWUsIGN0eC5wYXJlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlkZW50aWZpZXIobmFtZSwgY3R4PXRoaXMuX3Njb3BpbmcpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoY3R4LmxldC5oYXMobmFtZSkpIHtcbiAgICAgIHJldHVybiBjdHgubGV0LmdldChuYW1lKTtcbiAgICB9XG4gICAgaWYgKGN0eC5wcml2YXRlLmhhcyhuYW1lKSkge1xuICAgICAgcmV0dXJuIGN0eC5wcml2YXRlLmdldChuYW1lKTtcbiAgICB9XG4gICAgaWYgKGN0eC5wcm90ZWN0ZWQuaGFzKG5hbWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnByb3RlY3RlZC5nZXQobmFtZSk7XG4gICAgfVxuICAgIGlmIChjdHgucHVibGljLmhhcyhuYW1lKSkge1xuICAgICAgcmV0dXJuIGN0eC5wdWJsaWMuZ2V0KG5hbWUpO1xuICAgIH1cbiAgICBpZiAoY3R4LnBhcmVudCkge1xuICAgICAgcmV0dXJuIHNlbGYuaWRlbnRpZmllcihuYW1lLCBjdHgucGFyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGdsb2JhbFtuYW1lXTtcbiAgfVxuXG4gIGNyZWF0ZVNjb3BlKGYpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgcmVzdWx0ID0gZnVuY3Rpb24gU2NvcGUoLi4uYXJncykge1xuICAgICAgY29uc3QgdGhpc0FyZyA9IHRoaXM7XG4gICAgICByZXR1cm4gc2VsZi5pbnZva2VFeHByZXNzaW9uKHtcbiAgICAgICAgZnVuY3Rpb246IGYsXG4gICAgICAgIGFyZ3VtZW50czogYXJncyxcbiAgICAgICAgY29udGV4dDogdGhpc0FyZyxcbiAgICAgICAgaXNFeHRlbnNpb246IGYuX2JlaW5nVXNlZFxuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBkZWZpbmUgPSBmdW5jdGlvbiAocHJvcCwgdmFsKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBwcm9wLCB7XG4gICAgICAgIGdldDogKCkgPT4gZltwcm9wXSxcbiAgICAgICAgc2V0OiBuZXdWYWwgPT4gZltwcm9wXSA9IG5ld1ZhbFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0W3Byb3BdID0gdmFsO1xuICAgIH07XG4gICAgZGVmaW5lKFwiX2lzU2NvcGVcIiwgdHJ1ZSk7XG4gICAgZGVmaW5lKFwiX3BhcmVudFwiLCBzZWxmLl9zY29waW5nKTtcbiAgICBkZWZpbmUoXCJfYmVpbmdVc2VkXCIsIGZhbHNlKTtcbiAgICBkZWZpbmUoXCJfb3JpZ2luYWxGdW5jdGlvblwiLCBmKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaW52b2tlRXhwcmVzc2lvbihjb25maWcgPSB7XG4gICAgZnVuY3Rpb246IGZ1bmN0aW9uICgpIHt9LFxuICAgIGFyZ3VtZW50czogW10sXG4gICAgY29udGV4dDogdGhpcyxcbiAgICBpc0V4dGVuc2lvbjogZmFsc2VcbiAgfSkge1xuICAgIGlmICghY29uZmlnLmZ1bmN0aW9uLl9pc1Njb3BlKSB7XG4gICAgICByZXR1cm4gY29uZmlnLmZ1bmN0aW9uLmFwcGx5KGNvbmZpZy5jb250ZXh0LCBjb25maWcuYXJndW1lbnRzKTtcbiAgICB9XG4gICAgbGV0IHNjb3BpbmcgPSB0aGlzLl9zY29waW5nO1xuICAgIGlmIChjb25maWcuZnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYWxsIHRvIHVuZGVmaW5lZCBzY29wZWApO1xuICAgIH1cbiAgICB0aGlzLl9zY29waW5nID0ge1xuICAgICAgcGFyZW50OiBjb25maWcuZnVuY3Rpb24uX3BhcmVudCxcbiAgICAgIGxldDogdGhpcy5tYXBFeHByZXNzaW9uKCksXG4gICAgICBwcml2YXRlOiB0aGlzLm1hcEV4cHJlc3Npb24oKSxcbiAgICAgIHByb3RlY3RlZDogdGhpcy5tYXBFeHByZXNzaW9uKCksXG4gICAgICBwdWJsaWM6IHRoaXMubWFwRXhwcmVzc2lvbigpXG4gICAgfTtcbiAgICBsZXQgcmVzdWx0ID0gY29uZmlnLmZ1bmN0aW9uKGNvbmZpZy5hcmd1bWVudHMpO1xuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbmZpZy5pc0V4dGVuc2lvbiA9PT0gdHJ1ZSkge1xuICAgICAgICByZXN1bHQgPSB0aGlzLm1hcEV4cHJlc3Npb24oXG4gICAgICAgICAgW1wicHVibGljXCIsIHRoaXMuX3Njb3BpbmcucHVibGljXSxcbiAgICAgICAgICBbXCJwcm90ZWN0ZWRcIiwgdGhpcy5fc2NvcGluZy5wcm90ZWN0ZWRdXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLl9zY29waW5nLnB1YmxpYztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fc2NvcGluZyA9IHNjb3Bpbmc7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGltcG9ydCAoZmlsZW5hbWUpIHtcbiAgICBjb25zdCBmaWxlUGF0aCA9IHJlcXVpcmUucmVzb2x2ZShmaWxlbmFtZSk7XG4gICAgZGVsZXRlIHJlcXVpcmUuY2FjaGVbZmlsZVBhdGhdO1xuICAgIHJldHVybiByZXF1aXJlKGZpbGVQYXRoKTtcbiAgfVxuXG4gIHVzZSAodXNhYmxlLCB1c2VPbmx5KSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHVzYWJsZS5mb3JFYWNoKHNjID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygc2MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0IHRvIHVzZSBub24tc2NvcGVcIik7XG4gICAgICB9XG4gICAgICBzYy5fYmVpbmdVc2VkID0gdHJ1ZTtcbiAgICAgIGxldCB0ZW1wID0gc2MoKTtcbiAgICAgIHNjLl9iZWluZ1VzZWQgPSBmYWxzZTtcbiAgICAgIGlmICghKHRlbXAgaW5zdGFuY2VvZiBNYXApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHQgdG8gdXNlIHNjb3BlIHJldHVybmluZyBub24tbWFwXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXAuZ2V0KFwicHJvdGVjdGVkXCIpIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbF0gb2YgdGVtcC5nZXQoXCJwcm90ZWN0ZWRcIikpIHtcbiAgICAgICAgICBpZiAodXNlT25seSA9PT0gdW5kZWZpbmVkIHx8IHVzZU9ubHkuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICAgICAgc2VsZi5fc2NvcGluZy5wcm90ZWN0ZWQuc2V0KGtleSwgdmFsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wLmdldChcInB1YmxpY1wiKSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIHRlbXAuZ2V0KFwicHVibGljXCIpKSB7XG4gICAgICAgICAgaWYgKHVzZU9ubHkgPT09IHVuZGVmaW5lZCB8fCB1c2VPbmx5LmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHNlbGYuX3Njb3BpbmcucHVibGljLnNldChrZXksIHZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbmxldCBzY29wZSA9IG5ldyBTY29wZSh7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IHNjb3BlOyIsImxldCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5sZXQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmxldCBTY29wZVBhcnNlciA9IHJlcXVpcmUgKCcuL1Njb3BlUGFyc2VyLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKHNjb3BlKSA9PiB7XG4gIGxldCB1c2VyVGFncyA9IHNjb3BlLnVzZXJUYWdzO1xuICBjb25zdCBTY29wZUFwaSA9IHtcbiAgICBcInByaW50XCI6IHZhbHVlID0+IHtcbiAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHZhbHVlW2ldIGluc3RhbmNlb2YgTWFwIHx8IHZhbHVlW2ldIGluc3RhbmNlb2Ygc2NvcGUuYXJyYXlFeHByZXNzaW9uKCkuX19wcm90b19fLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWVbaV0udG9TdHJpbmcoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWVbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyguLi5yZXN1bHQpO1xuICAgIH0sXG4gICAgY3JlYXRlVGFnOiAobmFtZSwgVCkgPT4ge1xuICAgICAgdXNlclRhZ3NbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IFQ7XG4gICAgfSxcbiAgICBnZXRUYWc6IG5hbWUgPT4ge1xuICAgICAgcmV0dXJuIHVzZXJUYWdzW25hbWUudG9Mb3dlckNhc2UoKV07XG4gICAgfSxcbiAgICBnZXRBbGxUYWdzOiAoKSA9PiB7XG4gICAgICByZXR1cm4gdXNlclRhZ3M7XG4gICAgfSxcbiAgICBcImRlYnVnXCI6IHZhbHVlID0+IHtcbiAgICB2YWx1ZS5mb3JFYWNoKCh2YWwpID0+IHtcbiAgICAgIFNjb3BlQXBpLnByaW50KFtTY29wZUFwaS5fX2RlYnVnUmV0dXJuKHZhbCldKTtcbiAgICB9KTtcbiAgICB9LFxuXG4gICAgXCJfX2RlYnVnUmV0dXJuXCI6ICh2YWx1ZSwgc3BhY2VzPTIpID0+IHtcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICBsZXQgc3BhY2VmID0gKCkgPT4ge1xuICAgICAgbGV0IHIgPSAnJztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BhY2VzOyBpICs9IDEpIHtcbiAgICAgIHIgKz0gJyAnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICByZXN1bHQgKz0gXCJNYXAoXCI7XG4gICAgICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIHZhbHVlKSB7XG4gICAgICByZXN1bHQgKz0gYFxcbiR7c3BhY2VmKCl9JHtrZXl9ID0+ICR7U2NvcGVBcGkuX19kZWJ1Z1JldHVybih2YWwsIHNwYWNlcyArIDIpfWBcbiAgICAgIH1cbiAgICAgIHJldHVybiBgJHtyZXN1bHR9KWA7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgbGV0IHNvdXJjZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICBsZXQgYXJncyA9IHNvdXJjZS5tYXRjaCgvXlxcKGFyZ3NcXD0oXFxbLipcXF0pXFwpLyk7XG4gICAgICBpZiAoYXJnc1sxXSkge1xuICAgICAgYXJncyA9IGV2YWwoYXJnc1sxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgYXJncyA9IFtdO1xuICAgICAgfVxuICAgICAgcmVzdWx0ICs9IFwiU2NvcGUoW1wiO1xuICAgICAgYXJncy5mb3JFYWNoKChhcmcpID0+IHtcbiAgICAgIHJlc3VsdCArPSBgXFxuJHtzcGFjZWYoKX0oJHt0eXBlb2YgYXJnLnZhbHVlfSkgJHthcmcua2V5fTogJHtTY29wZUFwaS5fX2RlYnVnUmV0dXJuKGFyZy52YWx1ZSwgc3BhY2VzICsgMil9YDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGAke3Jlc3VsdH1dKWA7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBgXCIke3ZhbHVlfVwiYDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB9LFxuXG4gICAgXCJkZXJlZmVyZW5jZVwiOiAoaWRPck1hcCwgaWQpID0+IHtcbiAgICAgIGxldCBtYXA7XG4gICAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZCA9IGlkT3JNYXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXAgPSBpZE9yTWFwO1xuICAgICAgfVxuXG4gICAgICBpZiAobWFwIGluc3RhbmNlb2YgTWFwIHx8IG1hcCBpbnN0YW5jZW9mIHNjb3BlLmFycmF5RXhwcmVzc2lvbigpLl9fcHJvdG9fXy5jb25zdHJ1Y3Rvcikge1xuICAgICAgICByZXR1cm4gbWFwLmRlbGV0ZShpZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2NvcGUuZGVyZWZlcmVuY2VJZGVudGlmaWVyKGlkKTtcbiAgICB9LFxuXG4gICAgXCJpZlwiOiAoW2NvbmRpdGlvbiwgaWZUcnVlRXhwciA9ICgpID0+IHt9LCBpZkZhbHNlRXhwciA9ICgpID0+IHt9LCBleGVjdXRlU2NvcGVzID0gdHJ1ZV0pID0+IHtcbiAgICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgaWYgKGV4ZWN1dGVTY29wZXMgJiYgdHlwZW9mIGlmVHJ1ZUV4cHIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHJldHVybiBpZlRydWVFeHByKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlmVHJ1ZUV4cHI7XG4gICAgICB9XG4gICAgICBpZiAoZXhlY3V0ZVNjb3BlcyAmJiB0eXBlb2YgaWZGYWxzZUV4cHIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaWZGYWxzZUV4cHIoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpZkZhbHNlRXhwcjtcbiAgICB9LFxuXG4gICAgXCJlYWNoXCI6IChbYXJyYXksIGJsb2NrID0gKCkgPT4ge31dKSA9PiB7XG4gICAgICBsZXQgY2FuY2VsTG9vcCA9IGZhbHNlO1xuICAgICAgbGV0IGNhbmNlbCA9ICgpID0+IHtcbiAgICAgICAgY2FuY2VsTG9vcCA9IHRydWU7XG4gICAgICB9O1xuICAgICAgaWYgKGFycmF5LnR5cGUgPT09IFwibnVtZXJpY1wiKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5zaXplOyBpICs9IDEpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChibG9jayhhcnJheS5nZXQoaSksIGksIGNhbmNlbCkpO1xuICAgICAgICAgIGlmIChjYW5jZWxMb29wKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjb3BlLmFycmF5RXhwcmVzc2lvbiguLi5yZXN1bHQpO1xuICAgICAgfVxuICAgICAgbGV0IHJlc3VsdCA9IHNjb3BlLm1hcEV4cHJlc3Npb24oKTtcbiAgICAgIGZvciAobGV0IFtrZXksIHZhbF0gb2YgYXJyYXkpIHtcbiAgICAgICAgcmVzdWx0LnNldChrZXksIGJsb2NrKHZhbCwga2V5LCBjYW5jZWwpKTtcbiAgICAgICAgaWYgKGNhbmNlbExvb3ApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHRvSlM6IChpbnB1dCkgPT4ge1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgfVxuICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgIHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIGlucHV0KSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBTY29wZUFwaS50b0pTKHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIHNjb3BlLmFycmF5RXhwcmVzc2lvbigpLl9fcHJvdG9fXy5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQuc2l6ZTsgaSArPSAxKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goU2NvcGVBcGkudG9KUyhpbnB1dFtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHRvSlNPTjogKGlucHV0KSA9PiB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoU2NvcGVBcGkudG9KUyhpbnB1dCkpO1xuICAgIH0sXG4gICAgXCJCU09OdG9NYXBcIjogKGlucHV0KSA9PiB7XG4gICAgICBsZXQgcmVzdWx0O1xuICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCBCdWZmZXIuaXNCdWZmZXIoaW5wdXQpIHx8IChcIl9ic29udHlwZVwiIGluIGlucHV0KSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICB9XG4gICAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgcmVzdWx0ID0gc2NvcGUuYXJyYXlFeHByZXNzaW9uKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICByZXN1bHRbaV0gPSBTY29wZUFwaS5CU09OdG9NYXAoaW5wdXRbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBzY29wZS5tYXBFeHByZXNzaW9uKCk7XG4gICAgICBmb3IgKGxldCBpIGluIGlucHV0KSB7XG4gICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChpbnB1dCwgaSkpIHtcbiAgICAgICAgICByZXN1bHRbaV0gPSBTY29wZUFwaS5CU09OdG9NYXAoaW5wdXRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgXCJldmFsXCI6IChjb2RlKSA9PiB7XG4gICAgICBsZXQgcGFyc2VyID0gbmV3IFNjb3BlUGFyc2VyKCk7XG4gICAgICBsZXQgdHJhbnNsYXRpb24gPSBwYXJzZXIudHJhbnNsYXRlKGNvZGUpO1xuICAgICAgcmV0dXJuIGV2YWwodHJhbnNsYXRpb24uY29kZSk7XG4gICAgfSxcbiAgICBcImNvbXBpbGVcIjogKGZpbGVuYW1lKSA9PiB7XG4gICAgICBsZXQgcGFyc2VyID0gbmV3IFNjb3BlUGFyc2VyKCk7XG4gICAgICBsZXQgc3JjRmlsZW5hbWUgPSBwYXRoLmpvaW4oX19zY29wZWRpciwgZmlsZW5hbWUpO1xuICAgICAgbGV0IGxpYkZpbGVuYW1lID0gc3JjRmlsZW5hbWUucmVwbGFjZSgvXFwuc2MkLywgXCIuanNcIik7XG4gICAgICByZXR1cm4gbmV3IFNjb3BlQXBpLnByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBmcy5yZWFkRmlsZShzcmNGaWxlbmFtZSwgXCJ1dGY4XCIsIChlcnIsIHNyY0NvZGUpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoYENvdWxkIG5vdCByZWFkIGZpbGUgJHtzcmNGaWxlbmFtZX0uXFxuJHtlcnJ9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCB0cmFuc2xhdGlvbiA9IHBhcnNlci50cmFuc2xhdGUoc3JjQ29kZSwgc3JjRmlsZW5hbWUsIGxpYkZpbGVuYW1lKTtcbiAgICAgICAgICBmcy53cml0ZUZpbGUobGliRmlsZW5hbWUsIHRyYW5zbGF0aW9uLmNvZGUsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGBDb3VsZCBub3Qgd3JpdGUgdG8gZmlsZSAke2xpYkZpbGVuYW1lfS5cXG4ke2Vycn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBpbXAgPSBzY29wZS5pbXBvcnQobGliRmlsZW5hbWUpO1xuICAgICAgICAgICAgcmVzb2x2ZShpbXApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgXCJwcm9taXNlXCI6IGZ1bmN0aW9uIChleGVjdXRvcikge1xuICAgICAgbGV0IHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIGxldCBzUCA9IHNjb3BlLm1hcEV4cHJlc3Npb24oKTtcblxuICAgICAgc1Auc2V0KFwidGhlblwiLCAoc2MpID0+IHtcbiAgICAgICAgcC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICBzYyhyZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBzUC5zZXQoXCJjYXRjaFwiLCAoc2MpID0+IHtcbiAgICAgICAgcC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgc2MoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgc1Auc2V0KFwiZmluYWxseVwiLCAoc2MpID0+IHtcbiAgICAgICAgcC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICBzYygpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBzUC5vcmlnaW5hbFByb21pc2UgPSBwO1xuXG4gICAgICByZXR1cm4gc1A7XG4gICAgfVxuICB9O1xuICBTY29wZUFwaS5wcm9taXNlLmdldCA9IChrZXkpID0+IHtcbiAgICByZXR1cm4gU2NvcGVBcGkucHJvbWlzZVtrZXldO1xuICB9O1xuICBTY29wZUFwaS5wcm9taXNlLmFsbCA9IChtKSA9PiB7XG4gICAgbGV0IGFyclYgPSBbXTtcbiAgICBsZXQgYXJySyA9IFtdO1xuICAgIGZvciAobGV0IFtrZXksIHZhbF0gb2YgbSkge1xuICAgICAgbGV0IHVucGFja1ZhbDtcbiAgICAgIGlmICh2YWwub3JpZ2luYWxQcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdW5wYWNrVmFsID0gdmFsLm9yaWdpbmFsUHJvbWlzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVucGFja1ZhbCA9IHZhbDtcbiAgICAgIH1cbiAgICAgIGFyclYucHVzaCh1bnBhY2tWYWwpO1xuICAgICAgYXJySy5wdXNoKGtleSk7XG4gICAgfVxuXG4gICAgbGV0IHAgPSBQcm9taXNlLmFsbChhcnJWKTtcbiAgICBsZXQgc1AgPSBzY29wZS5tYXBFeHByZXNzaW9uKCk7XG5cbiAgICBzUC5zZXQoXCJ0aGVuXCIsIChzYykgPT4ge1xuICAgICAgcC50aGVuKCh2YWx1ZXMpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHNjb3BlLm1hcEV4cHJlc3Npb24oKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGFycktbaV0sIHZhbHVlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgc2MocmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc1Auc2V0KFwiY2F0Y2hcIiwgKHNjKSA9PiB7XG4gICAgICBwLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgc2MoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc1Auc2V0KFwiZmluYWxseVwiLCAoc2MpID0+IHtcbiAgICAgIHAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHNjKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzUDtcbiAgfTtcbiAgU2NvcGVBcGkucHJpbnQgPSBzY29wZS5jcmVhdGVTY29wZShTY29wZUFwaS5wcmludCk7XG4gIFNjb3BlQXBpLmRlYnVnID0gc2NvcGUuY3JlYXRlU2NvcGUoU2NvcGVBcGkuZGVidWcpO1xuICBTY29wZUFwaS5pZiA9IHNjb3BlLmNyZWF0ZVNjb3BlKFNjb3BlQXBpLmlmKTtcbiAgU2NvcGVBcGkuZWFjaCA9IHNjb3BlLmNyZWF0ZVNjb3BlKFNjb3BlQXBpLmVhY2gpO1xuICByZXR1cm4gU2NvcGVBcGk7XG59OyIsIi8qIVxuICogQ3Jvc3MtQnJvd3NlciBTcGxpdCAxLjEuMVxuICogQ29weXJpZ2h0IDIwMDctMjAxMiBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT5cbiAqIEF2YWlsYWJsZSB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIEVDTUFTY3JpcHQgY29tcGxpYW50LCB1bmlmb3JtIGNyb3NzLWJyb3dzZXIgc3BsaXQgbWV0aG9kXG4gKi9cblxuLyoqXG4gKiBTcGxpdHMgYSBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBzdHJpbmdzIHVzaW5nIGEgcmVnZXggb3Igc3RyaW5nIHNlcGFyYXRvci4gTWF0Y2hlcyBvZiB0aGVcbiAqIHNlcGFyYXRvciBhcmUgbm90IGluY2x1ZGVkIGluIHRoZSByZXN1bHQgYXJyYXkuIEhvd2V2ZXIsIGlmIGBzZXBhcmF0b3JgIGlzIGEgcmVnZXggdGhhdCBjb250YWluc1xuICogY2FwdHVyaW5nIGdyb3VwcywgYmFja3JlZmVyZW5jZXMgYXJlIHNwbGljZWQgaW50byB0aGUgcmVzdWx0IGVhY2ggdGltZSBgc2VwYXJhdG9yYCBpcyBtYXRjaGVkLlxuICogRml4ZXMgYnJvd3NlciBidWdzIGNvbXBhcmVkIHRvIHRoZSBuYXRpdmUgYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIGFuZCBjYW4gYmUgdXNlZCByZWxpYWJseVxuICogY3Jvc3MtYnJvd3Nlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNwbGl0LlxuICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBzZXBhcmF0b3IgUmVnZXggb3Igc3RyaW5nIHRvIHVzZSBmb3Igc2VwYXJhdGluZyB0aGUgc3RyaW5nLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtsaW1pdF0gTWF4aW11bSBudW1iZXIgb2YgaXRlbXMgdG8gaW5jbHVkZSBpbiB0aGUgcmVzdWx0IGFycmF5LlxuICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiBzdWJzdHJpbmdzLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBCYXNpYyB1c2VcbiAqIHNwbGl0KCdhIGIgYyBkJywgJyAnKTtcbiAqIC8vIC0+IFsnYScsICdiJywgJ2MnLCAnZCddXG4gKlxuICogLy8gV2l0aCBsaW1pdFxuICogc3BsaXQoJ2EgYiBjIGQnLCAnICcsIDIpO1xuICogLy8gLT4gWydhJywgJ2InXVxuICpcbiAqIC8vIEJhY2tyZWZlcmVuY2VzIGluIHJlc3VsdCBhcnJheVxuICogc3BsaXQoJy4ud29yZDEgd29yZDIuLicsIC8oW2Etel0rKShcXGQrKS9pKTtcbiAqIC8vIC0+IFsnLi4nLCAnd29yZCcsICcxJywgJyAnLCAnd29yZCcsICcyJywgJy4uJ11cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gc3BsaXQodW5kZWYpIHtcblxuICB2YXIgbmF0aXZlU3BsaXQgPSBTdHJpbmcucHJvdG90eXBlLnNwbGl0LFxuICAgIGNvbXBsaWFudEV4ZWNOcGNnID0gLygpPz8vLmV4ZWMoXCJcIilbMV0gPT09IHVuZGVmLFxuICAgIC8vIE5QQ0c6IG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgc2VsZjtcblxuICBzZWxmID0gZnVuY3Rpb24oc3RyLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBgbmF0aXZlU3BsaXRgXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzZXBhcmF0b3IpICE9PSBcIltvYmplY3QgUmVnRXhwXVwiKSB7XG4gICAgICByZXR1cm4gbmF0aXZlU3BsaXQuY2FsbChzdHIsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cbiAgICB2YXIgb3V0cHV0ID0gW10sXG4gICAgICBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/IFwiaVwiIDogXCJcIikgKyAoc2VwYXJhdG9yLm11bHRpbGluZSA/IFwibVwiIDogXCJcIikgKyAoc2VwYXJhdG9yLmV4dGVuZGVkID8gXCJ4XCIgOiBcIlwiKSArIC8vIFByb3Bvc2VkIGZvciBFUzZcbiAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gXCJ5XCIgOiBcIlwiKSxcbiAgICAgIC8vIEZpcmVmb3ggMytcbiAgICAgIGxhc3RMYXN0SW5kZXggPSAwLFxuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHNlcGFyYXRvciA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyBcImdcIiksXG4gICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgIHN0ciArPSBcIlwiOyAvLyBUeXBlLWNvbnZlcnRcbiAgICBpZiAoIWNvbXBsaWFudEV4ZWNOcGNnKSB7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKFwiXlwiICsgc2VwYXJhdG9yLnNvdXJjZSArIFwiJCg/IVxcXFxzKVwiLCBmbGFncyk7XG4gICAgfVxuICAgIC8qIFZhbHVlcyBmb3IgYGxpbWl0YCwgcGVyIHRoZSBzcGVjOlxuICAgICAqIElmIHVuZGVmaW5lZDogNDI5NDk2NzI5NSAvLyBNYXRoLnBvdygyLCAzMikgLSAxXG4gICAgICogSWYgMCwgSW5maW5pdHksIG9yIE5hTjogMFxuICAgICAqIElmIHBvc2l0aXZlIG51bWJlcjogbGltaXQgPSBNYXRoLmZsb29yKGxpbWl0KTsgaWYgKGxpbWl0ID4gNDI5NDk2NzI5NSkgbGltaXQgLT0gNDI5NDk2NzI5NjtcbiAgICAgKiBJZiBuZWdhdGl2ZSBudW1iZXI6IDQyOTQ5NjcyOTYgLSBNYXRoLmZsb29yKE1hdGguYWJzKGxpbWl0KSlcbiAgICAgKiBJZiBvdGhlcjogVHlwZS1jb252ZXJ0LCB0aGVuIHVzZSB0aGUgYWJvdmUgcnVsZXNcbiAgICAgKi9cbiAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZiA/IC0xID4+PiAwIDogLy8gTWF0aC5wb3coMiwgMzIpIC0gMVxuICAgIGxpbWl0ID4+PiAwOyAvLyBUb1VpbnQzMihsaW1pdClcbiAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdHIpKSB7XG4gICAgICAvLyBgc2VwYXJhdG9yLmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goc3RyLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvclxuICAgICAgICAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cHNcbiAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZyAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZikge1xuICAgICAgICAgICAgICAgIG1hdGNoW2ldID0gdW5kZWY7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW1pdCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VwYXJhdG9yLmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHtcbiAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yLnRlc3QoXCJcIikpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goXCJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKHN0ci5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgbGltaXQpIDogb3V0cHV0O1xuICB9O1xuXG4gIHJldHVybiBzZWxmO1xufSkoKTtcbiIsInZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcblxudmFyIGlzTW9kZXJuID0gKFxuICB0eXBlb2YgQnVmZmVyLmFsbG9jID09PSAnZnVuY3Rpb24nICYmXG4gIHR5cGVvZiBCdWZmZXIuYWxsb2NVbnNhZmUgPT09ICdmdW5jdGlvbicgJiZcbiAgdHlwZW9mIEJ1ZmZlci5mcm9tID09PSAnZnVuY3Rpb24nXG4pXG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIgKGlucHV0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGlucHV0KS5zbGljZSg4LCAtMSkgPT09ICdBcnJheUJ1ZmZlcidcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChvYmosIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBieXRlT2Zmc2V0ID4+Pj0gMFxuXG4gIHZhciBtYXhMZW5ndGggPSBvYmouYnl0ZUxlbmd0aCAtIGJ5dGVPZmZzZXRcblxuICBpZiAobWF4TGVuZ3RoIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiJ29mZnNldCcgaXMgb3V0IG9mIGJvdW5kc1wiKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gbWF4TGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID4+Pj0gMFxuXG4gICAgaWYgKGxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCInbGVuZ3RoJyBpcyBvdXQgb2YgYm91bmRzXCIpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlzTW9kZXJuXG4gICAgPyBCdWZmZXIuZnJvbShvYmouc2xpY2UoYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGxlbmd0aCkpXG4gICAgOiBuZXcgQnVmZmVyKG5ldyBVaW50OEFycmF5KG9iai5zbGljZShieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgbGVuZ3RoKSkpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgcmV0dXJuIGlzTW9kZXJuXG4gICAgPyBCdWZmZXIuZnJvbShzdHJpbmcsIGVuY29kaW5nKVxuICAgIDogbmV3IEJ1ZmZlcihzdHJpbmcsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBidWZmZXJGcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpc0FycmF5QnVmZmVyKHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gaXNNb2Rlcm5cbiAgICA/IEJ1ZmZlci5mcm9tKHZhbHVlKVxuICAgIDogbmV3IEJ1ZmZlcih2YWx1ZSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidWZmZXJGcm9tXG4iLCIvLyBjb250YWlucywgYWRkLCByZW1vdmUsIHRvZ2dsZVxudmFyIGluZGV4b2YgPSByZXF1aXJlKCdpbmRleG9mJylcblxubW9kdWxlLmV4cG9ydHMgPSBDbGFzc0xpc3RcblxuZnVuY3Rpb24gQ2xhc3NMaXN0KGVsZW0pIHtcbiAgICB2YXIgY2wgPSBlbGVtLmNsYXNzTGlzdFxuXG4gICAgaWYgKGNsKSB7XG4gICAgICAgIHJldHVybiBjbFxuICAgIH1cblxuICAgIHZhciBjbGFzc0xpc3QgPSB7XG4gICAgICAgIGFkZDogYWRkXG4gICAgICAgICwgcmVtb3ZlOiByZW1vdmVcbiAgICAgICAgLCBjb250YWluczogY29udGFpbnNcbiAgICAgICAgLCB0b2dnbGU6IHRvZ2dsZVxuICAgICAgICAsIHRvU3RyaW5nOiAkdG9TdHJpbmdcbiAgICAgICAgLCBsZW5ndGg6IDBcbiAgICAgICAgLCBpdGVtOiBpdGVtXG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzTGlzdFxuXG4gICAgZnVuY3Rpb24gYWRkKHRva2VuKSB7XG4gICAgICAgIHZhciBsaXN0ID0gZ2V0VG9rZW5zKClcbiAgICAgICAgaWYgKGluZGV4b2YobGlzdCwgdG9rZW4pID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGxpc3QucHVzaCh0b2tlbilcbiAgICAgICAgc2V0VG9rZW5zKGxpc3QpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlKHRva2VuKSB7XG4gICAgICAgIHZhciBsaXN0ID0gZ2V0VG9rZW5zKClcbiAgICAgICAgICAgICwgaW5kZXggPSBpbmRleG9mKGxpc3QsIHRva2VuKVxuXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIHNldFRva2VucyhsaXN0KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRhaW5zKHRva2VuKSB7XG4gICAgICAgIHJldHVybiBpbmRleG9mKGdldFRva2VucygpLCB0b2tlbikgPiAtMVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvZ2dsZSh0b2tlbikge1xuICAgICAgICBpZiAoY29udGFpbnModG9rZW4pKSB7XG4gICAgICAgICAgICByZW1vdmUodG9rZW4pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZCh0b2tlbilcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBlbGVtLmNsYXNzTmFtZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGl0ZW0oaW5kZXgpIHtcbiAgICAgICAgdmFyIHRva2VucyA9IGdldFRva2VucygpXG4gICAgICAgIHJldHVybiB0b2tlbnNbaW5kZXhdIHx8IG51bGxcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUb2tlbnMoKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXIoY2xhc3NOYW1lLnNwbGl0KFwiIFwiKSwgaXNUcnV0aHkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VG9rZW5zKGxpc3QpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoXG5cbiAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBsaXN0LmpvaW4oXCIgXCIpXG4gICAgICAgIGNsYXNzTGlzdC5sZW5ndGggPSBsZW5ndGhcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdFtpXSA9IGxpc3RbaV1cbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBsaXN0W2xlbmd0aF1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlciAoYXJyLCBmbikge1xuICAgIHZhciByZXQgPSBbXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmbihhcnJbaV0pKSByZXQucHVzaChhcnJbaV0pXG4gICAgfVxuICAgIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaXNUcnV0aHkodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGF0aCAgICAgICAgICAgID0gIHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBjb252ZXJ0ICAgICAgICAgPSAgcmVxdWlyZSgnY29udmVydC1zb3VyY2UtbWFwJyk7XG52YXIgbWVtb2l6ZSAgICAgICAgID0gIHJlcXVpcmUoJ2xvZGFzaC5tZW1vaXplJyk7XG52YXIgY3JlYXRlR2VuZXJhdG9yID0gIHJlcXVpcmUoJ2lubGluZS1zb3VyY2UtbWFwJyk7XG52YXIgcGF0aElzQWJzb2x1dGUgID0gIHJlcXVpcmUoJy4vbGliL3BhdGgtaXMtYWJzb2x1dGUnKTtcbnZhciBtYXBwaW5nc0Zyb21NYXAgPSAgcmVxdWlyZSgnLi9saWIvbWFwcGluZ3MtZnJvbS1tYXAnKTtcblxudmFyIHByb3RvY29sUnggPSAvXlthLXpdKzpcXC9cXC8vO1xuXG4vKipcbiAqIFJlYmFzZXMgYSByZWxhdGl2ZSBwYXRoIGluICdzb3VyY2VGaWxlJyB0byBiZSByZWxhdGl2ZVxuICogdG8gdGhlIHBhdGggd2hlcmUgJ3NvdXJjZUZpbGUnIGlzIGxvY2F0ZWQuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVmb3JlIGFkZGluZyByZWxhdGl2ZSBwYXRocyB0byB0aGVcbiAqIG5ldyBjb21iaW5lZCBtYXAgdG8gZW5zdXJlIGFsbCBwYXRocyBhcmUgcmVsYXRpdmUgdG8gdGhlaXJcbiAqIG9yaWdpbmFsIHNvdXJjZS5cbiAqXG4gKiBUaGUgJ3NvdXJjZVJvb3QnIGZyb20gdGhlIG9yaWdpbmFsIHNvdXJjZSBtYXAgaXMgam9pbmVkXG4gKiBhcyB3ZWxsIHRvIGVuc3VyZSB0aGUgY29tcGxldGUgcGF0aC5cbiAqXG4gKiBSZXN1bHRpbmcgcGF0aHMgdGhhdCBhcmUgYWJzb2x1dGUgYXJlIHBhc3NlZCBhbG9uZyBkaXJlY3RseS5cbiAqXG4gKiBAcGFyYW0gc291cmNlRmlsZSB7U3RyaW5nfSBwYXRoIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSB0aGF0IHJlZmVyZW5jZXMgYSBtYXBcbiAqIEBwYXJhbSByZWxhdGl2ZVJvb3Qge1N0cmluZ30gc291cmNlUm9vdCBpbiBzb3VyY2VGaWxlJ3MgbWFwIHRvIGNvbWJpbmUgd2l0aCByZWxhdGl2ZVBhdGhcbiAqIEBwYXJhbSByZWxhdGl2ZVBhdGgge1N0cmluZ30gc291cmNlIHBhdGggZnJvbSBzb3VyY2VGaWxlJ3MgbWFwXG4gKi9cbnZhciByZWJhc2VSZWxhdGl2ZVBhdGggPSBtZW1vaXplKGZ1bmN0aW9uKHNvdXJjZUZpbGUsIHJlbGF0aXZlUm9vdCwgcmVsYXRpdmVQYXRoKSB7XG4gIGlmICghcmVsYXRpdmVQYXRoKSB7XG4gICAgcmV0dXJuIHJlbGF0aXZlUGF0aDtcbiAgfVxuXG4gIC8vIGpvaW4gcmVsYXRpdmUgcGF0aCB0byByb290IChlLmcuICdzcmMvJyArICdmaWxlLmpzJylcbiAgdmFyIHJlbGF0aXZlUm9vdGVkUGF0aCA9IHJlbGF0aXZlUm9vdCA/IHBhdGguam9pbihyZWxhdGl2ZVJvb3QsIHJlbGF0aXZlUGF0aCkgOiByZWxhdGl2ZVBhdGg7XG4gIHJlbGF0aXZlUm9vdGVkUGF0aCA9IHJlbGF0aXZlUm9vdGVkUGF0aC5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG4gIHNvdXJjZUZpbGUgPSBzb3VyY2VGaWxlLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcblxuICBpZiAoc291cmNlRmlsZSA9PT0gcmVsYXRpdmVSb290ZWRQYXRoIHx8ICAgIC8vIHNhbWUgcGF0aCxcbiAgICAgIHBhdGhJc0Fic29sdXRlKHJlbGF0aXZlUm9vdGVkUGF0aCkgfHwgICAvLyBhYnNvbHV0ZSBwYXRoLCBub3JcbiAgICAgIHByb3RvY29sUngudGVzdChyZWxhdGl2ZVJvb3RlZFBhdGgpKSB7ICAvLyBhYnNvbHV0ZSBwcm90b2NvbCBuZWVkIHJlYmFzaW5nXG4gICAgcmV0dXJuIHJlbGF0aXZlUm9vdGVkUGF0aDtcbiAgfVxuXG4gIC8vIG1ha2UgcmVsYXRpdmUgdG8gc291cmNlIGZpbGVcbiAgcmV0dXJuIHBhdGguam9pbihwYXRoLmRpcm5hbWUoc291cmNlRmlsZSksIHJlbGF0aXZlUm9vdGVkUGF0aCkucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xufSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICByZXR1cm4gYSArICc6OicgKyBiICsgJzo6JyArIGM7XG59KTtcblxuZnVuY3Rpb24gcmVzb2x2ZU1hcChzb3VyY2UpIHtcbiAgdmFyIGdlbiA9IGNvbnZlcnQuZnJvbVNvdXJjZShzb3VyY2UpO1xuICByZXR1cm4gZ2VuID8gZ2VuLnRvT2JqZWN0KCkgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBoYXNJbmxpbmVkU291cmNlKGV4aXN0aW5nTWFwKSB7XG4gIHJldHVybiBleGlzdGluZ01hcC5zb3VyY2VzQ29udGVudCAmJiAhIWV4aXN0aW5nTWFwLnNvdXJjZXNDb250ZW50WzBdO1xufVxuXG5mdW5jdGlvbiBDb21iaW5lcihmaWxlLCBzb3VyY2VSb290KSB7XG4gIC8vIHNpbmNlIHdlIGluY2x1ZGUgdGhlIG9yaWdpbmFsIGNvZGUgaW4gdGhlIG1hcCBzb3VyY2VSb290IGFjdHVhbGx5IG5vdCBuZWVkZWRcbiAgdGhpcy5nZW5lcmF0b3IgPSBjcmVhdGVHZW5lcmF0b3IoeyBmaWxlOiBmaWxlIHx8ICdnZW5lcmF0ZWQuanMnLCBzb3VyY2VSb290OiBzb3VyY2VSb290IH0pO1xufVxuXG5Db21iaW5lci5wcm90b3R5cGUuX2FkZEdlbmVyYXRlZE1hcCA9IGZ1bmN0aW9uIChzb3VyY2VGaWxlLCBzb3VyY2UsIG9mZnNldCkge1xuICB0aGlzLmdlbmVyYXRvci5hZGRHZW5lcmF0ZWRNYXBwaW5ncyhzb3VyY2VGaWxlLCBzb3VyY2UsIG9mZnNldCk7XG4gIHRoaXMuZ2VuZXJhdG9yLmFkZFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgc291cmNlKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Db21iaW5lci5wcm90b3R5cGUuX2FkZEV4aXN0aW5nTWFwID0gZnVuY3Rpb24gKHNvdXJjZUZpbGUsIHNvdXJjZSwgZXhpc3RpbmdNYXAsIG9mZnNldCkge1xuICB2YXIgbWFwcGluZ3MgPSBtYXBwaW5nc0Zyb21NYXAoZXhpc3RpbmdNYXApO1xuXG4gIC8vIGFkZCBhbGwgb2YgdGhlIHNvdXJjZXMgZnJvbSB0aGUgbWFwXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleGlzdGluZ01hcC5zb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFleGlzdGluZ01hcC5zb3VyY2VzQ29udGVudCkgY29udGludWU7XG5cbiAgICB0aGlzLmdlbmVyYXRvci5hZGRTb3VyY2VDb250ZW50KFxuICAgICAgcmViYXNlUmVsYXRpdmVQYXRoKHNvdXJjZUZpbGUsIGV4aXN0aW5nTWFwLnNvdXJjZVJvb3QsIGV4aXN0aW5nTWFwLnNvdXJjZXNbaV0pLFxuICAgICAgZXhpc3RpbmdNYXAuc291cmNlc0NvbnRlbnRbaV0pO1xuICB9XG5cbiAgLy8gYWRkIHRoZSBtYXBwaW5ncywgcHJlc2VydmluZyB0aGUgb3JpZ2luYWwgbWFwcGluZyAnc291cmNlJ1xuICBtYXBwaW5ncy5mb3JFYWNoKGZ1bmN0aW9uKG1hcHBpbmcpIHtcbiAgICAvLyBBZGQgdGhlIG1hcHBpbmdzIG9uZSBhdCBhIHRpbWUgYmVjYXVzZSAnaW5saW5lLXNvdXJjZS1tYXAnIGRvZXNuJ3QgaGFuZGxlXG4gICAgLy8gbWFwcGluZyBzb3VyY2UgZmlsZW5hbWVzLiBUaGUgbWFwcGluZy5zb3VyY2UgYWxyZWFkeSB0YWtlcyBzb3VyY2VSb290IGludG8gYWNjb3VudFxuICAgIC8vIHBlciB0aGUgU01Db25zdW1lci5lYWNoTWFwcGluZyBmdW5jdGlvbiwgc28gcGFzcyBudWxsIGZvciB0aGUgcm9vdCBoZXJlLlxuICAgIHRoaXMuZ2VuZXJhdG9yLmFkZE1hcHBpbmdzKFxuICAgICAgcmViYXNlUmVsYXRpdmVQYXRoKHNvdXJjZUZpbGUsIG51bGwsIG1hcHBpbmcuc291cmNlKSwgW21hcHBpbmddLCBvZmZzZXQpO1xuICB9LCB0aGlzKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkcyBtYXAgdG8gdW5kZXJseWluZyBzb3VyY2UgbWFwLlxuICogSWYgc291cmNlIGNvbnRhaW5zIGEgc291cmNlIG1hcCBjb21tZW50IHRoYXQgaGFzIHRoZSBzb3VyY2Ugb2YgdGhlIG9yaWdpbmFsIGZpbGUgaW5saW5lZCBpdCB3aWxsIG9mZnNldCB0aGVzZVxuICogbWFwcGluZ3MgYW5kIGluY2x1ZGUgdGhlbS5cbiAqIElmIG5vIHNvdXJjZSBtYXAgY29tbWVudCBpcyBmb3VuZCBvciBpdCBoYXMgbm8gc291cmNlIGlubGluZWQsIG1hcHBpbmdzIGZvciB0aGUgZmlsZSB3aWxsIGJlIGdlbmVyYXRlZCBhbmQgaW5jbHVkZWRcbiAqXG4gKiBAbmFtZSBhZGRNYXBcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIG9wdHMge09iamVjdH0geyBzb3VyY2VGaWxlOiB7U3RyaW5nfSwgc291cmNlOiB7U3RyaW5nfSB9XG4gKiBAcGFyYW0gb2Zmc2V0IHtPYmplY3R9IHsgbGluZToge051bWJlcn0sIGNvbHVtbjoge051bWJlcn0gfVxuICovXG5Db21iaW5lci5wcm90b3R5cGUuYWRkRmlsZSA9IGZ1bmN0aW9uIChvcHRzLCBvZmZzZXQpIHtcblxuICBvZmZzZXQgPSBvZmZzZXQgfHwge307XG4gIGlmICghb2Zmc2V0Lmhhc093blByb3BlcnR5KCdsaW5lJykpICBvZmZzZXQubGluZSAgICA9ICAwO1xuICBpZiAoIW9mZnNldC5oYXNPd25Qcm9wZXJ0eSgnY29sdW1uJykpIG9mZnNldC5jb2x1bW4gPSAgMDtcblxuICB2YXIgZXhpc3RpbmdNYXAgPSByZXNvbHZlTWFwKG9wdHMuc291cmNlKTtcblxuICByZXR1cm4gZXhpc3RpbmdNYXAgJiYgaGFzSW5saW5lZFNvdXJjZShleGlzdGluZ01hcClcbiAgICA/IHRoaXMuX2FkZEV4aXN0aW5nTWFwKG9wdHMuc291cmNlRmlsZSwgb3B0cy5zb3VyY2UsIGV4aXN0aW5nTWFwLCBvZmZzZXQpXG4gICAgOiB0aGlzLl9hZGRHZW5lcmF0ZWRNYXAob3B0cy5zb3VyY2VGaWxlLCBvcHRzLnNvdXJjZSwgb2Zmc2V0KTtcbn07XG5cbi8qKlxuKiBAbmFtZSBiYXNlNjRcbiogQGZ1bmN0aW9uXG4qIEByZXR1cm4ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgY29tYmluZWQgc291cmNlIG1hcFxuKi9cbkNvbWJpbmVyLnByb3RvdHlwZS5iYXNlNjQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmdlbmVyYXRvci5iYXNlNjRFbmNvZGUoKTtcbn07XG5cbi8qKlxuICogQG5hbWUgY29tbWVudFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIHNvdXJjZU1hcHBpbmdVcmwgY29tbWVudCBvZiB0aGUgY29tYmluZWQgc291cmNlIG1hcFxuICovXG5Db21iaW5lci5wcm90b3R5cGUuY29tbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZ2VuZXJhdG9yLmlubGluZU1hcHBpbmdVcmwoKTtcbn07XG5cbi8qKlxuICogQG5hbWUgY3JlYXRlXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSBmaWxlIHtTdHJpbmd9IG9wdGlvbmFsIG5hbWUgb2YgdGhlIGdlbmVyYXRlZCBmaWxlXG4gKiBAcGFyYW0gc291cmNlUm9vdCB7U3RyaW5nfSBvcHRpb25hbCBzb3VyY2VSb290IG9mIHRoZSBtYXAgdG8gYmUgZ2VuZXJhdGVkXG4gKiBAcmV0dXJuIHtPYmplY3R9IENvbWJpbmVyIGluc3RhbmNlIHRvIHdoaWNoIHNvdXJjZSBtYXBzIGNhbiBiZSBhZGRlZCBhbmQgbGF0ZXIgY29tYmluZWRcbiAqL1xuZXhwb3J0cy5jcmVhdGUgPSBmdW5jdGlvbiAoZmlsZSwgc291cmNlUm9vdCkgeyByZXR1cm4gbmV3IENvbWJpbmVyKGZpbGUsIHNvdXJjZVJvb3QpOyB9O1xuXG4vKipcbiAqIEBuYW1lIHJlbW92ZUNvbW1lbnRzXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSBzcmNcbiAqIEByZXR1cm4ge1N0cmluZ30gc3JjIHdpdGggYWxsIHNvdXJjZU1hcHBpbmdVcmwgY29tbWVudHMgcmVtb3ZlZFxuICovXG5leHBvcnRzLnJlbW92ZUNvbW1lbnRzID0gZnVuY3Rpb24gKHNyYykge1xuICBpZiAoIXNyYy5yZXBsYWNlKSByZXR1cm4gc3JjO1xuICByZXR1cm4gc3JjLnJlcGxhY2UoY29udmVydC5jb21tZW50UmVnZXgsICcnKS5yZXBsYWNlKGNvbnZlcnQubWFwRmlsZUNvbW1lbnRSZWdleCwgJycpO1xufTtcbiIsInZhciBTTUNvbnN1bWVyICA9ICByZXF1aXJlKCdzb3VyY2UtbWFwJykuU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogQG5hbWUgbWFwcGluZ3NGcm9tTWFwXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSBtYXAge09iamVjdH0gdGhlIEpTT04ucGFyc2UoKSdlZCBtYXBcbiAqIEByZXR1cm4ge0FycmF5fSBhcnJheSBvZiBtYXBwaW5nc1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXApIHtcbiAgdmFyIGNvbnN1bWVyID0gbmV3IFNNQ29uc3VtZXIobWFwKTtcbiAgdmFyIG1hcHBpbmdzID0gW107XG5cbiAgY29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAvLyBvbmx5IHNldCBzb3VyY2UgaWYgd2UgaGF2ZSBvcmlnaW5hbCBwb3NpdGlvbiB0byBoYW5kbGUgZWRnZWNhc2UgKHNlZSBpbmxpbmUtc291cmNlLW1hcCB0ZXN0cylcbiAgICBtYXBwaW5ncy5wdXNoKHtcbiAgICAgIG9yaWdpbmFsOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uICE9IG51bGwgPyB7XG4gICAgICAgIGNvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgLCBsaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZVxuICAgICAgfSA6IHVuZGVmaW5lZFxuICAgICwgZ2VuZXJhdGVkOiB7XG4gICAgICAgIGNvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cbiAgICAgICwgbGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lXG4gICAgICB9XG4gICAgLCBzb3VyY2U6IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gIT0gbnVsbCA/IG1hcHBpbmcuc291cmNlIDogdW5kZWZpbmVkXG4gICAgLCBuYW1lOiBtYXBwaW5nLm5hbWVcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIG1hcHBpbmdzO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBwb3NpeChwYXRoKSB7XG5cdHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufTtcblxuZnVuY3Rpb24gd2luMzIocGF0aCkge1xuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvYmxvYi9iM2ZjYzI0NWZiMjU1Mzk5MDllZjFkNWVhYTAxZGJmOTJlMTY4NjMzL2xpYi9wYXRoLmpzI0w1NlxuXHR2YXIgc3BsaXREZXZpY2VSZSA9IC9eKFthLXpBLVpdOnxbXFxcXFxcL117Mn1bXlxcXFxcXC9dK1tcXFxcXFwvXStbXlxcXFxcXC9dKyk/KFtcXFxcXFwvXSk/KFtcXHNcXFNdKj8pJC87XG5cdHZhciByZXN1bHQgPSBzcGxpdERldmljZVJlLmV4ZWMocGF0aCk7XG5cdHZhciBkZXZpY2UgPSByZXN1bHRbMV0gfHwgJyc7XG5cdHZhciBpc1VuYyA9ICEhZGV2aWNlICYmIGRldmljZS5jaGFyQXQoMSkgIT09ICc6JztcblxuXHQvLyBVTkMgcGF0aHMgYXJlIGFsd2F5cyBhYnNvbHV0ZVxuXHRyZXR1cm4gISFyZXN1bHRbMl0gfHwgaXNVbmM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyB3aW4zMiA6IHBvc2l4O1xubW9kdWxlLmV4cG9ydHMucG9zaXggPSBwb3NpeDtcbm1vZHVsZS5leHBvcnRzLndpbjMyID0gd2luMzI7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG52YXIgY29tbWVudFJ4ID0gL15cXHMqXFwvKD86XFwvfFxcKilbQCNdXFxzK3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTooPzphcHBsaWNhdGlvbnx0ZXh0KVxcL2pzb247KD86Y2hhcnNldFs6PV1cXFMrOyk/YmFzZTY0LCguKikkL21nO1xudmFyIG1hcEZpbGVDb21tZW50UnggPVxuICAvL0V4YW1wbGUgKEV4dHJhIHNwYWNlIGJldHdlZW4gc2xhc2hlcyBhZGRlZCB0byBzb2x2ZSBTYWZhcmkgYnVnLiBFeGNsdWRlIHNwYWNlIGluIHByb2R1Y3Rpb24pOlxuICAvLyAgICAgLyAvIyBzb3VyY2VNYXBwaW5nVVJMPWZvby5qcy5tYXAgICAgICAgICAgIC8qIyBzb3VyY2VNYXBwaW5nVVJMPWZvby5qcy5tYXAgKi9cbiAgLyg/OlxcL1xcL1tAI11bIFxcdF0rc291cmNlTWFwcGluZ1VSTD0oW15cXHMnXCJdKz8pWyBcXHRdKiQpfCg/OlxcL1xcKltAI11bIFxcdF0rc291cmNlTWFwcGluZ1VSTD0oW15cXCpdKz8pWyBcXHRdKig/OlxcKlxcLyl7MX1bIFxcdF0qJCkvbWdcblxuZnVuY3Rpb24gZGVjb2RlQmFzZTY0KGJhc2U2NCkge1xuICByZXR1cm4gbmV3IEJ1ZmZlcihiYXNlNjQsICdiYXNlNjQnKS50b1N0cmluZygpO1xufVxuXG5mdW5jdGlvbiBzdHJpcENvbW1lbnQoc20pIHtcbiAgcmV0dXJuIHNtLnNwbGl0KCcsJykucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHJlYWRGcm9tRmlsZU1hcChzbSwgZGlyKSB7XG4gIC8vIE5PVEU6IHRoaXMgd2lsbCBvbmx5IHdvcmsgb24gdGhlIHNlcnZlciBzaW5jZSBpdCBhdHRlbXB0cyB0byByZWFkIHRoZSBtYXAgZmlsZVxuXG4gIHZhciByID0gbWFwRmlsZUNvbW1lbnRSeC5leGVjKHNtKTtcbiAgbWFwRmlsZUNvbW1lbnRSeC5sYXN0SW5kZXggPSAwO1xuXG4gIC8vIGZvciBzb21lIG9kZCByZWFzb24gLy8jIC4uIGNhcHR1cmVzIGluIDEgYW5kIC8qIC4uICovIGluIDJcbiAgdmFyIGZpbGVuYW1lID0gclsxXSB8fCByWzJdO1xuICB2YXIgZmlsZXBhdGggPSBwYXRoLmpvaW4oZGlyLCBmaWxlbmFtZSk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGZpbGVwYXRoLCAndXRmOCcpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gcmVhZCB0aGUgbWFwIGZpbGUgYXQgJyArIGZpbGVwYXRoICsgJ1xcbicgKyBlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBDb252ZXJ0ZXIgKHNtLCBvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIGlmIChvcHRzLmlzRmlsZUNvbW1lbnQpIHNtID0gcmVhZEZyb21GaWxlTWFwKHNtLCBvcHRzLmNvbW1lbnRGaWxlRGlyKTtcbiAgaWYgKG9wdHMuaGFzQ29tbWVudCkgc20gPSBzdHJpcENvbW1lbnQoc20pO1xuICBpZiAob3B0cy5pc0VuY29kZWQpIHNtID0gZGVjb2RlQmFzZTY0KHNtKTtcbiAgaWYgKG9wdHMuaXNKU09OIHx8IG9wdHMuaXNFbmNvZGVkKSBzbSA9IEpTT04ucGFyc2Uoc20pO1xuXG4gIHRoaXMuc291cmNlbWFwID0gc207XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRGcm9tTGFyZ2VTb3VyY2UoY29udGVudCl7XG4gIHZhciBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICB2YXIgbGluZTtcbiAgLy8gZmluZCBmaXJzdCBsaW5lIHdoaWNoIGNvbnRhaW5zIGEgc291cmNlIG1hcCBzdGFydGluZyBhdCBlbmQgb2YgY29udGVudFxuICBmb3IgKHZhciBpID0gbGluZXMubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgIGxpbmUgPSBsaW5lc1tpXVxuICAgIGlmICh+bGluZS5pbmRleE9mKCdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6JykpIHJldHVybiBleHBvcnRzLmZyb21Db21tZW50KGxpbmUpO1xuICB9XG59XG5cbkNvbnZlcnRlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKHNwYWNlKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnNvdXJjZW1hcCwgbnVsbCwgc3BhY2UpO1xufTtcblxuQ29udmVydGVyLnByb3RvdHlwZS50b0Jhc2U2NCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGpzb24gPSB0aGlzLnRvSlNPTigpO1xuICByZXR1cm4gbmV3IEJ1ZmZlcihqc29uKS50b1N0cmluZygnYmFzZTY0Jyk7XG59O1xuXG5Db252ZXJ0ZXIucHJvdG90eXBlLnRvQ29tbWVudCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBiYXNlNjQgPSB0aGlzLnRvQmFzZTY0KCk7XG4gIHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwnICsgYmFzZTY0O1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLm11bHRpbGluZSA/ICcvKiMgJyArIGRhdGEgKyAnICovJyA6ICcvLyMgJyArIGRhdGE7XG59O1xuXG4vLyByZXR1cm5zIGNvcHkgaW5zdGVhZCBvZiBvcmlnaW5hbFxuQ29udmVydGVyLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy50b0pTT04oKSk7XG59O1xuXG5Db252ZXJ0ZXIucHJvdG90eXBlLmFkZFByb3BlcnR5ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgaWYgKHRoaXMuc291cmNlbWFwLmhhc093blByb3BlcnR5KGtleSkpIHRocm93IG5ldyBFcnJvcigncHJvcGVydHkgJXMgYWxyZWFkeSBleGlzdHMgb24gdGhlIHNvdXJjZW1hcCwgdXNlIHNldCBwcm9wZXJ0eSBpbnN0ZWFkJyk7XG4gIHJldHVybiB0aGlzLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xufTtcblxuQ29udmVydGVyLnByb3RvdHlwZS5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRoaXMuc291cmNlbWFwW2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Db252ZXJ0ZXIucHJvdG90eXBlLmdldFByb3BlcnR5ID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gdGhpcy5zb3VyY2VtYXBba2V5XTtcbn07XG5cbmV4cG9ydHMuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG5ldyBDb252ZXJ0ZXIob2JqKTtcbn07XG5cbmV4cG9ydHMuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICByZXR1cm4gbmV3IENvbnZlcnRlcihqc29uLCB7IGlzSlNPTjogdHJ1ZSB9KTtcbn07XG5cbmV4cG9ydHMuZnJvbUJhc2U2NCA9IGZ1bmN0aW9uIChiYXNlNjQpIHtcbiAgcmV0dXJuIG5ldyBDb252ZXJ0ZXIoYmFzZTY0LCB7IGlzRW5jb2RlZDogdHJ1ZSB9KTtcbn07XG5cbmV4cG9ydHMuZnJvbUNvbW1lbnQgPSBmdW5jdGlvbiAoY29tbWVudCkge1xuICBjb21tZW50ID0gY29tbWVudFxuICAgIC5yZXBsYWNlKC9eXFwvXFwqL2csICcvLycpXG4gICAgLnJlcGxhY2UoL1xcKlxcLyQvZywgJycpO1xuXG4gIHJldHVybiBuZXcgQ29udmVydGVyKGNvbW1lbnQsIHsgaXNFbmNvZGVkOiB0cnVlLCBoYXNDb21tZW50OiB0cnVlIH0pO1xufTtcblxuZXhwb3J0cy5mcm9tTWFwRmlsZUNvbW1lbnQgPSBmdW5jdGlvbiAoY29tbWVudCwgZGlyKSB7XG4gIHJldHVybiBuZXcgQ29udmVydGVyKGNvbW1lbnQsIHsgY29tbWVudEZpbGVEaXI6IGRpciwgaXNGaWxlQ29tbWVudDogdHJ1ZSwgaXNKU09OOiB0cnVlIH0pO1xufTtcblxuLy8gRmluZHMgbGFzdCBzb3VyY2VtYXAgY29tbWVudCBpbiBmaWxlIG9yIHJldHVybnMgbnVsbCBpZiBub25lIHdhcyBmb3VuZFxuZXhwb3J0cy5mcm9tU291cmNlID0gZnVuY3Rpb24gKGNvbnRlbnQsIGxhcmdlU291cmNlKSB7XG4gIGlmIChsYXJnZVNvdXJjZSkge1xuICAgIHZhciByZXMgPSBjb252ZXJ0RnJvbUxhcmdlU291cmNlKGNvbnRlbnQpO1xuICAgIHJldHVybiByZXMgPyByZXMgOiBudWxsO1xuICB9XG5cbiAgdmFyIG0gPSBjb250ZW50Lm1hdGNoKGNvbW1lbnRSeCk7XG4gIGNvbW1lbnRSeC5sYXN0SW5kZXggPSAwO1xuICByZXR1cm4gbSA/IGV4cG9ydHMuZnJvbUNvbW1lbnQobS5wb3AoKSkgOiBudWxsO1xufTtcblxuLy8gRmluZHMgbGFzdCBzb3VyY2VtYXAgY29tbWVudCBpbiBmaWxlIG9yIHJldHVybnMgbnVsbCBpZiBub25lIHdhcyBmb3VuZFxuZXhwb3J0cy5mcm9tTWFwRmlsZVNvdXJjZSA9IGZ1bmN0aW9uIChjb250ZW50LCBkaXIpIHtcbiAgdmFyIG0gPSBjb250ZW50Lm1hdGNoKG1hcEZpbGVDb21tZW50UngpO1xuICBtYXBGaWxlQ29tbWVudFJ4Lmxhc3RJbmRleCA9IDA7XG4gIHJldHVybiBtID8gZXhwb3J0cy5mcm9tTWFwRmlsZUNvbW1lbnQobS5wb3AoKSwgZGlyKSA6IG51bGw7XG59O1xuXG5leHBvcnRzLnJlbW92ZUNvbW1lbnRzID0gZnVuY3Rpb24gKHNyYykge1xuICBjb21tZW50UngubGFzdEluZGV4ID0gMDtcbiAgcmV0dXJuIHNyYy5yZXBsYWNlKGNvbW1lbnRSeCwgJycpO1xufTtcblxuZXhwb3J0cy5yZW1vdmVNYXBGaWxlQ29tbWVudHMgPSBmdW5jdGlvbiAoc3JjKSB7XG4gIG1hcEZpbGVDb21tZW50UngubGFzdEluZGV4ID0gMDtcbiAgcmV0dXJuIHNyYy5yZXBsYWNlKG1hcEZpbGVDb21tZW50UngsICcnKTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY29tbWVudFJlZ2V4Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldENvbW1lbnRSZWdleCAoKSB7XG4gICAgY29tbWVudFJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgcmV0dXJuIGNvbW1lbnRSeDtcbiAgfVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnbWFwRmlsZUNvbW1lbnRSZWdleCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXRNYXBGaWxlQ29tbWVudFJlZ2V4ICgpIHtcbiAgICBtYXBGaWxlQ29tbWVudFJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgcmV0dXJuIG1hcEZpbGVDb21tZW50Ung7XG4gIH1cbn0pO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaGFzTmF0aXZlTWFwID0gdHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIjtcblxuLyoqXG4gKiBBIGRhdGEgc3RydWN0dXJlIHdoaWNoIGlzIGEgY29tYmluYXRpb24gb2YgYW4gYXJyYXkgYW5kIGEgc2V0LiBBZGRpbmcgYSBuZXdcbiAqIG1lbWJlciBpcyBPKDEpLCB0ZXN0aW5nIGZvciBtZW1iZXJzaGlwIGlzIE8oMSksIGFuZCBmaW5kaW5nIHRoZSBpbmRleCBvZiBhblxuICogZWxlbWVudCBpcyBPKDEpLiBSZW1vdmluZyBlbGVtZW50cyBmcm9tIHRoZSBzZXQgaXMgbm90IHN1cHBvcnRlZC4gT25seVxuICogc3RyaW5ncyBhcmUgc3VwcG9ydGVkIGZvciBtZW1iZXJzaGlwLlxuICovXG5mdW5jdGlvbiBBcnJheVNldCgpIHtcbiAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgdGhpcy5fc2V0ID0gaGFzTmF0aXZlTWFwID8gbmV3IE1hcCgpIDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kIGZvciBjcmVhdGluZyBBcnJheVNldCBpbnN0YW5jZXMgZnJvbSBhbiBleGlzdGluZyBhcnJheS5cbiAqL1xuQXJyYXlTZXQuZnJvbUFycmF5ID0gZnVuY3Rpb24gQXJyYXlTZXRfZnJvbUFycmF5KGFBcnJheSwgYUFsbG93RHVwbGljYXRlcykge1xuICB2YXIgc2V0ID0gbmV3IEFycmF5U2V0KCk7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzZXQuYWRkKGFBcnJheVtpXSwgYUFsbG93RHVwbGljYXRlcyk7XG4gIH1cbiAgcmV0dXJuIHNldDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGhvdyBtYW55IHVuaXF1ZSBpdGVtcyBhcmUgaW4gdGhpcyBBcnJheVNldC4gSWYgZHVwbGljYXRlcyBoYXZlIGJlZW5cbiAqIGFkZGVkLCB0aGFuIHRob3NlIGRvIG5vdCBjb3VudCB0b3dhcmRzIHRoZSBzaXplLlxuICpcbiAqIEByZXR1cm5zIE51bWJlclxuICovXG5BcnJheVNldC5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uIEFycmF5U2V0X3NpemUoKSB7XG4gIHJldHVybiBoYXNOYXRpdmVNYXAgPyB0aGlzLl9zZXQuc2l6ZSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX3NldCkubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBBZGQgdGhlIGdpdmVuIHN0cmluZyB0byB0aGlzIHNldC5cbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIEFycmF5U2V0X2FkZChhU3RyLCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gIHZhciBzU3RyID0gaGFzTmF0aXZlTWFwID8gYVN0ciA6IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gIHZhciBpc0R1cGxpY2F0ZSA9IGhhc05hdGl2ZU1hcCA/IHRoaXMuaGFzKGFTdHIpIDogaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKTtcbiAgdmFyIGlkeCA9IHRoaXMuX2FycmF5Lmxlbmd0aDtcbiAgaWYgKCFpc0R1cGxpY2F0ZSB8fCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhU3RyKTtcbiAgfVxuICBpZiAoIWlzRHVwbGljYXRlKSB7XG4gICAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgICAgdGhpcy5fc2V0LnNldChhU3RyLCBpZHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXRbc1N0cl0gPSBpZHg7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIElzIHRoZSBnaXZlbiBzdHJpbmcgYSBtZW1iZXIgb2YgdGhpcyBzZXQ/XG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBBcnJheVNldF9oYXMoYVN0cikge1xuICBpZiAoaGFzTmF0aXZlTWFwKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NldC5oYXMoYVN0cik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNTdHIgPSB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICAgIHJldHVybiBoYXMuY2FsbCh0aGlzLl9zZXQsIHNTdHIpO1xuICB9XG59O1xuXG4vKipcbiAqIFdoYXQgaXMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBzdHJpbmcgaW4gdGhlIGFycmF5P1xuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIEFycmF5U2V0X2luZGV4T2YoYVN0cikge1xuICBpZiAoaGFzTmF0aXZlTWFwKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMuX3NldC5nZXQoYVN0cik7XG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBzU3RyID0gdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgICBpZiAoaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NldFtzU3RyXTtcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFTdHIgKyAnXCIgaXMgbm90IGluIHRoZSBzZXQuJyk7XG59O1xuXG4vKipcbiAqIFdoYXQgaXMgdGhlIGVsZW1lbnQgYXQgdGhlIGdpdmVuIGluZGV4P1xuICpcbiAqIEBwYXJhbSBOdW1iZXIgYUlkeFxuICovXG5BcnJheVNldC5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbiBBcnJheVNldF9hdChhSWR4KSB7XG4gIGlmIChhSWR4ID49IDAgJiYgYUlkeCA8IHRoaXMuX2FycmF5Lmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLl9hcnJheVthSWR4XTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ05vIGVsZW1lbnQgaW5kZXhlZCBieSAnICsgYUlkeCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc2V0ICh3aGljaCBoYXMgdGhlIHByb3BlciBpbmRpY2VzXG4gKiBpbmRpY2F0ZWQgYnkgaW5kZXhPZikuIE5vdGUgdGhhdCB0aGlzIGlzIGEgY29weSBvZiB0aGUgaW50ZXJuYWwgYXJyYXkgdXNlZFxuICogZm9yIHN0b3JpbmcgdGhlIG1lbWJlcnMgc28gdGhhdCBubyBvbmUgY2FuIG1lc3Mgd2l0aCBpbnRlcm5hbCBzdGF0ZS5cbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiBBcnJheVNldF90b0FycmF5KCkge1xuICByZXR1cm4gdGhpcy5fYXJyYXkuc2xpY2UoKTtcbn07XG5cbmV4cG9ydHMuQXJyYXlTZXQgPSBBcnJheVNldDtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKlxuICogQmFzZWQgb24gdGhlIEJhc2UgNjQgVkxRIGltcGxlbWVudGF0aW9uIGluIENsb3N1cmUgQ29tcGlsZXI6XG4gKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nsb3N1cmUtY29tcGlsZXIvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvY29tL2dvb2dsZS9kZWJ1Z2dpbmcvc291cmNlbWFwL0Jhc2U2NFZMUS5qYXZhXG4gKlxuICogQ29weXJpZ2h0IDIwMTEgVGhlIENsb3N1cmUgQ29tcGlsZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlXG4gKiAgICBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuICogICAgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkXG4gKiAgICB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEdvb2dsZSBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWRcbiAqICAgIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxuICogREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXG4gKiBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJy4vYmFzZTY0Jyk7XG5cbi8vIEEgc2luZ2xlIGJhc2UgNjQgZGlnaXQgY2FuIGNvbnRhaW4gNiBiaXRzIG9mIGRhdGEuIEZvciB0aGUgYmFzZSA2NCB2YXJpYWJsZVxuLy8gbGVuZ3RoIHF1YW50aXRpZXMgd2UgdXNlIGluIHRoZSBzb3VyY2UgbWFwIHNwZWMsIHRoZSBmaXJzdCBiaXQgaXMgdGhlIHNpZ24sXG4vLyB0aGUgbmV4dCBmb3VyIGJpdHMgYXJlIHRoZSBhY3R1YWwgdmFsdWUsIGFuZCB0aGUgNnRoIGJpdCBpcyB0aGVcbi8vIGNvbnRpbnVhdGlvbiBiaXQuIFRoZSBjb250aW51YXRpb24gYml0IHRlbGxzIHVzIHdoZXRoZXIgdGhlcmUgYXJlIG1vcmVcbi8vIGRpZ2l0cyBpbiB0aGlzIHZhbHVlIGZvbGxvd2luZyB0aGlzIGRpZ2l0LlxuLy9cbi8vICAgQ29udGludWF0aW9uXG4vLyAgIHwgICAgU2lnblxuLy8gICB8ICAgIHxcbi8vICAgViAgICBWXG4vLyAgIDEwMTAxMVxuXG52YXIgVkxRX0JBU0VfU0hJRlQgPSA1O1xuXG4vLyBiaW5hcnk6IDEwMDAwMFxudmFyIFZMUV9CQVNFID0gMSA8PCBWTFFfQkFTRV9TSElGVDtcblxuLy8gYmluYXJ5OiAwMTExMTFcbnZhciBWTFFfQkFTRV9NQVNLID0gVkxRX0JBU0UgLSAxO1xuXG4vLyBiaW5hcnk6IDEwMDAwMFxudmFyIFZMUV9DT05USU5VQVRJT05fQklUID0gVkxRX0JBU0U7XG5cbi8qKlxuICogQ29udmVydHMgZnJvbSBhIHR3by1jb21wbGVtZW50IHZhbHVlIHRvIGEgdmFsdWUgd2hlcmUgdGhlIHNpZ24gYml0IGlzXG4gKiBwbGFjZWQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC4gIEZvciBleGFtcGxlLCBhcyBkZWNpbWFsczpcbiAqICAgMSBiZWNvbWVzIDIgKDEwIGJpbmFyeSksIC0xIGJlY29tZXMgMyAoMTEgYmluYXJ5KVxuICogICAyIGJlY29tZXMgNCAoMTAwIGJpbmFyeSksIC0yIGJlY29tZXMgNSAoMTAxIGJpbmFyeSlcbiAqL1xuZnVuY3Rpb24gdG9WTFFTaWduZWQoYVZhbHVlKSB7XG4gIHJldHVybiBhVmFsdWUgPCAwXG4gICAgPyAoKC1hVmFsdWUpIDw8IDEpICsgMVxuICAgIDogKGFWYWx1ZSA8PCAxKSArIDA7XG59XG5cbi8qKlxuICogQ29udmVydHMgdG8gYSB0d28tY29tcGxlbWVudCB2YWx1ZSBmcm9tIGEgdmFsdWUgd2hlcmUgdGhlIHNpZ24gYml0IGlzXG4gKiBwbGFjZWQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC4gIEZvciBleGFtcGxlLCBhcyBkZWNpbWFsczpcbiAqICAgMiAoMTAgYmluYXJ5KSBiZWNvbWVzIDEsIDMgKDExIGJpbmFyeSkgYmVjb21lcyAtMVxuICogICA0ICgxMDAgYmluYXJ5KSBiZWNvbWVzIDIsIDUgKDEwMSBiaW5hcnkpIGJlY29tZXMgLTJcbiAqL1xuZnVuY3Rpb24gZnJvbVZMUVNpZ25lZChhVmFsdWUpIHtcbiAgdmFyIGlzTmVnYXRpdmUgPSAoYVZhbHVlICYgMSkgPT09IDE7XG4gIHZhciBzaGlmdGVkID0gYVZhbHVlID4+IDE7XG4gIHJldHVybiBpc05lZ2F0aXZlXG4gICAgPyAtc2hpZnRlZFxuICAgIDogc2hpZnRlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiYXNlIDY0IFZMUSBlbmNvZGVkIHZhbHVlLlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIGJhc2U2NFZMUV9lbmNvZGUoYVZhbHVlKSB7XG4gIHZhciBlbmNvZGVkID0gXCJcIjtcbiAgdmFyIGRpZ2l0O1xuXG4gIHZhciB2bHEgPSB0b1ZMUVNpZ25lZChhVmFsdWUpO1xuXG4gIGRvIHtcbiAgICBkaWdpdCA9IHZscSAmIFZMUV9CQVNFX01BU0s7XG4gICAgdmxxID4+Pj0gVkxRX0JBU0VfU0hJRlQ7XG4gICAgaWYgKHZscSA+IDApIHtcbiAgICAgIC8vIFRoZXJlIGFyZSBzdGlsbCBtb3JlIGRpZ2l0cyBpbiB0aGlzIHZhbHVlLCBzbyB3ZSBtdXN0IG1ha2Ugc3VyZSB0aGVcbiAgICAgIC8vIGNvbnRpbnVhdGlvbiBiaXQgaXMgbWFya2VkLlxuICAgICAgZGlnaXQgfD0gVkxRX0NPTlRJTlVBVElPTl9CSVQ7XG4gICAgfVxuICAgIGVuY29kZWQgKz0gYmFzZTY0LmVuY29kZShkaWdpdCk7XG4gIH0gd2hpbGUgKHZscSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIHRoZSBuZXh0IGJhc2UgNjQgVkxRIHZhbHVlIGZyb20gdGhlIGdpdmVuIHN0cmluZyBhbmQgcmV0dXJucyB0aGVcbiAqIHZhbHVlIGFuZCB0aGUgcmVzdCBvZiB0aGUgc3RyaW5nIHZpYSB0aGUgb3V0IHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiBiYXNlNjRWTFFfZGVjb2RlKGFTdHIsIGFJbmRleCwgYU91dFBhcmFtKSB7XG4gIHZhciBzdHJMZW4gPSBhU3RyLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IDA7XG4gIHZhciBzaGlmdCA9IDA7XG4gIHZhciBjb250aW51YXRpb24sIGRpZ2l0O1xuXG4gIGRvIHtcbiAgICBpZiAoYUluZGV4ID49IHN0ckxlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgbW9yZSBkaWdpdHMgaW4gYmFzZSA2NCBWTFEgdmFsdWUuXCIpO1xuICAgIH1cblxuICAgIGRpZ2l0ID0gYmFzZTY0LmRlY29kZShhU3RyLmNoYXJDb2RlQXQoYUluZGV4KyspKTtcbiAgICBpZiAoZGlnaXQgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBkaWdpdDogXCIgKyBhU3RyLmNoYXJBdChhSW5kZXggLSAxKSk7XG4gICAgfVxuXG4gICAgY29udGludWF0aW9uID0gISEoZGlnaXQgJiBWTFFfQ09OVElOVUFUSU9OX0JJVCk7XG4gICAgZGlnaXQgJj0gVkxRX0JBU0VfTUFTSztcbiAgICByZXN1bHQgPSByZXN1bHQgKyAoZGlnaXQgPDwgc2hpZnQpO1xuICAgIHNoaWZ0ICs9IFZMUV9CQVNFX1NISUZUO1xuICB9IHdoaWxlIChjb250aW51YXRpb24pO1xuXG4gIGFPdXRQYXJhbS52YWx1ZSA9IGZyb21WTFFTaWduZWQocmVzdWx0KTtcbiAgYU91dFBhcmFtLnJlc3QgPSBhSW5kZXg7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgaW50VG9DaGFyTWFwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLnNwbGl0KCcnKTtcblxuLyoqXG4gKiBFbmNvZGUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2Ugb2YgMCB0byA2MyB0byBhIHNpbmdsZSBiYXNlIDY0IGRpZ2l0LlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgaWYgKDAgPD0gbnVtYmVyICYmIG51bWJlciA8IGludFRvQ2hhck1hcC5sZW5ndGgpIHtcbiAgICByZXR1cm4gaW50VG9DaGFyTWFwW251bWJlcl07XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk11c3QgYmUgYmV0d2VlbiAwIGFuZCA2MzogXCIgKyBudW1iZXIpO1xufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBzaW5nbGUgYmFzZSA2NCBjaGFyYWN0ZXIgY29kZSBkaWdpdCB0byBhbiBpbnRlZ2VyLiBSZXR1cm5zIC0xIG9uXG4gKiBmYWlsdXJlLlxuICovXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIChjaGFyQ29kZSkge1xuICB2YXIgYmlnQSA9IDY1OyAgICAgLy8gJ0EnXG4gIHZhciBiaWdaID0gOTA7ICAgICAvLyAnWidcblxuICB2YXIgbGl0dGxlQSA9IDk3OyAgLy8gJ2EnXG4gIHZhciBsaXR0bGVaID0gMTIyOyAvLyAneidcblxuICB2YXIgemVybyA9IDQ4OyAgICAgLy8gJzAnXG4gIHZhciBuaW5lID0gNTc7ICAgICAvLyAnOSdcblxuICB2YXIgcGx1cyA9IDQzOyAgICAgLy8gJysnXG4gIHZhciBzbGFzaCA9IDQ3OyAgICAvLyAnLydcblxuICB2YXIgbGl0dGxlT2Zmc2V0ID0gMjY7XG4gIHZhciBudW1iZXJPZmZzZXQgPSA1MjtcblxuICAvLyAwIC0gMjU6IEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXG4gIGlmIChiaWdBIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGJpZ1opIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gYmlnQSk7XG4gIH1cblxuICAvLyAyNiAtIDUxOiBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elxuICBpZiAobGl0dGxlQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBsaXR0bGVaKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIGxpdHRsZUEgKyBsaXR0bGVPZmZzZXQpO1xuICB9XG5cbiAgLy8gNTIgLSA2MTogMDEyMzQ1Njc4OVxuICBpZiAoemVybyA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBuaW5lKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIHplcm8gKyBudW1iZXJPZmZzZXQpO1xuICB9XG5cbiAgLy8gNjI6ICtcbiAgaWYgKGNoYXJDb2RlID09IHBsdXMpIHtcbiAgICByZXR1cm4gNjI7XG4gIH1cblxuICAvLyA2MzogL1xuICBpZiAoY2hhckNvZGUgPT0gc2xhc2gpIHtcbiAgICByZXR1cm4gNjM7XG4gIH1cblxuICAvLyBJbnZhbGlkIGJhc2U2NCBkaWdpdC5cbiAgcmV0dXJuIC0xO1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuZXhwb3J0cy5HUkVBVEVTVF9MT1dFUl9CT1VORCA9IDE7XG5leHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EID0gMjtcblxuLyoqXG4gKiBSZWN1cnNpdmUgaW1wbGVtZW50YXRpb24gb2YgYmluYXJ5IHNlYXJjaC5cbiAqXG4gKiBAcGFyYW0gYUxvdyBJbmRpY2VzIGhlcmUgYW5kIGxvd2VyIGRvIG5vdCBjb250YWluIHRoZSBuZWVkbGUuXG4gKiBAcGFyYW0gYUhpZ2ggSW5kaWNlcyBoZXJlIGFuZCBoaWdoZXIgZG8gbm90IGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAqIEBwYXJhbSBhTmVlZGxlIFRoZSBlbGVtZW50IGJlaW5nIHNlYXJjaGVkIGZvci5cbiAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIG5vbi1lbXB0eSBhcnJheSBiZWluZyBzZWFyY2hlZC5cbiAqIEBwYXJhbSBhQ29tcGFyZSBGdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gZWxlbWVudHMgYW5kIHJldHVybnMgLTEsIDAsIG9yIDEuXG4gKiBAcGFyYW0gYUJpYXMgRWl0aGVyICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ2JpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIHJlY3Vyc2l2ZVNlYXJjaChhTG93LCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiB0ZXJtaW5hdGVzIHdoZW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgaXMgdHJ1ZTpcbiAgLy9cbiAgLy8gICAxLiBXZSBmaW5kIHRoZSBleGFjdCBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgLy9cbiAgLy8gICAyLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGJ1dCB3ZSBjYW4gcmV0dXJuIHRoZSBpbmRleCBvZlxuICAvLyAgICAgIHRoZSBuZXh0LWNsb3Nlc3QgZWxlbWVudC5cbiAgLy9cbiAgLy8gICAzLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGFuZCB0aGVyZSBpcyBubyBuZXh0LWNsb3Nlc3RcbiAgLy8gICAgICBlbGVtZW50IHRoYW4gdGhlIG9uZSB3ZSBhcmUgc2VhcmNoaW5nIGZvciwgc28gd2UgcmV0dXJuIC0xLlxuICB2YXIgbWlkID0gTWF0aC5mbG9vcigoYUhpZ2ggLSBhTG93KSAvIDIpICsgYUxvdztcbiAgdmFyIGNtcCA9IGFDb21wYXJlKGFOZWVkbGUsIGFIYXlzdGFja1ttaWRdLCB0cnVlKTtcbiAgaWYgKGNtcCA9PT0gMCkge1xuICAgIC8vIEZvdW5kIHRoZSBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgICByZXR1cm4gbWlkO1xuICB9XG4gIGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAvLyBPdXIgbmVlZGxlIGlzIGdyZWF0ZXIgdGhhbiBhSGF5c3RhY2tbbWlkXS5cbiAgICBpZiAoYUhpZ2ggLSBtaWQgPiAxKSB7XG4gICAgICAvLyBUaGUgZWxlbWVudCBpcyBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgIHJldHVybiByZWN1cnNpdmVTZWFyY2gobWlkLCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgIH1cblxuICAgIC8vIFRoZSBleGFjdCBuZWVkbGUgZWxlbWVudCB3YXMgbm90IGZvdW5kIGluIHRoaXMgaGF5c3RhY2suIERldGVybWluZSBpZlxuICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgIHJldHVybiBhSGlnaCA8IGFIYXlzdGFjay5sZW5ndGggPyBhSGlnaCA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWlkO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyBPdXIgbmVlZGxlIGlzIGxlc3MgdGhhbiBhSGF5c3RhY2tbbWlkXS5cbiAgICBpZiAobWlkIC0gYUxvdyA+IDEpIHtcbiAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSBsb3dlciBoYWxmLlxuICAgICAgcmV0dXJuIHJlY3Vyc2l2ZVNlYXJjaChhTG93LCBtaWQsIGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKTtcbiAgICB9XG5cbiAgICAvLyB3ZSBhcmUgaW4gdGVybWluYXRpb24gY2FzZSAoMykgb3IgKDIpIGFuZCByZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHRoaW5nLlxuICAgIGlmIChhQmlhcyA9PSBleHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EKSB7XG4gICAgICByZXR1cm4gbWlkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYUxvdyA8IDAgPyAtMSA6IGFMb3c7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoIHdoaWNoIHdpbGwgYWx3YXlzIHRyeSBhbmQgcmV0dXJuXG4gKiB0aGUgaW5kZXggb2YgdGhlIGNsb3Nlc3QgZWxlbWVudCBpZiB0aGVyZSBpcyBubyBleGFjdCBoaXQuIFRoaXMgaXMgYmVjYXVzZVxuICogbWFwcGluZ3MgYmV0d2VlbiBvcmlnaW5hbCBhbmQgZ2VuZXJhdGVkIGxpbmUvY29sIHBhaXJzIGFyZSBzaW5nbGUgcG9pbnRzLFxuICogYW5kIHRoZXJlIGlzIGFuIGltcGxpY2l0IHJlZ2lvbiBiZXR3ZWVuIGVhY2ggb2YgdGhlbSwgc28gYSBtaXNzIGp1c3QgbWVhbnNcbiAqIHRoYXQgeW91IGFyZW4ndCBvbiB0aGUgdmVyeSBzdGFydCBvZiBhIHJlZ2lvbi5cbiAqXG4gKiBAcGFyYW0gYU5lZWRsZSBUaGUgZWxlbWVudCB5b3UgYXJlIGxvb2tpbmcgZm9yLlxuICogQHBhcmFtIGFIYXlzdGFjayBUaGUgYXJyYXkgdGhhdCBpcyBiZWluZyBzZWFyY2hlZC5cbiAqIEBwYXJhbSBhQ29tcGFyZSBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHRoZSBuZWVkbGUgYW5kIGFuIGVsZW1lbnQgaW4gdGhlXG4gKiAgICAgYXJyYXkgYW5kIHJldHVybnMgLTEsIDAsIG9yIDEgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIG5lZWRsZSBpcyBsZXNzXG4gKiAgICAgdGhhbiwgZXF1YWwgdG8sIG9yIGdyZWF0ZXIgdGhhbiB0aGUgZWxlbWVudCwgcmVzcGVjdGl2ZWx5LlxuICogQHBhcmFtIGFCaWFzIEVpdGhlciAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICogICAgIERlZmF1bHRzIHRvICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICovXG5leHBvcnRzLnNlYXJjaCA9IGZ1bmN0aW9uIHNlYXJjaChhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICBpZiAoYUhheXN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IHJlY3Vyc2l2ZVNlYXJjaCgtMSwgYUhheXN0YWNrLmxlbmd0aCwgYU5lZWRsZSwgYUhheXN0YWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYUNvbXBhcmUsIGFCaWFzIHx8IGV4cG9ydHMuR1JFQVRFU1RfTE9XRVJfQk9VTkQpO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLy8gV2UgaGF2ZSBmb3VuZCBlaXRoZXIgdGhlIGV4YWN0IGVsZW1lbnQsIG9yIHRoZSBuZXh0LWNsb3Nlc3QgZWxlbWVudCB0aGFuXG4gIC8vIHRoZSBvbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IuIEhvd2V2ZXIsIHRoZXJlIG1heSBiZSBtb3JlIHRoYW4gb25lIHN1Y2hcbiAgLy8gZWxlbWVudC4gTWFrZSBzdXJlIHdlIGFsd2F5cyByZXR1cm4gdGhlIHNtYWxsZXN0IG9mIHRoZXNlLlxuICB3aGlsZSAoaW5kZXggLSAxID49IDApIHtcbiAgICBpZiAoYUNvbXBhcmUoYUhheXN0YWNrW2luZGV4XSwgYUhheXN0YWNrW2luZGV4IC0gMV0sIHRydWUpICE9PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLS1pbmRleDtcbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTQgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgbWFwcGluZ0IgaXMgYWZ0ZXIgbWFwcGluZ0Egd2l0aCByZXNwZWN0IHRvIGdlbmVyYXRlZFxuICogcG9zaXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIobWFwcGluZ0EsIG1hcHBpbmdCKSB7XG4gIC8vIE9wdGltaXplZCBmb3IgbW9zdCBjb21tb24gY2FzZVxuICB2YXIgbGluZUEgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lO1xuICB2YXIgbGluZUIgPSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICB2YXIgY29sdW1uQSA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbjtcbiAgdmFyIGNvbHVtbkIgPSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIHJldHVybiBsaW5lQiA+IGxpbmVBIHx8IGxpbmVCID09IGxpbmVBICYmIGNvbHVtbkIgPj0gY29sdW1uQSB8fFxuICAgICAgICAgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIDw9IDA7XG59XG5cbi8qKlxuICogQSBkYXRhIHN0cnVjdHVyZSB0byBwcm92aWRlIGEgc29ydGVkIHZpZXcgb2YgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gYVxuICogcGVyZm9ybWFuY2UgY29uc2Npb3VzIG1hbm5lci4gSXQgdHJhZGVzIGEgbmVnbGliYWJsZSBvdmVyaGVhZCBpbiBnZW5lcmFsXG4gKiBjYXNlIGZvciBhIGxhcmdlIHNwZWVkdXAgaW4gY2FzZSBvZiBtYXBwaW5ncyBiZWluZyBhZGRlZCBpbiBvcmRlci5cbiAqL1xuZnVuY3Rpb24gTWFwcGluZ0xpc3QoKSB7XG4gIHRoaXMuX2FycmF5ID0gW107XG4gIHRoaXMuX3NvcnRlZCA9IHRydWU7XG4gIC8vIFNlcnZlcyBhcyBpbmZpbXVtXG4gIHRoaXMuX2xhc3QgPSB7Z2VuZXJhdGVkTGluZTogLTEsIGdlbmVyYXRlZENvbHVtbjogMH07XG59XG5cbi8qKlxuICogSXRlcmF0ZSB0aHJvdWdoIGludGVybmFsIGl0ZW1zLiBUaGlzIG1ldGhvZCB0YWtlcyB0aGUgc2FtZSBhcmd1bWVudHMgdGhhdFxuICogYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCB0YWtlcy5cbiAqXG4gKiBOT1RFOiBUaGUgb3JkZXIgb2YgdGhlIG1hcHBpbmdzIGlzIE5PVCBndWFyYW50ZWVkLlxuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUudW5zb3J0ZWRGb3JFYWNoID1cbiAgZnVuY3Rpb24gTWFwcGluZ0xpc3RfZm9yRWFjaChhQ2FsbGJhY2ssIGFUaGlzQXJnKSB7XG4gICAgdGhpcy5fYXJyYXkuZm9yRWFjaChhQ2FsbGJhY2ssIGFUaGlzQXJnKTtcbiAgfTtcblxuLyoqXG4gKiBBZGQgdGhlIGdpdmVuIHNvdXJjZSBtYXBwaW5nLlxuICpcbiAqIEBwYXJhbSBPYmplY3QgYU1hcHBpbmdcbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIE1hcHBpbmdMaXN0X2FkZChhTWFwcGluZykge1xuICBpZiAoZ2VuZXJhdGVkUG9zaXRpb25BZnRlcih0aGlzLl9sYXN0LCBhTWFwcGluZykpIHtcbiAgICB0aGlzLl9sYXN0ID0gYU1hcHBpbmc7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhTWFwcGluZyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fc29ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhTWFwcGluZyk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmxhdCwgc29ydGVkIGFycmF5IG9mIG1hcHBpbmdzLiBUaGUgbWFwcGluZ3MgYXJlIHNvcnRlZCBieVxuICogZ2VuZXJhdGVkIHBvc2l0aW9uLlxuICpcbiAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHJldHVybnMgaW50ZXJuYWwgZGF0YSB3aXRob3V0IGNvcHlpbmcsIGZvclxuICogcGVyZm9ybWFuY2UuIFRoZSByZXR1cm4gdmFsdWUgbXVzdCBOT1QgYmUgbXV0YXRlZCwgYW5kIHNob3VsZCBiZSB0cmVhdGVkIGFzXG4gKiBhbiBpbW11dGFibGUgYm9ycm93LiBJZiB5b3Ugd2FudCB0byB0YWtlIG93bmVyc2hpcCwgeW91IG11c3QgbWFrZSB5b3VyIG93blxuICogY29weS5cbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiBNYXBwaW5nTGlzdF90b0FycmF5KCkge1xuICBpZiAoIXRoaXMuX3NvcnRlZCkge1xuICAgIHRoaXMuX2FycmF5LnNvcnQodXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCk7XG4gICAgdGhpcy5fc29ydGVkID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gdGhpcy5fYXJyYXk7XG59O1xuXG5leHBvcnRzLk1hcHBpbmdMaXN0ID0gTWFwcGluZ0xpc3Q7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8vIEl0IHR1cm5zIG91dCB0aGF0IHNvbWUgKG1vc3Q/KSBKYXZhU2NyaXB0IGVuZ2luZXMgZG9uJ3Qgc2VsZi1ob3N0XG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgLiBUaGlzIG1ha2VzIHNlbnNlIGJlY2F1c2UgQysrIHdpbGwgbGlrZWx5IHJlbWFpblxuLy8gZmFzdGVyIHRoYW4gSlMgd2hlbiBkb2luZyByYXcgQ1BVLWludGVuc2l2ZSBzb3J0aW5nLiBIb3dldmVyLCB3aGVuIHVzaW5nIGFcbi8vIGN1c3RvbSBjb21wYXJhdG9yIGZ1bmN0aW9uLCBjYWxsaW5nIGJhY2sgYW5kIGZvcnRoIGJldHdlZW4gdGhlIFZNJ3MgQysrIGFuZFxuLy8gSklUJ2QgSlMgaXMgcmF0aGVyIHNsb3cgKmFuZCogbG9zZXMgSklUIHR5cGUgaW5mb3JtYXRpb24sIHJlc3VsdGluZyBpblxuLy8gd29yc2UgZ2VuZXJhdGVkIGNvZGUgZm9yIHRoZSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRoYW4gd291bGQgYmUgb3B0aW1hbC4gSW5cbi8vIGZhY3QsIHdoZW4gc29ydGluZyB3aXRoIGEgY29tcGFyYXRvciwgdGhlc2UgY29zdHMgb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIG9mXG4vLyBzb3J0aW5nIGluIEMrKy4gQnkgdXNpbmcgb3VyIG93biBKUy1pbXBsZW1lbnRlZCBRdWljayBTb3J0IChiZWxvdyksIHdlIGdldFxuLy8gYSB+MzUwMG1zIG1lYW4gc3BlZWQtdXAgaW4gYGJlbmNoL2JlbmNoLmh0bWxgLlxuXG4vKipcbiAqIFN3YXAgdGhlIGVsZW1lbnRzIGluZGV4ZWQgYnkgYHhgIGFuZCBgeWAgaW4gdGhlIGFycmF5IGBhcnlgLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIFRoZSBhcnJheS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBpdGVtLlxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqICAgICAgICBUaGUgaW5kZXggb2YgdGhlIHNlY29uZCBpdGVtLlxuICovXG5mdW5jdGlvbiBzd2FwKGFyeSwgeCwgeSkge1xuICB2YXIgdGVtcCA9IGFyeVt4XTtcbiAgYXJ5W3hdID0gYXJ5W3ldO1xuICBhcnlbeV0gPSB0ZW1wO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gaW50ZWdlciB3aXRoaW4gdGhlIHJhbmdlIGBsb3cgLi4gaGlnaGAgaW5jbHVzaXZlLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBsb3dcbiAqICAgICAgICBUaGUgbG93ZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGhpZ2hcbiAqICAgICAgICBUaGUgdXBwZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICovXG5mdW5jdGlvbiByYW5kb21JbnRJblJhbmdlKGxvdywgaGlnaCkge1xuICByZXR1cm4gTWF0aC5yb3VuZChsb3cgKyAoTWF0aC5yYW5kb20oKSAqIChoaWdoIC0gbG93KSkpO1xufVxuXG4vKipcbiAqIFRoZSBRdWljayBTb3J0IGFsZ29yaXRobS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyYXRvclxuICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwXG4gKiAgICAgICAgU3RhcnQgaW5kZXggb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gclxuICogICAgICAgIEVuZCBpbmRleCBvZiB0aGUgYXJyYXlcbiAqL1xuZnVuY3Rpb24gZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCByKSB7XG4gIC8vIElmIG91ciBsb3dlciBib3VuZCBpcyBsZXNzIHRoYW4gb3VyIHVwcGVyIGJvdW5kLCB3ZSAoMSkgcGFydGl0aW9uIHRoZVxuICAvLyBhcnJheSBpbnRvIHR3byBwaWVjZXMgYW5kICgyKSByZWN1cnNlIG9uIGVhY2ggaGFsZi4gSWYgaXQgaXMgbm90LCB0aGlzIGlzXG4gIC8vIHRoZSBlbXB0eSBhcnJheSBhbmQgb3VyIGJhc2UgY2FzZS5cblxuICBpZiAocCA8IHIpIHtcbiAgICAvLyAoMSkgUGFydGl0aW9uaW5nLlxuICAgIC8vXG4gICAgLy8gVGhlIHBhcnRpdGlvbmluZyBjaG9vc2VzIGEgcGl2b3QgYmV0d2VlbiBgcGAgYW5kIGByYCBhbmQgbW92ZXMgYWxsXG4gICAgLy8gZWxlbWVudHMgdGhhdCBhcmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdCB0byB0aGUgYmVmb3JlIGl0LCBhbmRcbiAgICAvLyBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgYXJlIGdyZWF0ZXIgdGhhbiBpdCBhZnRlciBpdC4gVGhlIGVmZmVjdCBpcyB0aGF0XG4gICAgLy8gb25jZSBwYXJ0aXRpb24gaXMgZG9uZSwgdGhlIHBpdm90IGlzIGluIHRoZSBleGFjdCBwbGFjZSBpdCB3aWxsIGJlIHdoZW5cbiAgICAvLyB0aGUgYXJyYXkgaXMgcHV0IGluIHNvcnRlZCBvcmRlciwgYW5kIGl0IHdpbGwgbm90IG5lZWQgdG8gYmUgbW92ZWRcbiAgICAvLyBhZ2Fpbi4gVGhpcyBydW5zIGluIE8obikgdGltZS5cblxuICAgIC8vIEFsd2F5cyBjaG9vc2UgYSByYW5kb20gcGl2b3Qgc28gdGhhdCBhbiBpbnB1dCBhcnJheSB3aGljaCBpcyByZXZlcnNlXG4gICAgLy8gc29ydGVkIGRvZXMgbm90IGNhdXNlIE8obl4yKSBydW5uaW5nIHRpbWUuXG4gICAgdmFyIHBpdm90SW5kZXggPSByYW5kb21JbnRJblJhbmdlKHAsIHIpO1xuICAgIHZhciBpID0gcCAtIDE7XG5cbiAgICBzd2FwKGFyeSwgcGl2b3RJbmRleCwgcik7XG4gICAgdmFyIHBpdm90ID0gYXJ5W3JdO1xuXG4gICAgLy8gSW1tZWRpYXRlbHkgYWZ0ZXIgYGpgIGlzIGluY3JlbWVudGVkIGluIHRoaXMgbG9vcCwgdGhlIGZvbGxvd2luZyBob2xkXG4gICAgLy8gdHJ1ZTpcbiAgICAvL1xuICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbcCAuLiBpXWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdC5cbiAgICAvL1xuICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbaSsxIC4uIGotMV1gIGlzIGdyZWF0ZXIgdGhhbiB0aGUgcGl2b3QuXG4gICAgZm9yICh2YXIgaiA9IHA7IGogPCByOyBqKyspIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFyeVtqXSwgcGl2b3QpIDw9IDApIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBzd2FwKGFyeSwgaSwgaik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dhcChhcnksIGkgKyAxLCBqKTtcbiAgICB2YXIgcSA9IGkgKyAxO1xuXG4gICAgLy8gKDIpIFJlY3Vyc2Ugb24gZWFjaCBoYWxmLlxuXG4gICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCBxIC0gMSk7XG4gICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBxICsgMSwgcik7XG4gIH1cbn1cblxuLyoqXG4gKiBTb3J0IHRoZSBnaXZlbiBhcnJheSBpbi1wbGFjZSB3aXRoIHRoZSBnaXZlbiBjb21wYXJhdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIEFuIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJhdG9yXG4gKiAgICAgICAgRnVuY3Rpb24gdG8gdXNlIHRvIGNvbXBhcmUgdHdvIGl0ZW1zLlxuICovXG5leHBvcnRzLnF1aWNrU29ydCA9IGZ1bmN0aW9uIChhcnksIGNvbXBhcmF0b3IpIHtcbiAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCAwLCBhcnkubGVuZ3RoIC0gMSk7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIGJpbmFyeVNlYXJjaCA9IHJlcXVpcmUoJy4vYmluYXJ5LXNlYXJjaCcpO1xudmFyIEFycmF5U2V0ID0gcmVxdWlyZSgnLi9hcnJheS1zZXQnKS5BcnJheVNldDtcbnZhciBiYXNlNjRWTFEgPSByZXF1aXJlKCcuL2Jhc2U2NC12bHEnKTtcbnZhciBxdWlja1NvcnQgPSByZXF1aXJlKCcuL3F1aWNrLXNvcnQnKS5xdWlja1NvcnQ7XG5cbmZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXApIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSBKU09OLnBhcnNlKGFTb3VyY2VNYXAucmVwbGFjZSgvXlxcKVxcXVxcfScvLCAnJykpO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZU1hcC5zZWN0aW9ucyAhPSBudWxsXG4gICAgPyBuZXcgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcClcbiAgICA6IG5ldyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcCk7XG59XG5cblNvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPSBmdW5jdGlvbihhU291cmNlTWFwKSB7XG4gIHJldHVybiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcCk7XG59XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vLyBgX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kIGBfX29yaWdpbmFsTWFwcGluZ3NgIGFyZSBhcnJheXMgdGhhdCBob2xkIHRoZVxuLy8gcGFyc2VkIG1hcHBpbmcgY29vcmRpbmF0ZXMgZnJvbSB0aGUgc291cmNlIG1hcCdzIFwibWFwcGluZ3NcIiBhdHRyaWJ1dGUuIFRoZXlcbi8vIGFyZSBsYXppbHkgaW5zdGFudGlhdGVkLCBhY2Nlc3NlZCB2aWEgdGhlIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBnZXR0ZXJzIHJlc3BlY3RpdmVseSwgYW5kIHdlIG9ubHkgcGFyc2UgdGhlIG1hcHBpbmdzXG4vLyBhbmQgY3JlYXRlIHRoZXNlIGFycmF5cyBvbmNlIHF1ZXJpZWQgZm9yIGEgc291cmNlIGxvY2F0aW9uLiBXZSBqdW1wIHRocm91Z2hcbi8vIHRoZXNlIGhvb3BzIGJlY2F1c2UgdGhlcmUgY2FuIGJlIG1hbnkgdGhvdXNhbmRzIG9mIG1hcHBpbmdzLCBhbmQgcGFyc2luZ1xuLy8gdGhlbSBpcyBleHBlbnNpdmUsIHNvIHdlIG9ubHkgd2FudCB0byBkbyBpdCBpZiB3ZSBtdXN0LlxuLy9cbi8vIEVhY2ggb2JqZWN0IGluIHRoZSBhcnJheXMgaXMgb2YgdGhlIGZvcm06XG4vL1xuLy8gICAgIHtcbi8vICAgICAgIGdlbmVyYXRlZExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBnZW5lcmF0ZWRDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIHNvdXJjZTogVGhlIHBhdGggdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIHRoYXQgZ2VuZXJhdGVkIHRoaXNcbi8vICAgICAgICAgICAgICAgY2h1bmsgb2YgY29kZSxcbi8vICAgICAgIG9yaWdpbmFsTGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuLy8gICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyB0byB0aGlzIGNodW5rIG9mIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgb3JpZ2luYWxDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuLy8gICAgICAgICAgICAgICAgICAgICAgIGNvcnJlc3BvbmRzIHRvIHRoaXMgY2h1bmsgb2YgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBuYW1lOiBUaGUgbmFtZSBvZiB0aGUgb3JpZ2luYWwgc3ltYm9sIHdoaWNoIGdlbmVyYXRlZCB0aGlzIGNodW5rIG9mXG4vLyAgICAgICAgICAgICBjb2RlLlxuLy8gICAgIH1cbi8vXG4vLyBBbGwgcHJvcGVydGllcyBleGNlcHQgZm9yIGBnZW5lcmF0ZWRMaW5lYCBhbmQgYGdlbmVyYXRlZENvbHVtbmAgY2FuIGJlXG4vLyBgbnVsbGAuXG4vL1xuLy8gYF9nZW5lcmF0ZWRNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucy5cbi8vXG4vLyBgX29yaWdpbmFsTWFwcGluZ3NgIGlzIG9yZGVyZWQgYnkgdGhlIG9yaWdpbmFsIHBvc2l0aW9ucy5cblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBudWxsO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ19nZW5lcmF0ZWRNYXBwaW5ncycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MpIHtcbiAgICAgIHRoaXMuX3BhcnNlTWFwcGluZ3ModGhpcy5fbWFwcGluZ3MsIHRoaXMuc291cmNlUm9vdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncztcbiAgfVxufSk7XG5cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fX29yaWdpbmFsTWFwcGluZ3MgPSBudWxsO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ19vcmlnaW5hbE1hcHBpbmdzJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX19vcmlnaW5hbE1hcHBpbmdzKSB7XG4gICAgICB0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLCB0aGlzLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncztcbiAgfVxufSk7XG5cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fY2hhcklzTWFwcGluZ1NlcGFyYXRvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IoYVN0ciwgaW5kZXgpIHtcbiAgICB2YXIgYyA9IGFTdHIuY2hhckF0KGluZGV4KTtcbiAgICByZXR1cm4gYyA9PT0gXCI7XCIgfHwgYyA9PT0gXCIsXCI7XG4gIH07XG5cbi8qKlxuICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3ViY2xhc3NlcyBtdXN0IGltcGxlbWVudCBfcGFyc2VNYXBwaW5nc1wiKTtcbiAgfTtcblxuU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSID0gMTtcblNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSID0gMjtcblxuU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQgPSAxO1xuU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBlYWNoIG1hcHBpbmcgYmV0d2VlbiBhbiBvcmlnaW5hbCBzb3VyY2UvbGluZS9jb2x1bW4gYW5kIGFcbiAqIGdlbmVyYXRlZCBsaW5lL2NvbHVtbiBpbiB0aGlzIHNvdXJjZSBtYXAuXG4gKlxuICogQHBhcmFtIEZ1bmN0aW9uIGFDYWxsYmFja1xuICogICAgICAgIFRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aXRoIGVhY2ggbWFwcGluZy5cbiAqIEBwYXJhbSBPYmplY3QgYUNvbnRleHRcbiAqICAgICAgICBPcHRpb25hbC4gSWYgc3BlY2lmaWVkLCB0aGlzIG9iamVjdCB3aWxsIGJlIHRoZSB2YWx1ZSBvZiBgdGhpc2AgZXZlcnlcbiAqICAgICAgICB0aW1lIHRoYXQgYGFDYWxsYmFja2AgaXMgY2FsbGVkLlxuICogQHBhcmFtIGFPcmRlclxuICogICAgICAgIEVpdGhlciBgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSYCBvclxuICogICAgICAgIGBTb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUmAuIFNwZWNpZmllcyB3aGV0aGVyIHlvdSB3YW50IHRvXG4gKiAgICAgICAgaXRlcmF0ZSBvdmVyIHRoZSBtYXBwaW5ncyBzb3J0ZWQgYnkgdGhlIGdlbmVyYXRlZCBmaWxlJ3MgbGluZS9jb2x1bW5cbiAqICAgICAgICBvcmRlciBvciB0aGUgb3JpZ2luYWwncyBzb3VyY2UvbGluZS9jb2x1bW4gb3JkZXIsIHJlc3BlY3RpdmVseS4gRGVmYXVsdHMgdG9cbiAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSYC5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmVhY2hNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZWFjaE1hcHBpbmcoYUNhbGxiYWNrLCBhQ29udGV4dCwgYU9yZGVyKSB7XG4gICAgdmFyIGNvbnRleHQgPSBhQ29udGV4dCB8fCBudWxsO1xuICAgIHZhciBvcmRlciA9IGFPcmRlciB8fCBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVI7XG5cbiAgICB2YXIgbWFwcGluZ3M7XG4gICAgc3dpdGNoIChvcmRlcikge1xuICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSOlxuICAgICAgbWFwcGluZ3MgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVI6XG4gICAgICBtYXBwaW5ncyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3M7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBvcmRlciBvZiBpdGVyYXRpb24uXCIpO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2VSb290ID0gdGhpcy5zb3VyY2VSb290O1xuICAgIG1hcHBpbmdzLm1hcChmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlID09PSBudWxsID8gbnVsbCA6IHRoaXMuX3NvdXJjZXMuYXQobWFwcGluZy5zb3VyY2UpO1xuICAgICAgaWYgKHNvdXJjZSAhPSBudWxsICYmIHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2UgPSB1dGlsLmpvaW4oc291cmNlUm9vdCwgc291cmNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4sXG4gICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgIG9yaWdpbmFsQ29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICBuYW1lOiBtYXBwaW5nLm5hbWUgPT09IG51bGwgPyBudWxsIDogdGhpcy5fbmFtZXMuYXQobWFwcGluZy5uYW1lKVxuICAgICAgfTtcbiAgICB9LCB0aGlzKS5mb3JFYWNoKGFDYWxsYmFjaywgY29udGV4dCk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyBhbGwgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAqIGxpbmUsIGFuZCBjb2x1bW4gcHJvdmlkZWQuIElmIG5vIGNvbHVtbiBpcyBwcm92aWRlZCwgcmV0dXJucyBhbGwgbWFwcGluZ3NcbiAqIGNvcnJlc3BvbmRpbmcgdG8gYSBlaXRoZXIgdGhlIGxpbmUgd2UgYXJlIHNlYXJjaGluZyBmb3Igb3IgdGhlIG5leHRcbiAqIGNsb3Nlc3QgbGluZSB0aGF0IGhhcyBhbnkgbWFwcGluZ3MuIE90aGVyd2lzZSwgcmV0dXJucyBhbGwgbWFwcGluZ3NcbiAqIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIGxpbmUgYW5kIGVpdGhlciB0aGUgY29sdW1uIHdlIGFyZSBzZWFyY2hpbmcgZm9yXG4gKiBvciB0aGUgbmV4dCBjbG9zZXN0IGNvbHVtbiB0aGF0IGhhcyBhbnkgb2Zmc2V0cy5cbiAqXG4gKiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gY29sdW1uOiBPcHRpb25hbC4gdGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqXG4gKiBhbmQgYW4gYXJyYXkgb2Ygb2JqZWN0cyBpcyByZXR1cm5lZCwgZWFjaCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5hbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9hbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IoYUFyZ3MpIHtcbiAgICB2YXIgbGluZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpO1xuXG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBleGFjdCBtYXRjaCwgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nXG4gICAgLy8gcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGNsb3Nlc3QgbWFwcGluZyBsZXNzIHRoYW4gdGhlIG5lZWRsZS4gQnlcbiAgICAvLyBzZXR0aW5nIG5lZWRsZS5vcmlnaW5hbENvbHVtbiB0byAwLCB3ZSB0aHVzIGZpbmQgdGhlIGxhc3QgbWFwcGluZyBmb3JcbiAgICAvLyB0aGUgZ2l2ZW4gbGluZSwgcHJvdmlkZWQgc3VjaCBhIG1hcHBpbmcgZXhpc3RzLlxuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBzb3VyY2U6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJyksXG4gICAgICBvcmlnaW5hbExpbmU6IGxpbmUsXG4gICAgICBvcmlnaW5hbENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nLCAwKVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIG5lZWRsZS5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuc291cmNlUm9vdCwgbmVlZGxlLnNvdXJjZSk7XG4gICAgfVxuICAgIGlmICghdGhpcy5fc291cmNlcy5oYXMobmVlZGxlLnNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgbmVlZGxlLnNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihuZWVkbGUuc291cmNlKTtcblxuICAgIHZhciBtYXBwaW5ncyA9IFtdO1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcobmVlZGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsTWFwcGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbExpbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWdpbmFsQ29sdW1uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAoYUFyZ3MuY29sdW1uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdW50aWwgZWl0aGVyIHdlIHJ1biBvdXQgb2YgbWFwcGluZ3MsIG9yIHdlIHJ1biBpbnRvXG4gICAgICAgIC8vIGEgbWFwcGluZyBmb3IgYSBkaWZmZXJlbnQgbGluZSB0aGFuIHRoZSBvbmUgd2UgZm91bmQuIFNpbmNlXG4gICAgICAgIC8vIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBmaW5kIGFsbCBtYXBwaW5ncyBmb3JcbiAgICAgICAgLy8gdGhlIGxpbmUgd2UgZm91bmQuXG4gICAgICAgIHdoaWxlIChtYXBwaW5nICYmIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSBvcmlnaW5hbExpbmUpIHtcbiAgICAgICAgICBtYXBwaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzWysraW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdW50aWwgZWl0aGVyIHdlIHJ1biBvdXQgb2YgbWFwcGluZ3MsIG9yIHdlIHJ1biBpbnRvXG4gICAgICAgIC8vIGEgbWFwcGluZyBmb3IgYSBkaWZmZXJlbnQgbGluZSB0aGFuIHRoZSBvbmUgd2Ugd2VyZSBzZWFyY2hpbmcgZm9yLlxuICAgICAgICAvLyBTaW5jZSBtYXBwaW5ncyBhcmUgc29ydGVkLCB0aGlzIGlzIGd1YXJhbnRlZWQgdG8gZmluZCBhbGwgbWFwcGluZ3MgZm9yXG4gICAgICAgIC8vIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLlxuICAgICAgICB3aGlsZSAobWFwcGluZyAmJlxuICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09IGxpbmUgJiZcbiAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPT0gb3JpZ2luYWxDb2x1bW4pIHtcbiAgICAgICAgICBtYXBwaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzWysraW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcHBpbmdzO1xuICB9O1xuXG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogQSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGluc3RhbmNlIHJlcHJlc2VudHMgYSBwYXJzZWQgc291cmNlIG1hcCB3aGljaCB3ZSBjYW5cbiAqIHF1ZXJ5IGZvciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3JpZ2luYWwgZmlsZSBwb3NpdGlvbnMgYnkgZ2l2aW5nIGl0IGEgZmlsZVxuICogcG9zaXRpb24gaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gKlxuICogVGhlIG9ubHkgcGFyYW1ldGVyIGlzIHRoZSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yXG4gKiBhbHJlYWR5IHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNvdXJjZSBtYXBzIGhhdmUgdGhlXG4gKiBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAqXG4gKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAqICAgLSBzb3VyY2VzOiBBbiBhcnJheSBvZiBVUkxzIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiAgIC0gbmFtZXM6IEFuIGFycmF5IG9mIGlkZW50aWZpZXJzIHdoaWNoIGNhbiBiZSByZWZlcnJlbmNlZCBieSBpbmRpdmlkdWFsIG1hcHBpbmdzLlxuICogICAtIHNvdXJjZVJvb3Q6IE9wdGlvbmFsLiBUaGUgVVJMIHJvb3QgZnJvbSB3aGljaCBhbGwgc291cmNlcyBhcmUgcmVsYXRpdmUuXG4gKiAgIC0gc291cmNlc0NvbnRlbnQ6IE9wdGlvbmFsLiBBbiBhcnJheSBvZiBjb250ZW50cyBvZiB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGVzLlxuICogICAtIG1hcHBpbmdzOiBBIHN0cmluZyBvZiBiYXNlNjQgVkxRcyB3aGljaCBjb250YWluIHRoZSBhY3R1YWwgbWFwcGluZ3MuXG4gKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICpcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF06XG4gKlxuICogICAgIHtcbiAqICAgICAgIHZlcnNpb24gOiAzLFxuICogICAgICAgZmlsZTogXCJvdXQuanNcIixcbiAqICAgICAgIHNvdXJjZVJvb3QgOiBcIlwiLFxuICogICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICogICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gKiAgICAgICBtYXBwaW5nczogXCJBQSxBQjs7QUJDREU7XCJcbiAqICAgICB9XG4gKlxuICogWzBdOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFVMVJHQWVoUXdSeXBVVG92RjFLUmxwaU9GemUwYi1fMmdjNmZBSDBLWTBrL2VkaXQ/cGxpPTEjXG4gKi9cbmZ1bmN0aW9uIEJhc2ljU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCkge1xuICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSAnc3RyaW5nJykge1xuICAgIHNvdXJjZU1hcCA9IEpTT04ucGFyc2UoYVNvdXJjZU1hcC5yZXBsYWNlKC9eXFwpXFxdXFx9Jy8sICcnKSk7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3ZlcnNpb24nKTtcbiAgdmFyIHNvdXJjZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzJyk7XG4gIC8vIFNhc3MgMy4zIGxlYXZlcyBvdXQgdGhlICduYW1lcycgYXJyYXksIHNvIHdlIGRldmlhdGUgZnJvbSB0aGUgc3BlYyAod2hpY2hcbiAgLy8gcmVxdWlyZXMgdGhlIGFycmF5KSB0byBwbGF5IG5pY2UgaGVyZS5cbiAgdmFyIG5hbWVzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnbmFtZXMnLCBbXSk7XG4gIHZhciBzb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlUm9vdCcsIG51bGwpO1xuICB2YXIgc291cmNlc0NvbnRlbnQgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzQ29udGVudCcsIG51bGwpO1xuICB2YXIgbWFwcGluZ3MgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdtYXBwaW5ncycpO1xuICB2YXIgZmlsZSA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ2ZpbGUnLCBudWxsKTtcblxuICAvLyBPbmNlIGFnYWluLCBTYXNzIGRldmlhdGVzIGZyb20gdGhlIHNwZWMgYW5kIHN1cHBsaWVzIHRoZSB2ZXJzaW9uIGFzIGFcbiAgLy8gc3RyaW5nIHJhdGhlciB0aGFuIGEgbnVtYmVyLCBzbyB3ZSB1c2UgbG9vc2UgZXF1YWxpdHkgY2hlY2tpbmcgaGVyZS5cbiAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICB9XG5cbiAgc291cmNlcyA9IHNvdXJjZXNcbiAgICAubWFwKFN0cmluZylcbiAgICAvLyBTb21lIHNvdXJjZSBtYXBzIHByb2R1Y2UgcmVsYXRpdmUgc291cmNlIHBhdGhzIGxpa2UgXCIuL2Zvby5qc1wiIGluc3RlYWQgb2ZcbiAgICAvLyBcImZvby5qc1wiLiAgTm9ybWFsaXplIHRoZXNlIGZpcnN0IHNvIHRoYXQgZnV0dXJlIGNvbXBhcmlzb25zIHdpbGwgc3VjY2VlZC5cbiAgICAvLyBTZWUgYnVnemlsLmxhLzEwOTA3NjguXG4gICAgLm1hcCh1dGlsLm5vcm1hbGl6ZSlcbiAgICAvLyBBbHdheXMgZW5zdXJlIHRoYXQgYWJzb2x1dGUgc291cmNlcyBhcmUgaW50ZXJuYWxseSBzdG9yZWQgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgc291cmNlIHJvb3QsIGlmIHRoZSBzb3VyY2Ugcm9vdCBpcyBhYnNvbHV0ZS4gTm90IGRvaW5nIHRoaXMgd291bGRcbiAgICAvLyBiZSBwYXJ0aWN1bGFybHkgcHJvYmxlbWF0aWMgd2hlbiB0aGUgc291cmNlIHJvb3QgaXMgYSBwcmVmaXggb2YgdGhlXG4gICAgLy8gc291cmNlICh2YWxpZCwgYnV0IHdoeT8/KS4gU2VlIGdpdGh1YiBpc3N1ZSAjMTk5IGFuZCBidWd6aWwubGEvMTE4ODk4Mi5cbiAgICAubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2VSb290ICYmIHV0aWwuaXNBYnNvbHV0ZShzb3VyY2VSb290KSAmJiB1dGlsLmlzQWJzb2x1dGUoc291cmNlKVxuICAgICAgICA/IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlKVxuICAgICAgICA6IHNvdXJjZTtcbiAgICB9KTtcblxuICAvLyBQYXNzIGB0cnVlYCBiZWxvdyB0byBhbGxvdyBkdXBsaWNhdGUgbmFtZXMgYW5kIHNvdXJjZXMuIFdoaWxlIHNvdXJjZSBtYXBzXG4gIC8vIGFyZSBpbnRlbmRlZCB0byBiZSBjb21wcmVzc2VkIGFuZCBkZWR1cGxpY2F0ZWQsIHRoZSBUeXBlU2NyaXB0IGNvbXBpbGVyXG4gIC8vIHNvbWV0aW1lcyBnZW5lcmF0ZXMgc291cmNlIG1hcHMgd2l0aCBkdXBsaWNhdGVzIGluIHRoZW0uIFNlZSBHaXRodWIgaXNzdWVcbiAgLy8gIzcyIGFuZCBidWd6aWwubGEvODg5NDkyLlxuICB0aGlzLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShuYW1lcy5tYXAoU3RyaW5nKSwgdHJ1ZSk7XG4gIHRoaXMuX3NvdXJjZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoc291cmNlcywgdHJ1ZSk7XG5cbiAgdGhpcy5zb3VyY2VSb290ID0gc291cmNlUm9vdDtcbiAgdGhpcy5zb3VyY2VzQ29udGVudCA9IHNvdXJjZXNDb250ZW50O1xuICB0aGlzLl9tYXBwaW5ncyA9IG1hcHBpbmdzO1xuICB0aGlzLmZpbGUgPSBmaWxlO1xufVxuXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbnN1bWVyID0gU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogQ3JlYXRlIGEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBmcm9tIGEgU291cmNlTWFwR2VuZXJhdG9yLlxuICpcbiAqIEBwYXJhbSBTb3VyY2VNYXBHZW5lcmF0b3IgYVNvdXJjZU1hcFxuICogICAgICAgIFRoZSBzb3VyY2UgbWFwIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbiAqIEByZXR1cm5zIEJhc2ljU291cmNlTWFwQ29uc3VtZXJcbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZnJvbVNvdXJjZU1hcChhU291cmNlTWFwKSB7XG4gICAgdmFyIHNtYyA9IE9iamVjdC5jcmVhdGUoQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuXG4gICAgdmFyIG5hbWVzID0gc21jLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9uYW1lcy50b0FycmF5KCksIHRydWUpO1xuICAgIHZhciBzb3VyY2VzID0gc21jLl9zb3VyY2VzID0gQXJyYXlTZXQuZnJvbUFycmF5KGFTb3VyY2VNYXAuX3NvdXJjZXMudG9BcnJheSgpLCB0cnVlKTtcbiAgICBzbWMuc291cmNlUm9vdCA9IGFTb3VyY2VNYXAuX3NvdXJjZVJvb3Q7XG4gICAgc21jLnNvdXJjZXNDb250ZW50ID0gYVNvdXJjZU1hcC5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChzbWMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21jLnNvdXJjZVJvb3QpO1xuICAgIHNtYy5maWxlID0gYVNvdXJjZU1hcC5fZmlsZTtcblxuICAgIC8vIEJlY2F1c2Ugd2UgYXJlIG1vZGlmeWluZyB0aGUgZW50cmllcyAoYnkgY29udmVydGluZyBzdHJpbmcgc291cmNlcyBhbmRcbiAgICAvLyBuYW1lcyB0byBpbmRpY2VzIGludG8gdGhlIHNvdXJjZXMgYW5kIG5hbWVzIEFycmF5U2V0cyksIHdlIGhhdmUgdG8gbWFrZVxuICAgIC8vIGEgY29weSBvZiB0aGUgZW50cnkgb3IgZWxzZSBiYWQgdGhpbmdzIGhhcHBlbi4gU2hhcmVkIG11dGFibGUgc3RhdGVcbiAgICAvLyBzdHJpa2VzIGFnYWluISBTZWUgZ2l0aHViIGlzc3VlICMxOTEuXG5cbiAgICB2YXIgZ2VuZXJhdGVkTWFwcGluZ3MgPSBhU291cmNlTWFwLl9tYXBwaW5ncy50b0FycmF5KCkuc2xpY2UoKTtcbiAgICB2YXIgZGVzdEdlbmVyYXRlZE1hcHBpbmdzID0gc21jLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICB2YXIgZGVzdE9yaWdpbmFsTWFwcGluZ3MgPSBzbWMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzcmNNYXBwaW5nID0gZ2VuZXJhdGVkTWFwcGluZ3NbaV07XG4gICAgICB2YXIgZGVzdE1hcHBpbmcgPSBuZXcgTWFwcGluZztcbiAgICAgIGRlc3RNYXBwaW5nLmdlbmVyYXRlZExpbmUgPSBzcmNNYXBwaW5nLmdlbmVyYXRlZExpbmU7XG4gICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gPSBzcmNNYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgaWYgKHNyY01hcHBpbmcuc291cmNlKSB7XG4gICAgICAgIGRlc3RNYXBwaW5nLnNvdXJjZSA9IHNvdXJjZXMuaW5kZXhPZihzcmNNYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIGRlc3RNYXBwaW5nLm9yaWdpbmFsTGluZSA9IHNyY01hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IHNyY01hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgaWYgKHNyY01hcHBpbmcubmFtZSkge1xuICAgICAgICAgIGRlc3RNYXBwaW5nLm5hbWUgPSBuYW1lcy5pbmRleE9mKHNyY01hcHBpbmcubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0T3JpZ2luYWxNYXBwaW5ncy5wdXNoKGRlc3RNYXBwaW5nKTtcbiAgICAgIH1cblxuICAgICAgZGVzdEdlbmVyYXRlZE1hcHBpbmdzLnB1c2goZGVzdE1hcHBpbmcpO1xuICAgIH1cblxuICAgIHF1aWNrU29ydChzbWMuX19vcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcblxuICAgIHJldHVybiBzbWM7XG4gIH07XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogVGhlIGxpc3Qgb2Ygb3JpZ2luYWwgc291cmNlcy5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlUm9vdCAhPSBudWxsID8gdXRpbC5qb2luKHRoaXMuc291cmNlUm9vdCwgcykgOiBzO1xuICAgIH0sIHRoaXMpO1xuICB9XG59KTtcblxuLyoqXG4gKiBQcm92aWRlIHRoZSBKSVQgd2l0aCBhIG5pY2Ugc2hhcGUgLyBoaWRkZW4gY2xhc3MuXG4gKi9cbmZ1bmN0aW9uIE1hcHBpbmcoKSB7XG4gIHRoaXMuZ2VuZXJhdGVkTGluZSA9IDA7XG4gIHRoaXMuZ2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICB0aGlzLm9yaWdpbmFsTGluZSA9IG51bGw7XG4gIHRoaXMub3JpZ2luYWxDb2x1bW4gPSBudWxsO1xuICB0aGlzLm5hbWUgPSBudWxsO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdmFyIGdlbmVyYXRlZExpbmUgPSAxO1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzU291cmNlID0gMDtcbiAgICB2YXIgcHJldmlvdXNOYW1lID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYVN0ci5sZW5ndGg7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY2FjaGVkU2VnbWVudHMgPSB7fTtcbiAgICB2YXIgdGVtcCA9IHt9O1xuICAgIHZhciBvcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdmFyIG1hcHBpbmcsIHN0ciwgc2VnbWVudCwgZW5kLCB2YWx1ZTtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJzsnKSB7XG4gICAgICAgIGdlbmVyYXRlZExpbmUrKztcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYVN0ci5jaGFyQXQoaW5kZXgpID09PSAnLCcpIHtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBtYXBwaW5nID0gbmV3IE1hcHBpbmcoKTtcbiAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gZ2VuZXJhdGVkTGluZTtcblxuICAgICAgICAvLyBCZWNhdXNlIGVhY2ggb2Zmc2V0IGlzIGVuY29kZWQgcmVsYXRpdmUgdG8gdGhlIHByZXZpb3VzIG9uZSxcbiAgICAgICAgLy8gbWFueSBzZWdtZW50cyBvZnRlbiBoYXZlIHRoZSBzYW1lIGVuY29kaW5nLiBXZSBjYW4gZXhwbG9pdCB0aGlzXG4gICAgICAgIC8vIGZhY3QgYnkgY2FjaGluZyB0aGUgcGFyc2VkIHZhcmlhYmxlIGxlbmd0aCBmaWVsZHMgb2YgZWFjaCBzZWdtZW50LFxuICAgICAgICAvLyBhbGxvd2luZyB1cyB0byBhdm9pZCBhIHNlY29uZCBwYXJzZSBpZiB3ZSBlbmNvdW50ZXIgdGhlIHNhbWVcbiAgICAgICAgLy8gc2VnbWVudCBhZ2Fpbi5cbiAgICAgICAgZm9yIChlbmQgPSBpbmRleDsgZW5kIDwgbGVuZ3RoOyBlbmQrKykge1xuICAgICAgICAgIGlmICh0aGlzLl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGVuZCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdHIgPSBhU3RyLnNsaWNlKGluZGV4LCBlbmQpO1xuXG4gICAgICAgIHNlZ21lbnQgPSBjYWNoZWRTZWdtZW50c1tzdHJdO1xuICAgICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICAgIGluZGV4ICs9IHN0ci5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VnbWVudCA9IFtdO1xuICAgICAgICAgIHdoaWxlIChpbmRleCA8IGVuZCkge1xuICAgICAgICAgICAgYmFzZTY0VkxRLmRlY29kZShhU3RyLCBpbmRleCwgdGVtcCk7XG4gICAgICAgICAgICB2YWx1ZSA9IHRlbXAudmFsdWU7XG4gICAgICAgICAgICBpbmRleCA9IHRlbXAucmVzdDtcbiAgICAgICAgICAgIHNlZ21lbnQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIGEgc291cmNlLCBidXQgbm8gbGluZSBhbmQgY29sdW1uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIGEgc291cmNlIGFuZCBsaW5lLCBidXQgbm8gY29sdW1uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2FjaGVkU2VnbWVudHNbc3RyXSA9IHNlZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZW5lcmF0ZWQgY29sdW1uLlxuICAgICAgICBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiA9IHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uICsgc2VnbWVudFswXTtcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgLy8gT3JpZ2luYWwgc291cmNlLlxuICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gcHJldmlvdXNTb3VyY2UgKyBzZWdtZW50WzFdO1xuICAgICAgICAgIHByZXZpb3VzU291cmNlICs9IHNlZ21lbnRbMV07XG5cbiAgICAgICAgICAvLyBPcmlnaW5hbCBsaW5lLlxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID0gcHJldmlvdXNPcmlnaW5hbExpbmUgKyBzZWdtZW50WzJdO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmU7XG4gICAgICAgICAgLy8gTGluZXMgYXJlIHN0b3JlZCAwLWJhc2VkXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgKz0gMTtcblxuICAgICAgICAgIC8vIE9yaWdpbmFsIGNvbHVtbi5cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gcHJldmlvdXNPcmlnaW5hbENvbHVtbiArIHNlZ21lbnRbM107XG4gICAgICAgICAgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiA0KSB7XG4gICAgICAgICAgICAvLyBPcmlnaW5hbCBuYW1lLlxuICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gcHJldmlvdXNOYW1lICsgc2VnbWVudFs0XTtcbiAgICAgICAgICAgIHByZXZpb3VzTmFtZSArPSBzZWdtZW50WzRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdlbmVyYXRlZE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgIGlmICh0eXBlb2YgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgb3JpZ2luYWxNYXBwaW5ncy5wdXNoKG1hcHBpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcXVpY2tTb3J0KGdlbmVyYXRlZE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKTtcbiAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBnZW5lcmF0ZWRNYXBwaW5ncztcblxuICAgIHF1aWNrU29ydChvcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcbiAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncyA9IG9yaWdpbmFsTWFwcGluZ3M7XG4gIH07XG5cbi8qKlxuICogRmluZCB0aGUgbWFwcGluZyB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgaHlwb3RoZXRpY2FsIFwibmVlZGxlXCIgbWFwcGluZyB0aGF0XG4gKiB3ZSBhcmUgc2VhcmNoaW5nIGZvciBpbiB0aGUgZ2l2ZW4gXCJoYXlzdGFja1wiIG9mIG1hcHBpbmdzLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9maW5kTWFwcGluZyhhTmVlZGxlLCBhTWFwcGluZ3MsIGFMaW5lTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYUNvbHVtbk5hbWUsIGFDb21wYXJhdG9yLCBhQmlhcykge1xuICAgIC8vIFRvIHJldHVybiB0aGUgcG9zaXRpb24gd2UgYXJlIHNlYXJjaGluZyBmb3IsIHdlIG11c3QgZmlyc3QgZmluZCB0aGVcbiAgICAvLyBtYXBwaW5nIGZvciB0aGUgZ2l2ZW4gcG9zaXRpb24gYW5kIHRoZW4gcmV0dXJuIHRoZSBvcHBvc2l0ZSBwb3NpdGlvbiBpdFxuICAgIC8vIHBvaW50cyB0by4gQmVjYXVzZSB0aGUgbWFwcGluZ3MgYXJlIHNvcnRlZCwgd2UgY2FuIHVzZSBiaW5hcnkgc2VhcmNoIHRvXG4gICAgLy8gZmluZCB0aGUgYmVzdCBtYXBwaW5nLlxuXG4gICAgaWYgKGFOZWVkbGVbYUxpbmVOYW1lXSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdMaW5lIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDEsIGdvdCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthTGluZU5hbWVdKTtcbiAgICB9XG4gICAgaWYgKGFOZWVkbGVbYUNvbHVtbk5hbWVdIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29sdW1uIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAsIGdvdCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthQ29sdW1uTmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiBiaW5hcnlTZWFyY2guc2VhcmNoKGFOZWVkbGUsIGFNYXBwaW5ncywgYUNvbXBhcmF0b3IsIGFCaWFzKTtcbiAgfTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBsYXN0IGNvbHVtbiBmb3IgZWFjaCBnZW5lcmF0ZWQgbWFwcGluZy4gVGhlIGxhc3QgY29sdW1uIGlzXG4gKiBpbmNsdXNpdmUuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbXB1dGVDb2x1bW5TcGFucyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2NvbXB1dGVDb2x1bW5TcGFucygpIHtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgLy8gTWFwcGluZ3MgZG8gbm90IGNvbnRhaW4gYSBmaWVsZCBmb3IgdGhlIGxhc3QgZ2VuZXJhdGVkIGNvbHVtbnQuIFdlXG4gICAgICAvLyBjYW4gY29tZSB1cCB3aXRoIGFuIG9wdGltaXN0aWMgZXN0aW1hdGUsIGhvd2V2ZXIsIGJ5IGFzc3VtaW5nIHRoYXRcbiAgICAgIC8vIG1hcHBpbmdzIGFyZSBjb250aWd1b3VzIChpLmUuIGdpdmVuIHR3byBjb25zZWN1dGl2ZSBtYXBwaW5ncywgdGhlXG4gICAgICAvLyBmaXJzdCBtYXBwaW5nIGVuZHMgd2hlcmUgdGhlIHNlY29uZCBvbmUgc3RhcnRzKS5cbiAgICAgIGlmIChpbmRleCArIDEgPCB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG5leHRNYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXggKyAxXTtcblxuICAgICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lID09PSBuZXh0TWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgbWFwcGluZy5sYXN0R2VuZXJhdGVkQ29sdW1uID0gbmV4dE1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC0gMTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgbGFzdCBtYXBwaW5nIGZvciBlYWNoIGxpbmUgc3BhbnMgdGhlIGVudGlyZSBsaW5lLlxuICAgICAgbWFwcGluZy5sYXN0R2VuZXJhdGVkQ29sdW1uID0gSW5maW5pdHk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSwgbGluZSwgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdlbmVyYXRlZFxuICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0XG4gKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gKiAgIC0gYmlhczogRWl0aGVyICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICogICAgIERlZmF1bHRzIHRvICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLlxuICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhcbiAgICAgIG5lZWRsZSxcbiAgICAgIHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLFxuICAgICAgXCJnZW5lcmF0ZWRMaW5lXCIsXG4gICAgICBcImdlbmVyYXRlZENvbHVtblwiLFxuICAgICAgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCxcbiAgICAgIHV0aWwuZ2V0QXJnKGFBcmdzLCAnYmlhcycsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKVxuICAgICk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCAnc291cmNlJywgbnVsbCk7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmF0KHNvdXJjZSk7XG4gICAgICAgICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBzb3VyY2UgPSB1dGlsLmpvaW4odGhpcy5zb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgbmFtZSA9IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICduYW1lJywgbnVsbCk7XG4gICAgICAgIGlmIChuYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgbmFtZSA9IHRoaXMuX25hbWVzLmF0KG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ29yaWdpbmFsTGluZScsIG51bGwpLFxuICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ29yaWdpbmFsQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzb3VyY2U6IG51bGwsXG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgbmFtZTogbnVsbFxuICAgIH07XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgd2UgaGF2ZSB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGV2ZXJ5IHNvdXJjZSBpbiB0aGUgc291cmNlXG4gKiBtYXAsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMgPVxuICBmdW5jdGlvbiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyX2hhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCkge1xuICAgIGlmICghdGhpcy5zb3VyY2VzQ29udGVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudC5sZW5ndGggPj0gdGhpcy5fc291cmNlcy5zaXplKCkgJiZcbiAgICAgICF0aGlzLnNvdXJjZXNDb250ZW50LnNvbWUoZnVuY3Rpb24gKHNjKSB7IHJldHVybiBzYyA9PSBudWxsOyB9KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29udGVudC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgdGhlIHVybCBvZiB0aGVcbiAqIG9yaWdpbmFsIHNvdXJjZSBmaWxlLiBSZXR1cm5zIG51bGwgaWYgbm8gb3JpZ2luYWwgc291cmNlIGNvbnRlbnQgaXNcbiAqIGF2YWlsYWJsZS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX3NvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgbnVsbE9uTWlzc2luZykge1xuICAgIGlmICghdGhpcy5zb3VyY2VzQ29udGVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBhU291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIGFTb3VyY2UpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9zb3VyY2VzLmhhcyhhU291cmNlKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKGFTb3VyY2UpXTtcbiAgICB9XG5cbiAgICB2YXIgdXJsO1xuICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbFxuICAgICAgICAmJiAodXJsID0gdXRpbC51cmxQYXJzZSh0aGlzLnNvdXJjZVJvb3QpKSkge1xuICAgICAgLy8gWFhYOiBmaWxlOi8vIFVSSXMgYW5kIGFic29sdXRlIHBhdGhzIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvciBmb3JcbiAgICAgIC8vIG1hbnkgdXNlcnMuIFdlIGNhbiBoZWxwIHRoZW0gb3V0IHdoZW4gdGhleSBleHBlY3QgZmlsZTovLyBVUklzIHRvXG4gICAgICAvLyBiZWhhdmUgbGlrZSBpdCB3b3VsZCBpZiB0aGV5IHdlcmUgcnVubmluZyBhIGxvY2FsIEhUVFAgc2VydmVyLiBTZWVcbiAgICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg4NTU5Ny5cbiAgICAgIHZhciBmaWxlVXJpQWJzUGF0aCA9IGFTb3VyY2UucmVwbGFjZSgvXmZpbGU6XFwvXFwvLywgXCJcIik7XG4gICAgICBpZiAodXJsLnNjaGVtZSA9PSBcImZpbGVcIlxuICAgICAgICAgICYmIHRoaXMuX3NvdXJjZXMuaGFzKGZpbGVVcmlBYnNQYXRoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoZmlsZVVyaUFic1BhdGgpXVxuICAgICAgfVxuXG4gICAgICBpZiAoKCF1cmwucGF0aCB8fCB1cmwucGF0aCA9PSBcIi9cIilcbiAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhcIi9cIiArIGFTb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihcIi9cIiArIGFTb3VyY2UpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgcmVjdXJzaXZlbHkgZnJvbVxuICAgIC8vIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvci4gSW4gdGhhdCBjYXNlLCB3ZVxuICAgIC8vIGRvbid0IHdhbnQgdG8gdGhyb3cgaWYgd2UgY2FuJ3QgZmluZCB0aGUgc291cmNlIC0gd2UganVzdCB3YW50IHRvXG4gICAgLy8gcmV0dXJuIG51bGwsIHNvIHdlIHByb3ZpZGUgYSBmbGFnIHRvIGV4aXQgZ3JhY2VmdWxseS5cbiAgICBpZiAobnVsbE9uTWlzc2luZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGJpYXM6IEVpdGhlciAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2dlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJyk7XG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuc291cmNlUm9vdCwgc291cmNlKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9zb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lOiBudWxsLFxuICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgIGxhc3RDb2x1bW46IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihzb3VyY2UpO1xuXG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgb3JpZ2luYWxMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKFxuICAgICAgbmVlZGxlLFxuICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICBcIm9yaWdpbmFsQ29sdW1uXCIsXG4gICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgdXRpbC5nZXRBcmcoYUFyZ3MsICdiaWFzJywgU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQpXG4gICAgKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IG5lZWRsZS5zb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgIGxhc3RDb2x1bW46IG51bGxcbiAgICB9O1xuICB9O1xuXG5leHBvcnRzLkJhc2ljU291cmNlTWFwQ29uc3VtZXIgPSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIEFuIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2hcbiAqIHdlIGNhbiBxdWVyeSBmb3IgaW5mb3JtYXRpb24uIEl0IGRpZmZlcnMgZnJvbSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGluXG4gKiB0aGF0IGl0IHRha2VzIFwiaW5kZXhlZFwiIHNvdXJjZSBtYXBzIChpLmUuIG9uZXMgd2l0aCBhIFwic2VjdGlvbnNcIiBmaWVsZCkgYXNcbiAqIGlucHV0LlxuICpcbiAqIFRoZSBvbmx5IHBhcmFtZXRlciBpcyBhIHJhdyBzb3VyY2UgbWFwIChlaXRoZXIgYXMgYSBKU09OIHN0cmluZywgb3IgYWxyZWFkeVxuICogcGFyc2VkIHRvIGFuIG9iamVjdCkuIEFjY29yZGluZyB0byB0aGUgc3BlYyBmb3IgaW5kZXhlZCBzb3VyY2UgbWFwcywgdGhleVxuICogaGF2ZSB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gKlxuICogICAtIHZlcnNpb246IFdoaWNoIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXAgc3BlYyB0aGlzIG1hcCBpcyBmb2xsb3dpbmcuXG4gKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICogICAtIHNlY3Rpb25zOiBBIGxpc3Qgb2Ygc2VjdGlvbiBkZWZpbml0aW9ucy5cbiAqXG4gKiBFYWNoIHZhbHVlIHVuZGVyIHRoZSBcInNlY3Rpb25zXCIgZmllbGQgaGFzIHR3byBmaWVsZHM6XG4gKiAgIC0gb2Zmc2V0OiBUaGUgb2Zmc2V0IGludG8gdGhlIG9yaWdpbmFsIHNwZWNpZmllZCBhdCB3aGljaCB0aGlzIHNlY3Rpb25cbiAqICAgICAgIGJlZ2lucyB0byBhcHBseSwgZGVmaW5lZCBhcyBhbiBvYmplY3Qgd2l0aCBhIFwibGluZVwiIGFuZCBcImNvbHVtblwiXG4gKiAgICAgICBmaWVsZC5cbiAqICAgLSBtYXA6IEEgc291cmNlIG1hcCBkZWZpbml0aW9uLiBUaGlzIHNvdXJjZSBtYXAgY291bGQgYWxzbyBiZSBpbmRleGVkLFxuICogICAgICAgYnV0IGRvZXNuJ3QgaGF2ZSB0byBiZS5cbiAqXG4gKiBJbnN0ZWFkIG9mIHRoZSBcIm1hcFwiIGZpZWxkLCBpdCdzIGFsc28gcG9zc2libGUgdG8gaGF2ZSBhIFwidXJsXCIgZmllbGRcbiAqIHNwZWNpZnlpbmcgYSBVUkwgdG8gcmV0cmlldmUgYSBzb3VyY2UgbWFwIGZyb20sIGJ1dCB0aGF0J3MgY3VycmVudGx5XG4gKiB1bnN1cHBvcnRlZC5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF0sIGJ1dFxuICogbW9kaWZpZWQgdG8gb21pdCBhIHNlY3Rpb24gd2hpY2ggdXNlcyB0aGUgXCJ1cmxcIiBmaWVsZC5cbiAqXG4gKiAge1xuICogICAgdmVyc2lvbiA6IDMsXG4gKiAgICBmaWxlOiBcImFwcC5qc1wiLFxuICogICAgc2VjdGlvbnM6IFt7XG4gKiAgICAgIG9mZnNldDoge2xpbmU6MTAwLCBjb2x1bW46MTB9LFxuICogICAgICBtYXA6IHtcbiAqICAgICAgICB2ZXJzaW9uIDogMyxcbiAqICAgICAgICBmaWxlOiBcInNlY3Rpb24uanNcIixcbiAqICAgICAgICBzb3VyY2VzOiBbXCJmb28uanNcIiwgXCJiYXIuanNcIl0sXG4gKiAgICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gKiAgICAgICAgbWFwcGluZ3M6IFwiQUFBQSxFOztBQkNERTtcIlxuICogICAgICB9XG4gKiAgICB9XSxcbiAqICB9XG4gKlxuICogWzBdOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFVMVJHQWVoUXdSeXBVVG92RjFLUmxwaU9GemUwYi1fMmdjNmZBSDBLWTBrL2VkaXQjaGVhZGluZz1oLjUzNWVzM3hlcHJndFxuICovXG5mdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCkge1xuICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSAnc3RyaW5nJykge1xuICAgIHNvdXJjZU1hcCA9IEpTT04ucGFyc2UoYVNvdXJjZU1hcC5yZXBsYWNlKC9eXFwpXFxdXFx9Jy8sICcnKSk7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3ZlcnNpb24nKTtcbiAgdmFyIHNlY3Rpb25zID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc2VjdGlvbnMnKTtcblxuICBpZiAodmVyc2lvbiAhPSB0aGlzLl92ZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2ZXJzaW9uOiAnICsgdmVyc2lvbik7XG4gIH1cblxuICB0aGlzLl9zb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG5cbiAgdmFyIGxhc3RPZmZzZXQgPSB7XG4gICAgbGluZTogLTEsXG4gICAgY29sdW1uOiAwXG4gIH07XG4gIHRoaXMuX3NlY3Rpb25zID0gc2VjdGlvbnMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgaWYgKHMudXJsKSB7XG4gICAgICAvLyBUaGUgdXJsIGZpZWxkIHdpbGwgcmVxdWlyZSBzdXBwb3J0IGZvciBhc3luY2hyb25pY2l0eS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2lzc3Vlcy8xNlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdXBwb3J0IGZvciB1cmwgZmllbGQgaW4gc2VjdGlvbnMgbm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbiAgICB2YXIgb2Zmc2V0ID0gdXRpbC5nZXRBcmcocywgJ29mZnNldCcpO1xuICAgIHZhciBvZmZzZXRMaW5lID0gdXRpbC5nZXRBcmcob2Zmc2V0LCAnbGluZScpO1xuICAgIHZhciBvZmZzZXRDb2x1bW4gPSB1dGlsLmdldEFyZyhvZmZzZXQsICdjb2x1bW4nKTtcblxuICAgIGlmIChvZmZzZXRMaW5lIDwgbGFzdE9mZnNldC5saW5lIHx8XG4gICAgICAgIChvZmZzZXRMaW5lID09PSBsYXN0T2Zmc2V0LmxpbmUgJiYgb2Zmc2V0Q29sdW1uIDwgbGFzdE9mZnNldC5jb2x1bW4pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3Rpb24gb2Zmc2V0cyBtdXN0IGJlIG9yZGVyZWQgYW5kIG5vbi1vdmVybGFwcGluZy4nKTtcbiAgICB9XG4gICAgbGFzdE9mZnNldCA9IG9mZnNldDtcblxuICAgIHJldHVybiB7XG4gICAgICBnZW5lcmF0ZWRPZmZzZXQ6IHtcbiAgICAgICAgLy8gVGhlIG9mZnNldCBmaWVsZHMgYXJlIDAtYmFzZWQsIGJ1dCB3ZSB1c2UgMS1iYXNlZCBpbmRpY2VzIHdoZW5cbiAgICAgICAgLy8gZW5jb2RpbmcvZGVjb2RpbmcgZnJvbSBWTFEuXG4gICAgICAgIGdlbmVyYXRlZExpbmU6IG9mZnNldExpbmUgKyAxLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG9mZnNldENvbHVtbiArIDFcbiAgICAgIH0sXG4gICAgICBjb25zdW1lcjogbmV3IFNvdXJjZU1hcENvbnN1bWVyKHV0aWwuZ2V0QXJnKHMsICdtYXAnKSlcbiAgICB9XG4gIH0pO1xufVxuXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogVGhlIGxpc3Qgb2Ygb3JpZ2luYWwgc291cmNlcy5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdzb3VyY2VzJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBzb3VyY2VzLnB1c2godGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzO1xuICB9XG59KTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlLCBvciBudWxsLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgLSBuYW1lOiBUaGUgb3JpZ2luYWwgaWRlbnRpZmllciwgb3IgbnVsbC5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX29yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgLy8gRmluZCB0aGUgc2VjdGlvbiBjb250YWluaW5nIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24gd2UncmUgdHJ5aW5nIHRvIG1hcFxuICAgIC8vIHRvIGFuIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgIHZhciBzZWN0aW9uSW5kZXggPSBiaW5hcnlTZWFyY2guc2VhcmNoKG5lZWRsZSwgdGhpcy5fc2VjdGlvbnMsXG4gICAgICBmdW5jdGlvbihuZWVkbGUsIHNlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNtcCA9IG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC0gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZTtcbiAgICAgICAgaWYgKGNtcCkge1xuICAgICAgICAgIHJldHVybiBjbXA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG5lZWRsZS5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgIHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbik7XG4gICAgICB9KTtcbiAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW3NlY3Rpb25JbmRleF07XG5cbiAgICBpZiAoIXNlY3Rpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBuYW1lOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzZWN0aW9uLmNvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgbGluZTogbmVlZGxlLmdlbmVyYXRlZExpbmUgLVxuICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgY29sdW1uOiBuZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgIDogMCksXG4gICAgICBiaWFzOiBhQXJncy5iaWFzXG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgd2UgaGF2ZSB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGV2ZXJ5IHNvdXJjZSBpbiB0aGUgc291cmNlXG4gKiBtYXAsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VjdGlvbnMuZXZlcnkoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLmNvbnN1bWVyLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCk7XG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gKiBhdmFpbGFibGUuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIG51bGxPbk1pc3NpbmcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICB2YXIgY29udGVudCA9IHNlY3Rpb24uY29uc3VtZXIuc291cmNlQ29udGVudEZvcihhU291cmNlLCB0cnVlKTtcbiAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobnVsbE9uTWlzc2luZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmdlbmVyYXRlZFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX2dlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcblxuICAgICAgLy8gT25seSBjb25zaWRlciB0aGlzIHNlY3Rpb24gaWYgdGhlIHJlcXVlc3RlZCBzb3VyY2UgaXMgaW4gdGhlIGxpc3Qgb2ZcbiAgICAgIC8vIHNvdXJjZXMgb2YgdGhlIGNvbnN1bWVyLlxuICAgICAgaWYgKHNlY3Rpb24uY29uc3VtZXIuc291cmNlcy5pbmRleE9mKHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJykpID09PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBnZW5lcmF0ZWRQb3NpdGlvbiA9IHNlY3Rpb24uY29uc3VtZXIuZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpO1xuICAgICAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uKSB7XG4gICAgICAgIHZhciByZXQgPSB7XG4gICAgICAgICAgbGluZTogZ2VuZXJhdGVkUG9zaXRpb24ubGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkUG9zaXRpb24uY29sdW1uICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBnZW5lcmF0ZWRQb3NpdGlvbi5saW5lXG4gICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICAgOiAwKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsXG4gICAgfTtcbiAgfTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcbiAgICAgIHZhciBzZWN0aW9uTWFwcGluZ3MgPSBzZWN0aW9uLmNvbnN1bWVyLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VjdGlvbk1hcHBpbmdzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBtYXBwaW5nID0gc2VjdGlvbk1hcHBpbmdzW2pdO1xuXG4gICAgICAgIHZhciBzb3VyY2UgPSBzZWN0aW9uLmNvbnN1bWVyLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgaWYgKHNlY3Rpb24uY29uc3VtZXIuc291cmNlUm9vdCAhPT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZSA9IHV0aWwuam9pbihzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgICAgc291cmNlID0gdGhpcy5fc291cmNlcy5pbmRleE9mKHNvdXJjZSk7XG5cbiAgICAgICAgdmFyIG5hbWUgPSBzZWN0aW9uLmNvbnN1bWVyLl9uYW1lcy5hdChtYXBwaW5nLm5hbWUpO1xuICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICAgIG5hbWUgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuXG4gICAgICAgIC8vIFRoZSBtYXBwaW5ncyBjb21pbmcgZnJvbSB0aGUgY29uc3VtZXIgZm9yIHRoZSBzZWN0aW9uIGhhdmVcbiAgICAgICAgLy8gZ2VuZXJhdGVkIHBvc2l0aW9ucyByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIHNlY3Rpb24sIHNvIHdlXG4gICAgICAgIC8vIG5lZWQgdG8gb2Zmc2V0IHRoZW0gdG8gYmUgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBjb25jYXRlbmF0ZWRcbiAgICAgICAgLy8gZ2VuZXJhdGVkIGZpbGUuXG4gICAgICAgIHZhciBhZGp1c3RlZE1hcHBpbmcgPSB7XG4gICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgZ2VuZXJhdGVkTGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gbWFwcGluZy5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgICAgIDogMCksXG4gICAgICAgICAgb3JpZ2luYWxMaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBvcmlnaW5hbENvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLnB1c2goYWRqdXN0ZWRNYXBwaW5nKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhZGp1c3RlZE1hcHBpbmcub3JpZ2luYWxMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzLnB1c2goYWRqdXN0ZWRNYXBwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHF1aWNrU29ydCh0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQpO1xuICAgIHF1aWNrU29ydCh0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gIH07XG5cbmV4cG9ydHMuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyID0gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIEFycmF5U2V0ID0gcmVxdWlyZSgnLi9hcnJheS1zZXQnKS5BcnJheVNldDtcbnZhciBNYXBwaW5nTGlzdCA9IHJlcXVpcmUoJy4vbWFwcGluZy1saXN0JykuTWFwcGluZ0xpc3Q7XG5cbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgdGhlIFNvdXJjZU1hcEdlbmVyYXRvciByZXByZXNlbnRzIGEgc291cmNlIG1hcCB3aGljaCBpc1xuICogYmVpbmcgYnVpbHQgaW5jcmVtZW50YWxseS4gWW91IG1heSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAqIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGZpbGU6IFRoZSBmaWxlbmFtZSBvZiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqICAgLSBzb3VyY2VSb290OiBBIHJvb3QgZm9yIGFsbCByZWxhdGl2ZSBVUkxzIGluIHRoaXMgc291cmNlIG1hcC5cbiAqL1xuZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKSB7XG4gIGlmICghYUFyZ3MpIHtcbiAgICBhQXJncyA9IHt9O1xuICB9XG4gIHRoaXMuX2ZpbGUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2ZpbGUnLCBudWxsKTtcbiAgdGhpcy5fc291cmNlUm9vdCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlUm9vdCcsIG51bGwpO1xuICB0aGlzLl9za2lwVmFsaWRhdGlvbiA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc2tpcFZhbGlkYXRpb24nLCBmYWxzZSk7XG4gIHRoaXMuX3NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgdGhpcy5fbmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgdGhpcy5fbWFwcGluZ3MgPSBuZXcgTWFwcGluZ0xpc3QoKTtcbiAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbn1cblxuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBTb3VyY2VNYXBHZW5lcmF0b3IgYmFzZWQgb24gYSBTb3VyY2VNYXBDb25zdW1lclxuICpcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcC5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLmZyb21Tb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfZnJvbVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIpIHtcbiAgICB2YXIgc291cmNlUm9vdCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VSb290O1xuICAgIHZhciBnZW5lcmF0b3IgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKHtcbiAgICAgIGZpbGU6IGFTb3VyY2VNYXBDb25zdW1lci5maWxlLFxuICAgICAgc291cmNlUm9vdDogc291cmNlUm9vdFxuICAgIH0pO1xuICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgdmFyIG5ld01hcHBpbmcgPSB7XG4gICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIG5ld01hcHBpbmcuc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdNYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbmV3TWFwcGluZy5zb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3TWFwcGluZy5vcmlnaW5hbCA9IHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWFwcGluZy5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdNYXBwaW5nLm5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZ2VuZXJhdG9yLmFkZE1hcHBpbmcobmV3TWFwcGluZyk7XG4gICAgfSk7XG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlRmlsZSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgZ2VuZXJhdG9yLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfTtcblxuLyoqXG4gKiBBZGQgYSBzaW5nbGUgbWFwcGluZyBmcm9tIG9yaWdpbmFsIHNvdXJjZSBsaW5lIGFuZCBjb2x1bW4gdG8gdGhlIGdlbmVyYXRlZFxuICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIGZvciB0aGlzIHNvdXJjZSBtYXAgYmVpbmcgY3JlYXRlZC4gVGhlIG1hcHBpbmdcbiAqIG9iamVjdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGdlbmVyYXRlZDogQW4gb2JqZWN0IHdpdGggdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICogICAtIG9yaWdpbmFsOiBBbiBvYmplY3Qgd2l0aCB0aGUgb3JpZ2luYWwgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSAocmVsYXRpdmUgdG8gdGhlIHNvdXJjZVJvb3QpLlxuICogICAtIG5hbWU6IEFuIG9wdGlvbmFsIG9yaWdpbmFsIHRva2VuIG5hbWUgZm9yIHRoaXMgbWFwcGluZy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hZGRNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2FkZE1hcHBpbmcoYUFyZ3MpIHtcbiAgICB2YXIgZ2VuZXJhdGVkID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdnZW5lcmF0ZWQnKTtcbiAgICB2YXIgb3JpZ2luYWwgPSB1dGlsLmdldEFyZyhhQXJncywgJ29yaWdpbmFsJywgbnVsbCk7XG4gICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJywgbnVsbCk7XG4gICAgdmFyIG5hbWUgPSB1dGlsLmdldEFyZyhhQXJncywgJ25hbWUnLCBudWxsKTtcblxuICAgIGlmICghdGhpcy5fc2tpcFZhbGlkYXRpb24pIHtcbiAgICAgIHRoaXMuX3ZhbGlkYXRlTWFwcGluZyhnZW5lcmF0ZWQsIG9yaWdpbmFsLCBzb3VyY2UsIG5hbWUpO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgc291cmNlID0gU3RyaW5nKHNvdXJjZSk7XG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgdGhpcy5fc291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmFtZSAhPSBudWxsKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgICAgaWYgKCF0aGlzLl9uYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgICAgdGhpcy5fbmFtZXMuYWRkKG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX21hcHBpbmdzLmFkZCh7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogZ2VuZXJhdGVkLmNvbHVtbixcbiAgICAgIG9yaWdpbmFsTGluZTogb3JpZ2luYWwgIT0gbnVsbCAmJiBvcmlnaW5hbC5saW5lLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwuY29sdW1uLFxuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBuYW1lOiBuYW1lXG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3NldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgdmFyIHNvdXJjZSA9IGFTb3VyY2VGaWxlO1xuICAgIGlmICh0aGlzLl9zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5fc291cmNlUm9vdCwgc291cmNlKTtcbiAgICB9XG5cbiAgICBpZiAoYVNvdXJjZUNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgLy8gQWRkIHRoZSBzb3VyY2UgY29udGVudCB0byB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAuXG4gICAgICAvLyBDcmVhdGUgYSBuZXcgX3NvdXJjZXNDb250ZW50cyBtYXAgaWYgdGhlIHByb3BlcnR5IGlzIG51bGwuXG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoc291cmNlKV0gPSBhU291cmNlQ29udGVudDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBzb3VyY2UgZmlsZSBmcm9tIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcC5cbiAgICAgIC8vIElmIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcCBpcyBlbXB0eSwgc2V0IHRoZSBwcm9wZXJ0eSB0byBudWxsLlxuICAgICAgZGVsZXRlIHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSldO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuX3NvdXJjZXNDb250ZW50cykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIEFwcGxpZXMgdGhlIG1hcHBpbmdzIG9mIGEgc3ViLXNvdXJjZS1tYXAgZm9yIGEgc3BlY2lmaWMgc291cmNlIGZpbGUgdG8gdGhlXG4gKiBzb3VyY2UgbWFwIGJlaW5nIGdlbmVyYXRlZC4gRWFjaCBtYXBwaW5nIHRvIHRoZSBzdXBwbGllZCBzb3VyY2UgZmlsZSBpc1xuICogcmV3cml0dGVuIHVzaW5nIHRoZSBzdXBwbGllZCBzb3VyY2UgbWFwLiBOb3RlOiBUaGUgcmVzb2x1dGlvbiBmb3IgdGhlXG4gKiByZXN1bHRpbmcgbWFwcGluZ3MgaXMgdGhlIG1pbmltaXVtIG9mIHRoaXMgbWFwIGFuZCB0aGUgc3VwcGxpZWQgbWFwLlxuICpcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZC5cbiAqIEBwYXJhbSBhU291cmNlRmlsZSBPcHRpb25hbC4gVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZS5cbiAqICAgICAgICBJZiBvbWl0dGVkLCBTb3VyY2VNYXBDb25zdW1lcidzIGZpbGUgcHJvcGVydHkgd2lsbCBiZSB1c2VkLlxuICogQHBhcmFtIGFTb3VyY2VNYXBQYXRoIE9wdGlvbmFsLiBUaGUgZGlybmFtZSBvZiB0aGUgcGF0aCB0byB0aGUgc291cmNlIG1hcFxuICogICAgICAgIHRvIGJlIGFwcGxpZWQuIElmIHJlbGF0aXZlLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgU291cmNlTWFwQ29uc3VtZXIuXG4gKiAgICAgICAgVGhpcyBwYXJhbWV0ZXIgaXMgbmVlZGVkIHdoZW4gdGhlIHR3byBzb3VyY2UgbWFwcyBhcmVuJ3QgaW4gdGhlIHNhbWVcbiAqICAgICAgICBkaXJlY3RvcnksIGFuZCB0aGUgc291cmNlIG1hcCB0byBiZSBhcHBsaWVkIGNvbnRhaW5zIHJlbGF0aXZlIHNvdXJjZVxuICogICAgICAgIHBhdGhzLiBJZiBzbywgdGhvc2UgcmVsYXRpdmUgc291cmNlIHBhdGhzIG5lZWQgdG8gYmUgcmV3cml0dGVuXG4gKiAgICAgICAgcmVsYXRpdmUgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvci5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hcHBseVNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9hcHBseVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIsIGFTb3VyY2VGaWxlLCBhU291cmNlTWFwUGF0aCkge1xuICAgIHZhciBzb3VyY2VGaWxlID0gYVNvdXJjZUZpbGU7XG4gICAgLy8gSWYgYVNvdXJjZUZpbGUgaXMgb21pdHRlZCwgd2Ugd2lsbCB1c2UgdGhlIGZpbGUgcHJvcGVydHkgb2YgdGhlIFNvdXJjZU1hcFxuICAgIGlmIChhU291cmNlRmlsZSA9PSBudWxsKSB7XG4gICAgICBpZiAoYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1NvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXAgcmVxdWlyZXMgZWl0aGVyIGFuIGV4cGxpY2l0IHNvdXJjZSBmaWxlLCAnICtcbiAgICAgICAgICAnb3IgdGhlIHNvdXJjZSBtYXBcXCdzIFwiZmlsZVwiIHByb3BlcnR5LiBCb3RoIHdlcmUgb21pdHRlZC4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBzb3VyY2VGaWxlID0gYVNvdXJjZU1hcENvbnN1bWVyLmZpbGU7XG4gICAgfVxuICAgIHZhciBzb3VyY2VSb290ID0gdGhpcy5fc291cmNlUm9vdDtcbiAgICAvLyBNYWtlIFwic291cmNlRmlsZVwiIHJlbGF0aXZlIGlmIGFuIGFic29sdXRlIFVybCBpcyBwYXNzZWQuXG4gICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgc291cmNlRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgfVxuICAgIC8vIEFwcGx5aW5nIHRoZSBTb3VyY2VNYXAgY2FuIGFkZCBhbmQgcmVtb3ZlIGl0ZW1zIGZyb20gdGhlIHNvdXJjZXMgYW5kXG4gICAgLy8gdGhlIG5hbWVzIGFycmF5LlxuICAgIHZhciBuZXdTb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gICAgdmFyIG5ld05hbWVzID0gbmV3IEFycmF5U2V0KCk7XG5cbiAgICAvLyBGaW5kIG1hcHBpbmdzIGZvciB0aGUgXCJzb3VyY2VGaWxlXCJcbiAgICB0aGlzLl9tYXBwaW5ncy51bnNvcnRlZEZvckVhY2goZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSA9PT0gc291cmNlRmlsZSAmJiBtYXBwaW5nLm9yaWdpbmFsTGluZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGl0IGNhbiBiZSBtYXBwZWQgYnkgdGhlIHNvdXJjZSBtYXAsIHRoZW4gdXBkYXRlIHRoZSBtYXBwaW5nLlxuICAgICAgICB2YXIgb3JpZ2luYWwgPSBhU291cmNlTWFwQ29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob3JpZ2luYWwuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBDb3B5IG1hcHBpbmdcbiAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgICAgICBpZiAoYVNvdXJjZU1hcFBhdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLmpvaW4oYVNvdXJjZU1hcFBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbWFwcGluZy5zb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IG9yaWdpbmFsLmxpbmU7XG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgICAgICBpZiAob3JpZ2luYWwubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLm5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICBpZiAoc291cmNlICE9IG51bGwgJiYgIW5ld1NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgbmV3U291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICBpZiAobmFtZSAhPSBudWxsICYmICFuZXdOYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgICAgbmV3TmFtZXMuYWRkKG5hbWUpO1xuICAgICAgfVxuXG4gICAgfSwgdGhpcyk7XG4gICAgdGhpcy5fc291cmNlcyA9IG5ld1NvdXJjZXM7XG4gICAgdGhpcy5fbmFtZXMgPSBuZXdOYW1lcztcblxuICAgIC8vIENvcHkgc291cmNlc0NvbnRlbnRzIG9mIGFwcGxpZWQgbWFwLlxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhU291cmNlTWFwUGF0aCwgc291cmNlRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgfTtcblxuLyoqXG4gKiBBIG1hcHBpbmcgY2FuIGhhdmUgb25lIG9mIHRoZSB0aHJlZSBsZXZlbHMgb2YgZGF0YTpcbiAqXG4gKiAgIDEuIEp1c3QgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAqICAgMi4gVGhlIEdlbmVyYXRlZCBwb3NpdGlvbiwgb3JpZ2luYWwgcG9zaXRpb24sIGFuZCBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIDMuIEdlbmVyYXRlZCBhbmQgb3JpZ2luYWwgcG9zaXRpb24sIG9yaWdpbmFsIHNvdXJjZSwgYXMgd2VsbCBhcyBhIG5hbWVcbiAqICAgICAgdG9rZW4uXG4gKlxuICogVG8gbWFpbnRhaW4gY29uc2lzdGVuY3ksIHdlIHZhbGlkYXRlIHRoYXQgYW55IG5ldyBtYXBwaW5nIGJlaW5nIGFkZGVkIGZhbGxzXG4gKiBpbiB0byBvbmUgb2YgdGhlc2UgY2F0ZWdvcmllcy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGVNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3ZhbGlkYXRlTWFwcGluZyhhR2VuZXJhdGVkLCBhT3JpZ2luYWwsIGFTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYU5hbWUpIHtcbiAgICAvLyBXaGVuIGFPcmlnaW5hbCBpcyB0cnV0aHkgYnV0IGhhcyBlbXB0eSB2YWx1ZXMgZm9yIC5saW5lIGFuZCAuY29sdW1uLFxuICAgIC8vIGl0IGlzIG1vc3QgbGlrZWx5IGEgcHJvZ3JhbW1lciBlcnJvci4gSW4gdGhpcyBjYXNlIHdlIHRocm93IGEgdmVyeVxuICAgIC8vIHNwZWNpZmljIGVycm9yIG1lc3NhZ2UgdG8gdHJ5IHRvIGd1aWRlIHRoZW0gdGhlIHJpZ2h0IHdheS5cbiAgICAvLyBGb3IgZXhhbXBsZTogaHR0cHM6Ly9naXRodWIuY29tL1BvbHltZXIvcG9seW1lci1idW5kbGVyL3B1bGwvNTE5XG4gICAgaWYgKGFPcmlnaW5hbCAmJiB0eXBlb2YgYU9yaWdpbmFsLmxpbmUgIT09ICdudW1iZXInICYmIHR5cGVvZiBhT3JpZ2luYWwuY29sdW1uICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnb3JpZ2luYWwubGluZSBhbmQgb3JpZ2luYWwuY29sdW1uIGFyZSBub3QgbnVtYmVycyAtLSB5b3UgcHJvYmFibHkgbWVhbnQgdG8gb21pdCAnICtcbiAgICAgICAgICAgICd0aGUgb3JpZ2luYWwgbWFwcGluZyBlbnRpcmVseSBhbmQgb25seSBtYXAgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi4gSWYgc28sIHBhc3MgJyArXG4gICAgICAgICAgICAnbnVsbCBmb3IgdGhlIG9yaWdpbmFsIG1hcHBpbmcgaW5zdGVhZCBvZiBhbiBvYmplY3Qgd2l0aCBlbXB0eSBvciBudWxsIHZhbHVlcy4nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGFHZW5lcmF0ZWQgJiYgJ2xpbmUnIGluIGFHZW5lcmF0ZWQgJiYgJ2NvbHVtbicgaW4gYUdlbmVyYXRlZFxuICAgICAgICAmJiBhR2VuZXJhdGVkLmxpbmUgPiAwICYmIGFHZW5lcmF0ZWQuY29sdW1uID49IDBcbiAgICAgICAgJiYgIWFPcmlnaW5hbCAmJiAhYVNvdXJjZSAmJiAhYU5hbWUpIHtcbiAgICAgIC8vIENhc2UgMS5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsICYmICdsaW5lJyBpbiBhT3JpZ2luYWwgJiYgJ2NvbHVtbicgaW4gYU9yaWdpbmFsXG4gICAgICAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsLmxpbmUgPiAwICYmIGFPcmlnaW5hbC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICYmIGFTb3VyY2UpIHtcbiAgICAgIC8vIENhc2VzIDIgYW5kIDMuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1hcHBpbmc6ICcgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGdlbmVyYXRlZDogYUdlbmVyYXRlZCxcbiAgICAgICAgc291cmNlOiBhU291cmNlLFxuICAgICAgICBvcmlnaW5hbDogYU9yaWdpbmFsLFxuICAgICAgICBuYW1lOiBhTmFtZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBTZXJpYWxpemUgdGhlIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIHRvIHRoZSBzdHJlYW0gb2YgYmFzZSA2NCBWTFFzXG4gKiBzcGVjaWZpZWQgYnkgdGhlIHNvdXJjZSBtYXAgZm9ybWF0LlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9zZXJpYWxpemVNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9zZXJpYWxpemVNYXBwaW5ncygpIHtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZExpbmUgPSAxO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgIHZhciBwcmV2aW91c05hbWUgPSAwO1xuICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBuZXh0O1xuICAgIHZhciBtYXBwaW5nO1xuICAgIHZhciBuYW1lSWR4O1xuICAgIHZhciBzb3VyY2VJZHg7XG5cbiAgICB2YXIgbWFwcGluZ3MgPSB0aGlzLl9tYXBwaW5ncy50b0FycmF5KCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBtYXBwaW5nID0gbWFwcGluZ3NbaV07XG4gICAgICBuZXh0ID0gJydcblxuICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgd2hpbGUgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgbmV4dCArPSAnOyc7XG4gICAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICBpZiAoIXV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZywgbWFwcGluZ3NbaSAtIDFdKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHQgKz0gJywnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbik7XG4gICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VJZHggPSB0aGlzLl9zb3VyY2VzLmluZGV4T2YobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUoc291cmNlSWR4IC0gcHJldmlvdXNTb3VyY2UpO1xuICAgICAgICBwcmV2aW91c1NvdXJjZSA9IHNvdXJjZUlkeDtcblxuICAgICAgICAvLyBsaW5lcyBhcmUgc3RvcmVkIDAtYmFzZWQgaW4gU291cmNlTWFwIHNwZWMgdmVyc2lvbiAzXG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsTGluZSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c09yaWdpbmFsTGluZSk7XG4gICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmUgLSAxO1xuXG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbENvbHVtbik7XG4gICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgIG5hbWVJZHggPSB0aGlzLl9uYW1lcy5pbmRleE9mKG1hcHBpbmcubmFtZSk7XG4gICAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG5hbWVJZHggLSBwcmV2aW91c05hbWUpO1xuICAgICAgICAgIHByZXZpb3VzTmFtZSA9IG5hbWVJZHg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzdWx0ICs9IG5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KGFTb3VyY2VzLCBhU291cmNlUm9vdCkge1xuICAgIHJldHVybiBhU291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoYVNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKGFTb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgfVxuICAgICAgdmFyIGtleSA9IHV0aWwudG9TZXRTdHJpbmcoc291cmNlKTtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5fc291cmNlc0NvbnRlbnRzLCBrZXkpXG4gICAgICAgID8gdGhpcy5fc291cmNlc0NvbnRlbnRzW2tleV1cbiAgICAgICAgOiBudWxsO1xuICAgIH0sIHRoaXMpO1xuICB9O1xuXG4vKipcbiAqIEV4dGVybmFsaXplIHRoZSBzb3VyY2UgbWFwLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvSlNPTiA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl90b0pTT04oKSB7XG4gICAgdmFyIG1hcCA9IHtcbiAgICAgIHZlcnNpb246IHRoaXMuX3ZlcnNpb24sXG4gICAgICBzb3VyY2VzOiB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKSxcbiAgICAgIG5hbWVzOiB0aGlzLl9uYW1lcy50b0FycmF5KCksXG4gICAgICBtYXBwaW5nczogdGhpcy5fc2VyaWFsaXplTWFwcGluZ3MoKVxuICAgIH07XG4gICAgaWYgKHRoaXMuX2ZpbGUgIT0gbnVsbCkge1xuICAgICAgbWFwLmZpbGUgPSB0aGlzLl9maWxlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBtYXAuc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgIG1hcC5zb3VyY2VzQ29udGVudCA9IHRoaXMuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQobWFwLnNvdXJjZXMsIG1hcC5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwO1xuICB9O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQgdG8gYSBzdHJpbmcuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUudG9TdHJpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xuICB9O1xuXG5leHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9IFNvdXJjZU1hcEdlbmVyYXRvcjtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIFNvdXJjZU1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4vLyBNYXRjaGVzIGEgV2luZG93cy1zdHlsZSBgXFxyXFxuYCBuZXdsaW5lIG9yIGEgYFxcbmAgbmV3bGluZSB1c2VkIGJ5IGFsbCBvdGhlclxuLy8gb3BlcmF0aW5nIHN5c3RlbXMgdGhlc2UgZGF5cyAoY2FwdHVyaW5nIHRoZSByZXN1bHQpLlxudmFyIFJFR0VYX05FV0xJTkUgPSAvKFxccj9cXG4pLztcblxuLy8gTmV3bGluZSBjaGFyYWN0ZXIgY29kZSBmb3IgY2hhckNvZGVBdCgpIGNvbXBhcmlzb25zXG52YXIgTkVXTElORV9DT0RFID0gMTA7XG5cbi8vIFByaXZhdGUgc3ltYm9sIGZvciBpZGVudGlmeWluZyBgU291cmNlTm9kZWBzIHdoZW4gbXVsdGlwbGUgdmVyc2lvbnMgb2Zcbi8vIHRoZSBzb3VyY2UtbWFwIGxpYnJhcnkgYXJlIGxvYWRlZC4gVGhpcyBNVVNUIE5PVCBDSEFOR0UgYWNyb3NzXG4vLyB2ZXJzaW9ucyFcbnZhciBpc1NvdXJjZU5vZGUgPSBcIiQkJGlzU291cmNlTm9kZSQkJFwiO1xuXG4vKipcbiAqIFNvdXJjZU5vZGVzIHByb3ZpZGUgYSB3YXkgdG8gYWJzdHJhY3Qgb3ZlciBpbnRlcnBvbGF0aW5nL2NvbmNhdGVuYXRpbmdcbiAqIHNuaXBwZXRzIG9mIGdlbmVyYXRlZCBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlIHdoaWxlIG1haW50YWluaW5nIHRoZSBsaW5lIGFuZFxuICogY29sdW1uIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgb3JpZ2luYWwgc291cmNlIGNvZGUuXG4gKlxuICogQHBhcmFtIGFMaW5lIFRoZSBvcmlnaW5hbCBsaW5lIG51bWJlci5cbiAqIEBwYXJhbSBhQ29sdW1uIFRoZSBvcmlnaW5hbCBjb2x1bW4gbnVtYmVyLlxuICogQHBhcmFtIGFTb3VyY2UgVGhlIG9yaWdpbmFsIHNvdXJjZSdzIGZpbGVuYW1lLlxuICogQHBhcmFtIGFDaHVua3MgT3B0aW9uYWwuIEFuIGFycmF5IG9mIHN0cmluZ3Mgd2hpY2ggYXJlIHNuaXBwZXRzIG9mXG4gKiAgICAgICAgZ2VuZXJhdGVkIEpTLCBvciBvdGhlciBTb3VyY2VOb2Rlcy5cbiAqIEBwYXJhbSBhTmFtZSBUaGUgb3JpZ2luYWwgaWRlbnRpZmllci5cbiAqL1xuZnVuY3Rpb24gU291cmNlTm9kZShhTGluZSwgYUNvbHVtbiwgYVNvdXJjZSwgYUNodW5rcywgYU5hbWUpIHtcbiAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICB0aGlzLnNvdXJjZUNvbnRlbnRzID0ge307XG4gIHRoaXMubGluZSA9IGFMaW5lID09IG51bGwgPyBudWxsIDogYUxpbmU7XG4gIHRoaXMuY29sdW1uID0gYUNvbHVtbiA9PSBudWxsID8gbnVsbCA6IGFDb2x1bW47XG4gIHRoaXMuc291cmNlID0gYVNvdXJjZSA9PSBudWxsID8gbnVsbCA6IGFTb3VyY2U7XG4gIHRoaXMubmFtZSA9IGFOYW1lID09IG51bGwgPyBudWxsIDogYU5hbWU7XG4gIHRoaXNbaXNTb3VyY2VOb2RlXSA9IHRydWU7XG4gIGlmIChhQ2h1bmtzICE9IG51bGwpIHRoaXMuYWRkKGFDaHVua3MpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBTb3VyY2VOb2RlIGZyb20gZ2VuZXJhdGVkIGNvZGUgYW5kIGEgU291cmNlTWFwQ29uc3VtZXIuXG4gKlxuICogQHBhcmFtIGFHZW5lcmF0ZWRDb2RlIFRoZSBnZW5lcmF0ZWQgY29kZVxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwIGZvciB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAqIEBwYXJhbSBhUmVsYXRpdmVQYXRoIE9wdGlvbmFsLiBUaGUgcGF0aCB0aGF0IHJlbGF0aXZlIHNvdXJjZXMgaW4gdGhlXG4gKiAgICAgICAgU291cmNlTWFwQ29uc3VtZXIgc2hvdWxkIGJlIHJlbGF0aXZlIHRvLlxuICovXG5Tb3VyY2VOb2RlLmZyb21TdHJpbmdXaXRoU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV9mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcChhR2VuZXJhdGVkQ29kZSwgYVNvdXJjZU1hcENvbnN1bWVyLCBhUmVsYXRpdmVQYXRoKSB7XG4gICAgLy8gVGhlIFNvdXJjZU5vZGUgd2Ugd2FudCB0byBmaWxsIHdpdGggdGhlIGdlbmVyYXRlZCBjb2RlXG4gICAgLy8gYW5kIHRoZSBTb3VyY2VNYXBcbiAgICB2YXIgbm9kZSA9IG5ldyBTb3VyY2VOb2RlKCk7XG5cbiAgICAvLyBBbGwgZXZlbiBpbmRpY2VzIG9mIHRoaXMgYXJyYXkgYXJlIG9uZSBsaW5lIG9mIHRoZSBnZW5lcmF0ZWQgY29kZSxcbiAgICAvLyB3aGlsZSBhbGwgb2RkIGluZGljZXMgYXJlIHRoZSBuZXdsaW5lcyBiZXR3ZWVuIHR3byBhZGphY2VudCBsaW5lc1xuICAgIC8vIChzaW5jZSBgUkVHRVhfTkVXTElORWAgY2FwdHVyZXMgaXRzIG1hdGNoKS5cbiAgICAvLyBQcm9jZXNzZWQgZnJhZ21lbnRzIGFyZSBhY2Nlc3NlZCBieSBjYWxsaW5nIGBzaGlmdE5leHRMaW5lYC5cbiAgICB2YXIgcmVtYWluaW5nTGluZXMgPSBhR2VuZXJhdGVkQ29kZS5zcGxpdChSRUdFWF9ORVdMSU5FKTtcbiAgICB2YXIgcmVtYWluaW5nTGluZXNJbmRleCA9IDA7XG4gICAgdmFyIHNoaWZ0TmV4dExpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsaW5lQ29udGVudHMgPSBnZXROZXh0TGluZSgpO1xuICAgICAgLy8gVGhlIGxhc3QgbGluZSBvZiBhIGZpbGUgbWlnaHQgbm90IGhhdmUgYSBuZXdsaW5lLlxuICAgICAgdmFyIG5ld0xpbmUgPSBnZXROZXh0TGluZSgpIHx8IFwiXCI7XG4gICAgICByZXR1cm4gbGluZUNvbnRlbnRzICsgbmV3TGluZTtcblxuICAgICAgZnVuY3Rpb24gZ2V0TmV4dExpbmUoKSB7XG4gICAgICAgIHJldHVybiByZW1haW5pbmdMaW5lc0luZGV4IDwgcmVtYWluaW5nTGluZXMubGVuZ3RoID9cbiAgICAgICAgICAgIHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXgrK10gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFdlIG5lZWQgdG8gcmVtZW1iZXIgdGhlIHBvc2l0aW9uIG9mIFwicmVtYWluaW5nTGluZXNcIlxuICAgIHZhciBsYXN0R2VuZXJhdGVkTGluZSA9IDEsIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuXG4gICAgLy8gVGhlIGdlbmVyYXRlIFNvdXJjZU5vZGVzIHdlIG5lZWQgYSBjb2RlIHJhbmdlLlxuICAgIC8vIFRvIGV4dHJhY3QgaXQgY3VycmVudCBhbmQgbGFzdCBtYXBwaW5nIGlzIHVzZWQuXG4gICAgLy8gSGVyZSB3ZSBzdG9yZSB0aGUgbGFzdCBtYXBwaW5nLlxuICAgIHZhciBsYXN0TWFwcGluZyA9IG51bGw7XG5cbiAgICBhU291cmNlTWFwQ29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIGlmIChsYXN0TWFwcGluZyAhPT0gbnVsbCkge1xuICAgICAgICAvLyBXZSBhZGQgdGhlIGNvZGUgZnJvbSBcImxhc3RNYXBwaW5nXCIgdG8gXCJtYXBwaW5nXCI6XG4gICAgICAgIC8vIEZpcnN0IGNoZWNrIGlmIHRoZXJlIGlzIGEgbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgaWYgKGxhc3RHZW5lcmF0ZWRMaW5lIDwgbWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgLy8gQXNzb2NpYXRlIGZpcnN0IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZExpbmUrKztcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgICAvLyBUaGUgcmVtYWluaW5nIGNvZGUgaXMgYWRkZWQgd2l0aG91dCBtYXBwaW5nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGhlcmUgaXMgbm8gbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIGNvZGUgYmV0d2VlbiBcImxhc3RHZW5lcmF0ZWRDb2x1bW5cIiBhbmRcbiAgICAgICAgICAvLyBcIm1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXCIgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICB2YXIgbmV4dExpbmUgPSByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XTtcbiAgICAgICAgICB2YXIgY29kZSA9IG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gPSBuZXh0TGluZS5zdWJzdHIobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcbiAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIGNvZGUpO1xuICAgICAgICAgIC8vIE5vIG1vcmUgcmVtYWluaW5nIGNvZGUsIGNvbnRpbnVlXG4gICAgICAgICAgbGFzdE1hcHBpbmcgPSBtYXBwaW5nO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gV2UgYWRkIHRoZSBnZW5lcmF0ZWQgY29kZSB1bnRpbCB0aGUgZmlyc3QgbWFwcGluZ1xuICAgICAgLy8gdG8gdGhlIFNvdXJjZU5vZGUgd2l0aG91dCBhbnkgbWFwcGluZy5cbiAgICAgIC8vIEVhY2ggbGluZSBpcyBhZGRlZCBhcyBzZXBhcmF0ZSBzdHJpbmcuXG4gICAgICB3aGlsZSAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgbm9kZS5hZGQoc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgbGFzdEdlbmVyYXRlZExpbmUrKztcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0R2VuZXJhdGVkQ29sdW1uIDwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pIHtcbiAgICAgICAgdmFyIG5leHRMaW5lID0gcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF07XG4gICAgICAgIG5vZGUuYWRkKG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikpO1xuICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSA9IG5leHRMaW5lLnN1YnN0cihtYXBwaW5nLmdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcbiAgICAgIH1cbiAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICB9LCB0aGlzKTtcbiAgICAvLyBXZSBoYXZlIHByb2Nlc3NlZCBhbGwgbWFwcGluZ3MuXG4gICAgaWYgKHJlbWFpbmluZ0xpbmVzSW5kZXggPCByZW1haW5pbmdMaW5lcy5sZW5ndGgpIHtcbiAgICAgIGlmIChsYXN0TWFwcGluZykge1xuICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIHJlbWFpbmluZyBjb2RlIGluIHRoZSBjdXJyZW50IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgfVxuICAgICAgLy8gYW5kIGFkZCB0aGUgcmVtYWluaW5nIGxpbmVzIHdpdGhvdXQgYW55IG1hcHBpbmdcbiAgICAgIG5vZGUuYWRkKHJlbWFpbmluZ0xpbmVzLnNwbGljZShyZW1haW5pbmdMaW5lc0luZGV4KS5qb2luKFwiXCIpKTtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50IGludG8gU291cmNlTm9kZVxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhUmVsYXRpdmVQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBub2RlO1xuXG4gICAgZnVuY3Rpb24gYWRkTWFwcGluZ1dpdGhDb2RlKG1hcHBpbmcsIGNvZGUpIHtcbiAgICAgIGlmIChtYXBwaW5nID09PSBudWxsIHx8IG1hcHBpbmcuc291cmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZS5hZGQoY29kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc291cmNlID0gYVJlbGF0aXZlUGF0aFxuICAgICAgICAgID8gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgIDogbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIG5vZGUuYWRkKG5ldyBTb3VyY2VOb2RlKG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBpbmcubmFtZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhpcyBzb3VyY2Ugbm9kZS5cbiAqXG4gKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2FkZChhQ2h1bmspIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYUNodW5rKSkge1xuICAgIGFDaHVuay5mb3JFYWNoKGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgdGhpcy5hZGQoY2h1bmspO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIGVsc2UgaWYgKGFDaHVua1tpc1NvdXJjZU5vZGVdIHx8IHR5cGVvZiBhQ2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoYUNodW5rKSB7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goYUNodW5rKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGlzIHNvdXJjZSBub2RlLlxuICpcbiAqIEBwYXJhbSBhQ2h1bmsgQSBzdHJpbmcgc25pcHBldCBvZiBnZW5lcmF0ZWQgSlMgY29kZSwgYW5vdGhlciBpbnN0YW5jZSBvZlxuICogICAgICAgIFNvdXJjZU5vZGUsIG9yIGFuIGFycmF5IHdoZXJlIGVhY2ggbWVtYmVyIGlzIG9uZSBvZiB0aG9zZSB0aGluZ3MuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3ByZXBlbmQoYUNodW5rKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICBmb3IgKHZhciBpID0gYUNodW5rLmxlbmd0aC0xOyBpID49IDA7IGktLSkge1xuICAgICAgdGhpcy5wcmVwZW5kKGFDaHVua1tpXSk7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGFDaHVua1tpc1NvdXJjZU5vZGVdIHx8IHR5cGVvZiBhQ2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICB0aGlzLmNoaWxkcmVuLnVuc2hpZnQoYUNodW5rKTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgXCJFeHBlY3RlZCBhIFNvdXJjZU5vZGUsIHN0cmluZywgb3IgYW4gYXJyYXkgb2YgU291cmNlTm9kZXMgYW5kIHN0cmluZ3MuIEdvdCBcIiArIGFDaHVua1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFdhbGsgb3ZlciB0aGUgdHJlZSBvZiBKUyBzbmlwcGV0cyBpbiB0aGlzIG5vZGUgYW5kIGl0cyBjaGlsZHJlbi4gVGhlXG4gKiB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGZvciBlYWNoIHNuaXBwZXQgb2YgSlMgYW5kIGlzIHBhc3NlZCB0aGF0XG4gKiBzbmlwcGV0IGFuZCB0aGUgaXRzIG9yaWdpbmFsIGFzc29jaWF0ZWQgc291cmNlJ3MgbGluZS9jb2x1bW4gbG9jYXRpb24uXG4gKlxuICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gU291cmNlTm9kZV93YWxrKGFGbikge1xuICB2YXIgY2h1bms7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY2h1bmsgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgIGlmIChjaHVua1tpc1NvdXJjZU5vZGVdKSB7XG4gICAgICBjaHVuay53YWxrKGFGbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKGNodW5rICE9PSAnJykge1xuICAgICAgICBhRm4oY2h1bmssIHsgc291cmNlOiB0aGlzLnNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZSxcbiAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIExpa2UgYFN0cmluZy5wcm90b3R5cGUuam9pbmAgZXhjZXB0IGZvciBTb3VyY2VOb2Rlcy4gSW5zZXJ0cyBgYVN0cmAgYmV0d2VlblxuICogZWFjaCBvZiBgdGhpcy5jaGlsZHJlbmAuXG4gKlxuICogQHBhcmFtIGFTZXAgVGhlIHNlcGFyYXRvci5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfam9pbihhU2VwKSB7XG4gIHZhciBuZXdDaGlsZHJlbjtcbiAgdmFyIGk7XG4gIHZhciBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKGxlbiA+IDApIHtcbiAgICBuZXdDaGlsZHJlbiA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW4tMTsgaSsrKSB7XG4gICAgICBuZXdDaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xuICAgICAgbmV3Q2hpbGRyZW4ucHVzaChhU2VwKTtcbiAgICB9XG4gICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICB0aGlzLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlIG9uIHRoZSB2ZXJ5IHJpZ2h0LW1vc3Qgc291cmNlIHNuaXBwZXQuIFVzZWZ1bFxuICogZm9yIHRyaW1taW5nIHdoaXRlc3BhY2UgZnJvbSB0aGUgZW5kIG9mIGEgc291cmNlIG5vZGUsIGV0Yy5cbiAqXG4gKiBAcGFyYW0gYVBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAqIEBwYXJhbSBhUmVwbGFjZW1lbnQgVGhlIHRoaW5nIHRvIHJlcGxhY2UgdGhlIHBhdHRlcm4gd2l0aC5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUucmVwbGFjZVJpZ2h0ID0gZnVuY3Rpb24gU291cmNlTm9kZV9yZXBsYWNlUmlnaHQoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCkge1xuICB2YXIgbGFzdENoaWxkID0gdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICBpZiAobGFzdENoaWxkW2lzU291cmNlTm9kZV0pIHtcbiAgICBsYXN0Q2hpbGQucmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBsYXN0Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdID0gbGFzdENoaWxkLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5jaGlsZHJlbi5wdXNoKCcnLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCkpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLiBUaGlzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvclxuICogaW4gdGhlIHNvdXJjZXNDb250ZW50IGZpZWxkLlxuICpcbiAqIEBwYXJhbSBhU291cmNlRmlsZSBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlXG4gKiBAcGFyYW0gYVNvdXJjZUNvbnRlbnQgVGhlIGNvbnRlbnQgb2YgdGhlIHNvdXJjZSBmaWxlXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnNldFNvdXJjZUNvbnRlbnQgPVxuICBmdW5jdGlvbiBTb3VyY2VOb2RlX3NldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgdGhpcy5zb3VyY2VDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKGFTb3VyY2VGaWxlKV0gPSBhU291cmNlQ29udGVudDtcbiAgfTtcblxuLyoqXG4gKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgU291cmNlTm9kZXMuIFRoZSB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaFxuICogc291cmNlIGZpbGUgY29udGVudCBhbmQgaXMgcGFzc2VkIHRoZSBmaWxlbmFtZSBhbmQgc291cmNlIGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS53YWxrU291cmNlQ29udGVudHMgPVxuICBmdW5jdGlvbiBTb3VyY2VOb2RlX3dhbGtTb3VyY2VDb250ZW50cyhhRm4pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKHRoaXMuY2hpbGRyZW5baV1baXNTb3VyY2VOb2RlXSkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLndhbGtTb3VyY2VDb250ZW50cyhhRm4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzb3VyY2VzID0gT2JqZWN0LmtleXModGhpcy5zb3VyY2VDb250ZW50cyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFGbih1dGlsLmZyb21TZXRTdHJpbmcoc291cmNlc1tpXSksIHRoaXMuc291cmNlQ29udGVudHNbc291cmNlc1tpXV0pO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlLiBXYWxrcyBvdmVyIHRoZSB0cmVlXG4gKiBhbmQgY29uY2F0ZW5hdGVzIGFsbCB0aGUgdmFyaW91cyBzbmlwcGV0cyB0b2dldGhlciB0byBvbmUgc3RyaW5nLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfdG9TdHJpbmcoKSB7XG4gIHZhciBzdHIgPSBcIlwiO1xuICB0aGlzLndhbGsoZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgc3RyICs9IGNodW5rO1xuICB9KTtcbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc291cmNlIG5vZGUgYWxvbmcgd2l0aCBhIHNvdXJjZVxuICogbWFwLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS50b1N0cmluZ1dpdGhTb3VyY2VNYXAgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nV2l0aFNvdXJjZU1hcChhQXJncykge1xuICB2YXIgZ2VuZXJhdGVkID0ge1xuICAgIGNvZGU6IFwiXCIsXG4gICAgbGluZTogMSxcbiAgICBjb2x1bW46IDBcbiAgfTtcbiAgdmFyIG1hcCA9IG5ldyBTb3VyY2VNYXBHZW5lcmF0b3IoYUFyZ3MpO1xuICB2YXIgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICB2YXIgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbExpbmUgPSBudWxsO1xuICB2YXIgbGFzdE9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbE5hbWUgPSBudWxsO1xuICB0aGlzLndhbGsoZnVuY3Rpb24gKGNodW5rLCBvcmlnaW5hbCkge1xuICAgIGdlbmVyYXRlZC5jb2RlICs9IGNodW5rO1xuICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT09IG51bGxcbiAgICAgICAgJiYgb3JpZ2luYWwubGluZSAhPT0gbnVsbFxuICAgICAgICAmJiBvcmlnaW5hbC5jb2x1bW4gIT09IG51bGwpIHtcbiAgICAgIGlmKGxhc3RPcmlnaW5hbFNvdXJjZSAhPT0gb3JpZ2luYWwuc291cmNlXG4gICAgICAgICB8fCBsYXN0T3JpZ2luYWxMaW5lICE9PSBvcmlnaW5hbC5saW5lXG4gICAgICAgICB8fCBsYXN0T3JpZ2luYWxDb2x1bW4gIT09IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTmFtZSAhPT0gb3JpZ2luYWwubmFtZSkge1xuICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgIGxpbmU6IG9yaWdpbmFsLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgIGxhc3RPcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgbGFzdE9yaWdpbmFsQ29sdW1uID0gb3JpZ2luYWwuY29sdW1uO1xuICAgICAgbGFzdE9yaWdpbmFsTmFtZSA9IG9yaWdpbmFsLm5hbWU7XG4gICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcHBpbmdBY3RpdmUpIHtcbiAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuZ3RoID0gY2h1bmsubGVuZ3RoOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICBpZiAoY2h1bmsuY2hhckNvZGVBdChpZHgpID09PSBORVdMSU5FX0NPREUpIHtcbiAgICAgICAgZ2VuZXJhdGVkLmxpbmUrKztcbiAgICAgICAgZ2VuZXJhdGVkLmNvbHVtbiA9IDA7XG4gICAgICAgIC8vIE1hcHBpbmdzIGVuZCBhdCBlb2xcbiAgICAgICAgaWYgKGlkeCArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcHBpbmdBY3RpdmUpIHtcbiAgICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICBzb3VyY2U6IG9yaWdpbmFsLnNvdXJjZSxcbiAgICAgICAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgICAgICAgIGxpbmU6IG9yaWdpbmFsLmxpbmUsXG4gICAgICAgICAgICAgIGNvbHVtbjogb3JpZ2luYWwuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuYW1lOiBvcmlnaW5hbC5uYW1lXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlbmVyYXRlZC5jb2x1bW4rKztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB0aGlzLndhbGtTb3VyY2VDb250ZW50cyhmdW5jdGlvbiAoc291cmNlRmlsZSwgc291cmNlQ29udGVudCkge1xuICAgIG1hcC5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpO1xuICB9KTtcblxuICByZXR1cm4geyBjb2RlOiBnZW5lcmF0ZWQuY29kZSwgbWFwOiBtYXAgfTtcbn07XG5cbmV4cG9ydHMuU291cmNlTm9kZSA9IFNvdXJjZU5vZGU7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8qKlxuICogVGhpcyBpcyBhIGhlbHBlciBmdW5jdGlvbiBmb3IgZ2V0dGluZyB2YWx1ZXMgZnJvbSBwYXJhbWV0ZXIvb3B0aW9uc1xuICogb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gYXJncyBUaGUgb2JqZWN0IHdlIGFyZSBleHRyYWN0aW5nIHZhbHVlcyBmcm9tXG4gKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2UgYXJlIGdldHRpbmcuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIEFuIG9wdGlvbmFsIHZhbHVlIHRvIHJldHVybiBpZiB0aGUgcHJvcGVydHkgaXMgbWlzc2luZ1xuICogZnJvbSB0aGUgb2JqZWN0LiBJZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQgYW5kIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nLCBhblxuICogZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gKi9cbmZ1bmN0aW9uIGdldEFyZyhhQXJncywgYU5hbWUsIGFEZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGFOYW1lIGluIGFBcmdzKSB7XG4gICAgcmV0dXJuIGFBcmdzW2FOYW1lXTtcbiAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgcmV0dXJuIGFEZWZhdWx0VmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhTmFtZSArICdcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LicpO1xuICB9XG59XG5leHBvcnRzLmdldEFyZyA9IGdldEFyZztcblxudmFyIHVybFJlZ2V4cCA9IC9eKD86KFtcXHcrXFwtLl0rKTopP1xcL1xcLyg/OihcXHcrOlxcdyspQCk/KFtcXHcuXSopKD86OihcXGQrKSk/KFxcUyopJC87XG52YXIgZGF0YVVybFJlZ2V4cCA9IC9eZGF0YTouK1xcLC4rJC87XG5cbmZ1bmN0aW9uIHVybFBhcnNlKGFVcmwpIHtcbiAgdmFyIG1hdGNoID0gYVVybC5tYXRjaCh1cmxSZWdleHApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzY2hlbWU6IG1hdGNoWzFdLFxuICAgIGF1dGg6IG1hdGNoWzJdLFxuICAgIGhvc3Q6IG1hdGNoWzNdLFxuICAgIHBvcnQ6IG1hdGNoWzRdLFxuICAgIHBhdGg6IG1hdGNoWzVdXG4gIH07XG59XG5leHBvcnRzLnVybFBhcnNlID0gdXJsUGFyc2U7XG5cbmZ1bmN0aW9uIHVybEdlbmVyYXRlKGFQYXJzZWRVcmwpIHtcbiAgdmFyIHVybCA9ICcnO1xuICBpZiAoYVBhcnNlZFVybC5zY2hlbWUpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5zY2hlbWUgKyAnOic7XG4gIH1cbiAgdXJsICs9ICcvLyc7XG4gIGlmIChhUGFyc2VkVXJsLmF1dGgpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5hdXRoICsgJ0AnO1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLmhvc3QpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5ob3N0O1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLnBvcnQpIHtcbiAgICB1cmwgKz0gXCI6XCIgKyBhUGFyc2VkVXJsLnBvcnRcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5wYXRoKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwucGF0aDtcbiAgfVxuICByZXR1cm4gdXJsO1xufVxuZXhwb3J0cy51cmxHZW5lcmF0ZSA9IHVybEdlbmVyYXRlO1xuXG4vKipcbiAqIE5vcm1hbGl6ZXMgYSBwYXRoLCBvciB0aGUgcGF0aCBwb3J0aW9uIG9mIGEgVVJMOlxuICpcbiAqIC0gUmVwbGFjZXMgY29uc2VjdXRpdmUgc2xhc2hlcyB3aXRoIG9uZSBzbGFzaC5cbiAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnLicgcGFydHMuXG4gKiAtIFJlbW92ZXMgdW5uZWNlc3NhcnkgJzxkaXI+Ly4uJyBwYXJ0cy5cbiAqXG4gKiBCYXNlZCBvbiBjb2RlIGluIHRoZSBOb2RlLmpzICdwYXRoJyBjb3JlIG1vZHVsZS5cbiAqXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgdXJsIHRvIG5vcm1hbGl6ZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKGFQYXRoKSB7XG4gIHZhciBwYXRoID0gYVBhdGg7XG4gIHZhciB1cmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIGlmICh1cmwpIHtcbiAgICBpZiAoIXVybC5wYXRoKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuICAgIHBhdGggPSB1cmwucGF0aDtcbiAgfVxuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKTtcblxuICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KC9cXC8rLyk7XG4gIGZvciAodmFyIHBhcnQsIHVwID0gMCwgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgcGFydCA9IHBhcnRzW2ldO1xuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCA+IDApIHtcbiAgICAgIGlmIChwYXJ0ID09PSAnJykge1xuICAgICAgICAvLyBUaGUgZmlyc3QgcGFydCBpcyBibGFuayBpZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZS4gVHJ5aW5nIHRvIGdvXG4gICAgICAgIC8vIGFib3ZlIHRoZSByb290IGlzIGEgbm8tb3AuIFRoZXJlZm9yZSB3ZSBjYW4gcmVtb3ZlIGFsbCAnLi4nIHBhcnRzXG4gICAgICAgIC8vIGRpcmVjdGx5IGFmdGVyIHRoZSByb290LlxuICAgICAgICBwYXJ0cy5zcGxpY2UoaSArIDEsIHVwKTtcbiAgICAgICAgdXAgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydHMuc3BsaWNlKGksIDIpO1xuICAgICAgICB1cC0tO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwYXRoID0gcGFydHMuam9pbignLycpO1xuXG4gIGlmIChwYXRoID09PSAnJykge1xuICAgIHBhdGggPSBpc0Fic29sdXRlID8gJy8nIDogJy4nO1xuICB9XG5cbiAgaWYgKHVybCkge1xuICAgIHVybC5wYXRoID0gcGF0aDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUodXJsKTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xuXG4vKipcbiAqIEpvaW5zIHR3byBwYXRocy9VUkxzLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgam9pbmVkIHdpdGggdGhlIHJvb3QuXG4gKlxuICogLSBJZiBhUGF0aCBpcyBhIFVSTCBvciBhIGRhdGEgVVJJLCBhUGF0aCBpcyByZXR1cm5lZCwgdW5sZXNzIGFQYXRoIGlzIGFcbiAqICAgc2NoZW1lLXJlbGF0aXZlIFVSTDogVGhlbiB0aGUgc2NoZW1lIG9mIGFSb290LCBpZiBhbnksIGlzIHByZXBlbmRlZFxuICogICBmaXJzdC5cbiAqIC0gT3RoZXJ3aXNlIGFQYXRoIGlzIGEgcGF0aC4gSWYgYVJvb3QgaXMgYSBVUkwsIHRoZW4gaXRzIHBhdGggcG9ydGlvblxuICogICBpcyB1cGRhdGVkIHdpdGggdGhlIHJlc3VsdCBhbmQgYVJvb3QgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSB0aGUgcmVzdWx0XG4gKiAgIGlzIHJldHVybmVkLlxuICogICAtIElmIGFQYXRoIGlzIGFic29sdXRlLCB0aGUgcmVzdWx0IGlzIGFQYXRoLlxuICogICAtIE90aGVyd2lzZSB0aGUgdHdvIHBhdGhzIGFyZSBqb2luZWQgd2l0aCBhIHNsYXNoLlxuICogLSBKb2luaW5nIGZvciBleGFtcGxlICdodHRwOi8vJyBhbmQgJ3d3dy5leGFtcGxlLmNvbScgaXMgYWxzbyBzdXBwb3J0ZWQuXG4gKi9cbmZ1bmN0aW9uIGpvaW4oYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cbiAgaWYgKGFQYXRoID09PSBcIlwiKSB7XG4gICAgYVBhdGggPSBcIi5cIjtcbiAgfVxuICB2YXIgYVBhdGhVcmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIHZhciBhUm9vdFVybCA9IHVybFBhcnNlKGFSb290KTtcbiAgaWYgKGFSb290VXJsKSB7XG4gICAgYVJvb3QgPSBhUm9vdFVybC5wYXRoIHx8ICcvJztcbiAgfVxuXG4gIC8vIGBqb2luKGZvbywgJy8vd3d3LmV4YW1wbGUub3JnJylgXG4gIGlmIChhUGF0aFVybCAmJiAhYVBhdGhVcmwuc2NoZW1lKSB7XG4gICAgaWYgKGFSb290VXJsKSB7XG4gICAgICBhUGF0aFVybC5zY2hlbWUgPSBhUm9vdFVybC5zY2hlbWU7XG4gICAgfVxuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUGF0aFVybCk7XG4gIH1cblxuICBpZiAoYVBhdGhVcmwgfHwgYVBhdGgubWF0Y2goZGF0YVVybFJlZ2V4cCkpIHtcbiAgICByZXR1cm4gYVBhdGg7XG4gIH1cblxuICAvLyBgam9pbignaHR0cDovLycsICd3d3cuZXhhbXBsZS5jb20nKWBcbiAgaWYgKGFSb290VXJsICYmICFhUm9vdFVybC5ob3N0ICYmICFhUm9vdFVybC5wYXRoKSB7XG4gICAgYVJvb3RVcmwuaG9zdCA9IGFQYXRoO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cblxuICB2YXIgam9pbmVkID0gYVBhdGguY2hhckF0KDApID09PSAnLydcbiAgICA/IGFQYXRoXG4gICAgOiBub3JtYWxpemUoYVJvb3QucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyBhUGF0aCk7XG5cbiAgaWYgKGFSb290VXJsKSB7XG4gICAgYVJvb3RVcmwucGF0aCA9IGpvaW5lZDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVJvb3RVcmwpO1xuICB9XG4gIHJldHVybiBqb2luZWQ7XG59XG5leHBvcnRzLmpvaW4gPSBqb2luO1xuXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbiAoYVBhdGgpIHtcbiAgcmV0dXJuIGFQYXRoLmNoYXJBdCgwKSA9PT0gJy8nIHx8ICEhYVBhdGgubWF0Y2godXJsUmVnZXhwKTtcbn07XG5cbi8qKlxuICogTWFrZSBhIHBhdGggcmVsYXRpdmUgdG8gYSBVUkwgb3IgYW5vdGhlciBwYXRoLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgbWFkZSByZWxhdGl2ZSB0byBhUm9vdC5cbiAqL1xuZnVuY3Rpb24gcmVsYXRpdmUoYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cblxuICBhUm9vdCA9IGFSb290LnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cbiAgLy8gSXQgaXMgcG9zc2libGUgZm9yIHRoZSBwYXRoIHRvIGJlIGFib3ZlIHRoZSByb290LiBJbiB0aGlzIGNhc2UsIHNpbXBseVxuICAvLyBjaGVja2luZyB3aGV0aGVyIHRoZSByb290IGlzIGEgcHJlZml4IG9mIHRoZSBwYXRoIHdvbid0IHdvcmsuIEluc3RlYWQsIHdlXG4gIC8vIG5lZWQgdG8gcmVtb3ZlIGNvbXBvbmVudHMgZnJvbSB0aGUgcm9vdCBvbmUgYnkgb25lLCB1bnRpbCBlaXRoZXIgd2UgZmluZFxuICAvLyBhIHByZWZpeCB0aGF0IGZpdHMsIG9yIHdlIHJ1biBvdXQgb2YgY29tcG9uZW50cyB0byByZW1vdmUuXG4gIHZhciBsZXZlbCA9IDA7XG4gIHdoaWxlIChhUGF0aC5pbmRleE9mKGFSb290ICsgJy8nKSAhPT0gMCkge1xuICAgIHZhciBpbmRleCA9IGFSb290Lmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG9ubHkgcGFydCBvZiB0aGUgcm9vdCB0aGF0IGlzIGxlZnQgaXMgdGhlIHNjaGVtZSAoaS5lLiBodHRwOi8vLFxuICAgIC8vIGZpbGU6Ly8vLCBldGMuKSwgb25lIG9yIG1vcmUgc2xhc2hlcyAoLyksIG9yIHNpbXBseSBub3RoaW5nIGF0IGFsbCwgd2VcbiAgICAvLyBoYXZlIGV4aGF1c3RlZCBhbGwgY29tcG9uZW50cywgc28gdGhlIHBhdGggaXMgbm90IHJlbGF0aXZlIHRvIHRoZSByb290LlxuICAgIGFSb290ID0gYVJvb3Quc2xpY2UoMCwgaW5kZXgpO1xuICAgIGlmIChhUm9vdC5tYXRjaCgvXihbXlxcL10rOlxcLyk/XFwvKiQvKSkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cblxuICAgICsrbGV2ZWw7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgd2UgYWRkIGEgXCIuLi9cIiBmb3IgZWFjaCBjb21wb25lbnQgd2UgcmVtb3ZlZCBmcm9tIHRoZSByb290LlxuICByZXR1cm4gQXJyYXkobGV2ZWwgKyAxKS5qb2luKFwiLi4vXCIpICsgYVBhdGguc3Vic3RyKGFSb290Lmxlbmd0aCArIDEpO1xufVxuZXhwb3J0cy5yZWxhdGl2ZSA9IHJlbGF0aXZlO1xuXG52YXIgc3VwcG9ydHNOdWxsUHJvdG8gPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuICEoJ19fcHJvdG9fXycgaW4gb2JqKTtcbn0oKSk7XG5cbmZ1bmN0aW9uIGlkZW50aXR5IChzKSB7XG4gIHJldHVybiBzO1xufVxuXG4vKipcbiAqIEJlY2F1c2UgYmVoYXZpb3IgZ29lcyB3YWNreSB3aGVuIHlvdSBzZXQgYF9fcHJvdG9fX2Agb24gb2JqZWN0cywgd2VcbiAqIGhhdmUgdG8gcHJlZml4IGFsbCB0aGUgc3RyaW5ncyBpbiBvdXIgc2V0IHdpdGggYW4gYXJiaXRyYXJ5IGNoYXJhY3Rlci5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9wdWxsLzMxIGFuZFxuICogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMzBcbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuZnVuY3Rpb24gdG9TZXRTdHJpbmcoYVN0cikge1xuICBpZiAoaXNQcm90b1N0cmluZyhhU3RyKSkge1xuICAgIHJldHVybiAnJCcgKyBhU3RyO1xuICB9XG5cbiAgcmV0dXJuIGFTdHI7XG59XG5leHBvcnRzLnRvU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IHRvU2V0U3RyaW5nO1xuXG5mdW5jdGlvbiBmcm9tU2V0U3RyaW5nKGFTdHIpIHtcbiAgaWYgKGlzUHJvdG9TdHJpbmcoYVN0cikpIHtcbiAgICByZXR1cm4gYVN0ci5zbGljZSgxKTtcbiAgfVxuXG4gIHJldHVybiBhU3RyO1xufVxuZXhwb3J0cy5mcm9tU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IGZyb21TZXRTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzUHJvdG9TdHJpbmcocykge1xuICBpZiAoIXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcy5sZW5ndGg7XG5cbiAgaWYgKGxlbmd0aCA8IDkgLyogXCJfX3Byb3RvX19cIi5sZW5ndGggKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocy5jaGFyQ29kZUF0KGxlbmd0aCAtIDEpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMikgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSAzKSAhPT0gMTExIC8qICdvJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDQpICE9PSAxMTYgLyogJ3QnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNSkgIT09IDExMSAvKiAnbycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA2KSAhPT0gMTE0IC8qICdyJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDcpICE9PSAxMTIgLyogJ3AnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gOCkgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA5KSAhPT0gOTUgIC8qICdfJyAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSBsZW5ndGggLSAxMDsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAocy5jaGFyQ29kZUF0KGkpICE9PSAzNiAvKiAnJCcgKi8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdoZXJlIHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uLCBidXQgZGlmZmVyZW50IGdlbmVyYXRlZFxuICogbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGEgbWFwcGluZyB3aXRoIGFcbiAqIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICB2YXIgY21wID0gbWFwcGluZ0Euc291cmNlIC0gbWFwcGluZ0Iuc291cmNlO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlT3JpZ2luYWwpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBtYXBwaW5nQS5uYW1lIC0gbWFwcGluZ0IubmFtZTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMgPSBjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucztcblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdpdGggZGVmbGF0ZWQgc291cmNlIGFuZCBuYW1lIGluZGljZXMgd2hlcmVcbiAqIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqXG4gKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gKiBtYXBwaW5ncyB3aXRoIHRoZSBzYW1lIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4sIGJ1dCBkaWZmZXJlbnRcbiAqIHNvdXJjZS9uYW1lL29yaWdpbmFsIGxpbmUgYW5kIGNvbHVtbiB0aGUgc2FtZS4gVXNlZnVsIHdoZW4gc2VhcmNoaW5nIGZvciBhXG4gKiBtYXBwaW5nIHdpdGggYSBzdHViYmVkIG91dCBtYXBwaW5nLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IsIG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gIHZhciBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDAgfHwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Euc291cmNlIC0gbWFwcGluZ0Iuc291cmNlO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBtYXBwaW5nQS5uYW1lIC0gbWFwcGluZ0IubmFtZTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZDtcblxuZnVuY3Rpb24gc3RyY21wKGFTdHIxLCBhU3RyMikge1xuICBpZiAoYVN0cjEgPT09IGFTdHIyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoYVN0cjEgPiBhU3RyMikge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBpbmZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgc3RyaW5ncyB3aGVyZVxuICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgdmFyIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQ7XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMDktMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0UudHh0IG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5leHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yJykuU291cmNlTWFwR2VuZXJhdG9yO1xuZXhwb3J0cy5Tb3VyY2VNYXBDb25zdW1lciA9IHJlcXVpcmUoJy4vbGliL3NvdXJjZS1tYXAtY29uc3VtZXInKS5Tb3VyY2VNYXBDb25zdW1lcjtcbmV4cG9ydHMuU291cmNlTm9kZSA9IHJlcXVpcmUoJy4vbGliL3NvdXJjZS1ub2RlJykuU291cmNlTm9kZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjb21tZW50UmVnZXgnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0Q29tbWVudFJlZ2V4ICgpIHtcbiAgICByZXR1cm4gL15cXHMqXFwvKD86XFwvfFxcKilbQCNdXFxzK3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTooPzphcHBsaWNhdGlvbnx0ZXh0KVxcL2pzb247KD86Y2hhcnNldFs6PV1cXFMrPzspP2Jhc2U2NCwoPzouKikkL21nO1xuICB9XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdtYXBGaWxlQ29tbWVudFJlZ2V4Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldE1hcEZpbGVDb21tZW50UmVnZXggKCkge1xuICAgIC8vIE1hdGNoZXMgc291cmNlTWFwcGluZ1VSTCBpbiBlaXRoZXIgLy8gb3IgLyogY29tbWVudCBzdHlsZXMuXG4gICAgcmV0dXJuIC8oPzpcXC9cXC9bQCNdWyBcXHRdK3NvdXJjZU1hcHBpbmdVUkw9KFteXFxzJ1wiYF0rPylbIFxcdF0qJCl8KD86XFwvXFwqW0AjXVsgXFx0XStzb3VyY2VNYXBwaW5nVVJMPShbXlxcKl0rPylbIFxcdF0qKD86XFwqXFwvKXsxfVsgXFx0XSokKS9tZztcbiAgfVxufSk7XG5cblxuZnVuY3Rpb24gZGVjb2RlQmFzZTY0KGJhc2U2NCkge1xuICByZXR1cm4gbmV3IEJ1ZmZlcihiYXNlNjQsICdiYXNlNjQnKS50b1N0cmluZygpO1xufVxuXG5mdW5jdGlvbiBzdHJpcENvbW1lbnQoc20pIHtcbiAgcmV0dXJuIHNtLnNwbGl0KCcsJykucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHJlYWRGcm9tRmlsZU1hcChzbSwgZGlyKSB7XG4gIC8vIE5PVEU6IHRoaXMgd2lsbCBvbmx5IHdvcmsgb24gdGhlIHNlcnZlciBzaW5jZSBpdCBhdHRlbXB0cyB0byByZWFkIHRoZSBtYXAgZmlsZVxuXG4gIHZhciByID0gZXhwb3J0cy5tYXBGaWxlQ29tbWVudFJlZ2V4LmV4ZWMoc20pO1xuXG4gIC8vIGZvciBzb21lIG9kZCByZWFzb24gLy8jIC4uIGNhcHR1cmVzIGluIDEgYW5kIC8qIC4uICovIGluIDJcbiAgdmFyIGZpbGVuYW1lID0gclsxXSB8fCByWzJdO1xuICB2YXIgZmlsZXBhdGggPSBwYXRoLnJlc29sdmUoZGlyLCBmaWxlbmFtZSk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGZpbGVwYXRoLCAndXRmOCcpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gcmVhZCB0aGUgbWFwIGZpbGUgYXQgJyArIGZpbGVwYXRoICsgJ1xcbicgKyBlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBDb252ZXJ0ZXIgKHNtLCBvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIGlmIChvcHRzLmlzRmlsZUNvbW1lbnQpIHNtID0gcmVhZEZyb21GaWxlTWFwKHNtLCBvcHRzLmNvbW1lbnRGaWxlRGlyKTtcbiAgaWYgKG9wdHMuaGFzQ29tbWVudCkgc20gPSBzdHJpcENvbW1lbnQoc20pO1xuICBpZiAob3B0cy5pc0VuY29kZWQpIHNtID0gZGVjb2RlQmFzZTY0KHNtKTtcbiAgaWYgKG9wdHMuaXNKU09OIHx8IG9wdHMuaXNFbmNvZGVkKSBzbSA9IEpTT04ucGFyc2Uoc20pO1xuXG4gIHRoaXMuc291cmNlbWFwID0gc207XG59XG5cbkNvbnZlcnRlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKHNwYWNlKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnNvdXJjZW1hcCwgbnVsbCwgc3BhY2UpO1xufTtcblxuQ29udmVydGVyLnByb3RvdHlwZS50b0Jhc2U2NCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGpzb24gPSB0aGlzLnRvSlNPTigpO1xuICByZXR1cm4gbmV3IEJ1ZmZlcihqc29uKS50b1N0cmluZygnYmFzZTY0Jyk7XG59O1xuXG5Db252ZXJ0ZXIucHJvdG90eXBlLnRvQ29tbWVudCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBiYXNlNjQgPSB0aGlzLnRvQmFzZTY0KCk7XG4gIHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMubXVsdGlsaW5lID8gJy8qIyAnICsgZGF0YSArICcgKi8nIDogJy8vIyAnICsgZGF0YTtcbn07XG5cbi8vIHJldHVybnMgY29weSBpbnN0ZWFkIG9mIG9yaWdpbmFsXG5Db252ZXJ0ZXIucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLnRvSlNPTigpKTtcbn07XG5cbkNvbnZlcnRlci5wcm90b3R5cGUuYWRkUHJvcGVydHkgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICBpZiAodGhpcy5zb3VyY2VtYXAuaGFzT3duUHJvcGVydHkoa2V5KSkgdGhyb3cgbmV3IEVycm9yKCdwcm9wZXJ0eSBcIicgKyBrZXkgKyAnXCIgYWxyZWFkeSBleGlzdHMgb24gdGhlIHNvdXJjZW1hcCwgdXNlIHNldCBwcm9wZXJ0eSBpbnN0ZWFkJyk7XG4gIHJldHVybiB0aGlzLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xufTtcblxuQ29udmVydGVyLnByb3RvdHlwZS5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRoaXMuc291cmNlbWFwW2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Db252ZXJ0ZXIucHJvdG90eXBlLmdldFByb3BlcnR5ID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gdGhpcy5zb3VyY2VtYXBba2V5XTtcbn07XG5cbmV4cG9ydHMuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG5ldyBDb252ZXJ0ZXIob2JqKTtcbn07XG5cbmV4cG9ydHMuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICByZXR1cm4gbmV3IENvbnZlcnRlcihqc29uLCB7IGlzSlNPTjogdHJ1ZSB9KTtcbn07XG5cbmV4cG9ydHMuZnJvbUJhc2U2NCA9IGZ1bmN0aW9uIChiYXNlNjQpIHtcbiAgcmV0dXJuIG5ldyBDb252ZXJ0ZXIoYmFzZTY0LCB7IGlzRW5jb2RlZDogdHJ1ZSB9KTtcbn07XG5cbmV4cG9ydHMuZnJvbUNvbW1lbnQgPSBmdW5jdGlvbiAoY29tbWVudCkge1xuICBjb21tZW50ID0gY29tbWVudFxuICAgIC5yZXBsYWNlKC9eXFwvXFwqL2csICcvLycpXG4gICAgLnJlcGxhY2UoL1xcKlxcLyQvZywgJycpO1xuXG4gIHJldHVybiBuZXcgQ29udmVydGVyKGNvbW1lbnQsIHsgaXNFbmNvZGVkOiB0cnVlLCBoYXNDb21tZW50OiB0cnVlIH0pO1xufTtcblxuZXhwb3J0cy5mcm9tTWFwRmlsZUNvbW1lbnQgPSBmdW5jdGlvbiAoY29tbWVudCwgZGlyKSB7XG4gIHJldHVybiBuZXcgQ29udmVydGVyKGNvbW1lbnQsIHsgY29tbWVudEZpbGVEaXI6IGRpciwgaXNGaWxlQ29tbWVudDogdHJ1ZSwgaXNKU09OOiB0cnVlIH0pO1xufTtcblxuLy8gRmluZHMgbGFzdCBzb3VyY2VtYXAgY29tbWVudCBpbiBmaWxlIG9yIHJldHVybnMgbnVsbCBpZiBub25lIHdhcyBmb3VuZFxuZXhwb3J0cy5mcm9tU291cmNlID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgdmFyIG0gPSBjb250ZW50Lm1hdGNoKGV4cG9ydHMuY29tbWVudFJlZ2V4KTtcbiAgcmV0dXJuIG0gPyBleHBvcnRzLmZyb21Db21tZW50KG0ucG9wKCkpIDogbnVsbDtcbn07XG5cbi8vIEZpbmRzIGxhc3Qgc291cmNlbWFwIGNvbW1lbnQgaW4gZmlsZSBvciByZXR1cm5zIG51bGwgaWYgbm9uZSB3YXMgZm91bmRcbmV4cG9ydHMuZnJvbU1hcEZpbGVTb3VyY2UgPSBmdW5jdGlvbiAoY29udGVudCwgZGlyKSB7XG4gIHZhciBtID0gY29udGVudC5tYXRjaChleHBvcnRzLm1hcEZpbGVDb21tZW50UmVnZXgpO1xuICByZXR1cm4gbSA/IGV4cG9ydHMuZnJvbU1hcEZpbGVDb21tZW50KG0ucG9wKCksIGRpcikgOiBudWxsO1xufTtcblxuZXhwb3J0cy5yZW1vdmVDb21tZW50cyA9IGZ1bmN0aW9uIChzcmMpIHtcbiAgcmV0dXJuIHNyYy5yZXBsYWNlKGV4cG9ydHMuY29tbWVudFJlZ2V4LCAnJyk7XG59O1xuXG5leHBvcnRzLnJlbW92ZU1hcEZpbGVDb21tZW50cyA9IGZ1bmN0aW9uIChzcmMpIHtcbiAgcmV0dXJuIHNyYy5yZXBsYWNlKGV4cG9ydHMubWFwRmlsZUNvbW1lbnRSZWdleCwgJycpO1xufTtcblxuZXhwb3J0cy5nZW5lcmF0ZU1hcEZpbGVDb21tZW50ID0gZnVuY3Rpb24gKGZpbGUsIG9wdGlvbnMpIHtcbiAgdmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD0nICsgZmlsZTtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5tdWx0aWxpbmUgPyAnLyojICcgKyBkYXRhICsgJyAqLycgOiAnLy8jICcgKyBkYXRhO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS43JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG4gIHZhciBmbnMgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSk7XG4gIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgdmFyIHJ4Zm4gPSBmbnNbMV07XG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKSB7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEZvcmNlZCByZXBsYWNlbWVudCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fbGlicmFyeScpIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbFxuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIHJlcXVpcmUoJy4vX2dsb2JhbCcpW0tdO1xufSk7XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXTtcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCkge1xuICAvLyAyMS4xLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5tYXRjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJG1hdGNoXTtcbn0pO1xuIiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpIHtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuIiwiLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG4gIHZhciBfc3BsaXQgPSAkc3BsaXQ7XG4gIHZhciAkcHVzaCA9IFtdLnB1c2g7XG4gIHZhciAkU1BMSVQgPSAnc3BsaXQnO1xuICB2YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG4gIHZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgdmFyIE5QQ0cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHVuZGVmaW5lZDsgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuIF9zcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTtcbiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgaWYgKCFOUENHKSBzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZykpIHtcbiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0dcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgICAgaWYgKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKSBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHNbTEVOR1RIXSAtIDI7IGkrKykgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICB9LCAkc3BsaXRdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIHRtcCA9IHt9O1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNzsgfSkpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwidmFyIHNwbGl0ID0gcmVxdWlyZSgnYnJvd3Nlci1zcGxpdCcpXG52YXIgQ2xhc3NMaXN0ID0gcmVxdWlyZSgnY2xhc3MtbGlzdCcpXG5cbnZhciB3ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyByZXF1aXJlKCdodG1sLWVsZW1lbnQnKSA6IHdpbmRvd1xudmFyIGRvY3VtZW50ID0gdy5kb2N1bWVudFxudmFyIFRleHQgPSB3LlRleHRcblxuZnVuY3Rpb24gY29udGV4dCAoKSB7XG5cbiAgdmFyIGNsZWFudXBGdW5jcyA9IFtdXG5cbiAgZnVuY3Rpb24gaCgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSwgZSA9IG51bGxcbiAgICBmdW5jdGlvbiBpdGVtIChsKSB7XG4gICAgICB2YXIgclxuICAgICAgZnVuY3Rpb24gcGFyc2VDbGFzcyAoc3RyaW5nKSB7XG4gICAgICAgIC8vIE91ciBtaW5pbWFsIHBhcnNlciBkb2VzbuKAmXQgdW5kZXJzdGFuZCBlc2NhcGluZyBDU1Mgc3BlY2lhbFxuICAgICAgICAvLyBjaGFyYWN0ZXJzIGxpa2UgYCNgLiBEb27igJl0IHVzZSB0aGVtLiBNb3JlIHJlYWRpbmc6XG4gICAgICAgIC8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9jc3MtZXNjYXBlcyAuXG5cbiAgICAgICAgdmFyIG0gPSBzcGxpdChzdHJpbmcsIC8oW1xcLiNdP1teXFxzIy5dKykvKVxuICAgICAgICBpZigvXlxcLnwjLy50ZXN0KG1bMV0pKVxuICAgICAgICAgIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBmb3JFYWNoKG0sIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgdmFyIHMgPSB2LnN1YnN0cmluZygxLHYubGVuZ3RoKVxuICAgICAgICAgIGlmKCF2KSByZXR1cm5cbiAgICAgICAgICBpZighZSlcbiAgICAgICAgICAgIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHYpXG4gICAgICAgICAgZWxzZSBpZiAodlswXSA9PT0gJy4nKVxuICAgICAgICAgICAgQ2xhc3NMaXN0KGUpLmFkZChzKVxuICAgICAgICAgIGVsc2UgaWYgKHZbMF0gPT09ICcjJylcbiAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKCdpZCcsIHMpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmKGwgPT0gbnVsbClcbiAgICAgICAgO1xuICAgICAgZWxzZSBpZignc3RyaW5nJyA9PT0gdHlwZW9mIGwpIHtcbiAgICAgICAgaWYoIWUpXG4gICAgICAgICAgcGFyc2VDbGFzcyhsKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgZS5hcHBlbmRDaGlsZChyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobCkpXG4gICAgICB9XG4gICAgICBlbHNlIGlmKCdudW1iZXInID09PSB0eXBlb2YgbFxuICAgICAgICB8fCAnYm9vbGVhbicgPT09IHR5cGVvZiBsXG4gICAgICAgIHx8IGwgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAgIHx8IGwgaW5zdGFuY2VvZiBSZWdFeHAgKSB7XG4gICAgICAgICAgZS5hcHBlbmRDaGlsZChyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobC50b1N0cmluZygpKSlcbiAgICAgIH1cbiAgICAgIC8vdGhlcmUgbWlnaHQgYmUgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG4gICAgICBlbHNlIGlmIChpc0FycmF5KGwpKVxuICAgICAgICBmb3JFYWNoKGwsIGl0ZW0pXG4gICAgICBlbHNlIGlmKGlzTm9kZShsKSlcbiAgICAgICAgZS5hcHBlbmRDaGlsZChyID0gbClcbiAgICAgIGVsc2UgaWYobCBpbnN0YW5jZW9mIFRleHQpXG4gICAgICAgIGUuYXBwZW5kQ2hpbGQociA9IGwpXG4gICAgICBlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIGwpIHtcbiAgICAgICAgZm9yICh2YXIgayBpbiBsKSB7XG4gICAgICAgICAgaWYoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGxba10pIHtcbiAgICAgICAgICAgIGlmKC9eb25cXHcrLy50ZXN0KGspKSB7XG4gICAgICAgICAgICAgIChmdW5jdGlvbiAoaywgbCkgeyAvLyBjYXB0dXJlIGssIGwgaW4gdGhlIGNsb3N1cmVcbiAgICAgICAgICAgICAgICBpZiAoZS5hZGRFdmVudExpc3RlbmVyKXtcbiAgICAgICAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcihrLnN1YnN0cmluZygyKSwgbFtrXSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICBjbGVhbnVwRnVuY3MucHVzaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoay5zdWJzdHJpbmcoMiksIGxba10sIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgIGUuYXR0YWNoRXZlbnQoaywgbFtrXSlcbiAgICAgICAgICAgICAgICAgIGNsZWFudXBGdW5jcy5wdXNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGUuZGV0YWNoRXZlbnQoaywgbFtrXSlcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KShrLCBsKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gb2JzZXJ2YWJsZVxuICAgICAgICAgICAgICBlW2tdID0gbFtrXSgpXG4gICAgICAgICAgICAgIGNsZWFudXBGdW5jcy5wdXNoKGxba10oZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICBlW2tdID0gdlxuICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihrID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICBpZignc3RyaW5nJyA9PT0gdHlwZW9mIGxba10pIHtcbiAgICAgICAgICAgICAgZS5zdHlsZS5jc3NUZXh0ID0gbFtrXVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIGZvciAodmFyIHMgaW4gbFtrXSkgKGZ1bmN0aW9uKHMsIHYpIHtcbiAgICAgICAgICAgICAgICBpZignZnVuY3Rpb24nID09PSB0eXBlb2Ygdikge1xuICAgICAgICAgICAgICAgICAgLy8gb2JzZXJ2YWJsZVxuICAgICAgICAgICAgICAgICAgZS5zdHlsZS5zZXRQcm9wZXJ0eShzLCB2KCkpXG4gICAgICAgICAgICAgICAgICBjbGVhbnVwRnVuY3MucHVzaCh2KGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS5zZXRQcm9wZXJ0eShzLCB2YWwpXG4gICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGxba11bc10ubWF0Y2goLyguKilcXFcrIWltcG9ydGFudFxcVyokLyk7XG4gICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS5zZXRQcm9wZXJ0eShzLCBtYXRjaFsxXSwgJ2ltcG9ydGFudCcpXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlLnN0eWxlLnNldFByb3BlcnR5KHMsIGxba11bc10pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKHMsIGxba11bc10pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKGsgPT09ICdhdHRycycpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHYgaW4gbFtrXSkge1xuICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZSh2LCBsW2tdW3ZdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChrLnN1YnN0cigwLCA1KSA9PT0gXCJkYXRhLVwiKSB7XG4gICAgICAgICAgICBlLnNldEF0dHJpYnV0ZShrLCBsW2tdKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlW2tdID0gbFtrXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgbCkge1xuICAgICAgICAvL2Fzc3VtZSBpdCdzIGFuIG9ic2VydmFibGUhXG4gICAgICAgIHZhciB2ID0gbCgpXG4gICAgICAgIGUuYXBwZW5kQ2hpbGQociA9IGlzTm9kZSh2KSA/IHYgOiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2KSlcblxuICAgICAgICBjbGVhbnVwRnVuY3MucHVzaChsKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgaWYoaXNOb2RlKHYpICYmIHIucGFyZW50RWxlbWVudClcbiAgICAgICAgICAgIHIucGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQodiwgciksIHIgPSB2XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgci50ZXh0Q29udGVudCA9IHZcbiAgICAgICAgfSkpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByXG4gICAgfVxuICAgIHdoaWxlKGFyZ3MubGVuZ3RoKVxuICAgICAgaXRlbShhcmdzLnNoaWZ0KCkpXG5cbiAgICByZXR1cm4gZVxuICB9XG5cbiAgaC5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xlYW51cEZ1bmNzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGNsZWFudXBGdW5jc1tpXSgpXG4gICAgfVxuICAgIGNsZWFudXBGdW5jcy5sZW5ndGggPSAwXG4gIH1cblxuICByZXR1cm4gaFxufVxuXG52YXIgaCA9IG1vZHVsZS5leHBvcnRzID0gY29udGV4dCgpXG5oLmNvbnRleHQgPSBjb250ZXh0XG5cbmZ1bmN0aW9uIGlzTm9kZSAoZWwpIHtcbiAgcmV0dXJuIGVsICYmIGVsLm5vZGVOYW1lICYmIGVsLm5vZGVUeXBlXG59XG5cbmZ1bmN0aW9uIGZvckVhY2ggKGFyciwgZm4pIHtcbiAgaWYgKGFyci5mb3JFYWNoKSByZXR1cm4gYXJyLmZvckVhY2goZm4pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBmbihhcnJbaV0sIGkpXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkgKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJ1xufVxuXG5cbiIsIlxudmFyIGluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFyciwgb2JqKXtcbiAgaWYgKGluZGV4T2YpIHJldHVybiBhcnIuaW5kZXhPZihvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgIGlmIChhcnJbaV0gPT09IG9iaikgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnc291cmNlLW1hcCcpLlNvdXJjZU1hcEdlbmVyYXRvcjtcblxuZnVuY3Rpb24gb2Zmc2V0TWFwcGluZyhtYXBwaW5nLCBvZmZzZXQpIHtcbiAgcmV0dXJuIHsgbGluZTogb2Zmc2V0LmxpbmUgKyBtYXBwaW5nLmxpbmUsIGNvbHVtbjogb2Zmc2V0LmNvbHVtbiArIG1hcHBpbmcuY29sdW1uIH07XG59XG5cbmZ1bmN0aW9uIG5ld2xpbmVzSW4oc3JjKSB7XG4gIGlmICghc3JjKSByZXR1cm4gMDtcbiAgdmFyIG5ld2xpbmVzID0gc3JjLm1hdGNoKC9cXG4vZyk7XG5cbiAgcmV0dXJuIG5ld2xpbmVzID8gbmV3bGluZXMubGVuZ3RoIDogMDtcbn1cbiBcbmZ1bmN0aW9uIEdlbmVyYXRvcihvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLmdlbmVyYXRvciA9IG5ldyBTb3VyY2VNYXBHZW5lcmF0b3IoeyBmaWxlOiBvcHRzLmZpbGUgfHwgJycsIHNvdXJjZVJvb3Q6IG9wdHMuc291cmNlUm9vdCB8fCAnJyB9KTtcbiAgdGhpcy5zb3VyY2VzQ29udGVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5vcHRzID0gb3B0cztcbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBnaXZlbiBtYXBwaW5ncyB0byB0aGUgZ2VuZXJhdG9yIGFuZCBvZmZzZXRzIHRoZW0gaWYgb2Zmc2V0IGlzIGdpdmVuIFxuICpcbiAqIEBuYW1lIGFkZE1hcHBpbmdzXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSBzb3VyY2VGaWxlIHtTdHJpbmd9IG5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlXG4gKiBAcGFyYW0gbWFwcGluZ3Mge0FycmF5e3tPYmplY3R9fSBlYWNoIG9iamVjdCBoYXMgdGhlIGZvcm0geyBvcmlnaW5hbDogeyBsaW5lOiBfLCBjb2x1bW46IF8gfSwgZ2VuZXJhdGVkOiB7IGxpbmU6IF8sIGNvbHVtbjogXyB9IH1cbiAqIEBwYXJhbSBvZmZzZXQge09iamVjdH0gb2Zmc2V0IHRvIGFwcGx5IHRvIGVhY2ggbWFwcGluZy4gSGFzIHRoZSBmb3JtIHsgbGluZTogXywgY29sdW1uOiBfIH1cbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIGdlbmVyYXRvciB0byBhbGxvdyBjaGFpbmluZ1xuICovXG5HZW5lcmF0b3IucHJvdG90eXBlLmFkZE1hcHBpbmdzID0gZnVuY3Rpb24gKHNvdXJjZUZpbGUsIG1hcHBpbmdzLCBvZmZzZXQpIHsgXG4gIHZhciBnZW5lcmF0b3IgPSB0aGlzLmdlbmVyYXRvcjsgXG5cbiAgb2Zmc2V0ID0gb2Zmc2V0IHx8IHt9O1xuICBvZmZzZXQubGluZSA9IG9mZnNldC5oYXNPd25Qcm9wZXJ0eSgnbGluZScpID8gb2Zmc2V0LmxpbmUgOiAwO1xuICBvZmZzZXQuY29sdW1uID0gb2Zmc2V0Lmhhc093blByb3BlcnR5KCdjb2x1bW4nKSA/IG9mZnNldC5jb2x1bW4gOiAwO1xuXG4gIG1hcHBpbmdzLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAvLyBvbmx5IHNldCBzb3VyY2UgaWYgd2UgaGF2ZSBvcmlnaW5hbCBwb3NpdGlvbiB0byBoYW5kbGUgZWRnZWNhc2UgKHNlZSBpbmxpbmUtc291cmNlLW1hcCB0ZXN0cylcbiAgICBnZW5lcmF0b3IuYWRkTWFwcGluZyh7XG4gICAgICAgIHNvdXJjZSAgICA6ICBtLm9yaWdpbmFsID8gc291cmNlRmlsZSA6IHVuZGVmaW5lZFxuICAgICAgLCBvcmlnaW5hbCAgOiAgbS5vcmlnaW5hbFxuICAgICAgLCBnZW5lcmF0ZWQgOiAgb2Zmc2V0TWFwcGluZyhtLmdlbmVyYXRlZCwgb2Zmc2V0KVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBtYXBwaW5ncyBmb3IgdGhlIGdpdmVuIHNvdXJjZSwgYXNzdW1pbmcgdGhhdCBubyB0cmFuc2xhdGlvbiBmcm9tIG9yaWdpbmFsIHRvIGdlbmVyYXRlZCBpcyBuZWNlc3NhcnkuXG4gKlxuICogQG5hbWUgYWRkR2VuZXJhdGVkTWFwcGluZ3NcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHNvdXJjZUZpbGUge1N0cmluZ30gbmFtZSBvZiB0aGUgc291cmNlIGZpbGVcbiAqIEBwYXJhbSBzb3VyY2Uge1N0cmluZ30gc291cmNlIG9mIHRoZSBmaWxlXG4gKiBAcGFyYW0gb2Zmc2V0IHtPYmplY3R9IG9mZnNldCB0byBhcHBseSB0byBlYWNoIG1hcHBpbmcuIEhhcyB0aGUgZm9ybSB7IGxpbmU6IF8sIGNvbHVtbjogXyB9XG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBnZW5lcmF0b3IgdG8gYWxsb3cgY2hhaW5pbmdcbiAqL1xuR2VuZXJhdG9yLnByb3RvdHlwZS5hZGRHZW5lcmF0ZWRNYXBwaW5ncyA9IGZ1bmN0aW9uIChzb3VyY2VGaWxlLCBzb3VyY2UsIG9mZnNldCkge1xuICB2YXIgbWFwcGluZ3MgPSBbXVxuICAgICwgbGluZXNUb0dlbmVyYXRlID0gbmV3bGluZXNJbihzb3VyY2UpICsgMTtcblxuICBmb3IgKHZhciBsaW5lID0gMTsgbGluZSA8PSBsaW5lc1RvR2VuZXJhdGU7IGxpbmUrKykge1xuICAgIHZhciBsb2NhdGlvbiA9IHsgbGluZTogbGluZSwgY29sdW1uOiAwIH07XG4gICAgbWFwcGluZ3MucHVzaCh7IG9yaWdpbmFsOiBsb2NhdGlvbiwgZ2VuZXJhdGVkOiBsb2NhdGlvbiB9KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmFkZE1hcHBpbmdzKHNvdXJjZUZpbGUsIG1hcHBpbmdzLCBvZmZzZXQpO1xufTtcblxuLyoqXG4gKiBBZGRzIHNvdXJjZSBjb250ZW50IGZvciB0aGUgZ2l2ZW4gc291cmNlIGZpbGUuXG4gKiBcbiAqIEBuYW1lIGFkZFNvdXJjZUNvbnRlbnRcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHNvdXJjZUZpbGUge1N0cmluZ30gVGhlIHNvdXJjZSBmaWxlIGZvciB3aGljaCBhIG1hcHBpbmcgaXMgaW5jbHVkZWRcbiAqIEBwYXJhbSBzb3VyY2VzQ29udGVudCB7U3RyaW5nfSBUaGUgY29udGVudCBvZiB0aGUgc291cmNlIGZpbGVcbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGdlbmVyYXRvciB0byBhbGxvdyBjaGFpbmluZ1xuICovXG5HZW5lcmF0b3IucHJvdG90eXBlLmFkZFNvdXJjZUNvbnRlbnQgPSBmdW5jdGlvbiAoc291cmNlRmlsZSwgc291cmNlc0NvbnRlbnQpIHtcbiAgdGhpcy5zb3VyY2VzQ29udGVudCA9IHRoaXMuc291cmNlc0NvbnRlbnQgfHwge307XG4gIHRoaXMuc291cmNlc0NvbnRlbnRbc291cmNlRmlsZV0gPSBzb3VyY2VzQ29udGVudDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBuYW1lIGJhc2U2NEVuY29kZVxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGJhczY0IGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGFkZGVkIG1hcHBpbmdzXG4gKi9cbkdlbmVyYXRvci5wcm90b3R5cGUuYmFzZTY0RW5jb2RlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbWFwID0gdGhpcy50b1N0cmluZygpO1xuICByZXR1cm4gbmV3IEJ1ZmZlcihtYXApLnRvU3RyaW5nKCdiYXNlNjQnKTtcbn07XG5cbi8qKlxuICogQG5hbWUgaW5saW5lTWFwcGluZ1VybFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGNvbW1lbnQgd2l0aCBiYXNlNjQgZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgYWRkZWQgbWFwcGluZ3MuIENhbiBiZSBpbmxpbmVkIGF0IHRoZSBlbmQgb2YgdGhlIGdlbmVyYXRlZCBmaWxlLiBcbiAqL1xuR2VuZXJhdG9yLnByb3RvdHlwZS5pbmxpbmVNYXBwaW5nVXJsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2hhcnNldCA9IHRoaXMub3B0cy5jaGFyc2V0IHx8ICd1dGYtOCc7XG4gIHJldHVybiAnLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9JyArIGNoYXJzZXQgKyAnO2Jhc2U2NCwnICsgdGhpcy5iYXNlNjRFbmNvZGUoKTtcbn07XG5cbkdlbmVyYXRvci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbWFwID0gdGhpcy5nZW5lcmF0b3IudG9KU09OKCk7XG4gIGlmICghdGhpcy5zb3VyY2VzQ29udGVudCkgcmV0dXJuIG1hcDtcblxuICB2YXIgdG9Tb3VyY2VzQ29udGVudCA9IChmdW5jdGlvbiAocykge1xuICAgIGlmICh0eXBlb2YgdGhpcy5zb3VyY2VzQ29udGVudFtzXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3NdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0pLmJpbmQodGhpcyk7XG4gIG1hcC5zb3VyY2VzQ29udGVudCA9IG1hcC5zb3VyY2VzLm1hcCh0b1NvdXJjZXNDb250ZW50KTtcbiAgcmV0dXJuIG1hcDtcbn07XG5cbkdlbmVyYXRvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcbn07XG5cbkdlbmVyYXRvci5wcm90b3R5cGUuX21hcHBpbmdzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZW5lcmF0b3IuX21hcHBpbmdzLl9hcnJheTtcbn07XG5cbkdlbmVyYXRvci5wcm90b3R5cGUuZ2VuID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZW5lcmF0b3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7IHJldHVybiBuZXcgR2VuZXJhdG9yKG9wdHMpOyB9O1xubW9kdWxlLmV4cG9ydHMuR2VuZXJhdG9yID0gR2VuZXJhdG9yO1xuIiwiLyoqXG4gKiBsb2Rhc2ggMy4wLjQgKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2Rlcm4gbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgMjAxMi0yMDE1IFRoZSBEb2pvIEZvdW5kYXRpb24gPGh0dHA6Ly9kb2pvZm91bmRhdGlvbi5vcmcvPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCAyMDA5LTIwMTUgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqIEF2YWlsYWJsZSB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIGZvciBuYXRpdmUgbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5L3ZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBDYWNoZVxuICogQG1lbWJlck9mIF8ubWVtb2l6ZVxuICovXG5mdW5jdGlvbiBNYXBDYWNoZSgpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IHt9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgXy5tZW1vaXplLkNhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQgc3VjY2Vzc2Z1bGx5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcERlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBjYWNoZWQgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBfLm1lbW9pemUuQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNhY2hlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwR2V0KGtleSkge1xuICByZXR1cm4ga2V5ID09ICdfX3Byb3RvX18nID8gdW5kZWZpbmVkIDogdGhpcy5fX2RhdGFfX1trZXldO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNhY2hlZCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBfLm1lbW9pemUuQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBIYXMoa2V5KSB7XG4gIHJldHVybiBrZXkgIT0gJ19fcHJvdG9fXycgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9fZGF0YV9fLCBrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgYHZhbHVlYCB0byBga2V5YCBvZiB0aGUgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIF8ubWVtb2l6ZS5DYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBtYXBTZXQoa2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ICE9ICdfX3Byb3RvX18nKSB7XG4gICAgdGhpcy5fX2RhdGFfX1trZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgY29lcmNlZCB0byBhIHN0cmluZyBhbmQgdXNlZCBhcyB0aGVcbiAqIGNhY2hlIGtleS4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZSBbYE1hcGBdKGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6aW5nIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXBwZXJDYXNlID0gXy5tZW1vaXplKGZ1bmN0aW9uKHN0cmluZykge1xuICogICByZXR1cm4gc3RyaW5nLnRvVXBwZXJDYXNlKCk7XG4gKiB9KTtcbiAqXG4gKiB1cHBlckNhc2UoJ2ZyZWQnKTtcbiAqIC8vID0+ICdGUkVEJ1xuICpcbiAqIC8vIG1vZGlmeWluZyB0aGUgcmVzdWx0IGNhY2hlXG4gKiB1cHBlckNhc2UuY2FjaGUuc2V0KCdmcmVkJywgJ0JBUk5FWScpO1xuICogdXBwZXJDYXNlKCdmcmVkJyk7XG4gKiAvLyA9PiAnQkFSTkVZJ1xuICpcbiAqIC8vIHJlcGxhY2luZyBgXy5tZW1vaXplLkNhY2hlYFxuICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAqIHZhciBvdGhlciA9IHsgJ3VzZXInOiAnYmFybmV5JyB9O1xuICogdmFyIGlkZW50aXR5ID0gXy5tZW1vaXplKF8uaWRlbnRpdHkpO1xuICpcbiAqIGlkZW50aXR5KG9iamVjdCk7XG4gKiAvLyA9PiB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAqIGlkZW50aXR5KG90aGVyKTtcbiAqIC8vID0+IHsgJ3VzZXInOiAnZnJlZCcgfVxuICpcbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKiB2YXIgaWRlbnRpdHkgPSBfLm1lbW9pemUoXy5pZGVudGl0eSk7XG4gKlxuICogaWRlbnRpdHkob2JqZWN0KTtcbiAqIC8vID0+IHsgJ3VzZXInOiAnZnJlZCcgfVxuICogaWRlbnRpdHkob3RoZXIpO1xuICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgbWVtb2l6ZS5DYWNoZTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBBZGQgZnVuY3Rpb25zIHRvIHRoZSBgTWFwYCBjYWNoZS5cbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcEhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBTZXQ7XG5cbi8vIEFzc2lnbiBjYWNoZSB0byBgXy5tZW1vaXplYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIGJpbmFyeVNlYXJjaCA9IHJlcXVpcmUoJy4vYmluYXJ5LXNlYXJjaCcpO1xudmFyIEFycmF5U2V0ID0gcmVxdWlyZSgnLi9hcnJheS1zZXQnKS5BcnJheVNldDtcbnZhciBiYXNlNjRWTFEgPSByZXF1aXJlKCcuL2Jhc2U2NC12bHEnKTtcbnZhciBxdWlja1NvcnQgPSByZXF1aXJlKCcuL3F1aWNrLXNvcnQnKS5xdWlja1NvcnQ7XG5cbmZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gIH1cblxuICByZXR1cm4gc291cmNlTWFwLnNlY3Rpb25zICE9IG51bGxcbiAgICA/IG5ldyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIoc291cmNlTWFwLCBhU291cmNlTWFwVVJMKVxuICAgIDogbmV3IEJhc2ljU291cmNlTWFwQ29uc3VtZXIoc291cmNlTWFwLCBhU291cmNlTWFwVVJMKTtcbn1cblxuU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcCA9IGZ1bmN0aW9uKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgcmV0dXJuIEJhc2ljU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcChhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKTtcbn1cblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8vIGBfX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmQgYF9fb3JpZ2luYWxNYXBwaW5nc2AgYXJlIGFycmF5cyB0aGF0IGhvbGQgdGhlXG4vLyBwYXJzZWQgbWFwcGluZyBjb29yZGluYXRlcyBmcm9tIHRoZSBzb3VyY2UgbWFwJ3MgXCJtYXBwaW5nc1wiIGF0dHJpYnV0ZS4gVGhleVxuLy8gYXJlIGxhemlseSBpbnN0YW50aWF0ZWQsIGFjY2Vzc2VkIHZpYSB0aGUgYF9nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4vLyBgX29yaWdpbmFsTWFwcGluZ3NgIGdldHRlcnMgcmVzcGVjdGl2ZWx5LCBhbmQgd2Ugb25seSBwYXJzZSB0aGUgbWFwcGluZ3Ncbi8vIGFuZCBjcmVhdGUgdGhlc2UgYXJyYXlzIG9uY2UgcXVlcmllZCBmb3IgYSBzb3VyY2UgbG9jYXRpb24uIFdlIGp1bXAgdGhyb3VnaFxuLy8gdGhlc2UgaG9vcHMgYmVjYXVzZSB0aGVyZSBjYW4gYmUgbWFueSB0aG91c2FuZHMgb2YgbWFwcGluZ3MsIGFuZCBwYXJzaW5nXG4vLyB0aGVtIGlzIGV4cGVuc2l2ZSwgc28gd2Ugb25seSB3YW50IHRvIGRvIGl0IGlmIHdlIG11c3QuXG4vL1xuLy8gRWFjaCBvYmplY3QgaW4gdGhlIGFycmF5cyBpcyBvZiB0aGUgZm9ybTpcbi8vXG4vLyAgICAge1xuLy8gICAgICAgZ2VuZXJhdGVkTGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIGdlbmVyYXRlZENvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgc291cmNlOiBUaGUgcGF0aCB0byB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGUgdGhhdCBnZW5lcmF0ZWQgdGhpc1xuLy8gICAgICAgICAgICAgICBjaHVuayBvZiBjb2RlLFxuLy8gICAgICAgb3JpZ2luYWxMaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSB0aGF0XG4vLyAgICAgICAgICAgICAgICAgICAgIGNvcnJlc3BvbmRzIHRvIHRoaXMgY2h1bmsgb2YgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBvcmlnaW5hbENvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSB0aGF0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIG5hbWU6IFRoZSBuYW1lIG9mIHRoZSBvcmlnaW5hbCBzeW1ib2wgd2hpY2ggZ2VuZXJhdGVkIHRoaXMgY2h1bmsgb2Zcbi8vICAgICAgICAgICAgIGNvZGUuXG4vLyAgICAgfVxuLy9cbi8vIEFsbCBwcm9wZXJ0aWVzIGV4Y2VwdCBmb3IgYGdlbmVyYXRlZExpbmVgIGFuZCBgZ2VuZXJhdGVkQ29sdW1uYCBjYW4gYmVcbi8vIGBudWxsYC5cbi8vXG4vLyBgX2dlbmVyYXRlZE1hcHBpbmdzYCBpcyBvcmRlcmVkIGJ5IHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zLlxuLy9cbi8vIGBfb3JpZ2luYWxNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgb3JpZ2luYWwgcG9zaXRpb25zLlxuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IG51bGw7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnX2dlbmVyYXRlZE1hcHBpbmdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzKSB7XG4gICAgICB0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLCB0aGlzLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gIH1cbn0pO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX19vcmlnaW5hbE1hcHBpbmdzID0gbnVsbDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdfb3JpZ2luYWxNYXBwaW5ncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX19vcmlnaW5hbE1hcHBpbmdzKSB7XG4gICAgICB0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLCB0aGlzLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncztcbiAgfVxufSk7XG5cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fY2hhcklzTWFwcGluZ1NlcGFyYXRvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IoYVN0ciwgaW5kZXgpIHtcbiAgICB2YXIgYyA9IGFTdHIuY2hhckF0KGluZGV4KTtcbiAgICByZXR1cm4gYyA9PT0gXCI7XCIgfHwgYyA9PT0gXCIsXCI7XG4gIH07XG5cbi8qKlxuICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3ViY2xhc3NlcyBtdXN0IGltcGxlbWVudCBfcGFyc2VNYXBwaW5nc1wiKTtcbiAgfTtcblxuU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSID0gMTtcblNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSID0gMjtcblxuU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQgPSAxO1xuU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBlYWNoIG1hcHBpbmcgYmV0d2VlbiBhbiBvcmlnaW5hbCBzb3VyY2UvbGluZS9jb2x1bW4gYW5kIGFcbiAqIGdlbmVyYXRlZCBsaW5lL2NvbHVtbiBpbiB0aGlzIHNvdXJjZSBtYXAuXG4gKlxuICogQHBhcmFtIEZ1bmN0aW9uIGFDYWxsYmFja1xuICogICAgICAgIFRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aXRoIGVhY2ggbWFwcGluZy5cbiAqIEBwYXJhbSBPYmplY3QgYUNvbnRleHRcbiAqICAgICAgICBPcHRpb25hbC4gSWYgc3BlY2lmaWVkLCB0aGlzIG9iamVjdCB3aWxsIGJlIHRoZSB2YWx1ZSBvZiBgdGhpc2AgZXZlcnlcbiAqICAgICAgICB0aW1lIHRoYXQgYGFDYWxsYmFja2AgaXMgY2FsbGVkLlxuICogQHBhcmFtIGFPcmRlclxuICogICAgICAgIEVpdGhlciBgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSYCBvclxuICogICAgICAgIGBTb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUmAuIFNwZWNpZmllcyB3aGV0aGVyIHlvdSB3YW50IHRvXG4gKiAgICAgICAgaXRlcmF0ZSBvdmVyIHRoZSBtYXBwaW5ncyBzb3J0ZWQgYnkgdGhlIGdlbmVyYXRlZCBmaWxlJ3MgbGluZS9jb2x1bW5cbiAqICAgICAgICBvcmRlciBvciB0aGUgb3JpZ2luYWwncyBzb3VyY2UvbGluZS9jb2x1bW4gb3JkZXIsIHJlc3BlY3RpdmVseS4gRGVmYXVsdHMgdG9cbiAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSYC5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmVhY2hNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZWFjaE1hcHBpbmcoYUNhbGxiYWNrLCBhQ29udGV4dCwgYU9yZGVyKSB7XG4gICAgdmFyIGNvbnRleHQgPSBhQ29udGV4dCB8fCBudWxsO1xuICAgIHZhciBvcmRlciA9IGFPcmRlciB8fCBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVI7XG5cbiAgICB2YXIgbWFwcGluZ3M7XG4gICAgc3dpdGNoIChvcmRlcikge1xuICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSOlxuICAgICAgbWFwcGluZ3MgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVI6XG4gICAgICBtYXBwaW5ncyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3M7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBvcmRlciBvZiBpdGVyYXRpb24uXCIpO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2VSb290ID0gdGhpcy5zb3VyY2VSb290O1xuICAgIG1hcHBpbmdzLm1hcChmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlID09PSBudWxsID8gbnVsbCA6IHRoaXMuX3NvdXJjZXMuYXQobWFwcGluZy5zb3VyY2UpO1xuICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHNvdXJjZSwgdGhpcy5fc291cmNlTWFwVVJMKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4sXG4gICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgIG9yaWdpbmFsQ29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICBuYW1lOiBtYXBwaW5nLm5hbWUgPT09IG51bGwgPyBudWxsIDogdGhpcy5fbmFtZXMuYXQobWFwcGluZy5uYW1lKVxuICAgICAgfTtcbiAgICB9LCB0aGlzKS5mb3JFYWNoKGFDYWxsYmFjaywgY29udGV4dCk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyBhbGwgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAqIGxpbmUsIGFuZCBjb2x1bW4gcHJvdmlkZWQuIElmIG5vIGNvbHVtbiBpcyBwcm92aWRlZCwgcmV0dXJucyBhbGwgbWFwcGluZ3NcbiAqIGNvcnJlc3BvbmRpbmcgdG8gYSBlaXRoZXIgdGhlIGxpbmUgd2UgYXJlIHNlYXJjaGluZyBmb3Igb3IgdGhlIG5leHRcbiAqIGNsb3Nlc3QgbGluZSB0aGF0IGhhcyBhbnkgbWFwcGluZ3MuIE90aGVyd2lzZSwgcmV0dXJucyBhbGwgbWFwcGluZ3NcbiAqIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIGxpbmUgYW5kIGVpdGhlciB0aGUgY29sdW1uIHdlIGFyZSBzZWFyY2hpbmcgZm9yXG4gKiBvciB0aGUgbmV4dCBjbG9zZXN0IGNvbHVtbiB0aGF0IGhhcyBhbnkgb2Zmc2V0cy5cbiAqXG4gKiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IE9wdGlvbmFsLiB0aGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqXG4gKiBhbmQgYW4gYXJyYXkgb2Ygb2JqZWN0cyBpcyByZXR1cm5lZCwgZWFjaCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yKGFBcmdzKSB7XG4gICAgdmFyIGxpbmUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKTtcblxuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gZXhhY3QgbWF0Y2gsIEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9maW5kTWFwcGluZ1xuICAgIC8vIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBjbG9zZXN0IG1hcHBpbmcgbGVzcyB0aGFuIHRoZSBuZWVkbGUuIEJ5XG4gICAgLy8gc2V0dGluZyBuZWVkbGUub3JpZ2luYWxDb2x1bW4gdG8gMCwgd2UgdGh1cyBmaW5kIHRoZSBsYXN0IG1hcHBpbmcgZm9yXG4gICAgLy8gdGhlIGdpdmVuIGxpbmUsIHByb3ZpZGVkIHN1Y2ggYSBtYXBwaW5nIGV4aXN0cy5cbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgc291cmNlOiB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpLFxuICAgICAgb3JpZ2luYWxMaW5lOiBsaW5lLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJywgMClcbiAgICB9O1xuXG4gICAgbmVlZGxlLnNvdXJjZSA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChuZWVkbGUuc291cmNlKTtcbiAgICBpZiAobmVlZGxlLnNvdXJjZSA8IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgbWFwcGluZ3MgPSBbXTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKG5lZWRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKGFBcmdzLmNvbHVtbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZTtcblxuICAgICAgICAvLyBJdGVyYXRlIHVudGlsIGVpdGhlciB3ZSBydW4gb3V0IG9mIG1hcHBpbmdzLCBvciB3ZSBydW4gaW50b1xuICAgICAgICAvLyBhIG1hcHBpbmcgZm9yIGEgZGlmZmVyZW50IGxpbmUgdGhhbiB0aGUgb25lIHdlIGZvdW5kLiBTaW5jZVxuICAgICAgICAvLyBtYXBwaW5ncyBhcmUgc29ydGVkLCB0aGlzIGlzIGd1YXJhbnRlZWQgdG8gZmluZCBhbGwgbWFwcGluZ3MgZm9yXG4gICAgICAgIC8vIHRoZSBsaW5lIHdlIGZvdW5kLlxuICAgICAgICB3aGlsZSAobWFwcGluZyAmJiBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gb3JpZ2luYWxMaW5lKSB7XG4gICAgICAgICAgbWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAvLyBJdGVyYXRlIHVudGlsIGVpdGhlciB3ZSBydW4gb3V0IG9mIG1hcHBpbmdzLCBvciB3ZSBydW4gaW50b1xuICAgICAgICAvLyBhIG1hcHBpbmcgZm9yIGEgZGlmZmVyZW50IGxpbmUgdGhhbiB0aGUgb25lIHdlIHdlcmUgc2VhcmNoaW5nIGZvci5cbiAgICAgICAgLy8gU2luY2UgbWFwcGluZ3MgYXJlIHNvcnRlZCwgdGhpcyBpcyBndWFyYW50ZWVkIHRvIGZpbmQgYWxsIG1hcHBpbmdzIGZvclxuICAgICAgICAvLyB0aGUgbGluZSB3ZSBhcmUgc2VhcmNoaW5nIGZvci5cbiAgICAgICAgd2hpbGUgKG1hcHBpbmcgJiZcbiAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSBsaW5lICYmXG4gICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID09IG9yaWdpbmFsQ29sdW1uKSB7XG4gICAgICAgICAgbWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXBwaW5ncztcbiAgfTtcblxuZXhwb3J0cy5Tb3VyY2VNYXBDb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIEEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2ggd2UgY2FuXG4gKiBxdWVyeSBmb3IgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGZpbGUgcG9zaXRpb25zIGJ5IGdpdmluZyBpdCBhIGZpbGVcbiAqIHBvc2l0aW9uIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgdGhlIHJhdyBzb3VyY2UgbWFwIChlaXRoZXIgYXMgYSBKU09OIHN0cmluZywgb3JcbiAqIGFscmVhZHkgcGFyc2VkIHRvIGFuIG9iamVjdCkuIEFjY29yZGluZyB0byB0aGUgc3BlYywgc291cmNlIG1hcHMgaGF2ZSB0aGVcbiAqIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICpcbiAqICAgLSB2ZXJzaW9uOiBXaGljaCB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwIHNwZWMgdGhpcyBtYXAgaXMgZm9sbG93aW5nLlxuICogICAtIHNvdXJjZXM6IEFuIGFycmF5IG9mIFVSTHMgdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlcy5cbiAqICAgLSBuYW1lczogQW4gYXJyYXkgb2YgaWRlbnRpZmllcnMgd2hpY2ggY2FuIGJlIHJlZmVycmVuY2VkIGJ5IGluZGl2aWR1YWwgbWFwcGluZ3MuXG4gKiAgIC0gc291cmNlUm9vdDogT3B0aW9uYWwuIFRoZSBVUkwgcm9vdCBmcm9tIHdoaWNoIGFsbCBzb3VyY2VzIGFyZSByZWxhdGl2ZS5cbiAqICAgLSBzb3VyY2VzQ29udGVudDogT3B0aW9uYWwuIEFuIGFycmF5IG9mIGNvbnRlbnRzIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiAgIC0gbWFwcGluZ3M6IEEgc3RyaW5nIG9mIGJhc2U2NCBWTFFzIHdoaWNoIGNvbnRhaW4gdGhlIGFjdHVhbCBtYXBwaW5ncy5cbiAqICAgLSBmaWxlOiBPcHRpb25hbC4gVGhlIGdlbmVyYXRlZCBmaWxlIHRoaXMgc291cmNlIG1hcCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKlxuICogSGVyZSBpcyBhbiBleGFtcGxlIHNvdXJjZSBtYXAsIHRha2VuIGZyb20gdGhlIHNvdXJjZSBtYXAgc3BlY1swXTpcbiAqXG4gKiAgICAge1xuICogICAgICAgdmVyc2lvbiA6IDMsXG4gKiAgICAgICBmaWxlOiBcIm91dC5qc1wiLFxuICogICAgICAgc291cmNlUm9vdCA6IFwiXCIsXG4gKiAgICAgICBzb3VyY2VzOiBbXCJmb28uanNcIiwgXCJiYXIuanNcIl0sXG4gKiAgICAgICBuYW1lczogW1wic3JjXCIsIFwibWFwc1wiLCBcImFyZVwiLCBcImZ1blwiXSxcbiAqICAgICAgIG1hcHBpbmdzOiBcIkFBLEFCOztBQkNERTtcIlxuICogICAgIH1cbiAqXG4gKiBUaGUgc2Vjb25kIHBhcmFtZXRlciwgaWYgZ2l2ZW4sIGlzIGEgc3RyaW5nIHdob3NlIHZhbHVlIGlzIHRoZSBVUkxcbiAqIGF0IHdoaWNoIHRoZSBzb3VyY2UgbWFwIHdhcyBmb3VuZC4gIFRoaXMgVVJMIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAqIHNvdXJjZXMgYXJyYXkuXG4gKlxuICogWzBdOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFVMVJHQWVoUXdSeXBVVG92RjFLUmxwaU9GemUwYi1fMmdjNmZBSDBLWTBrL2VkaXQ/cGxpPTEjXG4gKi9cbmZ1bmN0aW9uIEJhc2ljU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSAnc3RyaW5nJykge1xuICAgIHNvdXJjZU1hcCA9IHV0aWwucGFyc2VTb3VyY2VNYXBJbnB1dChhU291cmNlTWFwKTtcbiAgfVxuXG4gIHZhciB2ZXJzaW9uID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAndmVyc2lvbicpO1xuICB2YXIgc291cmNlcyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZXMnKTtcbiAgLy8gU2FzcyAzLjMgbGVhdmVzIG91dCB0aGUgJ25hbWVzJyBhcnJheSwgc28gd2UgZGV2aWF0ZSBmcm9tIHRoZSBzcGVjICh3aGljaFxuICAvLyByZXF1aXJlcyB0aGUgYXJyYXkpIHRvIHBsYXkgbmljZSBoZXJlLlxuICB2YXIgbmFtZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICduYW1lcycsIFtdKTtcbiAgdmFyIHNvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VSb290JywgbnVsbCk7XG4gIHZhciBzb3VyY2VzQ29udGVudCA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZXNDb250ZW50JywgbnVsbCk7XG4gIHZhciBtYXBwaW5ncyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ21hcHBpbmdzJyk7XG4gIHZhciBmaWxlID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnZmlsZScsIG51bGwpO1xuXG4gIC8vIE9uY2UgYWdhaW4sIFNhc3MgZGV2aWF0ZXMgZnJvbSB0aGUgc3BlYyBhbmQgc3VwcGxpZXMgdGhlIHZlcnNpb24gYXMgYVxuICAvLyBzdHJpbmcgcmF0aGVyIHRoYW4gYSBudW1iZXIsIHNvIHdlIHVzZSBsb29zZSBlcXVhbGl0eSBjaGVja2luZyBoZXJlLlxuICBpZiAodmVyc2lvbiAhPSB0aGlzLl92ZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2ZXJzaW9uOiAnICsgdmVyc2lvbik7XG4gIH1cblxuICBpZiAoc291cmNlUm9vdCkge1xuICAgIHNvdXJjZVJvb3QgPSB1dGlsLm5vcm1hbGl6ZShzb3VyY2VSb290KTtcbiAgfVxuXG4gIHNvdXJjZXMgPSBzb3VyY2VzXG4gICAgLm1hcChTdHJpbmcpXG4gICAgLy8gU29tZSBzb3VyY2UgbWFwcyBwcm9kdWNlIHJlbGF0aXZlIHNvdXJjZSBwYXRocyBsaWtlIFwiLi9mb28uanNcIiBpbnN0ZWFkIG9mXG4gICAgLy8gXCJmb28uanNcIi4gIE5vcm1hbGl6ZSB0aGVzZSBmaXJzdCBzbyB0aGF0IGZ1dHVyZSBjb21wYXJpc29ucyB3aWxsIHN1Y2NlZWQuXG4gICAgLy8gU2VlIGJ1Z3ppbC5sYS8xMDkwNzY4LlxuICAgIC5tYXAodXRpbC5ub3JtYWxpemUpXG4gICAgLy8gQWx3YXlzIGVuc3VyZSB0aGF0IGFic29sdXRlIHNvdXJjZXMgYXJlIGludGVybmFsbHkgc3RvcmVkIHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHNvdXJjZSByb290LCBpZiB0aGUgc291cmNlIHJvb3QgaXMgYWJzb2x1dGUuIE5vdCBkb2luZyB0aGlzIHdvdWxkXG4gICAgLy8gYmUgcGFydGljdWxhcmx5IHByb2JsZW1hdGljIHdoZW4gdGhlIHNvdXJjZSByb290IGlzIGEgcHJlZml4IG9mIHRoZVxuICAgIC8vIHNvdXJjZSAodmFsaWQsIGJ1dCB3aHk/PykuIFNlZSBnaXRodWIgaXNzdWUgIzE5OSBhbmQgYnVnemlsLmxhLzExODg5ODIuXG4gICAgLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlUm9vdCAmJiB1dGlsLmlzQWJzb2x1dGUoc291cmNlUm9vdCkgJiYgdXRpbC5pc0Fic29sdXRlKHNvdXJjZSlcbiAgICAgICAgPyB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZSlcbiAgICAgICAgOiBzb3VyY2U7XG4gICAgfSk7XG5cbiAgLy8gUGFzcyBgdHJ1ZWAgYmVsb3cgdG8gYWxsb3cgZHVwbGljYXRlIG5hbWVzIGFuZCBzb3VyY2VzLiBXaGlsZSBzb3VyY2UgbWFwc1xuICAvLyBhcmUgaW50ZW5kZWQgdG8gYmUgY29tcHJlc3NlZCBhbmQgZGVkdXBsaWNhdGVkLCB0aGUgVHlwZVNjcmlwdCBjb21waWxlclxuICAvLyBzb21ldGltZXMgZ2VuZXJhdGVzIHNvdXJjZSBtYXBzIHdpdGggZHVwbGljYXRlcyBpbiB0aGVtLiBTZWUgR2l0aHViIGlzc3VlXG4gIC8vICM3MiBhbmQgYnVnemlsLmxhLzg4OTQ5Mi5cbiAgdGhpcy5fbmFtZXMgPSBBcnJheVNldC5mcm9tQXJyYXkobmFtZXMubWFwKFN0cmluZyksIHRydWUpO1xuICB0aGlzLl9zb3VyY2VzID0gQXJyYXlTZXQuZnJvbUFycmF5KHNvdXJjZXMsIHRydWUpO1xuXG4gIHRoaXMuX2Fic29sdXRlU291cmNlcyA9IHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc291cmNlUm9vdCwgcywgYVNvdXJjZU1hcFVSTCk7XG4gIH0pO1xuXG4gIHRoaXMuc291cmNlUm9vdCA9IHNvdXJjZVJvb3Q7XG4gIHRoaXMuc291cmNlc0NvbnRlbnQgPSBzb3VyY2VzQ29udGVudDtcbiAgdGhpcy5fbWFwcGluZ3MgPSBtYXBwaW5ncztcbiAgdGhpcy5fc291cmNlTWFwVVJMID0gYVNvdXJjZU1hcFVSTDtcbiAgdGhpcy5maWxlID0gZmlsZTtcbn1cblxuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSk7XG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gZmluZCB0aGUgaW5kZXggb2YgYSBzb3VyY2UuICBSZXR1cm5zIC0xIGlmIG5vdFxuICogZm91bmQuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9maW5kU291cmNlSW5kZXggPSBmdW5jdGlvbihhU291cmNlKSB7XG4gIHZhciByZWxhdGl2ZVNvdXJjZSA9IGFTb3VyY2U7XG4gIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgIHJlbGF0aXZlU291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIHJlbGF0aXZlU291cmNlKTtcbiAgfVxuXG4gIGlmICh0aGlzLl9zb3VyY2VzLmhhcyhyZWxhdGl2ZVNvdXJjZSkpIHtcbiAgICByZXR1cm4gdGhpcy5fc291cmNlcy5pbmRleE9mKHJlbGF0aXZlU291cmNlKTtcbiAgfVxuXG4gIC8vIE1heWJlIGFTb3VyY2UgaXMgYW4gYWJzb2x1dGUgVVJMIGFzIHJldHVybmVkIGJ5IHxzb3VyY2VzfC4gIEluXG4gIC8vIHRoaXMgY2FzZSB3ZSBjYW4ndCBzaW1wbHkgdW5kbyB0aGUgdHJhbnNmb3JtLlxuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuX2Fic29sdXRlU291cmNlcy5sZW5ndGg7ICsraSkge1xuICAgIGlmICh0aGlzLl9hYnNvbHV0ZVNvdXJjZXNbaV0gPT0gYVNvdXJjZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGZyb20gYSBTb3VyY2VNYXBHZW5lcmF0b3IuXG4gKlxuICogQHBhcmFtIFNvdXJjZU1hcEdlbmVyYXRvciBhU291cmNlTWFwXG4gKiAgICAgICAgVGhlIHNvdXJjZSBtYXAgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuICogQHBhcmFtIFN0cmluZyBhU291cmNlTWFwVVJMXG4gKiAgICAgICAgVGhlIFVSTCBhdCB3aGljaCB0aGUgc291cmNlIG1hcCBjYW4gYmUgZm91bmQgKG9wdGlvbmFsKVxuICogQHJldHVybnMgQmFzaWNTb3VyY2VNYXBDb25zdW1lclxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9mcm9tU291cmNlTWFwKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgICB2YXIgc21jID0gT2JqZWN0LmNyZWF0ZShCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSk7XG5cbiAgICB2YXIgbmFtZXMgPSBzbWMuX25hbWVzID0gQXJyYXlTZXQuZnJvbUFycmF5KGFTb3VyY2VNYXAuX25hbWVzLnRvQXJyYXkoKSwgdHJ1ZSk7XG4gICAgdmFyIHNvdXJjZXMgPSBzbWMuX3NvdXJjZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoYVNvdXJjZU1hcC5fc291cmNlcy50b0FycmF5KCksIHRydWUpO1xuICAgIHNtYy5zb3VyY2VSb290ID0gYVNvdXJjZU1hcC5fc291cmNlUm9vdDtcbiAgICBzbWMuc291cmNlc0NvbnRlbnQgPSBhU291cmNlTWFwLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KHNtYy5fc291cmNlcy50b0FycmF5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWMuc291cmNlUm9vdCk7XG4gICAgc21jLmZpbGUgPSBhU291cmNlTWFwLl9maWxlO1xuICAgIHNtYy5fc291cmNlTWFwVVJMID0gYVNvdXJjZU1hcFVSTDtcbiAgICBzbWMuX2Fic29sdXRlU291cmNlcyA9IHNtYy5fc291cmNlcy50b0FycmF5KCkubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gdXRpbC5jb21wdXRlU291cmNlVVJMKHNtYy5zb3VyY2VSb290LCBzLCBhU291cmNlTWFwVVJMKTtcbiAgICB9KTtcblxuICAgIC8vIEJlY2F1c2Ugd2UgYXJlIG1vZGlmeWluZyB0aGUgZW50cmllcyAoYnkgY29udmVydGluZyBzdHJpbmcgc291cmNlcyBhbmRcbiAgICAvLyBuYW1lcyB0byBpbmRpY2VzIGludG8gdGhlIHNvdXJjZXMgYW5kIG5hbWVzIEFycmF5U2V0cyksIHdlIGhhdmUgdG8gbWFrZVxuICAgIC8vIGEgY29weSBvZiB0aGUgZW50cnkgb3IgZWxzZSBiYWQgdGhpbmdzIGhhcHBlbi4gU2hhcmVkIG11dGFibGUgc3RhdGVcbiAgICAvLyBzdHJpa2VzIGFnYWluISBTZWUgZ2l0aHViIGlzc3VlICMxOTEuXG5cbiAgICB2YXIgZ2VuZXJhdGVkTWFwcGluZ3MgPSBhU291cmNlTWFwLl9tYXBwaW5ncy50b0FycmF5KCkuc2xpY2UoKTtcbiAgICB2YXIgZGVzdEdlbmVyYXRlZE1hcHBpbmdzID0gc21jLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICB2YXIgZGVzdE9yaWdpbmFsTWFwcGluZ3MgPSBzbWMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzcmNNYXBwaW5nID0gZ2VuZXJhdGVkTWFwcGluZ3NbaV07XG4gICAgICB2YXIgZGVzdE1hcHBpbmcgPSBuZXcgTWFwcGluZztcbiAgICAgIGRlc3RNYXBwaW5nLmdlbmVyYXRlZExpbmUgPSBzcmNNYXBwaW5nLmdlbmVyYXRlZExpbmU7XG4gICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gPSBzcmNNYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgaWYgKHNyY01hcHBpbmcuc291cmNlKSB7XG4gICAgICAgIGRlc3RNYXBwaW5nLnNvdXJjZSA9IHNvdXJjZXMuaW5kZXhPZihzcmNNYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIGRlc3RNYXBwaW5nLm9yaWdpbmFsTGluZSA9IHNyY01hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IHNyY01hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgaWYgKHNyY01hcHBpbmcubmFtZSkge1xuICAgICAgICAgIGRlc3RNYXBwaW5nLm5hbWUgPSBuYW1lcy5pbmRleE9mKHNyY01hcHBpbmcubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0T3JpZ2luYWxNYXBwaW5ncy5wdXNoKGRlc3RNYXBwaW5nKTtcbiAgICAgIH1cblxuICAgICAgZGVzdEdlbmVyYXRlZE1hcHBpbmdzLnB1c2goZGVzdE1hcHBpbmcpO1xuICAgIH1cblxuICAgIHF1aWNrU29ydChzbWMuX19vcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcblxuICAgIHJldHVybiBzbWM7XG4gIH07XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogVGhlIGxpc3Qgb2Ygb3JpZ2luYWwgc291cmNlcy5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Fic29sdXRlU291cmNlcy5zbGljZSgpO1xuICB9XG59KTtcblxuLyoqXG4gKiBQcm92aWRlIHRoZSBKSVQgd2l0aCBhIG5pY2Ugc2hhcGUgLyBoaWRkZW4gY2xhc3MuXG4gKi9cbmZ1bmN0aW9uIE1hcHBpbmcoKSB7XG4gIHRoaXMuZ2VuZXJhdGVkTGluZSA9IDA7XG4gIHRoaXMuZ2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICB0aGlzLm9yaWdpbmFsTGluZSA9IG51bGw7XG4gIHRoaXMub3JpZ2luYWxDb2x1bW4gPSBudWxsO1xuICB0aGlzLm5hbWUgPSBudWxsO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdmFyIGdlbmVyYXRlZExpbmUgPSAxO1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzU291cmNlID0gMDtcbiAgICB2YXIgcHJldmlvdXNOYW1lID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYVN0ci5sZW5ndGg7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY2FjaGVkU2VnbWVudHMgPSB7fTtcbiAgICB2YXIgdGVtcCA9IHt9O1xuICAgIHZhciBvcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdmFyIG1hcHBpbmcsIHN0ciwgc2VnbWVudCwgZW5kLCB2YWx1ZTtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJzsnKSB7XG4gICAgICAgIGdlbmVyYXRlZExpbmUrKztcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYVN0ci5jaGFyQXQoaW5kZXgpID09PSAnLCcpIHtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBtYXBwaW5nID0gbmV3IE1hcHBpbmcoKTtcbiAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gZ2VuZXJhdGVkTGluZTtcblxuICAgICAgICAvLyBCZWNhdXNlIGVhY2ggb2Zmc2V0IGlzIGVuY29kZWQgcmVsYXRpdmUgdG8gdGhlIHByZXZpb3VzIG9uZSxcbiAgICAgICAgLy8gbWFueSBzZWdtZW50cyBvZnRlbiBoYXZlIHRoZSBzYW1lIGVuY29kaW5nLiBXZSBjYW4gZXhwbG9pdCB0aGlzXG4gICAgICAgIC8vIGZhY3QgYnkgY2FjaGluZyB0aGUgcGFyc2VkIHZhcmlhYmxlIGxlbmd0aCBmaWVsZHMgb2YgZWFjaCBzZWdtZW50LFxuICAgICAgICAvLyBhbGxvd2luZyB1cyB0byBhdm9pZCBhIHNlY29uZCBwYXJzZSBpZiB3ZSBlbmNvdW50ZXIgdGhlIHNhbWVcbiAgICAgICAgLy8gc2VnbWVudCBhZ2Fpbi5cbiAgICAgICAgZm9yIChlbmQgPSBpbmRleDsgZW5kIDwgbGVuZ3RoOyBlbmQrKykge1xuICAgICAgICAgIGlmICh0aGlzLl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGVuZCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdHIgPSBhU3RyLnNsaWNlKGluZGV4LCBlbmQpO1xuXG4gICAgICAgIHNlZ21lbnQgPSBjYWNoZWRTZWdtZW50c1tzdHJdO1xuICAgICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICAgIGluZGV4ICs9IHN0ci5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VnbWVudCA9IFtdO1xuICAgICAgICAgIHdoaWxlIChpbmRleCA8IGVuZCkge1xuICAgICAgICAgICAgYmFzZTY0VkxRLmRlY29kZShhU3RyLCBpbmRleCwgdGVtcCk7XG4gICAgICAgICAgICB2YWx1ZSA9IHRlbXAudmFsdWU7XG4gICAgICAgICAgICBpbmRleCA9IHRlbXAucmVzdDtcbiAgICAgICAgICAgIHNlZ21lbnQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIGEgc291cmNlLCBidXQgbm8gbGluZSBhbmQgY29sdW1uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIGEgc291cmNlIGFuZCBsaW5lLCBidXQgbm8gY29sdW1uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2FjaGVkU2VnbWVudHNbc3RyXSA9IHNlZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZW5lcmF0ZWQgY29sdW1uLlxuICAgICAgICBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiA9IHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uICsgc2VnbWVudFswXTtcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgLy8gT3JpZ2luYWwgc291cmNlLlxuICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gcHJldmlvdXNTb3VyY2UgKyBzZWdtZW50WzFdO1xuICAgICAgICAgIHByZXZpb3VzU291cmNlICs9IHNlZ21lbnRbMV07XG5cbiAgICAgICAgICAvLyBPcmlnaW5hbCBsaW5lLlxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID0gcHJldmlvdXNPcmlnaW5hbExpbmUgKyBzZWdtZW50WzJdO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmU7XG4gICAgICAgICAgLy8gTGluZXMgYXJlIHN0b3JlZCAwLWJhc2VkXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgKz0gMTtcblxuICAgICAgICAgIC8vIE9yaWdpbmFsIGNvbHVtbi5cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gcHJldmlvdXNPcmlnaW5hbENvbHVtbiArIHNlZ21lbnRbM107XG4gICAgICAgICAgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiA0KSB7XG4gICAgICAgICAgICAvLyBPcmlnaW5hbCBuYW1lLlxuICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gcHJldmlvdXNOYW1lICsgc2VnbWVudFs0XTtcbiAgICAgICAgICAgIHByZXZpb3VzTmFtZSArPSBzZWdtZW50WzRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdlbmVyYXRlZE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgIGlmICh0eXBlb2YgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgb3JpZ2luYWxNYXBwaW5ncy5wdXNoKG1hcHBpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcXVpY2tTb3J0KGdlbmVyYXRlZE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKTtcbiAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBnZW5lcmF0ZWRNYXBwaW5ncztcblxuICAgIHF1aWNrU29ydChvcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcbiAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncyA9IG9yaWdpbmFsTWFwcGluZ3M7XG4gIH07XG5cbi8qKlxuICogRmluZCB0aGUgbWFwcGluZyB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgaHlwb3RoZXRpY2FsIFwibmVlZGxlXCIgbWFwcGluZyB0aGF0XG4gKiB3ZSBhcmUgc2VhcmNoaW5nIGZvciBpbiB0aGUgZ2l2ZW4gXCJoYXlzdGFja1wiIG9mIG1hcHBpbmdzLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9maW5kTWFwcGluZyhhTmVlZGxlLCBhTWFwcGluZ3MsIGFMaW5lTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYUNvbHVtbk5hbWUsIGFDb21wYXJhdG9yLCBhQmlhcykge1xuICAgIC8vIFRvIHJldHVybiB0aGUgcG9zaXRpb24gd2UgYXJlIHNlYXJjaGluZyBmb3IsIHdlIG11c3QgZmlyc3QgZmluZCB0aGVcbiAgICAvLyBtYXBwaW5nIGZvciB0aGUgZ2l2ZW4gcG9zaXRpb24gYW5kIHRoZW4gcmV0dXJuIHRoZSBvcHBvc2l0ZSBwb3NpdGlvbiBpdFxuICAgIC8vIHBvaW50cyB0by4gQmVjYXVzZSB0aGUgbWFwcGluZ3MgYXJlIHNvcnRlZCwgd2UgY2FuIHVzZSBiaW5hcnkgc2VhcmNoIHRvXG4gICAgLy8gZmluZCB0aGUgYmVzdCBtYXBwaW5nLlxuXG4gICAgaWYgKGFOZWVkbGVbYUxpbmVOYW1lXSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdMaW5lIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDEsIGdvdCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthTGluZU5hbWVdKTtcbiAgICB9XG4gICAgaWYgKGFOZWVkbGVbYUNvbHVtbk5hbWVdIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29sdW1uIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAsIGdvdCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthQ29sdW1uTmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiBiaW5hcnlTZWFyY2guc2VhcmNoKGFOZWVkbGUsIGFNYXBwaW5ncywgYUNvbXBhcmF0b3IsIGFCaWFzKTtcbiAgfTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBsYXN0IGNvbHVtbiBmb3IgZWFjaCBnZW5lcmF0ZWQgbWFwcGluZy4gVGhlIGxhc3QgY29sdW1uIGlzXG4gKiBpbmNsdXNpdmUuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbXB1dGVDb2x1bW5TcGFucyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2NvbXB1dGVDb2x1bW5TcGFucygpIHtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgLy8gTWFwcGluZ3MgZG8gbm90IGNvbnRhaW4gYSBmaWVsZCBmb3IgdGhlIGxhc3QgZ2VuZXJhdGVkIGNvbHVtbnQuIFdlXG4gICAgICAvLyBjYW4gY29tZSB1cCB3aXRoIGFuIG9wdGltaXN0aWMgZXN0aW1hdGUsIGhvd2V2ZXIsIGJ5IGFzc3VtaW5nIHRoYXRcbiAgICAgIC8vIG1hcHBpbmdzIGFyZSBjb250aWd1b3VzIChpLmUuIGdpdmVuIHR3byBjb25zZWN1dGl2ZSBtYXBwaW5ncywgdGhlXG4gICAgICAvLyBmaXJzdCBtYXBwaW5nIGVuZHMgd2hlcmUgdGhlIHNlY29uZCBvbmUgc3RhcnRzKS5cbiAgICAgIGlmIChpbmRleCArIDEgPCB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG5leHRNYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXggKyAxXTtcblxuICAgICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lID09PSBuZXh0TWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgbWFwcGluZy5sYXN0R2VuZXJhdGVkQ29sdW1uID0gbmV4dE1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC0gMTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgbGFzdCBtYXBwaW5nIGZvciBlYWNoIGxpbmUgc3BhbnMgdGhlIGVudGlyZSBsaW5lLlxuICAgICAgbWFwcGluZy5sYXN0R2VuZXJhdGVkQ29sdW1uID0gSW5maW5pdHk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSwgbGluZSwgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdlbmVyYXRlZFxuICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0XG4gKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyXG4gKiAgICAgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIGJpYXM6IEVpdGhlciAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlLCBvciBudWxsLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKiAgIC0gbmFtZTogVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIsIG9yIG51bGwuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLm9yaWdpbmFsUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9vcmlnaW5hbFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIGdlbmVyYXRlZExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgZ2VuZXJhdGVkQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKFxuICAgICAgbmVlZGxlLFxuICAgICAgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MsXG4gICAgICBcImdlbmVyYXRlZExpbmVcIixcbiAgICAgIFwiZ2VuZXJhdGVkQ29sdW1uXCIsXG4gICAgICB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkLFxuICAgICAgdXRpbC5nZXRBcmcoYUFyZ3MsICdiaWFzJywgU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQpXG4gICAgKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9PT0gbmVlZGxlLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdzb3VyY2UnLCBudWxsKTtcbiAgICAgICAgaWYgKHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuYXQoc291cmNlKTtcbiAgICAgICAgICBzb3VyY2UgPSB1dGlsLmNvbXB1dGVTb3VyY2VVUkwodGhpcy5zb3VyY2VSb290LCBzb3VyY2UsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5hbWUgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbmFtZScsIG51bGwpO1xuICAgICAgICBpZiAobmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgIG5hbWUgPSB0aGlzLl9uYW1lcy5hdChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdvcmlnaW5hbExpbmUnLCBudWxsKSxcbiAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdvcmlnaW5hbENvbHVtbicsIG51bGwpLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc291cmNlOiBudWxsLFxuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgIG5hbWU6IG51bGxcbiAgICB9O1xuICB9O1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHdlIGhhdmUgdGhlIHNvdXJjZSBjb250ZW50IGZvciBldmVyeSBzb3VyY2UgaW4gdGhlIHNvdXJjZVxuICogbWFwLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzID1cbiAgZnVuY3Rpb24gQmFzaWNTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcygpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnQubGVuZ3RoID49IHRoaXMuX3NvdXJjZXMuc2l6ZSgpICYmXG4gICAgICAhdGhpcy5zb3VyY2VzQ29udGVudC5zb21lKGZ1bmN0aW9uIChzYykgeyByZXR1cm4gc2MgPT0gbnVsbDsgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gKiBhdmFpbGFibGUuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIG51bGxPbk1pc3NpbmcpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChhU291cmNlKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbaW5kZXhdO1xuICAgIH1cblxuICAgIHZhciByZWxhdGl2ZVNvdXJjZSA9IGFTb3VyY2U7XG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICByZWxhdGl2ZVNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCByZWxhdGl2ZVNvdXJjZSk7XG4gICAgfVxuXG4gICAgdmFyIHVybDtcbiAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGxcbiAgICAgICAgJiYgKHVybCA9IHV0aWwudXJsUGFyc2UodGhpcy5zb3VyY2VSb290KSkpIHtcbiAgICAgIC8vIFhYWDogZmlsZTovLyBVUklzIGFuZCBhYnNvbHV0ZSBwYXRocyBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IgZm9yXG4gICAgICAvLyBtYW55IHVzZXJzLiBXZSBjYW4gaGVscCB0aGVtIG91dCB3aGVuIHRoZXkgZXhwZWN0IGZpbGU6Ly8gVVJJcyB0b1xuICAgICAgLy8gYmVoYXZlIGxpa2UgaXQgd291bGQgaWYgdGhleSB3ZXJlIHJ1bm5pbmcgYSBsb2NhbCBIVFRQIHNlcnZlci4gU2VlXG4gICAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04ODU1OTcuXG4gICAgICB2YXIgZmlsZVVyaUFic1BhdGggPSByZWxhdGl2ZVNvdXJjZS5yZXBsYWNlKC9eZmlsZTpcXC9cXC8vLCBcIlwiKTtcbiAgICAgIGlmICh1cmwuc2NoZW1lID09IFwiZmlsZVwiXG4gICAgICAgICAgJiYgdGhpcy5fc291cmNlcy5oYXMoZmlsZVVyaUFic1BhdGgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihmaWxlVXJpQWJzUGF0aCldXG4gICAgICB9XG5cbiAgICAgIGlmICgoIXVybC5wYXRoIHx8IHVybC5wYXRoID09IFwiL1wiKVxuICAgICAgICAgICYmIHRoaXMuX3NvdXJjZXMuaGFzKFwiL1wiICsgcmVsYXRpdmVTb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihcIi9cIiArIHJlbGF0aXZlU291cmNlKV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHJlY3Vyc2l2ZWx5IGZyb21cbiAgICAvLyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IuIEluIHRoYXQgY2FzZSwgd2VcbiAgICAvLyBkb24ndCB3YW50IHRvIHRocm93IGlmIHdlIGNhbid0IGZpbmQgdGhlIHNvdXJjZSAtIHdlIGp1c3Qgd2FudCB0b1xuICAgIC8vIHJldHVybiBudWxsLCBzbyB3ZSBwcm92aWRlIGEgZmxhZyB0byBleGl0IGdyYWNlZnVsbHkuXG4gICAgaWYgKG51bGxPbk1pc3NpbmcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgcmVsYXRpdmVTb3VyY2UgKyAnXCIgaXMgbm90IGluIHRoZSBTb3VyY2VNYXAuJyk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGhcbiAqIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIGJpYXM6IEVpdGhlciAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2dlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJyk7XG4gICAgc291cmNlID0gdGhpcy5fZmluZFNvdXJjZUluZGV4KHNvdXJjZSk7XG4gICAgaWYgKHNvdXJjZSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgbGFzdENvbHVtbjogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBvcmlnaW5hbExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcoXG4gICAgICBuZWVkbGUsXG4gICAgICB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzLFxuICAgICAgXCJvcmlnaW5hbExpbmVcIixcbiAgICAgIFwib3JpZ2luYWxDb2x1bW5cIixcbiAgICAgIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMsXG4gICAgICB1dGlsLmdldEFyZyhhQXJncywgJ2JpYXMnLCBTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORClcbiAgICApO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSA9PT0gbmVlZGxlLnNvdXJjZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgbGFzdENvbHVtbjogbnVsbFxuICAgIH07XG4gIH07XG5cbmV4cG9ydHMuQmFzaWNTb3VyY2VNYXBDb25zdW1lciA9IEJhc2ljU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogQW4gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyIGluc3RhbmNlIHJlcHJlc2VudHMgYSBwYXJzZWQgc291cmNlIG1hcCB3aGljaFxuICogd2UgY2FuIHF1ZXJ5IGZvciBpbmZvcm1hdGlvbi4gSXQgZGlmZmVycyBmcm9tIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgaW5cbiAqIHRoYXQgaXQgdGFrZXMgXCJpbmRleGVkXCIgc291cmNlIG1hcHMgKGkuZS4gb25lcyB3aXRoIGEgXCJzZWN0aW9uc1wiIGZpZWxkKSBhc1xuICogaW5wdXQuXG4gKlxuICogVGhlIGZpcnN0IHBhcmFtZXRlciBpcyBhIHJhdyBzb3VyY2UgbWFwIChlaXRoZXIgYXMgYSBKU09OIHN0cmluZywgb3IgYWxyZWFkeVxuICogcGFyc2VkIHRvIGFuIG9iamVjdCkuIEFjY29yZGluZyB0byB0aGUgc3BlYyBmb3IgaW5kZXhlZCBzb3VyY2UgbWFwcywgdGhleVxuICogaGF2ZSB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gKlxuICogICAtIHZlcnNpb246IFdoaWNoIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXAgc3BlYyB0aGlzIG1hcCBpcyBmb2xsb3dpbmcuXG4gKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICogICAtIHNlY3Rpb25zOiBBIGxpc3Qgb2Ygc2VjdGlvbiBkZWZpbml0aW9ucy5cbiAqXG4gKiBFYWNoIHZhbHVlIHVuZGVyIHRoZSBcInNlY3Rpb25zXCIgZmllbGQgaGFzIHR3byBmaWVsZHM6XG4gKiAgIC0gb2Zmc2V0OiBUaGUgb2Zmc2V0IGludG8gdGhlIG9yaWdpbmFsIHNwZWNpZmllZCBhdCB3aGljaCB0aGlzIHNlY3Rpb25cbiAqICAgICAgIGJlZ2lucyB0byBhcHBseSwgZGVmaW5lZCBhcyBhbiBvYmplY3Qgd2l0aCBhIFwibGluZVwiIGFuZCBcImNvbHVtblwiXG4gKiAgICAgICBmaWVsZC5cbiAqICAgLSBtYXA6IEEgc291cmNlIG1hcCBkZWZpbml0aW9uLiBUaGlzIHNvdXJjZSBtYXAgY291bGQgYWxzbyBiZSBpbmRleGVkLFxuICogICAgICAgYnV0IGRvZXNuJ3QgaGF2ZSB0byBiZS5cbiAqXG4gKiBJbnN0ZWFkIG9mIHRoZSBcIm1hcFwiIGZpZWxkLCBpdCdzIGFsc28gcG9zc2libGUgdG8gaGF2ZSBhIFwidXJsXCIgZmllbGRcbiAqIHNwZWNpZnlpbmcgYSBVUkwgdG8gcmV0cmlldmUgYSBzb3VyY2UgbWFwIGZyb20sIGJ1dCB0aGF0J3MgY3VycmVudGx5XG4gKiB1bnN1cHBvcnRlZC5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF0sIGJ1dFxuICogbW9kaWZpZWQgdG8gb21pdCBhIHNlY3Rpb24gd2hpY2ggdXNlcyB0aGUgXCJ1cmxcIiBmaWVsZC5cbiAqXG4gKiAge1xuICogICAgdmVyc2lvbiA6IDMsXG4gKiAgICBmaWxlOiBcImFwcC5qc1wiLFxuICogICAgc2VjdGlvbnM6IFt7XG4gKiAgICAgIG9mZnNldDoge2xpbmU6MTAwLCBjb2x1bW46MTB9LFxuICogICAgICBtYXA6IHtcbiAqICAgICAgICB2ZXJzaW9uIDogMyxcbiAqICAgICAgICBmaWxlOiBcInNlY3Rpb24uanNcIixcbiAqICAgICAgICBzb3VyY2VzOiBbXCJmb28uanNcIiwgXCJiYXIuanNcIl0sXG4gKiAgICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gKiAgICAgICAgbWFwcGluZ3M6IFwiQUFBQSxFOztBQkNERTtcIlxuICogICAgICB9XG4gKiAgICB9XSxcbiAqICB9XG4gKlxuICogVGhlIHNlY29uZCBwYXJhbWV0ZXIsIGlmIGdpdmVuLCBpcyBhIHN0cmluZyB3aG9zZSB2YWx1ZSBpcyB0aGUgVVJMXG4gKiBhdCB3aGljaCB0aGUgc291cmNlIG1hcCB3YXMgZm91bmQuICBUaGlzIFVSTCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlXG4gKiBzb3VyY2VzIGFycmF5LlxuICpcbiAqIFswXTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVTFSR0FlaFF3UnlwVVRvdkYxS1JscGlPRnplMGItXzJnYzZmQUgwS1kway9lZGl0I2hlYWRpbmc9aC41MzVlczN4ZXByZ3RcbiAqL1xuZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3ZlcnNpb24nKTtcbiAgdmFyIHNlY3Rpb25zID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc2VjdGlvbnMnKTtcblxuICBpZiAodmVyc2lvbiAhPSB0aGlzLl92ZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2ZXJzaW9uOiAnICsgdmVyc2lvbik7XG4gIH1cblxuICB0aGlzLl9zb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG5cbiAgdmFyIGxhc3RPZmZzZXQgPSB7XG4gICAgbGluZTogLTEsXG4gICAgY29sdW1uOiAwXG4gIH07XG4gIHRoaXMuX3NlY3Rpb25zID0gc2VjdGlvbnMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgaWYgKHMudXJsKSB7XG4gICAgICAvLyBUaGUgdXJsIGZpZWxkIHdpbGwgcmVxdWlyZSBzdXBwb3J0IGZvciBhc3luY2hyb25pY2l0eS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2lzc3Vlcy8xNlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdXBwb3J0IGZvciB1cmwgZmllbGQgaW4gc2VjdGlvbnMgbm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbiAgICB2YXIgb2Zmc2V0ID0gdXRpbC5nZXRBcmcocywgJ29mZnNldCcpO1xuICAgIHZhciBvZmZzZXRMaW5lID0gdXRpbC5nZXRBcmcob2Zmc2V0LCAnbGluZScpO1xuICAgIHZhciBvZmZzZXRDb2x1bW4gPSB1dGlsLmdldEFyZyhvZmZzZXQsICdjb2x1bW4nKTtcblxuICAgIGlmIChvZmZzZXRMaW5lIDwgbGFzdE9mZnNldC5saW5lIHx8XG4gICAgICAgIChvZmZzZXRMaW5lID09PSBsYXN0T2Zmc2V0LmxpbmUgJiYgb2Zmc2V0Q29sdW1uIDwgbGFzdE9mZnNldC5jb2x1bW4pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3Rpb24gb2Zmc2V0cyBtdXN0IGJlIG9yZGVyZWQgYW5kIG5vbi1vdmVybGFwcGluZy4nKTtcbiAgICB9XG4gICAgbGFzdE9mZnNldCA9IG9mZnNldDtcblxuICAgIHJldHVybiB7XG4gICAgICBnZW5lcmF0ZWRPZmZzZXQ6IHtcbiAgICAgICAgLy8gVGhlIG9mZnNldCBmaWVsZHMgYXJlIDAtYmFzZWQsIGJ1dCB3ZSB1c2UgMS1iYXNlZCBpbmRpY2VzIHdoZW5cbiAgICAgICAgLy8gZW5jb2RpbmcvZGVjb2RpbmcgZnJvbSBWTFEuXG4gICAgICAgIGdlbmVyYXRlZExpbmU6IG9mZnNldExpbmUgKyAxLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG9mZnNldENvbHVtbiArIDFcbiAgICAgIH0sXG4gICAgICBjb25zdW1lcjogbmV3IFNvdXJjZU1hcENvbnN1bWVyKHV0aWwuZ2V0QXJnKHMsICdtYXAnKSwgYVNvdXJjZU1hcFVSTClcbiAgICB9XG4gIH0pO1xufVxuXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogVGhlIGxpc3Qgb2Ygb3JpZ2luYWwgc291cmNlcy5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdzb3VyY2VzJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBzb3VyY2VzLnB1c2godGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzO1xuICB9XG59KTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSwgb3IgbnVsbC5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLm9yaWdpbmFsUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICAvLyBGaW5kIHRoZSBzZWN0aW9uIGNvbnRhaW5pbmcgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbiB3ZSdyZSB0cnlpbmcgdG8gbWFwXG4gICAgLy8gdG8gYW4gb3JpZ2luYWwgcG9zaXRpb24uXG4gICAgdmFyIHNlY3Rpb25JbmRleCA9IGJpbmFyeVNlYXJjaC5zZWFyY2gobmVlZGxlLCB0aGlzLl9zZWN0aW9ucyxcbiAgICAgIGZ1bmN0aW9uKG5lZWRsZSwgc2VjdGlvbikge1xuICAgICAgICB2YXIgY21wID0gbmVlZGxlLmdlbmVyYXRlZExpbmUgLSBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lO1xuICAgICAgICBpZiAoY21wKSB7XG4gICAgICAgICAgcmV0dXJuIGNtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAobmVlZGxlLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgIH0pO1xuICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbc2VjdGlvbkluZGV4XTtcblxuICAgIGlmICghc2VjdGlvbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiBudWxsLFxuICAgICAgICBsaW5lOiBudWxsLFxuICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgIG5hbWU6IG51bGxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlY3Rpb24uY29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7XG4gICAgICBsaW5lOiBuZWVkbGUuZ2VuZXJhdGVkTGluZSAtXG4gICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICBjb2x1bW46IG5lZWRsZS5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gbmVlZGxlLmdlbmVyYXRlZExpbmVcbiAgICAgICAgID8gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uIC0gMVxuICAgICAgICAgOiAwKSxcbiAgICAgIGJpYXM6IGFBcmdzLmJpYXNcbiAgICB9KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBoYXZlIHRoZSBzb3VyY2UgY29udGVudCBmb3IgZXZlcnkgc291cmNlIGluIHRoZSBzb3VyY2VcbiAqIG1hcCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX2hhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCkge1xuICAgIHJldHVybiB0aGlzLl9zZWN0aW9ucy5ldmVyeShmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHMuY29uc3VtZXIuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKTtcbiAgICB9KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29udGVudC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgdGhlIHVybCBvZiB0aGVcbiAqIG9yaWdpbmFsIHNvdXJjZSBmaWxlLiBSZXR1cm5zIG51bGwgaWYgbm8gb3JpZ2luYWwgc291cmNlIGNvbnRlbnQgaXNcbiAqIGF2YWlsYWJsZS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX3NvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgbnVsbE9uTWlzc2luZykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG5cbiAgICAgIHZhciBjb250ZW50ID0gc2VjdGlvbi5jb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIHRydWUpO1xuICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChudWxsT25NaXNzaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFTb3VyY2UgKyAnXCIgaXMgbm90IGluIHRoZSBTb3VyY2VNYXAuJyk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGhcbiAqIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuIFxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG5cbiAgICAgIC8vIE9ubHkgY29uc2lkZXIgdGhpcyBzZWN0aW9uIGlmIHRoZSByZXF1ZXN0ZWQgc291cmNlIGlzIGluIHRoZSBsaXN0IG9mXG4gICAgICAvLyBzb3VyY2VzIG9mIHRoZSBjb25zdW1lci5cbiAgICAgIGlmIChzZWN0aW9uLmNvbnN1bWVyLl9maW5kU291cmNlSW5kZXgodXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnKSkgPT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIGdlbmVyYXRlZFBvc2l0aW9uID0gc2VjdGlvbi5jb25zdW1lci5nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncyk7XG4gICAgICBpZiAoZ2VuZXJhdGVkUG9zaXRpb24pIHtcbiAgICAgICAgdmFyIHJldCA9IHtcbiAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWRQb3NpdGlvbi5saW5lICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWRQb3NpdGlvbi5jb2x1bW4gK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IGdlbmVyYXRlZFBvc2l0aW9uLmxpbmVcbiAgICAgICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgICAgICA6IDApXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGxcbiAgICB9O1xuICB9O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuICAgICAgdmFyIHNlY3Rpb25NYXBwaW5ncyA9IHNlY3Rpb24uY29uc3VtZXIuX2dlbmVyYXRlZE1hcHBpbmdzO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWN0aW9uTWFwcGluZ3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIG1hcHBpbmcgPSBzZWN0aW9uTWFwcGluZ3Nbal07XG5cbiAgICAgICAgdmFyIHNvdXJjZSA9IHNlY3Rpb24uY29uc3VtZXIuX3NvdXJjZXMuYXQobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBzb3VyY2UgPSB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc2VjdGlvbi5jb25zdW1lci5zb3VyY2VSb290LCBzb3VyY2UsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihzb3VyY2UpO1xuXG4gICAgICAgIHZhciBuYW1lID0gbnVsbDtcbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSkge1xuICAgICAgICAgIG5hbWUgPSBzZWN0aW9uLmNvbnN1bWVyLl9uYW1lcy5hdChtYXBwaW5nLm5hbWUpO1xuICAgICAgICAgIHRoaXMuX25hbWVzLmFkZChuYW1lKTtcbiAgICAgICAgICBuYW1lID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBtYXBwaW5ncyBjb21pbmcgZnJvbSB0aGUgY29uc3VtZXIgZm9yIHRoZSBzZWN0aW9uIGhhdmVcbiAgICAgICAgLy8gZ2VuZXJhdGVkIHBvc2l0aW9ucyByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIHNlY3Rpb24sIHNvIHdlXG4gICAgICAgIC8vIG5lZWQgdG8gb2Zmc2V0IHRoZW0gdG8gYmUgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBjb25jYXRlbmF0ZWRcbiAgICAgICAgLy8gZ2VuZXJhdGVkIGZpbGUuXG4gICAgICAgIHZhciBhZGp1c3RlZE1hcHBpbmcgPSB7XG4gICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgZ2VuZXJhdGVkTGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gbWFwcGluZy5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgICAgIDogMCksXG4gICAgICAgICAgb3JpZ2luYWxMaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBvcmlnaW5hbENvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLnB1c2goYWRqdXN0ZWRNYXBwaW5nKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhZGp1c3RlZE1hcHBpbmcub3JpZ2luYWxMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzLnB1c2goYWRqdXN0ZWRNYXBwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHF1aWNrU29ydCh0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQpO1xuICAgIHF1aWNrU29ydCh0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gIH07XG5cbmV4cG9ydHMuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyID0gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIEFycmF5U2V0ID0gcmVxdWlyZSgnLi9hcnJheS1zZXQnKS5BcnJheVNldDtcbnZhciBNYXBwaW5nTGlzdCA9IHJlcXVpcmUoJy4vbWFwcGluZy1saXN0JykuTWFwcGluZ0xpc3Q7XG5cbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgdGhlIFNvdXJjZU1hcEdlbmVyYXRvciByZXByZXNlbnRzIGEgc291cmNlIG1hcCB3aGljaCBpc1xuICogYmVpbmcgYnVpbHQgaW5jcmVtZW50YWxseS4gWW91IG1heSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAqIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGZpbGU6IFRoZSBmaWxlbmFtZSBvZiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqICAgLSBzb3VyY2VSb290OiBBIHJvb3QgZm9yIGFsbCByZWxhdGl2ZSBVUkxzIGluIHRoaXMgc291cmNlIG1hcC5cbiAqL1xuZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKSB7XG4gIGlmICghYUFyZ3MpIHtcbiAgICBhQXJncyA9IHt9O1xuICB9XG4gIHRoaXMuX2ZpbGUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2ZpbGUnLCBudWxsKTtcbiAgdGhpcy5fc291cmNlUm9vdCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlUm9vdCcsIG51bGwpO1xuICB0aGlzLl9za2lwVmFsaWRhdGlvbiA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc2tpcFZhbGlkYXRpb24nLCBmYWxzZSk7XG4gIHRoaXMuX3NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgdGhpcy5fbmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgdGhpcy5fbWFwcGluZ3MgPSBuZXcgTWFwcGluZ0xpc3QoKTtcbiAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbn1cblxuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBTb3VyY2VNYXBHZW5lcmF0b3IgYmFzZWQgb24gYSBTb3VyY2VNYXBDb25zdW1lclxuICpcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcC5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLmZyb21Tb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfZnJvbVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIpIHtcbiAgICB2YXIgc291cmNlUm9vdCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VSb290O1xuICAgIHZhciBnZW5lcmF0b3IgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKHtcbiAgICAgIGZpbGU6IGFTb3VyY2VNYXBDb25zdW1lci5maWxlLFxuICAgICAgc291cmNlUm9vdDogc291cmNlUm9vdFxuICAgIH0pO1xuICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgdmFyIG5ld01hcHBpbmcgPSB7XG4gICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIG5ld01hcHBpbmcuc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdNYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbmV3TWFwcGluZy5zb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3TWFwcGluZy5vcmlnaW5hbCA9IHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWFwcGluZy5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdNYXBwaW5nLm5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZ2VuZXJhdG9yLmFkZE1hcHBpbmcobmV3TWFwcGluZyk7XG4gICAgfSk7XG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlRmlsZSkge1xuICAgICAgdmFyIHNvdXJjZVJlbGF0aXZlID0gc291cmNlRmlsZTtcbiAgICAgIGlmIChzb3VyY2VSb290ICE9PSBudWxsKSB7XG4gICAgICAgIHNvdXJjZVJlbGF0aXZlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFnZW5lcmF0b3IuX3NvdXJjZXMuaGFzKHNvdXJjZVJlbGF0aXZlKSkge1xuICAgICAgICBnZW5lcmF0b3IuX3NvdXJjZXMuYWRkKHNvdXJjZVJlbGF0aXZlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgZ2VuZXJhdG9yLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfTtcblxuLyoqXG4gKiBBZGQgYSBzaW5nbGUgbWFwcGluZyBmcm9tIG9yaWdpbmFsIHNvdXJjZSBsaW5lIGFuZCBjb2x1bW4gdG8gdGhlIGdlbmVyYXRlZFxuICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIGZvciB0aGlzIHNvdXJjZSBtYXAgYmVpbmcgY3JlYXRlZC4gVGhlIG1hcHBpbmdcbiAqIG9iamVjdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGdlbmVyYXRlZDogQW4gb2JqZWN0IHdpdGggdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICogICAtIG9yaWdpbmFsOiBBbiBvYmplY3Qgd2l0aCB0aGUgb3JpZ2luYWwgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSAocmVsYXRpdmUgdG8gdGhlIHNvdXJjZVJvb3QpLlxuICogICAtIG5hbWU6IEFuIG9wdGlvbmFsIG9yaWdpbmFsIHRva2VuIG5hbWUgZm9yIHRoaXMgbWFwcGluZy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hZGRNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2FkZE1hcHBpbmcoYUFyZ3MpIHtcbiAgICB2YXIgZ2VuZXJhdGVkID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdnZW5lcmF0ZWQnKTtcbiAgICB2YXIgb3JpZ2luYWwgPSB1dGlsLmdldEFyZyhhQXJncywgJ29yaWdpbmFsJywgbnVsbCk7XG4gICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJywgbnVsbCk7XG4gICAgdmFyIG5hbWUgPSB1dGlsLmdldEFyZyhhQXJncywgJ25hbWUnLCBudWxsKTtcblxuICAgIGlmICghdGhpcy5fc2tpcFZhbGlkYXRpb24pIHtcbiAgICAgIHRoaXMuX3ZhbGlkYXRlTWFwcGluZyhnZW5lcmF0ZWQsIG9yaWdpbmFsLCBzb3VyY2UsIG5hbWUpO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgc291cmNlID0gU3RyaW5nKHNvdXJjZSk7XG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgdGhpcy5fc291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmFtZSAhPSBudWxsKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgICAgaWYgKCF0aGlzLl9uYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgICAgdGhpcy5fbmFtZXMuYWRkKG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX21hcHBpbmdzLmFkZCh7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogZ2VuZXJhdGVkLmNvbHVtbixcbiAgICAgIG9yaWdpbmFsTGluZTogb3JpZ2luYWwgIT0gbnVsbCAmJiBvcmlnaW5hbC5saW5lLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwuY29sdW1uLFxuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBuYW1lOiBuYW1lXG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3NldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgdmFyIHNvdXJjZSA9IGFTb3VyY2VGaWxlO1xuICAgIGlmICh0aGlzLl9zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5fc291cmNlUm9vdCwgc291cmNlKTtcbiAgICB9XG5cbiAgICBpZiAoYVNvdXJjZUNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgLy8gQWRkIHRoZSBzb3VyY2UgY29udGVudCB0byB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAuXG4gICAgICAvLyBDcmVhdGUgYSBuZXcgX3NvdXJjZXNDb250ZW50cyBtYXAgaWYgdGhlIHByb3BlcnR5IGlzIG51bGwuXG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoc291cmNlKV0gPSBhU291cmNlQ29udGVudDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBzb3VyY2UgZmlsZSBmcm9tIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcC5cbiAgICAgIC8vIElmIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcCBpcyBlbXB0eSwgc2V0IHRoZSBwcm9wZXJ0eSB0byBudWxsLlxuICAgICAgZGVsZXRlIHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSldO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuX3NvdXJjZXNDb250ZW50cykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIEFwcGxpZXMgdGhlIG1hcHBpbmdzIG9mIGEgc3ViLXNvdXJjZS1tYXAgZm9yIGEgc3BlY2lmaWMgc291cmNlIGZpbGUgdG8gdGhlXG4gKiBzb3VyY2UgbWFwIGJlaW5nIGdlbmVyYXRlZC4gRWFjaCBtYXBwaW5nIHRvIHRoZSBzdXBwbGllZCBzb3VyY2UgZmlsZSBpc1xuICogcmV3cml0dGVuIHVzaW5nIHRoZSBzdXBwbGllZCBzb3VyY2UgbWFwLiBOb3RlOiBUaGUgcmVzb2x1dGlvbiBmb3IgdGhlXG4gKiByZXN1bHRpbmcgbWFwcGluZ3MgaXMgdGhlIG1pbmltaXVtIG9mIHRoaXMgbWFwIGFuZCB0aGUgc3VwcGxpZWQgbWFwLlxuICpcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZC5cbiAqIEBwYXJhbSBhU291cmNlRmlsZSBPcHRpb25hbC4gVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZS5cbiAqICAgICAgICBJZiBvbWl0dGVkLCBTb3VyY2VNYXBDb25zdW1lcidzIGZpbGUgcHJvcGVydHkgd2lsbCBiZSB1c2VkLlxuICogQHBhcmFtIGFTb3VyY2VNYXBQYXRoIE9wdGlvbmFsLiBUaGUgZGlybmFtZSBvZiB0aGUgcGF0aCB0byB0aGUgc291cmNlIG1hcFxuICogICAgICAgIHRvIGJlIGFwcGxpZWQuIElmIHJlbGF0aXZlLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgU291cmNlTWFwQ29uc3VtZXIuXG4gKiAgICAgICAgVGhpcyBwYXJhbWV0ZXIgaXMgbmVlZGVkIHdoZW4gdGhlIHR3byBzb3VyY2UgbWFwcyBhcmVuJ3QgaW4gdGhlIHNhbWVcbiAqICAgICAgICBkaXJlY3RvcnksIGFuZCB0aGUgc291cmNlIG1hcCB0byBiZSBhcHBsaWVkIGNvbnRhaW5zIHJlbGF0aXZlIHNvdXJjZVxuICogICAgICAgIHBhdGhzLiBJZiBzbywgdGhvc2UgcmVsYXRpdmUgc291cmNlIHBhdGhzIG5lZWQgdG8gYmUgcmV3cml0dGVuXG4gKiAgICAgICAgcmVsYXRpdmUgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvci5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hcHBseVNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9hcHBseVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIsIGFTb3VyY2VGaWxlLCBhU291cmNlTWFwUGF0aCkge1xuICAgIHZhciBzb3VyY2VGaWxlID0gYVNvdXJjZUZpbGU7XG4gICAgLy8gSWYgYVNvdXJjZUZpbGUgaXMgb21pdHRlZCwgd2Ugd2lsbCB1c2UgdGhlIGZpbGUgcHJvcGVydHkgb2YgdGhlIFNvdXJjZU1hcFxuICAgIGlmIChhU291cmNlRmlsZSA9PSBudWxsKSB7XG4gICAgICBpZiAoYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1NvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXAgcmVxdWlyZXMgZWl0aGVyIGFuIGV4cGxpY2l0IHNvdXJjZSBmaWxlLCAnICtcbiAgICAgICAgICAnb3IgdGhlIHNvdXJjZSBtYXBcXCdzIFwiZmlsZVwiIHByb3BlcnR5LiBCb3RoIHdlcmUgb21pdHRlZC4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBzb3VyY2VGaWxlID0gYVNvdXJjZU1hcENvbnN1bWVyLmZpbGU7XG4gICAgfVxuICAgIHZhciBzb3VyY2VSb290ID0gdGhpcy5fc291cmNlUm9vdDtcbiAgICAvLyBNYWtlIFwic291cmNlRmlsZVwiIHJlbGF0aXZlIGlmIGFuIGFic29sdXRlIFVybCBpcyBwYXNzZWQuXG4gICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgc291cmNlRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgfVxuICAgIC8vIEFwcGx5aW5nIHRoZSBTb3VyY2VNYXAgY2FuIGFkZCBhbmQgcmVtb3ZlIGl0ZW1zIGZyb20gdGhlIHNvdXJjZXMgYW5kXG4gICAgLy8gdGhlIG5hbWVzIGFycmF5LlxuICAgIHZhciBuZXdTb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gICAgdmFyIG5ld05hbWVzID0gbmV3IEFycmF5U2V0KCk7XG5cbiAgICAvLyBGaW5kIG1hcHBpbmdzIGZvciB0aGUgXCJzb3VyY2VGaWxlXCJcbiAgICB0aGlzLl9tYXBwaW5ncy51bnNvcnRlZEZvckVhY2goZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSA9PT0gc291cmNlRmlsZSAmJiBtYXBwaW5nLm9yaWdpbmFsTGluZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGl0IGNhbiBiZSBtYXBwZWQgYnkgdGhlIHNvdXJjZSBtYXAsIHRoZW4gdXBkYXRlIHRoZSBtYXBwaW5nLlxuICAgICAgICB2YXIgb3JpZ2luYWwgPSBhU291cmNlTWFwQ29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob3JpZ2luYWwuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBDb3B5IG1hcHBpbmdcbiAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgICAgICBpZiAoYVNvdXJjZU1hcFBhdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLmpvaW4oYVNvdXJjZU1hcFBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbWFwcGluZy5zb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IG9yaWdpbmFsLmxpbmU7XG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgICAgICBpZiAob3JpZ2luYWwubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLm5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICBpZiAoc291cmNlICE9IG51bGwgJiYgIW5ld1NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgbmV3U291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICBpZiAobmFtZSAhPSBudWxsICYmICFuZXdOYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgICAgbmV3TmFtZXMuYWRkKG5hbWUpO1xuICAgICAgfVxuXG4gICAgfSwgdGhpcyk7XG4gICAgdGhpcy5fc291cmNlcyA9IG5ld1NvdXJjZXM7XG4gICAgdGhpcy5fbmFtZXMgPSBuZXdOYW1lcztcblxuICAgIC8vIENvcHkgc291cmNlc0NvbnRlbnRzIG9mIGFwcGxpZWQgbWFwLlxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhU291cmNlTWFwUGF0aCwgc291cmNlRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgfTtcblxuLyoqXG4gKiBBIG1hcHBpbmcgY2FuIGhhdmUgb25lIG9mIHRoZSB0aHJlZSBsZXZlbHMgb2YgZGF0YTpcbiAqXG4gKiAgIDEuIEp1c3QgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAqICAgMi4gVGhlIEdlbmVyYXRlZCBwb3NpdGlvbiwgb3JpZ2luYWwgcG9zaXRpb24sIGFuZCBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIDMuIEdlbmVyYXRlZCBhbmQgb3JpZ2luYWwgcG9zaXRpb24sIG9yaWdpbmFsIHNvdXJjZSwgYXMgd2VsbCBhcyBhIG5hbWVcbiAqICAgICAgdG9rZW4uXG4gKlxuICogVG8gbWFpbnRhaW4gY29uc2lzdGVuY3ksIHdlIHZhbGlkYXRlIHRoYXQgYW55IG5ldyBtYXBwaW5nIGJlaW5nIGFkZGVkIGZhbGxzXG4gKiBpbiB0byBvbmUgb2YgdGhlc2UgY2F0ZWdvcmllcy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGVNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3ZhbGlkYXRlTWFwcGluZyhhR2VuZXJhdGVkLCBhT3JpZ2luYWwsIGFTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYU5hbWUpIHtcbiAgICAvLyBXaGVuIGFPcmlnaW5hbCBpcyB0cnV0aHkgYnV0IGhhcyBlbXB0eSB2YWx1ZXMgZm9yIC5saW5lIGFuZCAuY29sdW1uLFxuICAgIC8vIGl0IGlzIG1vc3QgbGlrZWx5IGEgcHJvZ3JhbW1lciBlcnJvci4gSW4gdGhpcyBjYXNlIHdlIHRocm93IGEgdmVyeVxuICAgIC8vIHNwZWNpZmljIGVycm9yIG1lc3NhZ2UgdG8gdHJ5IHRvIGd1aWRlIHRoZW0gdGhlIHJpZ2h0IHdheS5cbiAgICAvLyBGb3IgZXhhbXBsZTogaHR0cHM6Ly9naXRodWIuY29tL1BvbHltZXIvcG9seW1lci1idW5kbGVyL3B1bGwvNTE5XG4gICAgaWYgKGFPcmlnaW5hbCAmJiB0eXBlb2YgYU9yaWdpbmFsLmxpbmUgIT09ICdudW1iZXInICYmIHR5cGVvZiBhT3JpZ2luYWwuY29sdW1uICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnb3JpZ2luYWwubGluZSBhbmQgb3JpZ2luYWwuY29sdW1uIGFyZSBub3QgbnVtYmVycyAtLSB5b3UgcHJvYmFibHkgbWVhbnQgdG8gb21pdCAnICtcbiAgICAgICAgICAgICd0aGUgb3JpZ2luYWwgbWFwcGluZyBlbnRpcmVseSBhbmQgb25seSBtYXAgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi4gSWYgc28sIHBhc3MgJyArXG4gICAgICAgICAgICAnbnVsbCBmb3IgdGhlIG9yaWdpbmFsIG1hcHBpbmcgaW5zdGVhZCBvZiBhbiBvYmplY3Qgd2l0aCBlbXB0eSBvciBudWxsIHZhbHVlcy4nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGFHZW5lcmF0ZWQgJiYgJ2xpbmUnIGluIGFHZW5lcmF0ZWQgJiYgJ2NvbHVtbicgaW4gYUdlbmVyYXRlZFxuICAgICAgICAmJiBhR2VuZXJhdGVkLmxpbmUgPiAwICYmIGFHZW5lcmF0ZWQuY29sdW1uID49IDBcbiAgICAgICAgJiYgIWFPcmlnaW5hbCAmJiAhYVNvdXJjZSAmJiAhYU5hbWUpIHtcbiAgICAgIC8vIENhc2UgMS5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsICYmICdsaW5lJyBpbiBhT3JpZ2luYWwgJiYgJ2NvbHVtbicgaW4gYU9yaWdpbmFsXG4gICAgICAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsLmxpbmUgPiAwICYmIGFPcmlnaW5hbC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICYmIGFTb3VyY2UpIHtcbiAgICAgIC8vIENhc2VzIDIgYW5kIDMuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1hcHBpbmc6ICcgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGdlbmVyYXRlZDogYUdlbmVyYXRlZCxcbiAgICAgICAgc291cmNlOiBhU291cmNlLFxuICAgICAgICBvcmlnaW5hbDogYU9yaWdpbmFsLFxuICAgICAgICBuYW1lOiBhTmFtZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBTZXJpYWxpemUgdGhlIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIHRvIHRoZSBzdHJlYW0gb2YgYmFzZSA2NCBWTFFzXG4gKiBzcGVjaWZpZWQgYnkgdGhlIHNvdXJjZSBtYXAgZm9ybWF0LlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9zZXJpYWxpemVNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9zZXJpYWxpemVNYXBwaW5ncygpIHtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZExpbmUgPSAxO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgIHZhciBwcmV2aW91c05hbWUgPSAwO1xuICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBuZXh0O1xuICAgIHZhciBtYXBwaW5nO1xuICAgIHZhciBuYW1lSWR4O1xuICAgIHZhciBzb3VyY2VJZHg7XG5cbiAgICB2YXIgbWFwcGluZ3MgPSB0aGlzLl9tYXBwaW5ncy50b0FycmF5KCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBtYXBwaW5nID0gbWFwcGluZ3NbaV07XG4gICAgICBuZXh0ID0gJydcblxuICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgd2hpbGUgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgbmV4dCArPSAnOyc7XG4gICAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICBpZiAoIXV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZywgbWFwcGluZ3NbaSAtIDFdKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHQgKz0gJywnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbik7XG4gICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VJZHggPSB0aGlzLl9zb3VyY2VzLmluZGV4T2YobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUoc291cmNlSWR4IC0gcHJldmlvdXNTb3VyY2UpO1xuICAgICAgICBwcmV2aW91c1NvdXJjZSA9IHNvdXJjZUlkeDtcblxuICAgICAgICAvLyBsaW5lcyBhcmUgc3RvcmVkIDAtYmFzZWQgaW4gU291cmNlTWFwIHNwZWMgdmVyc2lvbiAzXG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsTGluZSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c09yaWdpbmFsTGluZSk7XG4gICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmUgLSAxO1xuXG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbENvbHVtbik7XG4gICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgIG5hbWVJZHggPSB0aGlzLl9uYW1lcy5pbmRleE9mKG1hcHBpbmcubmFtZSk7XG4gICAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG5hbWVJZHggLSBwcmV2aW91c05hbWUpO1xuICAgICAgICAgIHByZXZpb3VzTmFtZSA9IG5hbWVJZHg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzdWx0ICs9IG5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KGFTb3VyY2VzLCBhU291cmNlUm9vdCkge1xuICAgIHJldHVybiBhU291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoYVNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKGFTb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgfVxuICAgICAgdmFyIGtleSA9IHV0aWwudG9TZXRTdHJpbmcoc291cmNlKTtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5fc291cmNlc0NvbnRlbnRzLCBrZXkpXG4gICAgICAgID8gdGhpcy5fc291cmNlc0NvbnRlbnRzW2tleV1cbiAgICAgICAgOiBudWxsO1xuICAgIH0sIHRoaXMpO1xuICB9O1xuXG4vKipcbiAqIEV4dGVybmFsaXplIHRoZSBzb3VyY2UgbWFwLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvSlNPTiA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl90b0pTT04oKSB7XG4gICAgdmFyIG1hcCA9IHtcbiAgICAgIHZlcnNpb246IHRoaXMuX3ZlcnNpb24sXG4gICAgICBzb3VyY2VzOiB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKSxcbiAgICAgIG5hbWVzOiB0aGlzLl9uYW1lcy50b0FycmF5KCksXG4gICAgICBtYXBwaW5nczogdGhpcy5fc2VyaWFsaXplTWFwcGluZ3MoKVxuICAgIH07XG4gICAgaWYgKHRoaXMuX2ZpbGUgIT0gbnVsbCkge1xuICAgICAgbWFwLmZpbGUgPSB0aGlzLl9maWxlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBtYXAuc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgIG1hcC5zb3VyY2VzQ29udGVudCA9IHRoaXMuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQobWFwLnNvdXJjZXMsIG1hcC5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwO1xuICB9O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQgdG8gYSBzdHJpbmcuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUudG9TdHJpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xuICB9O1xuXG5leHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9IFNvdXJjZU1hcEdlbmVyYXRvcjtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIFNvdXJjZU1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4vLyBNYXRjaGVzIGEgV2luZG93cy1zdHlsZSBgXFxyXFxuYCBuZXdsaW5lIG9yIGEgYFxcbmAgbmV3bGluZSB1c2VkIGJ5IGFsbCBvdGhlclxuLy8gb3BlcmF0aW5nIHN5c3RlbXMgdGhlc2UgZGF5cyAoY2FwdHVyaW5nIHRoZSByZXN1bHQpLlxudmFyIFJFR0VYX05FV0xJTkUgPSAvKFxccj9cXG4pLztcblxuLy8gTmV3bGluZSBjaGFyYWN0ZXIgY29kZSBmb3IgY2hhckNvZGVBdCgpIGNvbXBhcmlzb25zXG52YXIgTkVXTElORV9DT0RFID0gMTA7XG5cbi8vIFByaXZhdGUgc3ltYm9sIGZvciBpZGVudGlmeWluZyBgU291cmNlTm9kZWBzIHdoZW4gbXVsdGlwbGUgdmVyc2lvbnMgb2Zcbi8vIHRoZSBzb3VyY2UtbWFwIGxpYnJhcnkgYXJlIGxvYWRlZC4gVGhpcyBNVVNUIE5PVCBDSEFOR0UgYWNyb3NzXG4vLyB2ZXJzaW9ucyFcbnZhciBpc1NvdXJjZU5vZGUgPSBcIiQkJGlzU291cmNlTm9kZSQkJFwiO1xuXG4vKipcbiAqIFNvdXJjZU5vZGVzIHByb3ZpZGUgYSB3YXkgdG8gYWJzdHJhY3Qgb3ZlciBpbnRlcnBvbGF0aW5nL2NvbmNhdGVuYXRpbmdcbiAqIHNuaXBwZXRzIG9mIGdlbmVyYXRlZCBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlIHdoaWxlIG1haW50YWluaW5nIHRoZSBsaW5lIGFuZFxuICogY29sdW1uIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgb3JpZ2luYWwgc291cmNlIGNvZGUuXG4gKlxuICogQHBhcmFtIGFMaW5lIFRoZSBvcmlnaW5hbCBsaW5lIG51bWJlci5cbiAqIEBwYXJhbSBhQ29sdW1uIFRoZSBvcmlnaW5hbCBjb2x1bW4gbnVtYmVyLlxuICogQHBhcmFtIGFTb3VyY2UgVGhlIG9yaWdpbmFsIHNvdXJjZSdzIGZpbGVuYW1lLlxuICogQHBhcmFtIGFDaHVua3MgT3B0aW9uYWwuIEFuIGFycmF5IG9mIHN0cmluZ3Mgd2hpY2ggYXJlIHNuaXBwZXRzIG9mXG4gKiAgICAgICAgZ2VuZXJhdGVkIEpTLCBvciBvdGhlciBTb3VyY2VOb2Rlcy5cbiAqIEBwYXJhbSBhTmFtZSBUaGUgb3JpZ2luYWwgaWRlbnRpZmllci5cbiAqL1xuZnVuY3Rpb24gU291cmNlTm9kZShhTGluZSwgYUNvbHVtbiwgYVNvdXJjZSwgYUNodW5rcywgYU5hbWUpIHtcbiAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICB0aGlzLnNvdXJjZUNvbnRlbnRzID0ge307XG4gIHRoaXMubGluZSA9IGFMaW5lID09IG51bGwgPyBudWxsIDogYUxpbmU7XG4gIHRoaXMuY29sdW1uID0gYUNvbHVtbiA9PSBudWxsID8gbnVsbCA6IGFDb2x1bW47XG4gIHRoaXMuc291cmNlID0gYVNvdXJjZSA9PSBudWxsID8gbnVsbCA6IGFTb3VyY2U7XG4gIHRoaXMubmFtZSA9IGFOYW1lID09IG51bGwgPyBudWxsIDogYU5hbWU7XG4gIHRoaXNbaXNTb3VyY2VOb2RlXSA9IHRydWU7XG4gIGlmIChhQ2h1bmtzICE9IG51bGwpIHRoaXMuYWRkKGFDaHVua3MpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBTb3VyY2VOb2RlIGZyb20gZ2VuZXJhdGVkIGNvZGUgYW5kIGEgU291cmNlTWFwQ29uc3VtZXIuXG4gKlxuICogQHBhcmFtIGFHZW5lcmF0ZWRDb2RlIFRoZSBnZW5lcmF0ZWQgY29kZVxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwIGZvciB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAqIEBwYXJhbSBhUmVsYXRpdmVQYXRoIE9wdGlvbmFsLiBUaGUgcGF0aCB0aGF0IHJlbGF0aXZlIHNvdXJjZXMgaW4gdGhlXG4gKiAgICAgICAgU291cmNlTWFwQ29uc3VtZXIgc2hvdWxkIGJlIHJlbGF0aXZlIHRvLlxuICovXG5Tb3VyY2VOb2RlLmZyb21TdHJpbmdXaXRoU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV9mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcChhR2VuZXJhdGVkQ29kZSwgYVNvdXJjZU1hcENvbnN1bWVyLCBhUmVsYXRpdmVQYXRoKSB7XG4gICAgLy8gVGhlIFNvdXJjZU5vZGUgd2Ugd2FudCB0byBmaWxsIHdpdGggdGhlIGdlbmVyYXRlZCBjb2RlXG4gICAgLy8gYW5kIHRoZSBTb3VyY2VNYXBcbiAgICB2YXIgbm9kZSA9IG5ldyBTb3VyY2VOb2RlKCk7XG5cbiAgICAvLyBBbGwgZXZlbiBpbmRpY2VzIG9mIHRoaXMgYXJyYXkgYXJlIG9uZSBsaW5lIG9mIHRoZSBnZW5lcmF0ZWQgY29kZSxcbiAgICAvLyB3aGlsZSBhbGwgb2RkIGluZGljZXMgYXJlIHRoZSBuZXdsaW5lcyBiZXR3ZWVuIHR3byBhZGphY2VudCBsaW5lc1xuICAgIC8vIChzaW5jZSBgUkVHRVhfTkVXTElORWAgY2FwdHVyZXMgaXRzIG1hdGNoKS5cbiAgICAvLyBQcm9jZXNzZWQgZnJhZ21lbnRzIGFyZSBhY2Nlc3NlZCBieSBjYWxsaW5nIGBzaGlmdE5leHRMaW5lYC5cbiAgICB2YXIgcmVtYWluaW5nTGluZXMgPSBhR2VuZXJhdGVkQ29kZS5zcGxpdChSRUdFWF9ORVdMSU5FKTtcbiAgICB2YXIgcmVtYWluaW5nTGluZXNJbmRleCA9IDA7XG4gICAgdmFyIHNoaWZ0TmV4dExpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsaW5lQ29udGVudHMgPSBnZXROZXh0TGluZSgpO1xuICAgICAgLy8gVGhlIGxhc3QgbGluZSBvZiBhIGZpbGUgbWlnaHQgbm90IGhhdmUgYSBuZXdsaW5lLlxuICAgICAgdmFyIG5ld0xpbmUgPSBnZXROZXh0TGluZSgpIHx8IFwiXCI7XG4gICAgICByZXR1cm4gbGluZUNvbnRlbnRzICsgbmV3TGluZTtcblxuICAgICAgZnVuY3Rpb24gZ2V0TmV4dExpbmUoKSB7XG4gICAgICAgIHJldHVybiByZW1haW5pbmdMaW5lc0luZGV4IDwgcmVtYWluaW5nTGluZXMubGVuZ3RoID9cbiAgICAgICAgICAgIHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXgrK10gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFdlIG5lZWQgdG8gcmVtZW1iZXIgdGhlIHBvc2l0aW9uIG9mIFwicmVtYWluaW5nTGluZXNcIlxuICAgIHZhciBsYXN0R2VuZXJhdGVkTGluZSA9IDEsIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuXG4gICAgLy8gVGhlIGdlbmVyYXRlIFNvdXJjZU5vZGVzIHdlIG5lZWQgYSBjb2RlIHJhbmdlLlxuICAgIC8vIFRvIGV4dHJhY3QgaXQgY3VycmVudCBhbmQgbGFzdCBtYXBwaW5nIGlzIHVzZWQuXG4gICAgLy8gSGVyZSB3ZSBzdG9yZSB0aGUgbGFzdCBtYXBwaW5nLlxuICAgIHZhciBsYXN0TWFwcGluZyA9IG51bGw7XG5cbiAgICBhU291cmNlTWFwQ29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIGlmIChsYXN0TWFwcGluZyAhPT0gbnVsbCkge1xuICAgICAgICAvLyBXZSBhZGQgdGhlIGNvZGUgZnJvbSBcImxhc3RNYXBwaW5nXCIgdG8gXCJtYXBwaW5nXCI6XG4gICAgICAgIC8vIEZpcnN0IGNoZWNrIGlmIHRoZXJlIGlzIGEgbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgaWYgKGxhc3RHZW5lcmF0ZWRMaW5lIDwgbWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgLy8gQXNzb2NpYXRlIGZpcnN0IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZExpbmUrKztcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgICAvLyBUaGUgcmVtYWluaW5nIGNvZGUgaXMgYWRkZWQgd2l0aG91dCBtYXBwaW5nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGhlcmUgaXMgbm8gbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIGNvZGUgYmV0d2VlbiBcImxhc3RHZW5lcmF0ZWRDb2x1bW5cIiBhbmRcbiAgICAgICAgICAvLyBcIm1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXCIgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICB2YXIgbmV4dExpbmUgPSByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSB8fCAnJztcbiAgICAgICAgICB2YXIgY29kZSA9IG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gPSBuZXh0TGluZS5zdWJzdHIobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcbiAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIGNvZGUpO1xuICAgICAgICAgIC8vIE5vIG1vcmUgcmVtYWluaW5nIGNvZGUsIGNvbnRpbnVlXG4gICAgICAgICAgbGFzdE1hcHBpbmcgPSBtYXBwaW5nO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gV2UgYWRkIHRoZSBnZW5lcmF0ZWQgY29kZSB1bnRpbCB0aGUgZmlyc3QgbWFwcGluZ1xuICAgICAgLy8gdG8gdGhlIFNvdXJjZU5vZGUgd2l0aG91dCBhbnkgbWFwcGluZy5cbiAgICAgIC8vIEVhY2ggbGluZSBpcyBhZGRlZCBhcyBzZXBhcmF0ZSBzdHJpbmcuXG4gICAgICB3aGlsZSAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgbm9kZS5hZGQoc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgbGFzdEdlbmVyYXRlZExpbmUrKztcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0R2VuZXJhdGVkQ29sdW1uIDwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pIHtcbiAgICAgICAgdmFyIG5leHRMaW5lID0gcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gfHwgJyc7XG4gICAgICAgIG5vZGUuYWRkKG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikpO1xuICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSA9IG5leHRMaW5lLnN1YnN0cihtYXBwaW5nLmdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcbiAgICAgIH1cbiAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICB9LCB0aGlzKTtcbiAgICAvLyBXZSBoYXZlIHByb2Nlc3NlZCBhbGwgbWFwcGluZ3MuXG4gICAgaWYgKHJlbWFpbmluZ0xpbmVzSW5kZXggPCByZW1haW5pbmdMaW5lcy5sZW5ndGgpIHtcbiAgICAgIGlmIChsYXN0TWFwcGluZykge1xuICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIHJlbWFpbmluZyBjb2RlIGluIHRoZSBjdXJyZW50IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgfVxuICAgICAgLy8gYW5kIGFkZCB0aGUgcmVtYWluaW5nIGxpbmVzIHdpdGhvdXQgYW55IG1hcHBpbmdcbiAgICAgIG5vZGUuYWRkKHJlbWFpbmluZ0xpbmVzLnNwbGljZShyZW1haW5pbmdMaW5lc0luZGV4KS5qb2luKFwiXCIpKTtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50IGludG8gU291cmNlTm9kZVxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhUmVsYXRpdmVQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBub2RlO1xuXG4gICAgZnVuY3Rpb24gYWRkTWFwcGluZ1dpdGhDb2RlKG1hcHBpbmcsIGNvZGUpIHtcbiAgICAgIGlmIChtYXBwaW5nID09PSBudWxsIHx8IG1hcHBpbmcuc291cmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZS5hZGQoY29kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc291cmNlID0gYVJlbGF0aXZlUGF0aFxuICAgICAgICAgID8gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgIDogbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIG5vZGUuYWRkKG5ldyBTb3VyY2VOb2RlKG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBpbmcubmFtZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhpcyBzb3VyY2Ugbm9kZS5cbiAqXG4gKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2FkZChhQ2h1bmspIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYUNodW5rKSkge1xuICAgIGFDaHVuay5mb3JFYWNoKGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgdGhpcy5hZGQoY2h1bmspO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIGVsc2UgaWYgKGFDaHVua1tpc1NvdXJjZU5vZGVdIHx8IHR5cGVvZiBhQ2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoYUNodW5rKSB7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goYUNodW5rKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGlzIHNvdXJjZSBub2RlLlxuICpcbiAqIEBwYXJhbSBhQ2h1bmsgQSBzdHJpbmcgc25pcHBldCBvZiBnZW5lcmF0ZWQgSlMgY29kZSwgYW5vdGhlciBpbnN0YW5jZSBvZlxuICogICAgICAgIFNvdXJjZU5vZGUsIG9yIGFuIGFycmF5IHdoZXJlIGVhY2ggbWVtYmVyIGlzIG9uZSBvZiB0aG9zZSB0aGluZ3MuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3ByZXBlbmQoYUNodW5rKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICBmb3IgKHZhciBpID0gYUNodW5rLmxlbmd0aC0xOyBpID49IDA7IGktLSkge1xuICAgICAgdGhpcy5wcmVwZW5kKGFDaHVua1tpXSk7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGFDaHVua1tpc1NvdXJjZU5vZGVdIHx8IHR5cGVvZiBhQ2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICB0aGlzLmNoaWxkcmVuLnVuc2hpZnQoYUNodW5rKTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgXCJFeHBlY3RlZCBhIFNvdXJjZU5vZGUsIHN0cmluZywgb3IgYW4gYXJyYXkgb2YgU291cmNlTm9kZXMgYW5kIHN0cmluZ3MuIEdvdCBcIiArIGFDaHVua1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFdhbGsgb3ZlciB0aGUgdHJlZSBvZiBKUyBzbmlwcGV0cyBpbiB0aGlzIG5vZGUgYW5kIGl0cyBjaGlsZHJlbi4gVGhlXG4gKiB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGZvciBlYWNoIHNuaXBwZXQgb2YgSlMgYW5kIGlzIHBhc3NlZCB0aGF0XG4gKiBzbmlwcGV0IGFuZCB0aGUgaXRzIG9yaWdpbmFsIGFzc29jaWF0ZWQgc291cmNlJ3MgbGluZS9jb2x1bW4gbG9jYXRpb24uXG4gKlxuICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gU291cmNlTm9kZV93YWxrKGFGbikge1xuICB2YXIgY2h1bms7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY2h1bmsgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgIGlmIChjaHVua1tpc1NvdXJjZU5vZGVdKSB7XG4gICAgICBjaHVuay53YWxrKGFGbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKGNodW5rICE9PSAnJykge1xuICAgICAgICBhRm4oY2h1bmssIHsgc291cmNlOiB0aGlzLnNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZSxcbiAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIExpa2UgYFN0cmluZy5wcm90b3R5cGUuam9pbmAgZXhjZXB0IGZvciBTb3VyY2VOb2Rlcy4gSW5zZXJ0cyBgYVN0cmAgYmV0d2VlblxuICogZWFjaCBvZiBgdGhpcy5jaGlsZHJlbmAuXG4gKlxuICogQHBhcmFtIGFTZXAgVGhlIHNlcGFyYXRvci5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfam9pbihhU2VwKSB7XG4gIHZhciBuZXdDaGlsZHJlbjtcbiAgdmFyIGk7XG4gIHZhciBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKGxlbiA+IDApIHtcbiAgICBuZXdDaGlsZHJlbiA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW4tMTsgaSsrKSB7XG4gICAgICBuZXdDaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xuICAgICAgbmV3Q2hpbGRyZW4ucHVzaChhU2VwKTtcbiAgICB9XG4gICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICB0aGlzLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlIG9uIHRoZSB2ZXJ5IHJpZ2h0LW1vc3Qgc291cmNlIHNuaXBwZXQuIFVzZWZ1bFxuICogZm9yIHRyaW1taW5nIHdoaXRlc3BhY2UgZnJvbSB0aGUgZW5kIG9mIGEgc291cmNlIG5vZGUsIGV0Yy5cbiAqXG4gKiBAcGFyYW0gYVBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAqIEBwYXJhbSBhUmVwbGFjZW1lbnQgVGhlIHRoaW5nIHRvIHJlcGxhY2UgdGhlIHBhdHRlcm4gd2l0aC5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUucmVwbGFjZVJpZ2h0ID0gZnVuY3Rpb24gU291cmNlTm9kZV9yZXBsYWNlUmlnaHQoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCkge1xuICB2YXIgbGFzdENoaWxkID0gdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICBpZiAobGFzdENoaWxkW2lzU291cmNlTm9kZV0pIHtcbiAgICBsYXN0Q2hpbGQucmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBsYXN0Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdID0gbGFzdENoaWxkLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5jaGlsZHJlbi5wdXNoKCcnLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCkpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLiBUaGlzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvclxuICogaW4gdGhlIHNvdXJjZXNDb250ZW50IGZpZWxkLlxuICpcbiAqIEBwYXJhbSBhU291cmNlRmlsZSBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlXG4gKiBAcGFyYW0gYVNvdXJjZUNvbnRlbnQgVGhlIGNvbnRlbnQgb2YgdGhlIHNvdXJjZSBmaWxlXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnNldFNvdXJjZUNvbnRlbnQgPVxuICBmdW5jdGlvbiBTb3VyY2VOb2RlX3NldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgdGhpcy5zb3VyY2VDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKGFTb3VyY2VGaWxlKV0gPSBhU291cmNlQ29udGVudDtcbiAgfTtcblxuLyoqXG4gKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgU291cmNlTm9kZXMuIFRoZSB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaFxuICogc291cmNlIGZpbGUgY29udGVudCBhbmQgaXMgcGFzc2VkIHRoZSBmaWxlbmFtZSBhbmQgc291cmNlIGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS53YWxrU291cmNlQ29udGVudHMgPVxuICBmdW5jdGlvbiBTb3VyY2VOb2RlX3dhbGtTb3VyY2VDb250ZW50cyhhRm4pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKHRoaXMuY2hpbGRyZW5baV1baXNTb3VyY2VOb2RlXSkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLndhbGtTb3VyY2VDb250ZW50cyhhRm4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzb3VyY2VzID0gT2JqZWN0LmtleXModGhpcy5zb3VyY2VDb250ZW50cyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFGbih1dGlsLmZyb21TZXRTdHJpbmcoc291cmNlc1tpXSksIHRoaXMuc291cmNlQ29udGVudHNbc291cmNlc1tpXV0pO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlLiBXYWxrcyBvdmVyIHRoZSB0cmVlXG4gKiBhbmQgY29uY2F0ZW5hdGVzIGFsbCB0aGUgdmFyaW91cyBzbmlwcGV0cyB0b2dldGhlciB0byBvbmUgc3RyaW5nLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfdG9TdHJpbmcoKSB7XG4gIHZhciBzdHIgPSBcIlwiO1xuICB0aGlzLndhbGsoZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgc3RyICs9IGNodW5rO1xuICB9KTtcbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc291cmNlIG5vZGUgYWxvbmcgd2l0aCBhIHNvdXJjZVxuICogbWFwLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS50b1N0cmluZ1dpdGhTb3VyY2VNYXAgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nV2l0aFNvdXJjZU1hcChhQXJncykge1xuICB2YXIgZ2VuZXJhdGVkID0ge1xuICAgIGNvZGU6IFwiXCIsXG4gICAgbGluZTogMSxcbiAgICBjb2x1bW46IDBcbiAgfTtcbiAgdmFyIG1hcCA9IG5ldyBTb3VyY2VNYXBHZW5lcmF0b3IoYUFyZ3MpO1xuICB2YXIgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICB2YXIgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbExpbmUgPSBudWxsO1xuICB2YXIgbGFzdE9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbE5hbWUgPSBudWxsO1xuICB0aGlzLndhbGsoZnVuY3Rpb24gKGNodW5rLCBvcmlnaW5hbCkge1xuICAgIGdlbmVyYXRlZC5jb2RlICs9IGNodW5rO1xuICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT09IG51bGxcbiAgICAgICAgJiYgb3JpZ2luYWwubGluZSAhPT0gbnVsbFxuICAgICAgICAmJiBvcmlnaW5hbC5jb2x1bW4gIT09IG51bGwpIHtcbiAgICAgIGlmKGxhc3RPcmlnaW5hbFNvdXJjZSAhPT0gb3JpZ2luYWwuc291cmNlXG4gICAgICAgICB8fCBsYXN0T3JpZ2luYWxMaW5lICE9PSBvcmlnaW5hbC5saW5lXG4gICAgICAgICB8fCBsYXN0T3JpZ2luYWxDb2x1bW4gIT09IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTmFtZSAhPT0gb3JpZ2luYWwubmFtZSkge1xuICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgIGxpbmU6IG9yaWdpbmFsLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgIGxhc3RPcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgbGFzdE9yaWdpbmFsQ29sdW1uID0gb3JpZ2luYWwuY29sdW1uO1xuICAgICAgbGFzdE9yaWdpbmFsTmFtZSA9IG9yaWdpbmFsLm5hbWU7XG4gICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcHBpbmdBY3RpdmUpIHtcbiAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuZ3RoID0gY2h1bmsubGVuZ3RoOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICBpZiAoY2h1bmsuY2hhckNvZGVBdChpZHgpID09PSBORVdMSU5FX0NPREUpIHtcbiAgICAgICAgZ2VuZXJhdGVkLmxpbmUrKztcbiAgICAgICAgZ2VuZXJhdGVkLmNvbHVtbiA9IDA7XG4gICAgICAgIC8vIE1hcHBpbmdzIGVuZCBhdCBlb2xcbiAgICAgICAgaWYgKGlkeCArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcHBpbmdBY3RpdmUpIHtcbiAgICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICBzb3VyY2U6IG9yaWdpbmFsLnNvdXJjZSxcbiAgICAgICAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgICAgICAgIGxpbmU6IG9yaWdpbmFsLmxpbmUsXG4gICAgICAgICAgICAgIGNvbHVtbjogb3JpZ2luYWwuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuYW1lOiBvcmlnaW5hbC5uYW1lXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlbmVyYXRlZC5jb2x1bW4rKztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB0aGlzLndhbGtTb3VyY2VDb250ZW50cyhmdW5jdGlvbiAoc291cmNlRmlsZSwgc291cmNlQ29udGVudCkge1xuICAgIG1hcC5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpO1xuICB9KTtcblxuICByZXR1cm4geyBjb2RlOiBnZW5lcmF0ZWQuY29kZSwgbWFwOiBtYXAgfTtcbn07XG5cbmV4cG9ydHMuU291cmNlTm9kZSA9IFNvdXJjZU5vZGU7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8qKlxuICogVGhpcyBpcyBhIGhlbHBlciBmdW5jdGlvbiBmb3IgZ2V0dGluZyB2YWx1ZXMgZnJvbSBwYXJhbWV0ZXIvb3B0aW9uc1xuICogb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gYXJncyBUaGUgb2JqZWN0IHdlIGFyZSBleHRyYWN0aW5nIHZhbHVlcyBmcm9tXG4gKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2UgYXJlIGdldHRpbmcuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIEFuIG9wdGlvbmFsIHZhbHVlIHRvIHJldHVybiBpZiB0aGUgcHJvcGVydHkgaXMgbWlzc2luZ1xuICogZnJvbSB0aGUgb2JqZWN0LiBJZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQgYW5kIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nLCBhblxuICogZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gKi9cbmZ1bmN0aW9uIGdldEFyZyhhQXJncywgYU5hbWUsIGFEZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGFOYW1lIGluIGFBcmdzKSB7XG4gICAgcmV0dXJuIGFBcmdzW2FOYW1lXTtcbiAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgcmV0dXJuIGFEZWZhdWx0VmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhTmFtZSArICdcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LicpO1xuICB9XG59XG5leHBvcnRzLmdldEFyZyA9IGdldEFyZztcblxudmFyIHVybFJlZ2V4cCA9IC9eKD86KFtcXHcrXFwtLl0rKTopP1xcL1xcLyg/OihcXHcrOlxcdyspQCk/KFtcXHcuLV0qKSg/OjooXFxkKykpPyguKikkLztcbnZhciBkYXRhVXJsUmVnZXhwID0gL15kYXRhOi4rXFwsLiskLztcblxuZnVuY3Rpb24gdXJsUGFyc2UoYVVybCkge1xuICB2YXIgbWF0Y2ggPSBhVXJsLm1hdGNoKHVybFJlZ2V4cCk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHNjaGVtZTogbWF0Y2hbMV0sXG4gICAgYXV0aDogbWF0Y2hbMl0sXG4gICAgaG9zdDogbWF0Y2hbM10sXG4gICAgcG9ydDogbWF0Y2hbNF0sXG4gICAgcGF0aDogbWF0Y2hbNV1cbiAgfTtcbn1cbmV4cG9ydHMudXJsUGFyc2UgPSB1cmxQYXJzZTtcblxuZnVuY3Rpb24gdXJsR2VuZXJhdGUoYVBhcnNlZFVybCkge1xuICB2YXIgdXJsID0gJyc7XG4gIGlmIChhUGFyc2VkVXJsLnNjaGVtZSkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLnNjaGVtZSArICc6JztcbiAgfVxuICB1cmwgKz0gJy8vJztcbiAgaWYgKGFQYXJzZWRVcmwuYXV0aCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLmF1dGggKyAnQCc7XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwuaG9zdCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLmhvc3Q7XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwucG9ydCkge1xuICAgIHVybCArPSBcIjpcIiArIGFQYXJzZWRVcmwucG9ydFxuICB9XG4gIGlmIChhUGFyc2VkVXJsLnBhdGgpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5wYXRoO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5leHBvcnRzLnVybEdlbmVyYXRlID0gdXJsR2VuZXJhdGU7XG5cbi8qKlxuICogTm9ybWFsaXplcyBhIHBhdGgsIG9yIHRoZSBwYXRoIHBvcnRpb24gb2YgYSBVUkw6XG4gKlxuICogLSBSZXBsYWNlcyBjb25zZWN1dGl2ZSBzbGFzaGVzIHdpdGggb25lIHNsYXNoLlxuICogLSBSZW1vdmVzIHVubmVjZXNzYXJ5ICcuJyBwYXJ0cy5cbiAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnPGRpcj4vLi4nIHBhcnRzLlxuICpcbiAqIEJhc2VkIG9uIGNvZGUgaW4gdGhlIE5vZGUuanMgJ3BhdGgnIGNvcmUgbW9kdWxlLlxuICpcbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciB1cmwgdG8gbm9ybWFsaXplLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemUoYVBhdGgpIHtcbiAgdmFyIHBhdGggPSBhUGF0aDtcbiAgdmFyIHVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgaWYgKHVybCkge1xuICAgIGlmICghdXJsLnBhdGgpIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG4gICAgcGF0aCA9IHVybC5wYXRoO1xuICB9XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpO1xuXG4gIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoL1xcLysvKTtcbiAgZm9yICh2YXIgcGFydCwgdXAgPSAwLCBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBwYXJ0ID0gcGFydHNbaV07XG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwID4gMCkge1xuICAgICAgaWYgKHBhcnQgPT09ICcnKSB7XG4gICAgICAgIC8vIFRoZSBmaXJzdCBwYXJ0IGlzIGJsYW5rIGlmIHRoZSBwYXRoIGlzIGFic29sdXRlLiBUcnlpbmcgdG8gZ29cbiAgICAgICAgLy8gYWJvdmUgdGhlIHJvb3QgaXMgYSBuby1vcC4gVGhlcmVmb3JlIHdlIGNhbiByZW1vdmUgYWxsICcuLicgcGFydHNcbiAgICAgICAgLy8gZGlyZWN0bHkgYWZ0ZXIgdGhlIHJvb3QuXG4gICAgICAgIHBhcnRzLnNwbGljZShpICsgMSwgdXApO1xuICAgICAgICB1cCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMik7XG4gICAgICAgIHVwLS07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHBhdGggPSBwYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKHBhdGggPT09ICcnKSB7XG4gICAgcGF0aCA9IGlzQWJzb2x1dGUgPyAnLycgOiAnLic7XG4gIH1cblxuICBpZiAodXJsKSB7XG4gICAgdXJsLnBhdGggPSBwYXRoO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZSh1cmwpO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG5cbi8qKlxuICogSm9pbnMgdHdvIHBhdGhzL1VSTHMuXG4gKlxuICogQHBhcmFtIGFSb290IFRoZSByb290IHBhdGggb3IgVVJMLlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIFVSTCB0byBiZSBqb2luZWQgd2l0aCB0aGUgcm9vdC5cbiAqXG4gKiAtIElmIGFQYXRoIGlzIGEgVVJMIG9yIGEgZGF0YSBVUkksIGFQYXRoIGlzIHJldHVybmVkLCB1bmxlc3MgYVBhdGggaXMgYVxuICogICBzY2hlbWUtcmVsYXRpdmUgVVJMOiBUaGVuIHRoZSBzY2hlbWUgb2YgYVJvb3QsIGlmIGFueSwgaXMgcHJlcGVuZGVkXG4gKiAgIGZpcnN0LlxuICogLSBPdGhlcndpc2UgYVBhdGggaXMgYSBwYXRoLiBJZiBhUm9vdCBpcyBhIFVSTCwgdGhlbiBpdHMgcGF0aCBwb3J0aW9uXG4gKiAgIGlzIHVwZGF0ZWQgd2l0aCB0aGUgcmVzdWx0IGFuZCBhUm9vdCBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlIHRoZSByZXN1bHRcbiAqICAgaXMgcmV0dXJuZWQuXG4gKiAgIC0gSWYgYVBhdGggaXMgYWJzb2x1dGUsIHRoZSByZXN1bHQgaXMgYVBhdGguXG4gKiAgIC0gT3RoZXJ3aXNlIHRoZSB0d28gcGF0aHMgYXJlIGpvaW5lZCB3aXRoIGEgc2xhc2guXG4gKiAtIEpvaW5pbmcgZm9yIGV4YW1wbGUgJ2h0dHA6Ly8nIGFuZCAnd3d3LmV4YW1wbGUuY29tJyBpcyBhbHNvIHN1cHBvcnRlZC5cbiAqL1xuZnVuY3Rpb24gam9pbihhUm9vdCwgYVBhdGgpIHtcbiAgaWYgKGFSb290ID09PSBcIlwiKSB7XG4gICAgYVJvb3QgPSBcIi5cIjtcbiAgfVxuICBpZiAoYVBhdGggPT09IFwiXCIpIHtcbiAgICBhUGF0aCA9IFwiLlwiO1xuICB9XG4gIHZhciBhUGF0aFVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgdmFyIGFSb290VXJsID0gdXJsUGFyc2UoYVJvb3QpO1xuICBpZiAoYVJvb3RVcmwpIHtcbiAgICBhUm9vdCA9IGFSb290VXJsLnBhdGggfHwgJy8nO1xuICB9XG5cbiAgLy8gYGpvaW4oZm9vLCAnLy93d3cuZXhhbXBsZS5vcmcnKWBcbiAgaWYgKGFQYXRoVXJsICYmICFhUGF0aFVybC5zY2hlbWUpIHtcbiAgICBpZiAoYVJvb3RVcmwpIHtcbiAgICAgIGFQYXRoVXJsLnNjaGVtZSA9IGFSb290VXJsLnNjaGVtZTtcbiAgICB9XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFQYXRoVXJsKTtcbiAgfVxuXG4gIGlmIChhUGF0aFVybCB8fCBhUGF0aC5tYXRjaChkYXRhVXJsUmVnZXhwKSkge1xuICAgIHJldHVybiBhUGF0aDtcbiAgfVxuXG4gIC8vIGBqb2luKCdodHRwOi8vJywgJ3d3dy5leGFtcGxlLmNvbScpYFxuICBpZiAoYVJvb3RVcmwgJiYgIWFSb290VXJsLmhvc3QgJiYgIWFSb290VXJsLnBhdGgpIHtcbiAgICBhUm9vdFVybC5ob3N0ID0gYVBhdGg7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFSb290VXJsKTtcbiAgfVxuXG4gIHZhciBqb2luZWQgPSBhUGF0aC5jaGFyQXQoMCkgPT09ICcvJ1xuICAgID8gYVBhdGhcbiAgICA6IG5vcm1hbGl6ZShhUm9vdC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIGFQYXRoKTtcblxuICBpZiAoYVJvb3RVcmwpIHtcbiAgICBhUm9vdFVybC5wYXRoID0gam9pbmVkO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cbiAgcmV0dXJuIGpvaW5lZDtcbn1cbmV4cG9ydHMuam9pbiA9IGpvaW47XG5cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uIChhUGF0aCkge1xuICByZXR1cm4gYVBhdGguY2hhckF0KDApID09PSAnLycgfHwgdXJsUmVnZXhwLnRlc3QoYVBhdGgpO1xufTtcblxuLyoqXG4gKiBNYWtlIGEgcGF0aCByZWxhdGl2ZSB0byBhIFVSTCBvciBhbm90aGVyIHBhdGguXG4gKlxuICogQHBhcmFtIGFSb290IFRoZSByb290IHBhdGggb3IgVVJMLlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIFVSTCB0byBiZSBtYWRlIHJlbGF0aXZlIHRvIGFSb290LlxuICovXG5mdW5jdGlvbiByZWxhdGl2ZShhUm9vdCwgYVBhdGgpIHtcbiAgaWYgKGFSb290ID09PSBcIlwiKSB7XG4gICAgYVJvb3QgPSBcIi5cIjtcbiAgfVxuXG4gIGFSb290ID0gYVJvb3QucmVwbGFjZSgvXFwvJC8sICcnKTtcblxuICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgdGhlIHBhdGggdG8gYmUgYWJvdmUgdGhlIHJvb3QuIEluIHRoaXMgY2FzZSwgc2ltcGx5XG4gIC8vIGNoZWNraW5nIHdoZXRoZXIgdGhlIHJvb3QgaXMgYSBwcmVmaXggb2YgdGhlIHBhdGggd29uJ3Qgd29yay4gSW5zdGVhZCwgd2VcbiAgLy8gbmVlZCB0byByZW1vdmUgY29tcG9uZW50cyBmcm9tIHRoZSByb290IG9uZSBieSBvbmUsIHVudGlsIGVpdGhlciB3ZSBmaW5kXG4gIC8vIGEgcHJlZml4IHRoYXQgZml0cywgb3Igd2UgcnVuIG91dCBvZiBjb21wb25lbnRzIHRvIHJlbW92ZS5cbiAgdmFyIGxldmVsID0gMDtcbiAgd2hpbGUgKGFQYXRoLmluZGV4T2YoYVJvb3QgKyAnLycpICE9PSAwKSB7XG4gICAgdmFyIGluZGV4ID0gYVJvb3QubGFzdEluZGV4T2YoXCIvXCIpO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgb25seSBwYXJ0IG9mIHRoZSByb290IHRoYXQgaXMgbGVmdCBpcyB0aGUgc2NoZW1lIChpLmUuIGh0dHA6Ly8sXG4gICAgLy8gZmlsZTovLy8sIGV0Yy4pLCBvbmUgb3IgbW9yZSBzbGFzaGVzICgvKSwgb3Igc2ltcGx5IG5vdGhpbmcgYXQgYWxsLCB3ZVxuICAgIC8vIGhhdmUgZXhoYXVzdGVkIGFsbCBjb21wb25lbnRzLCBzbyB0aGUgcGF0aCBpcyBub3QgcmVsYXRpdmUgdG8gdGhlIHJvb3QuXG4gICAgYVJvb3QgPSBhUm9vdC5zbGljZSgwLCBpbmRleCk7XG4gICAgaWYgKGFSb290Lm1hdGNoKC9eKFteXFwvXSs6XFwvKT9cXC8qJC8pKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgKytsZXZlbDtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB3ZSBhZGQgYSBcIi4uL1wiIGZvciBlYWNoIGNvbXBvbmVudCB3ZSByZW1vdmVkIGZyb20gdGhlIHJvb3QuXG4gIHJldHVybiBBcnJheShsZXZlbCArIDEpLmpvaW4oXCIuLi9cIikgKyBhUGF0aC5zdWJzdHIoYVJvb3QubGVuZ3RoICsgMSk7XG59XG5leHBvcnRzLnJlbGF0aXZlID0gcmVsYXRpdmU7XG5cbnZhciBzdXBwb3J0c051bGxQcm90byA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gISgnX19wcm90b19fJyBpbiBvYmopO1xufSgpKTtcblxuZnVuY3Rpb24gaWRlbnRpdHkgKHMpIHtcbiAgcmV0dXJuIHM7XG59XG5cbi8qKlxuICogQmVjYXVzZSBiZWhhdmlvciBnb2VzIHdhY2t5IHdoZW4geW91IHNldCBgX19wcm90b19fYCBvbiBvYmplY3RzLCB3ZVxuICogaGF2ZSB0byBwcmVmaXggYWxsIHRoZSBzdHJpbmdzIGluIG91ciBzZXQgd2l0aCBhbiBhcmJpdHJhcnkgY2hhcmFjdGVyLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL3B1bGwvMzEgYW5kXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2lzc3Vlcy8zMFxuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5mdW5jdGlvbiB0b1NldFN0cmluZyhhU3RyKSB7XG4gIGlmIChpc1Byb3RvU3RyaW5nKGFTdHIpKSB7XG4gICAgcmV0dXJuICckJyArIGFTdHI7XG4gIH1cblxuICByZXR1cm4gYVN0cjtcbn1cbmV4cG9ydHMudG9TZXRTdHJpbmcgPSBzdXBwb3J0c051bGxQcm90byA/IGlkZW50aXR5IDogdG9TZXRTdHJpbmc7XG5cbmZ1bmN0aW9uIGZyb21TZXRTdHJpbmcoYVN0cikge1xuICBpZiAoaXNQcm90b1N0cmluZyhhU3RyKSkge1xuICAgIHJldHVybiBhU3RyLnNsaWNlKDEpO1xuICB9XG5cbiAgcmV0dXJuIGFTdHI7XG59XG5leHBvcnRzLmZyb21TZXRTdHJpbmcgPSBzdXBwb3J0c051bGxQcm90byA/IGlkZW50aXR5IDogZnJvbVNldFN0cmluZztcblxuZnVuY3Rpb24gaXNQcm90b1N0cmluZyhzKSB7XG4gIGlmICghcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBzLmxlbmd0aDtcblxuICBpZiAobGVuZ3RoIDwgOSAvKiBcIl9fcHJvdG9fX1wiLmxlbmd0aCAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMSkgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSAyKSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDMpICE9PSAxMTEgLyogJ28nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNCkgIT09IDExNiAvKiAndCcgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA1KSAhPT0gMTExIC8qICdvJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDYpICE9PSAxMTQgLyogJ3InICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNykgIT09IDExMiAvKiAncCcgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA4KSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDkpICE9PSA5NSAgLyogJ18nICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IGxlbmd0aCAtIDEwOyBpID49IDA7IGktLSkge1xuICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgIT09IDM2IC8qICckJyAqLykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2hlcmUgdGhlIG9yaWdpbmFsIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKlxuICogT3B0aW9uYWxseSBwYXNzIGluIGB0cnVlYCBhcyBgb25seUNvbXBhcmVHZW5lcmF0ZWRgIHRvIGNvbnNpZGVyIHR3b1xuICogbWFwcGluZ3Mgd2l0aCB0aGUgc2FtZSBvcmlnaW5hbCBzb3VyY2UvbGluZS9jb2x1bW4sIGJ1dCBkaWZmZXJlbnQgZ2VuZXJhdGVkXG4gKiBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYSBtYXBwaW5nIHdpdGggYVxuICogc3R1YmJlZCBvdXQgbWFwcGluZy5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMobWFwcGluZ0EsIG1hcHBpbmdCLCBvbmx5Q29tcGFyZU9yaWdpbmFsKSB7XG4gIHZhciBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlT3JpZ2luYWwpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zID0gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnM7XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aXRoIGRlZmxhdGVkIHNvdXJjZSBhbmQgbmFtZSBpbmRpY2VzIHdoZXJlXG4gKiB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKlxuICogT3B0aW9uYWxseSBwYXNzIGluIGB0cnVlYCBhcyBgb25seUNvbXBhcmVHZW5lcmF0ZWRgIHRvIGNvbnNpZGVyIHR3b1xuICogbWFwcGluZ3Mgd2l0aCB0aGUgc2FtZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uLCBidXQgZGlmZmVyZW50XG4gKiBzb3VyY2UvbmFtZS9vcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYVxuICogbWFwcGluZyB3aXRoIGEgc3R1YmJlZCBvdXQgbWFwcGluZy5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCLCBvbmx5Q29tcGFyZUdlbmVyYXRlZCkge1xuICB2YXIgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZDtcblxuZnVuY3Rpb24gc3RyY21wKGFTdHIxLCBhU3RyMikge1xuICBpZiAoYVN0cjEgPT09IGFTdHIyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoYVN0cjEgPT09IG51bGwpIHtcbiAgICByZXR1cm4gMTsgLy8gYVN0cjIgIT09IG51bGxcbiAgfVxuXG4gIGlmIChhU3RyMiA9PT0gbnVsbCkge1xuICAgIHJldHVybiAtMTsgLy8gYVN0cjEgIT09IG51bGxcbiAgfVxuXG4gIGlmIChhU3RyMSA+IGFTdHIyKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aXRoIGluZmxhdGVkIHNvdXJjZSBhbmQgbmFtZSBzdHJpbmdzIHdoZXJlXG4gKiB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQikge1xuICB2YXIgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZDtcblxuLyoqXG4gKiBTdHJpcCBhbnkgSlNPTiBYU1NJIGF2b2lkYW5jZSBwcmVmaXggZnJvbSB0aGUgc3RyaW5nIChhcyBkb2N1bWVudGVkXG4gKiBpbiB0aGUgc291cmNlIG1hcHMgc3BlY2lmaWNhdGlvbiksIGFuZCB0aGVuIHBhcnNlIHRoZSBzdHJpbmcgYXNcbiAqIEpTT04uXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU291cmNlTWFwSW5wdXQoc3RyKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKHN0ci5yZXBsYWNlKC9eXFwpXX0nW15cXG5dKlxcbi8sICcnKSk7XG59XG5leHBvcnRzLnBhcnNlU291cmNlTWFwSW5wdXQgPSBwYXJzZVNvdXJjZU1hcElucHV0O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIFVSTCBvZiBhIHNvdXJjZSBnaXZlbiB0aGUgdGhlIHNvdXJjZSByb290LCB0aGUgc291cmNlJ3NcbiAqIFVSTCwgYW5kIHRoZSBzb3VyY2UgbWFwJ3MgVVJMLlxuICovXG5mdW5jdGlvbiBjb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHNvdXJjZVVSTCwgc291cmNlTWFwVVJMKSB7XG4gIHNvdXJjZVVSTCA9IHNvdXJjZVVSTCB8fCAnJztcblxuICBpZiAoc291cmNlUm9vdCkge1xuICAgIC8vIFRoaXMgZm9sbG93cyB3aGF0IENocm9tZSBkb2VzLlxuICAgIGlmIChzb3VyY2VSb290W3NvdXJjZVJvb3QubGVuZ3RoIC0gMV0gIT09ICcvJyAmJiBzb3VyY2VVUkxbMF0gIT09ICcvJykge1xuICAgICAgc291cmNlUm9vdCArPSAnLyc7XG4gICAgfVxuICAgIC8vIFRoZSBzcGVjIHNheXM6XG4gICAgLy8gICBMaW5lIDQ6IEFuIG9wdGlvbmFsIHNvdXJjZSByb290LCB1c2VmdWwgZm9yIHJlbG9jYXRpbmcgc291cmNlXG4gICAgLy8gICBmaWxlcyBvbiBhIHNlcnZlciBvciByZW1vdmluZyByZXBlYXRlZCB2YWx1ZXMgaW4gdGhlXG4gICAgLy8gICDigJxzb3VyY2Vz4oCdIGVudHJ5LiAgVGhpcyB2YWx1ZSBpcyBwcmVwZW5kZWQgdG8gdGhlIGluZGl2aWR1YWxcbiAgICAvLyAgIGVudHJpZXMgaW4gdGhlIOKAnHNvdXJjZeKAnSBmaWVsZC5cbiAgICBzb3VyY2VVUkwgPSBzb3VyY2VSb290ICsgc291cmNlVVJMO1xuICB9XG5cbiAgLy8gSGlzdG9yaWNhbGx5LCBTb3VyY2VNYXBDb25zdW1lciBkaWQgbm90IHRha2UgdGhlIHNvdXJjZU1hcFVSTCBhc1xuICAvLyBhIHBhcmFtZXRlci4gIFRoaXMgbW9kZSBpcyBzdGlsbCBzb21ld2hhdCBzdXBwb3J0ZWQsIHdoaWNoIGlzIHdoeVxuICAvLyB0aGlzIGNvZGUgYmxvY2sgaXMgY29uZGl0aW9uYWwuICBIb3dldmVyLCBpdCdzIHByZWZlcmFibGUgdG8gcGFzc1xuICAvLyB0aGUgc291cmNlIG1hcCBVUkwgdG8gU291cmNlTWFwQ29uc3VtZXIsIHNvIHRoYXQgdGhpcyBmdW5jdGlvblxuICAvLyBjYW4gaW1wbGVtZW50IHRoZSBzb3VyY2UgVVJMIHJlc29sdXRpb24gYWxnb3JpdGhtIGFzIG91dGxpbmVkIGluXG4gIC8vIHRoZSBzcGVjLiAgVGhpcyBibG9jayBpcyBiYXNpY2FsbHkgdGhlIGVxdWl2YWxlbnQgb2Y6XG4gIC8vICAgIG5ldyBVUkwoc291cmNlVVJMLCBzb3VyY2VNYXBVUkwpLnRvU3RyaW5nKClcbiAgLy8gLi4uIGV4Y2VwdCBpdCBhdm9pZHMgdXNpbmcgVVJMLCB3aGljaCB3YXNuJ3QgYXZhaWxhYmxlIGluIHRoZVxuICAvLyBvbGRlciByZWxlYXNlcyBvZiBub2RlIHN0aWxsIHN1cHBvcnRlZCBieSB0aGlzIGxpYnJhcnkuXG4gIC8vXG4gIC8vIFRoZSBzcGVjIHNheXM6XG4gIC8vICAgSWYgdGhlIHNvdXJjZXMgYXJlIG5vdCBhYnNvbHV0ZSBVUkxzIGFmdGVyIHByZXBlbmRpbmcgb2YgdGhlXG4gIC8vICAg4oCcc291cmNlUm9vdOKAnSwgdGhlIHNvdXJjZXMgYXJlIHJlc29sdmVkIHJlbGF0aXZlIHRvIHRoZVxuICAvLyAgIFNvdXJjZU1hcCAobGlrZSByZXNvbHZpbmcgc2NyaXB0IHNyYyBpbiBhIGh0bWwgZG9jdW1lbnQpLlxuICBpZiAoc291cmNlTWFwVVJMKSB7XG4gICAgdmFyIHBhcnNlZCA9IHVybFBhcnNlKHNvdXJjZU1hcFVSTCk7XG4gICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInNvdXJjZU1hcFVSTCBjb3VsZCBub3QgYmUgcGFyc2VkXCIpO1xuICAgIH1cbiAgICBpZiAocGFyc2VkLnBhdGgpIHtcbiAgICAgIC8vIFN0cmlwIHRoZSBsYXN0IHBhdGggY29tcG9uZW50LCBidXQga2VlcCB0aGUgXCIvXCIuXG4gICAgICB2YXIgaW5kZXggPSBwYXJzZWQucGF0aC5sYXN0SW5kZXhPZignLycpO1xuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgcGFyc2VkLnBhdGggPSBwYXJzZWQucGF0aC5zdWJzdHJpbmcoMCwgaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlVVJMID0gam9pbih1cmxHZW5lcmF0ZShwYXJzZWQpLCBzb3VyY2VVUkwpO1xuICB9XG5cbiAgcmV0dXJuIG5vcm1hbGl6ZShzb3VyY2VVUkwpO1xufVxuZXhwb3J0cy5jb21wdXRlU291cmNlVVJMID0gY29tcHV0ZVNvdXJjZVVSTDtcbiIsInZhciBTb3VyY2VNYXBDb25zdW1lciA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAnKS5Tb3VyY2VNYXBDb25zdW1lcjtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG52YXIgZnM7XG50cnkge1xuICBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIGlmICghZnMuZXhpc3RzU3luYyB8fCAhZnMucmVhZEZpbGVTeW5jKSB7XG4gICAgLy8gZnMgZG9lc24ndCBoYXZlIGFsbCBtZXRob2RzIHdlIG5lZWRcbiAgICBmcyA9IG51bGw7XG4gIH1cbn0gY2F0Y2ggKGVycikge1xuICAvKiBub3AgKi9cbn1cblxudmFyIGJ1ZmZlckZyb20gPSByZXF1aXJlKCdidWZmZXItZnJvbScpO1xuXG4vLyBPbmx5IGluc3RhbGwgb25jZSBpZiBjYWxsZWQgbXVsdGlwbGUgdGltZXNcbnZhciBlcnJvckZvcm1hdHRlckluc3RhbGxlZCA9IGZhbHNlO1xudmFyIHVuY2F1Z2h0U2hpbUluc3RhbGxlZCA9IGZhbHNlO1xuXG4vLyBJZiB0cnVlLCB0aGUgY2FjaGVzIGFyZSByZXNldCBiZWZvcmUgYSBzdGFjayB0cmFjZSBmb3JtYXR0aW5nIG9wZXJhdGlvblxudmFyIGVtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucyA9IGZhbHNlO1xuXG4vLyBTdXBwb3J0cyB7YnJvd3Nlciwgbm9kZSwgYXV0b31cbnZhciBlbnZpcm9ubWVudCA9IFwiYXV0b1wiO1xuXG4vLyBNYXBzIGEgZmlsZSBwYXRoIHRvIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGZpbGUgY29udGVudHNcbnZhciBmaWxlQ29udGVudHNDYWNoZSA9IHt9O1xuXG4vLyBNYXBzIGEgZmlsZSBwYXRoIHRvIGEgc291cmNlIG1hcCBmb3IgdGhhdCBmaWxlXG52YXIgc291cmNlTWFwQ2FjaGUgPSB7fTtcblxuLy8gUmVnZXggZm9yIGRldGVjdGluZyBzb3VyY2UgbWFwc1xudmFyIHJlU291cmNlTWFwID0gL15kYXRhOmFwcGxpY2F0aW9uXFwvanNvblteLF0rYmFzZTY0LC87XG5cbi8vIFByaW9yaXR5IGxpc3Qgb2YgcmV0cmlldmUgaGFuZGxlcnNcbnZhciByZXRyaWV2ZUZpbGVIYW5kbGVycyA9IFtdO1xudmFyIHJldHJpZXZlTWFwSGFuZGxlcnMgPSBbXTtcblxuZnVuY3Rpb24gaXNJbkJyb3dzZXIoKSB7XG4gIGlmIChlbnZpcm9ubWVudCA9PT0gXCJicm93c2VyXCIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmIChlbnZpcm9ubWVudCA9PT0gXCJub2RlXCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgJiYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJykgJiYgISh3aW5kb3cucmVxdWlyZSAmJiB3aW5kb3cubW9kdWxlICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09IFwicmVuZGVyZXJcIikpO1xufVxuXG5mdW5jdGlvbiBoYXNHbG9iYWxQcm9jZXNzRXZlbnRFbWl0dGVyKCkge1xuICByZXR1cm4gKCh0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcpICYmIChwcm9jZXNzICE9PSBudWxsKSAmJiAodHlwZW9mIHByb2Nlc3Mub24gPT09ICdmdW5jdGlvbicpKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlckV4ZWMobGlzdCkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcmV0ID0gbGlzdFtpXShhcmcpO1xuICAgICAgaWYgKHJldCkge1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxudmFyIHJldHJpZXZlRmlsZSA9IGhhbmRsZXJFeGVjKHJldHJpZXZlRmlsZUhhbmRsZXJzKTtcblxucmV0cmlldmVGaWxlSGFuZGxlcnMucHVzaChmdW5jdGlvbihwYXRoKSB7XG4gIC8vIFRyaW0gdGhlIHBhdGggdG8gbWFrZSBzdXJlIHRoZXJlIGlzIG5vIGV4dHJhIHdoaXRlc3BhY2UuXG4gIHBhdGggPSBwYXRoLnRyaW0oKTtcbiAgaWYgKC9eZmlsZTovLnRlc3QocGF0aCkpIHtcbiAgICAvLyBleGlzdHNTeW5jL3JlYWRGaWxlU3luYyBjYW4ndCBoYW5kbGUgZmlsZSBwcm90b2NvbCwgYnV0IG9uY2Ugc3RyaXBwZWQsIGl0IHdvcmtzXG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvZmlsZTpcXC9cXC9cXC8oXFx3Oik/LywgZnVuY3Rpb24ocHJvdG9jb2wsIGRyaXZlKSB7XG4gICAgICByZXR1cm4gZHJpdmUgP1xuICAgICAgICAnJyA6IC8vIGZpbGU6Ly8vQzovZGlyL2ZpbGUgLT4gQzovZGlyL2ZpbGVcbiAgICAgICAgJy8nOyAvLyBmaWxlOi8vL3Jvb3QtZGlyL2ZpbGUgLT4gL3Jvb3QtZGlyL2ZpbGVcbiAgICB9KTtcbiAgfVxuICBpZiAocGF0aCBpbiBmaWxlQ29udGVudHNDYWNoZSkge1xuICAgIHJldHVybiBmaWxlQ29udGVudHNDYWNoZVtwYXRoXTtcbiAgfVxuXG4gIHZhciBjb250ZW50cyA9IG51bGw7XG4gIGlmICghZnMpIHtcbiAgICAvLyBVc2UgU0pBWCBpZiB3ZSBhcmUgaW4gdGhlIGJyb3dzZXJcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4oJ0dFVCcsIHBhdGgsIGZhbHNlKTtcbiAgICB4aHIuc2VuZChudWxsKTtcbiAgICB2YXIgY29udGVudHMgPSBudWxsXG4gICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgY29udGVudHMgPSB4aHIucmVzcG9uc2VUZXh0XG4gICAgfVxuICB9IGVsc2UgaWYgKGZzLmV4aXN0c1N5bmMocGF0aCkpIHtcbiAgICAvLyBPdGhlcndpc2UsIHVzZSB0aGUgZmlsZXN5c3RlbVxuICAgIHRyeSB7XG4gICAgICBjb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLCAndXRmOCcpO1xuICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICBjb250ZW50cyA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWxlQ29udGVudHNDYWNoZVtwYXRoXSA9IGNvbnRlbnRzO1xufSk7XG5cbi8vIFN1cHBvcnQgVVJMcyByZWxhdGl2ZSB0byBhIGRpcmVjdG9yeSwgYnV0IGJlIGNhcmVmdWwgYWJvdXQgYSBwcm90b2NvbCBwcmVmaXhcbi8vIGluIGNhc2Ugd2UgYXJlIGluIHRoZSBicm93c2VyIChpLmUuIGRpcmVjdG9yaWVzIG1heSBzdGFydCB3aXRoIFwiaHR0cDovL1wiIG9yIFwiZmlsZTovLy9cIilcbmZ1bmN0aW9uIHN1cHBvcnRSZWxhdGl2ZVVSTChmaWxlLCB1cmwpIHtcbiAgaWYgKCFmaWxlKSByZXR1cm4gdXJsO1xuICB2YXIgZGlyID0gcGF0aC5kaXJuYW1lKGZpbGUpO1xuICB2YXIgbWF0Y2ggPSAvXlxcdys6XFwvXFwvW15cXC9dKi8uZXhlYyhkaXIpO1xuICB2YXIgcHJvdG9jb2wgPSBtYXRjaCA/IG1hdGNoWzBdIDogJyc7XG4gIHZhciBzdGFydFBhdGggPSBkaXIuc2xpY2UocHJvdG9jb2wubGVuZ3RoKTtcbiAgaWYgKHByb3RvY29sICYmIC9eXFwvXFx3XFw6Ly50ZXN0KHN0YXJ0UGF0aCkpIHtcbiAgICAvLyBoYW5kbGUgZmlsZTovLy9DOi8gcGF0aHNcbiAgICBwcm90b2NvbCArPSAnLyc7XG4gICAgcmV0dXJuIHByb3RvY29sICsgcGF0aC5yZXNvbHZlKGRpci5zbGljZShwcm90b2NvbC5sZW5ndGgpLCB1cmwpLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgfVxuICByZXR1cm4gcHJvdG9jb2wgKyBwYXRoLnJlc29sdmUoZGlyLnNsaWNlKHByb3RvY29sLmxlbmd0aCksIHVybCk7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlU291cmNlTWFwVVJMKHNvdXJjZSkge1xuICB2YXIgZmlsZURhdGE7XG5cbiAgaWYgKGlzSW5Ccm93c2VyKCkpIHtcbiAgICAgdHJ5IHtcbiAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgeGhyLm9wZW4oJ0dFVCcsIHNvdXJjZSwgZmFsc2UpO1xuICAgICAgIHhoci5zZW5kKG51bGwpO1xuICAgICAgIGZpbGVEYXRhID0geGhyLnJlYWR5U3RhdGUgPT09IDQgPyB4aHIucmVzcG9uc2VUZXh0IDogbnVsbDtcblxuICAgICAgIC8vIFN1cHBvcnQgcHJvdmlkaW5nIGEgc291cmNlTWFwcGluZ1VSTCB2aWEgdGhlIFNvdXJjZU1hcCBoZWFkZXJcbiAgICAgICB2YXIgc291cmNlTWFwSGVhZGVyID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiU291cmNlTWFwXCIpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5nZXRSZXNwb25zZUhlYWRlcihcIlgtU291cmNlTWFwXCIpO1xuICAgICAgIGlmIChzb3VyY2VNYXBIZWFkZXIpIHtcbiAgICAgICAgIHJldHVybiBzb3VyY2VNYXBIZWFkZXI7XG4gICAgICAgfVxuICAgICB9IGNhdGNoIChlKSB7XG4gICAgIH1cbiAgfVxuXG4gIC8vIEdldCB0aGUgVVJMIG9mIHRoZSBzb3VyY2UgbWFwXG4gIGZpbGVEYXRhID0gcmV0cmlldmVGaWxlKHNvdXJjZSk7XG4gIHZhciByZSA9IC8oPzpcXC9cXC9bQCNdWyBcXHRdK3NvdXJjZU1hcHBpbmdVUkw9KFteXFxzJ1wiXSs/KVsgXFx0XSokKXwoPzpcXC9cXCpbQCNdWyBcXHRdK3NvdXJjZU1hcHBpbmdVUkw9KFteXFwqXSs/KVsgXFx0XSooPzpcXCpcXC8pWyBcXHRdKiQpL21nO1xuICAvLyBLZWVwIGV4ZWN1dGluZyB0aGUgc2VhcmNoIHRvIGZpbmQgdGhlICpsYXN0KiBzb3VyY2VNYXBwaW5nVVJMIHRvIGF2b2lkXG4gIC8vIHBpY2tpbmcgdXAgc291cmNlTWFwcGluZ1VSTHMgZnJvbSBjb21tZW50cywgc3RyaW5ncywgZXRjLlxuICB2YXIgbGFzdE1hdGNoLCBtYXRjaDtcbiAgd2hpbGUgKG1hdGNoID0gcmUuZXhlYyhmaWxlRGF0YSkpIGxhc3RNYXRjaCA9IG1hdGNoO1xuICBpZiAoIWxhc3RNYXRjaCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBsYXN0TWF0Y2hbMV07XG59O1xuXG4vLyBDYW4gYmUgb3ZlcnJpZGRlbiBieSB0aGUgcmV0cmlldmVTb3VyY2VNYXAgb3B0aW9uIHRvIGluc3RhbGwuIFRha2VzIGFcbi8vIGdlbmVyYXRlZCBzb3VyY2UgZmlsZW5hbWU7IHJldHVybnMgYSB7bWFwLCBvcHRpb25hbCB1cmx9IG9iamVjdCwgb3IgbnVsbCBpZlxuLy8gdGhlcmUgaXMgbm8gc291cmNlIG1hcC4gIFRoZSBtYXAgZmllbGQgbWF5IGJlIGVpdGhlciBhIHN0cmluZyBvciB0aGUgcGFyc2VkXG4vLyBKU09OIG9iamVjdCAoaWUsIGl0IG11c3QgYmUgYSB2YWxpZCBhcmd1bWVudCB0byB0aGUgU291cmNlTWFwQ29uc3VtZXJcbi8vIGNvbnN0cnVjdG9yKS5cbnZhciByZXRyaWV2ZVNvdXJjZU1hcCA9IGhhbmRsZXJFeGVjKHJldHJpZXZlTWFwSGFuZGxlcnMpO1xucmV0cmlldmVNYXBIYW5kbGVycy5wdXNoKGZ1bmN0aW9uKHNvdXJjZSkge1xuICB2YXIgc291cmNlTWFwcGluZ1VSTCA9IHJldHJpZXZlU291cmNlTWFwVVJMKHNvdXJjZSk7XG4gIGlmICghc291cmNlTWFwcGluZ1VSTCkgcmV0dXJuIG51bGw7XG5cbiAgLy8gUmVhZCB0aGUgY29udGVudHMgb2YgdGhlIHNvdXJjZSBtYXBcbiAgdmFyIHNvdXJjZU1hcERhdGE7XG4gIGlmIChyZVNvdXJjZU1hcC50ZXN0KHNvdXJjZU1hcHBpbmdVUkwpKSB7XG4gICAgLy8gU3VwcG9ydCBzb3VyY2UgbWFwIFVSTCBhcyBhIGRhdGEgdXJsXG4gICAgdmFyIHJhd0RhdGEgPSBzb3VyY2VNYXBwaW5nVVJMLnNsaWNlKHNvdXJjZU1hcHBpbmdVUkwuaW5kZXhPZignLCcpICsgMSk7XG4gICAgc291cmNlTWFwRGF0YSA9IGJ1ZmZlckZyb20ocmF3RGF0YSwgXCJiYXNlNjRcIikudG9TdHJpbmcoKTtcbiAgICBzb3VyY2VNYXBwaW5nVVJMID0gc291cmNlO1xuICB9IGVsc2Uge1xuICAgIC8vIFN1cHBvcnQgc291cmNlIG1hcCBVUkxzIHJlbGF0aXZlIHRvIHRoZSBzb3VyY2UgVVJMXG4gICAgc291cmNlTWFwcGluZ1VSTCA9IHN1cHBvcnRSZWxhdGl2ZVVSTChzb3VyY2UsIHNvdXJjZU1hcHBpbmdVUkwpO1xuICAgIHNvdXJjZU1hcERhdGEgPSByZXRyaWV2ZUZpbGUoc291cmNlTWFwcGluZ1VSTCk7XG4gIH1cblxuICBpZiAoIXNvdXJjZU1hcERhdGEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdXJsOiBzb3VyY2VNYXBwaW5nVVJMLFxuICAgIG1hcDogc291cmNlTWFwRGF0YVxuICB9O1xufSk7XG5cbmZ1bmN0aW9uIG1hcFNvdXJjZVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBzb3VyY2VNYXBDYWNoZVtwb3NpdGlvbi5zb3VyY2VdO1xuICBpZiAoIXNvdXJjZU1hcCkge1xuICAgIC8vIENhbGwgdGhlIChvdmVycmlkZWFibGUpIHJldHJpZXZlU291cmNlTWFwIGZ1bmN0aW9uIHRvIGdldCB0aGUgc291cmNlIG1hcC5cbiAgICB2YXIgdXJsQW5kTWFwID0gcmV0cmlldmVTb3VyY2VNYXAocG9zaXRpb24uc291cmNlKTtcbiAgICBpZiAodXJsQW5kTWFwKSB7XG4gICAgICBzb3VyY2VNYXAgPSBzb3VyY2VNYXBDYWNoZVtwb3NpdGlvbi5zb3VyY2VdID0ge1xuICAgICAgICB1cmw6IHVybEFuZE1hcC51cmwsXG4gICAgICAgIG1hcDogbmV3IFNvdXJjZU1hcENvbnN1bWVyKHVybEFuZE1hcC5tYXApXG4gICAgICB9O1xuXG4gICAgICAvLyBMb2FkIGFsbCBzb3VyY2VzIHN0b3JlZCBpbmxpbmUgd2l0aCB0aGUgc291cmNlIG1hcCBpbnRvIHRoZSBmaWxlIGNhY2hlXG4gICAgICAvLyB0byBwcmV0ZW5kIGxpa2UgdGhleSBhcmUgYWxyZWFkeSBsb2FkZWQuIFRoZXkgbWF5IG5vdCBleGlzdCBvbiBkaXNrLlxuICAgICAgaWYgKHNvdXJjZU1hcC5tYXAuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgICAgc291cmNlTWFwLm1hcC5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24oc291cmNlLCBpKSB7XG4gICAgICAgICAgdmFyIGNvbnRlbnRzID0gc291cmNlTWFwLm1hcC5zb3VyY2VzQ29udGVudFtpXTtcbiAgICAgICAgICBpZiAoY29udGVudHMpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBzdXBwb3J0UmVsYXRpdmVVUkwoc291cmNlTWFwLnVybCwgc291cmNlKTtcbiAgICAgICAgICAgIGZpbGVDb250ZW50c0NhY2hlW3VybF0gPSBjb250ZW50cztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzb3VyY2VNYXAgPSBzb3VyY2VNYXBDYWNoZVtwb3NpdGlvbi5zb3VyY2VdID0ge1xuICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgIG1hcDogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXNvbHZlIHRoZSBzb3VyY2UgVVJMIHJlbGF0aXZlIHRvIHRoZSBVUkwgb2YgdGhlIHNvdXJjZSBtYXBcbiAgaWYgKHNvdXJjZU1hcCAmJiBzb3VyY2VNYXAubWFwKSB7XG4gICAgdmFyIG9yaWdpbmFsUG9zaXRpb24gPSBzb3VyY2VNYXAubWFwLm9yaWdpbmFsUG9zaXRpb25Gb3IocG9zaXRpb24pO1xuXG4gICAgLy8gT25seSByZXR1cm4gdGhlIG9yaWdpbmFsIHBvc2l0aW9uIGlmIGEgbWF0Y2hpbmcgbGluZSB3YXMgZm91bmQuIElmIG5vXG4gICAgLy8gbWF0Y2hpbmcgbGluZSBpcyBmb3VuZCB0aGVuIHdlIHJldHVybiBwb3NpdGlvbiBpbnN0ZWFkLCB3aGljaCB3aWxsIGNhdXNlXG4gICAgLy8gdGhlIHN0YWNrIHRyYWNlIHRvIHByaW50IHRoZSBwYXRoIGFuZCBsaW5lIGZvciB0aGUgY29tcGlsZWQgZmlsZS4gSXQgaXNcbiAgICAvLyBiZXR0ZXIgdG8gZ2l2ZSBhIHByZWNpc2UgbG9jYXRpb24gaW4gdGhlIGNvbXBpbGVkIGZpbGUgdGhhbiBhIHZhZ3VlXG4gICAgLy8gbG9jYXRpb24gaW4gdGhlIG9yaWdpbmFsIGZpbGUuXG4gICAgaWYgKG9yaWdpbmFsUG9zaXRpb24uc291cmNlICE9PSBudWxsKSB7XG4gICAgICBvcmlnaW5hbFBvc2l0aW9uLnNvdXJjZSA9IHN1cHBvcnRSZWxhdGl2ZVVSTChcbiAgICAgICAgc291cmNlTWFwLnVybCwgb3JpZ2luYWxQb3NpdGlvbi5zb3VyY2UpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsUG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9uO1xufVxuXG4vLyBQYXJzZXMgY29kZSBnZW5lcmF0ZWQgYnkgRm9ybWF0RXZhbE9yaWdpbigpLCBhIGZ1bmN0aW9uIGluc2lkZSBWODpcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avdjgvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvbWVzc2FnZXMuanNcbmZ1bmN0aW9uIG1hcEV2YWxPcmlnaW4ob3JpZ2luKSB7XG4gIC8vIE1vc3QgZXZhbCgpIGNhbGxzIGFyZSBpbiB0aGlzIGZvcm1hdFxuICB2YXIgbWF0Y2ggPSAvXmV2YWwgYXQgKFteKF0rKSBcXCgoLispOihcXGQrKTooXFxkKylcXCkkLy5leGVjKG9yaWdpbik7XG4gIGlmIChtYXRjaCkge1xuICAgIHZhciBwb3NpdGlvbiA9IG1hcFNvdXJjZVBvc2l0aW9uKHtcbiAgICAgIHNvdXJjZTogbWF0Y2hbMl0sXG4gICAgICBsaW5lOiArbWF0Y2hbM10sXG4gICAgICBjb2x1bW46IG1hdGNoWzRdIC0gMVxuICAgIH0pO1xuICAgIHJldHVybiAnZXZhbCBhdCAnICsgbWF0Y2hbMV0gKyAnICgnICsgcG9zaXRpb24uc291cmNlICsgJzonICtcbiAgICAgIHBvc2l0aW9uLmxpbmUgKyAnOicgKyAocG9zaXRpb24uY29sdW1uICsgMSkgKyAnKSc7XG4gIH1cblxuICAvLyBQYXJzZSBuZXN0ZWQgZXZhbCgpIGNhbGxzIHVzaW5nIHJlY3Vyc2lvblxuICBtYXRjaCA9IC9eZXZhbCBhdCAoW14oXSspIFxcKCguKylcXCkkLy5leGVjKG9yaWdpbik7XG4gIGlmIChtYXRjaCkge1xuICAgIHJldHVybiAnZXZhbCBhdCAnICsgbWF0Y2hbMV0gKyAnICgnICsgbWFwRXZhbE9yaWdpbihtYXRjaFsyXSkgKyAnKSc7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgd2Ugc3RpbGwgcmV0dXJuIHVzZWZ1bCBpbmZvcm1hdGlvbiBpZiB3ZSBkaWRuJ3QgZmluZCBhbnl0aGluZ1xuICByZXR1cm4gb3JpZ2luO1xufVxuXG4vLyBUaGlzIGlzIGNvcGllZCBhbG1vc3QgdmVyYmF0aW0gZnJvbSB0aGUgVjggc291cmNlIGNvZGUgYXRcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avdjgvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvbWVzc2FnZXMuanMuIFRoZVxuLy8gaW1wbGVtZW50YXRpb24gb2Ygd3JhcENhbGxTaXRlKCkgdXNlZCB0byBqdXN0IGZvcndhcmQgdG8gdGhlIGFjdHVhbCBzb3VyY2Vcbi8vIGNvZGUgb2YgQ2FsbFNpdGUucHJvdG90eXBlLnRvU3RyaW5nIGJ1dCB1bmZvcnR1bmF0ZWx5IGEgbmV3IHJlbGVhc2Ugb2YgVjhcbi8vIGRpZCBzb21ldGhpbmcgdG8gdGhlIHByb3RvdHlwZSBjaGFpbiBhbmQgYnJva2UgdGhlIHNoaW0uIFRoZSBvbmx5IGZpeCBJXG4vLyBjb3VsZCBmaW5kIHdhcyBjb3B5L3Bhc3RlLlxuZnVuY3Rpb24gQ2FsbFNpdGVUb1N0cmluZygpIHtcbiAgdmFyIGZpbGVOYW1lO1xuICB2YXIgZmlsZUxvY2F0aW9uID0gXCJcIjtcbiAgaWYgKHRoaXMuaXNOYXRpdmUoKSkge1xuICAgIGZpbGVMb2NhdGlvbiA9IFwibmF0aXZlXCI7XG4gIH0gZWxzZSB7XG4gICAgZmlsZU5hbWUgPSB0aGlzLmdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCgpO1xuICAgIGlmICghZmlsZU5hbWUgJiYgdGhpcy5pc0V2YWwoKSkge1xuICAgICAgZmlsZUxvY2F0aW9uID0gdGhpcy5nZXRFdmFsT3JpZ2luKCk7XG4gICAgICBmaWxlTG9jYXRpb24gKz0gXCIsIFwiOyAgLy8gRXhwZWN0aW5nIHNvdXJjZSBwb3NpdGlvbiB0byBmb2xsb3cuXG4gICAgfVxuXG4gICAgaWYgKGZpbGVOYW1lKSB7XG4gICAgICBmaWxlTG9jYXRpb24gKz0gZmlsZU5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNvdXJjZSBjb2RlIGRvZXMgbm90IG9yaWdpbmF0ZSBmcm9tIGEgZmlsZSBhbmQgaXMgbm90IG5hdGl2ZSwgYnV0IHdlXG4gICAgICAvLyBjYW4gc3RpbGwgZ2V0IHRoZSBzb3VyY2UgcG9zaXRpb24gaW5zaWRlIHRoZSBzb3VyY2Ugc3RyaW5nLCBlLmcuIGluXG4gICAgICAvLyBhbiBldmFsIHN0cmluZy5cbiAgICAgIGZpbGVMb2NhdGlvbiArPSBcIjxhbm9ueW1vdXM+XCI7XG4gICAgfVxuICAgIHZhciBsaW5lTnVtYmVyID0gdGhpcy5nZXRMaW5lTnVtYmVyKCk7XG4gICAgaWYgKGxpbmVOdW1iZXIgIT0gbnVsbCkge1xuICAgICAgZmlsZUxvY2F0aW9uICs9IFwiOlwiICsgbGluZU51bWJlcjtcbiAgICAgIHZhciBjb2x1bW5OdW1iZXIgPSB0aGlzLmdldENvbHVtbk51bWJlcigpO1xuICAgICAgaWYgKGNvbHVtbk51bWJlcikge1xuICAgICAgICBmaWxlTG9jYXRpb24gKz0gXCI6XCIgKyBjb2x1bW5OdW1iZXI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpbmUgPSBcIlwiO1xuICB2YXIgZnVuY3Rpb25OYW1lID0gdGhpcy5nZXRGdW5jdGlvbk5hbWUoKTtcbiAgdmFyIGFkZFN1ZmZpeCA9IHRydWU7XG4gIHZhciBpc0NvbnN0cnVjdG9yID0gdGhpcy5pc0NvbnN0cnVjdG9yKCk7XG4gIHZhciBpc01ldGhvZENhbGwgPSAhKHRoaXMuaXNUb3BsZXZlbCgpIHx8IGlzQ29uc3RydWN0b3IpO1xuICBpZiAoaXNNZXRob2RDYWxsKSB7XG4gICAgdmFyIHR5cGVOYW1lID0gdGhpcy5nZXRUeXBlTmFtZSgpO1xuICAgIC8vIEZpeGVzIHNoaW0gdG8gYmUgYmFja3dhcmQgY29tcGF0YWJsZSB3aXRoIE5vZGUgdjAgdG8gdjRcbiAgICBpZiAodHlwZU5hbWUgPT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcbiAgICAgIHR5cGVOYW1lID0gXCJudWxsXCI7XG4gICAgfVxuICAgIHZhciBtZXRob2ROYW1lID0gdGhpcy5nZXRNZXRob2ROYW1lKCk7XG4gICAgaWYgKGZ1bmN0aW9uTmFtZSkge1xuICAgICAgaWYgKHR5cGVOYW1lICYmIGZ1bmN0aW9uTmFtZS5pbmRleE9mKHR5cGVOYW1lKSAhPSAwKSB7XG4gICAgICAgIGxpbmUgKz0gdHlwZU5hbWUgKyBcIi5cIjtcbiAgICAgIH1cbiAgICAgIGxpbmUgKz0gZnVuY3Rpb25OYW1lO1xuICAgICAgaWYgKG1ldGhvZE5hbWUgJiYgZnVuY3Rpb25OYW1lLmluZGV4T2YoXCIuXCIgKyBtZXRob2ROYW1lKSAhPSBmdW5jdGlvbk5hbWUubGVuZ3RoIC0gbWV0aG9kTmFtZS5sZW5ndGggLSAxKSB7XG4gICAgICAgIGxpbmUgKz0gXCIgW2FzIFwiICsgbWV0aG9kTmFtZSArIFwiXVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lICs9IHR5cGVOYW1lICsgXCIuXCIgKyAobWV0aG9kTmFtZSB8fCBcIjxhbm9ueW1vdXM+XCIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0NvbnN0cnVjdG9yKSB7XG4gICAgbGluZSArPSBcIm5ldyBcIiArIChmdW5jdGlvbk5hbWUgfHwgXCI8YW5vbnltb3VzPlwiKTtcbiAgfSBlbHNlIGlmIChmdW5jdGlvbk5hbWUpIHtcbiAgICBsaW5lICs9IGZ1bmN0aW9uTmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsaW5lICs9IGZpbGVMb2NhdGlvbjtcbiAgICBhZGRTdWZmaXggPSBmYWxzZTtcbiAgfVxuICBpZiAoYWRkU3VmZml4KSB7XG4gICAgbGluZSArPSBcIiAoXCIgKyBmaWxlTG9jYXRpb24gKyBcIilcIjtcbiAgfVxuICByZXR1cm4gbGluZTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDYWxsU2l0ZShmcmFtZSkge1xuICB2YXIgb2JqZWN0ID0ge307XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9iamVjdC5nZXRQcm90b3R5cGVPZihmcmFtZSkpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIG9iamVjdFtuYW1lXSA9IC9eKD86aXN8Z2V0KS8udGVzdChuYW1lKSA/IGZ1bmN0aW9uKCkgeyByZXR1cm4gZnJhbWVbbmFtZV0uY2FsbChmcmFtZSk7IH0gOiBmcmFtZVtuYW1lXTtcbiAgfSk7XG4gIG9iamVjdC50b1N0cmluZyA9IENhbGxTaXRlVG9TdHJpbmc7XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIHdyYXBDYWxsU2l0ZShmcmFtZSkge1xuICBpZihmcmFtZS5pc05hdGl2ZSgpKSB7XG4gICAgcmV0dXJuIGZyYW1lO1xuICB9XG5cbiAgLy8gTW9zdCBjYWxsIHNpdGVzIHdpbGwgcmV0dXJuIHRoZSBzb3VyY2UgZmlsZSBmcm9tIGdldEZpbGVOYW1lKCksIGJ1dCBjb2RlXG4gIC8vIHBhc3NlZCB0byBldmFsKCkgZW5kaW5nIGluIFwiLy8jIHNvdXJjZVVSTD0uLi5cIiB3aWxsIHJldHVybiB0aGUgc291cmNlIGZpbGVcbiAgLy8gZnJvbSBnZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwoKSBpbnN0ZWFkXG4gIHZhciBzb3VyY2UgPSBmcmFtZS5nZXRGaWxlTmFtZSgpIHx8IGZyYW1lLmdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCgpO1xuICBpZiAoc291cmNlKSB7XG4gICAgdmFyIGxpbmUgPSBmcmFtZS5nZXRMaW5lTnVtYmVyKCk7XG4gICAgdmFyIGNvbHVtbiA9IGZyYW1lLmdldENvbHVtbk51bWJlcigpIC0gMTtcblxuICAgIC8vIEZpeCBwb3NpdGlvbiBpbiBOb2RlIHdoZXJlIHNvbWUgKGludGVybmFsKSBjb2RlIGlzIHByZXBlbmRlZC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2V2YW53L25vZGUtc291cmNlLW1hcC1zdXBwb3J0L2lzc3Vlcy8zNlxuICAgIHZhciBoZWFkZXJMZW5ndGggPSA2MjtcbiAgICBpZiAobGluZSA9PT0gMSAmJiBjb2x1bW4gPiBoZWFkZXJMZW5ndGggJiYgIWlzSW5Ccm93c2VyKCkgJiYgIWZyYW1lLmlzRXZhbCgpKSB7XG4gICAgICBjb2x1bW4gLT0gaGVhZGVyTGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBwb3NpdGlvbiA9IG1hcFNvdXJjZVBvc2l0aW9uKHtcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgbGluZTogbGluZSxcbiAgICAgIGNvbHVtbjogY29sdW1uXG4gICAgfSk7XG4gICAgZnJhbWUgPSBjbG9uZUNhbGxTaXRlKGZyYW1lKTtcbiAgICBmcmFtZS5nZXRGaWxlTmFtZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcG9zaXRpb24uc291cmNlOyB9O1xuICAgIGZyYW1lLmdldExpbmVOdW1iZXIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHBvc2l0aW9uLmxpbmU7IH07XG4gICAgZnJhbWUuZ2V0Q29sdW1uTnVtYmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiBwb3NpdGlvbi5jb2x1bW4gKyAxOyB9O1xuICAgIGZyYW1lLmdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcG9zaXRpb24uc291cmNlOyB9O1xuICAgIHJldHVybiBmcmFtZTtcbiAgfVxuXG4gIC8vIENvZGUgY2FsbGVkIHVzaW5nIGV2YWwoKSBuZWVkcyBzcGVjaWFsIGhhbmRsaW5nXG4gIHZhciBvcmlnaW4gPSBmcmFtZS5pc0V2YWwoKSAmJiBmcmFtZS5nZXRFdmFsT3JpZ2luKCk7XG4gIGlmIChvcmlnaW4pIHtcbiAgICBvcmlnaW4gPSBtYXBFdmFsT3JpZ2luKG9yaWdpbik7XG4gICAgZnJhbWUgPSBjbG9uZUNhbGxTaXRlKGZyYW1lKTtcbiAgICBmcmFtZS5nZXRFdmFsT3JpZ2luID0gZnVuY3Rpb24oKSB7IHJldHVybiBvcmlnaW47IH07XG4gICAgcmV0dXJuIGZyYW1lO1xuICB9XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiB3ZSB3ZXJlIHVuYWJsZSB0byBjaGFuZ2UgdGhlIHNvdXJjZSBwb3NpdGlvblxuICByZXR1cm4gZnJhbWU7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0aGUgVjggc3RhY2sgdHJhY2UgQVBJLCBmb3IgbW9yZSBpbmZvIHNlZTpcbi8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC93aWtpL0phdmFTY3JpcHRTdGFja1RyYWNlQXBpXG5mdW5jdGlvbiBwcmVwYXJlU3RhY2tUcmFjZShlcnJvciwgc3RhY2spIHtcbiAgaWYgKGVtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucykge1xuICAgIGZpbGVDb250ZW50c0NhY2hlID0ge307XG4gICAgc291cmNlTWFwQ2FjaGUgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBlcnJvciArIHN0YWNrLm1hcChmdW5jdGlvbihmcmFtZSkge1xuICAgIHJldHVybiAnXFxuICAgIGF0ICcgKyB3cmFwQ2FsbFNpdGUoZnJhbWUpO1xuICB9KS5qb2luKCcnKTtcbn1cblxuLy8gR2VuZXJhdGUgcG9zaXRpb24gYW5kIHNuaXBwZXQgb2Ygb3JpZ2luYWwgc291cmNlIHdpdGggcG9pbnRlclxuZnVuY3Rpb24gZ2V0RXJyb3JTb3VyY2UoZXJyb3IpIHtcbiAgdmFyIG1hdGNoID0gL1xcbiAgICBhdCBbXihdKyBcXCgoLiopOihcXGQrKTooXFxkKylcXCkvLmV4ZWMoZXJyb3Iuc3RhY2spO1xuICBpZiAobWF0Y2gpIHtcbiAgICB2YXIgc291cmNlID0gbWF0Y2hbMV07XG4gICAgdmFyIGxpbmUgPSArbWF0Y2hbMl07XG4gICAgdmFyIGNvbHVtbiA9ICttYXRjaFszXTtcblxuICAgIC8vIFN1cHBvcnQgdGhlIGlubGluZSBzb3VyY2VDb250ZW50cyBpbnNpZGUgdGhlIHNvdXJjZSBtYXBcbiAgICB2YXIgY29udGVudHMgPSBmaWxlQ29udGVudHNDYWNoZVtzb3VyY2VdO1xuXG4gICAgLy8gU3VwcG9ydCBmaWxlcyBvbiBkaXNrXG4gICAgaWYgKCFjb250ZW50cyAmJiBmcyAmJiBmcy5leGlzdHNTeW5jKHNvdXJjZSkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jKHNvdXJjZSwgJ3V0ZjgnKTtcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIGNvbnRlbnRzID0gJyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRm9ybWF0IHRoZSBsaW5lIGZyb20gdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlIGxpa2Ugbm9kZSBkb2VzXG4gICAgaWYgKGNvbnRlbnRzKSB7XG4gICAgICB2YXIgY29kZSA9IGNvbnRlbnRzLnNwbGl0KC8oPzpcXHJcXG58XFxyfFxcbikvKVtsaW5lIC0gMV07XG4gICAgICBpZiAoY29kZSkge1xuICAgICAgICByZXR1cm4gc291cmNlICsgJzonICsgbGluZSArICdcXG4nICsgY29kZSArICdcXG4nICtcbiAgICAgICAgICBuZXcgQXJyYXkoY29sdW1uKS5qb2luKCcgJykgKyAnXic7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBwcmludEVycm9yQW5kRXhpdCAoZXJyb3IpIHtcbiAgdmFyIHNvdXJjZSA9IGdldEVycm9yU291cmNlKGVycm9yKTtcblxuICBpZiAoc291cmNlKSB7XG4gICAgZnMud3JpdGVTeW5jKDIsIFwiXFxuXCIgKyBzb3VyY2UgKyBcIlxcblwiKTtcbiAgfVxuXG4gIGZzLndyaXRlU3luYygyLCBlcnJvci5zdGFjayArIFwiXFxuXCIpO1xuICBwcm9jZXNzLmV4aXQoMSk7XG59XG5cbmZ1bmN0aW9uIHNoaW1FbWl0VW5jYXVnaHRFeGNlcHRpb24gKCkge1xuICB2YXIgb3JpZ0VtaXQgPSBwcm9jZXNzLmVtaXQ7XG5cbiAgcHJvY2Vzcy5lbWl0ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PT0gJ3VuY2F1Z2h0RXhjZXB0aW9uJykge1xuICAgICAgdmFyIGhhc1N0YWNrID0gKGFyZ3VtZW50c1sxXSAmJiBhcmd1bWVudHNbMV0uc3RhY2spO1xuICAgICAgdmFyIGhhc0xpc3RlbmVycyA9ICh0aGlzLmxpc3RlbmVycyh0eXBlKS5sZW5ndGggPiAwKTtcblxuICAgICAgaWYgKGhhc1N0YWNrICYmICFoYXNMaXN0ZW5lcnMpIHtcbiAgICAgICAgcmV0dXJuIHByaW50RXJyb3JBbmRFeGl0KGFyZ3VtZW50c1sxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9yaWdFbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbnZhciBvcmlnaW5hbFJldHJpZXZlRmlsZUhhbmRsZXJzID0gcmV0cmlldmVGaWxlSGFuZGxlcnMuc2xpY2UoMCk7XG52YXIgb3JpZ2luYWxSZXRyaWV2ZU1hcEhhbmRsZXJzID0gcmV0cmlldmVNYXBIYW5kbGVycy5zbGljZSgwKTtcblxuZXhwb3J0cy53cmFwQ2FsbFNpdGUgPSB3cmFwQ2FsbFNpdGU7XG5leHBvcnRzLmdldEVycm9yU291cmNlID0gZ2V0RXJyb3JTb3VyY2U7XG5leHBvcnRzLm1hcFNvdXJjZVBvc2l0aW9uID0gbWFwU291cmNlUG9zaXRpb247XG5leHBvcnRzLnJldHJpZXZlU291cmNlTWFwID0gcmV0cmlldmVTb3VyY2VNYXA7XG5cbmV4cG9ydHMuaW5zdGFsbCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKG9wdGlvbnMuZW52aXJvbm1lbnQpIHtcbiAgICBlbnZpcm9ubWVudCA9IG9wdGlvbnMuZW52aXJvbm1lbnQ7XG4gICAgaWYgKFtcIm5vZGVcIiwgXCJicm93c2VyXCIsIFwiYXV0b1wiXS5pbmRleE9mKGVudmlyb25tZW50KSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImVudmlyb25tZW50IFwiICsgZW52aXJvbm1lbnQgKyBcIiB3YXMgdW5rbm93bi4gQXZhaWxhYmxlIG9wdGlvbnMgYXJlIHthdXRvLCBicm93c2VyLCBub2RlfVwiKVxuICAgIH1cbiAgfVxuXG4gIC8vIEFsbG93IHNvdXJjZXMgdG8gYmUgZm91bmQgYnkgbWV0aG9kcyBvdGhlciB0aGFuIHJlYWRpbmcgdGhlIGZpbGVzXG4gIC8vIGRpcmVjdGx5IGZyb20gZGlzay5cbiAgaWYgKG9wdGlvbnMucmV0cmlldmVGaWxlKSB7XG4gICAgaWYgKG9wdGlvbnMub3ZlcnJpZGVSZXRyaWV2ZUZpbGUpIHtcbiAgICAgIHJldHJpZXZlRmlsZUhhbmRsZXJzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgcmV0cmlldmVGaWxlSGFuZGxlcnMudW5zaGlmdChvcHRpb25zLnJldHJpZXZlRmlsZSk7XG4gIH1cblxuICAvLyBBbGxvdyBzb3VyY2UgbWFwcyB0byBiZSBmb3VuZCBieSBtZXRob2RzIG90aGVyIHRoYW4gcmVhZGluZyB0aGUgZmlsZXNcbiAgLy8gZGlyZWN0bHkgZnJvbSBkaXNrLlxuICBpZiAob3B0aW9ucy5yZXRyaWV2ZVNvdXJjZU1hcCkge1xuICAgIGlmIChvcHRpb25zLm92ZXJyaWRlUmV0cmlldmVTb3VyY2VNYXApIHtcbiAgICAgIHJldHJpZXZlTWFwSGFuZGxlcnMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICByZXRyaWV2ZU1hcEhhbmRsZXJzLnVuc2hpZnQob3B0aW9ucy5yZXRyaWV2ZVNvdXJjZU1hcCk7XG4gIH1cblxuICAvLyBTdXBwb3J0IHJ1bnRpbWUgdHJhbnNwaWxlcnMgdGhhdCBpbmNsdWRlIGlubGluZSBzb3VyY2UgbWFwc1xuICBpZiAob3B0aW9ucy5ob29rUmVxdWlyZSAmJiAhaXNJbkJyb3dzZXIoKSkge1xuICAgIHZhciBNb2R1bGU7XG4gICAgdHJ5IHtcbiAgICAgIE1vZHVsZSA9IHJlcXVpcmUoJ21vZHVsZScpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gTk9QOiBMb2FkaW5nIGluIGNhdGNoIGJsb2NrIHRvIGNvbnZlcnQgd2VicGFjayBlcnJvciB0byB3YXJuaW5nLlxuICAgIH1cbiAgICB2YXIgJGNvbXBpbGUgPSBNb2R1bGUucHJvdG90eXBlLl9jb21waWxlO1xuXG4gICAgaWYgKCEkY29tcGlsZS5fX3NvdXJjZU1hcFN1cHBvcnQpIHtcbiAgICAgIE1vZHVsZS5wcm90b3R5cGUuX2NvbXBpbGUgPSBmdW5jdGlvbihjb250ZW50LCBmaWxlbmFtZSkge1xuICAgICAgICBmaWxlQ29udGVudHNDYWNoZVtmaWxlbmFtZV0gPSBjb250ZW50O1xuICAgICAgICBzb3VyY2VNYXBDYWNoZVtmaWxlbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiAkY29tcGlsZS5jYWxsKHRoaXMsIGNvbnRlbnQsIGZpbGVuYW1lKTtcbiAgICAgIH07XG5cbiAgICAgIE1vZHVsZS5wcm90b3R5cGUuX2NvbXBpbGUuX19zb3VyY2VNYXBTdXBwb3J0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBDb25maWd1cmUgb3B0aW9uc1xuICBpZiAoIWVtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucykge1xuICAgIGVtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucyA9ICdlbXB0eUNhY2hlQmV0d2Vlbk9wZXJhdGlvbnMnIGluIG9wdGlvbnMgP1xuICAgICAgb3B0aW9ucy5lbXB0eUNhY2hlQmV0d2Vlbk9wZXJhdGlvbnMgOiBmYWxzZTtcbiAgfVxuXG4gIC8vIEluc3RhbGwgdGhlIGVycm9yIHJlZm9ybWF0dGVyXG4gIGlmICghZXJyb3JGb3JtYXR0ZXJJbnN0YWxsZWQpIHtcbiAgICBlcnJvckZvcm1hdHRlckluc3RhbGxlZCA9IHRydWU7XG4gICAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBwcmVwYXJlU3RhY2tUcmFjZTtcbiAgfVxuXG4gIGlmICghdW5jYXVnaHRTaGltSW5zdGFsbGVkKSB7XG4gICAgdmFyIGluc3RhbGxIYW5kbGVyID0gJ2hhbmRsZVVuY2F1Z2h0RXhjZXB0aW9ucycgaW4gb3B0aW9ucyA/XG4gICAgICBvcHRpb25zLmhhbmRsZVVuY2F1Z2h0RXhjZXB0aW9ucyA6IHRydWU7XG5cbiAgICAvLyBQcm92aWRlIHRoZSBvcHRpb24gdG8gbm90IGluc3RhbGwgdGhlIHVuY2F1Z2h0IGV4Y2VwdGlvbiBoYW5kbGVyLiBUaGlzIGlzXG4gICAgLy8gdG8gc3VwcG9ydCBvdGhlciB1bmNhdWdodCBleGNlcHRpb24gaGFuZGxlcnMgKGluIHRlc3QgZnJhbWV3b3JrcywgZm9yXG4gICAgLy8gZXhhbXBsZSkuIElmIHRoaXMgaGFuZGxlciBpcyBub3QgaW5zdGFsbGVkIGFuZCB0aGVyZSBhcmUgbm8gb3RoZXIgdW5jYXVnaHRcbiAgICAvLyBleGNlcHRpb24gaGFuZGxlcnMsIHVuY2F1Z2h0IGV4Y2VwdGlvbnMgd2lsbCBiZSBjYXVnaHQgYnkgbm9kZSdzIGJ1aWx0LWluXG4gICAgLy8gZXhjZXB0aW9uIGhhbmRsZXIgYW5kIHRoZSBwcm9jZXNzIHdpbGwgc3RpbGwgYmUgdGVybWluYXRlZC4gSG93ZXZlciwgdGhlXG4gICAgLy8gZ2VuZXJhdGVkIEphdmFTY3JpcHQgY29kZSB3aWxsIGJlIHNob3duIGFib3ZlIHRoZSBzdGFjayB0cmFjZSBpbnN0ZWFkIG9mXG4gICAgLy8gdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlLlxuICAgIGlmIChpbnN0YWxsSGFuZGxlciAmJiBoYXNHbG9iYWxQcm9jZXNzRXZlbnRFbWl0dGVyKCkpIHtcbiAgICAgIHVuY2F1Z2h0U2hpbUluc3RhbGxlZCA9IHRydWU7XG4gICAgICBzaGltRW1pdFVuY2F1Z2h0RXhjZXB0aW9uKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnRzLnJlc2V0UmV0cmlldmVIYW5kbGVycyA9IGZ1bmN0aW9uKCkge1xuICByZXRyaWV2ZUZpbGVIYW5kbGVycy5sZW5ndGggPSAwO1xuICByZXRyaWV2ZU1hcEhhbmRsZXJzLmxlbmd0aCA9IDA7XG5cbiAgcmV0cmlldmVGaWxlSGFuZGxlcnMgPSBvcmlnaW5hbFJldHJpZXZlRmlsZUhhbmRsZXJzLnNsaWNlKDApO1xuICByZXRyaWV2ZU1hcEhhbmRsZXJzID0gb3JpZ2luYWxSZXRyaWV2ZU1hcEhhbmRsZXJzLnNsaWNlKDApO1xufVxuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG4vKipcbiAqIEEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggaXMgYSBjb21iaW5hdGlvbiBvZiBhbiBhcnJheSBhbmQgYSBzZXQuIEFkZGluZyBhIG5ld1xuICogbWVtYmVyIGlzIE8oMSksIHRlc3RpbmcgZm9yIG1lbWJlcnNoaXAgaXMgTygxKSwgYW5kIGZpbmRpbmcgdGhlIGluZGV4IG9mIGFuXG4gKiBlbGVtZW50IGlzIE8oMSkuIFJlbW92aW5nIGVsZW1lbnRzIGZyb20gdGhlIHNldCBpcyBub3Qgc3VwcG9ydGVkLiBPbmx5XG4gKiBzdHJpbmdzIGFyZSBzdXBwb3J0ZWQgZm9yIG1lbWJlcnNoaXAuXG4gKi9cbmNsYXNzIEFycmF5U2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgICB0aGlzLl9zZXQgPSBuZXcgTWFwKCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIG1ldGhvZCBmb3IgY3JlYXRpbmcgQXJyYXlTZXQgaW5zdGFuY2VzIGZyb20gYW4gZXhpc3RpbmcgYXJyYXkuXG4gICAqL1xuICBzdGF0aWMgZnJvbUFycmF5KGFBcnJheSwgYUFsbG93RHVwbGljYXRlcykge1xuICAgIGNvbnN0IHNldCA9IG5ldyBBcnJheVNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHNldC5hZGQoYUFycmF5W2ldLCBhQWxsb3dEdXBsaWNhdGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gaG93IG1hbnkgdW5pcXVlIGl0ZW1zIGFyZSBpbiB0aGlzIEFycmF5U2V0LiBJZiBkdXBsaWNhdGVzIGhhdmUgYmVlblxuICAgKiBhZGRlZCwgdGhhbiB0aG9zZSBkbyBub3QgY291bnQgdG93YXJkcyB0aGUgc2l6ZS5cbiAgICpcbiAgICogQHJldHVybnMgTnVtYmVyXG4gICAqL1xuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXQuc2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgdGhlIGdpdmVuIHN0cmluZyB0byB0aGlzIHNldC5cbiAgICpcbiAgICogQHBhcmFtIFN0cmluZyBhU3RyXG4gICAqL1xuICBhZGQoYVN0ciwgYUFsbG93RHVwbGljYXRlcykge1xuICAgIGNvbnN0IGlzRHVwbGljYXRlID0gdGhpcy5oYXMoYVN0cik7XG4gICAgY29uc3QgaWR4ID0gdGhpcy5fYXJyYXkubGVuZ3RoO1xuICAgIGlmICghaXNEdXBsaWNhdGUgfHwgYUFsbG93RHVwbGljYXRlcykge1xuICAgICAgdGhpcy5fYXJyYXkucHVzaChhU3RyKTtcbiAgICB9XG4gICAgaWYgKCFpc0R1cGxpY2F0ZSkge1xuICAgICAgdGhpcy5fc2V0LnNldChhU3RyLCBpZHgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGUgZ2l2ZW4gc3RyaW5nIGEgbWVtYmVyIG9mIHRoaXMgc2V0P1xuICAgKlxuICAgKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAgICovXG4gIGhhcyhhU3RyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2V0LmhhcyhhU3RyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGF0IGlzIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gc3RyaW5nIGluIHRoZSBhcnJheT9cbiAgICpcbiAgICogQHBhcmFtIFN0cmluZyBhU3RyXG4gICAqL1xuICBpbmRleE9mKGFTdHIpIHtcbiAgICBjb25zdCBpZHggPSB0aGlzLl9zZXQuZ2V0KGFTdHIpO1xuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFTdHIgKyAnXCIgaXMgbm90IGluIHRoZSBzZXQuJyk7XG4gIH1cblxuICAvKipcbiAgICogV2hhdCBpcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXg/XG4gICAqXG4gICAqIEBwYXJhbSBOdW1iZXIgYUlkeFxuICAgKi9cbiAgYXQoYUlkeCkge1xuICAgIGlmIChhSWR4ID49IDAgJiYgYUlkeCA8IHRoaXMuX2FycmF5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FycmF5W2FJZHhdO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBlbGVtZW50IGluZGV4ZWQgYnkgXCIgKyBhSWR4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNldCAod2hpY2ggaGFzIHRoZSBwcm9wZXIgaW5kaWNlc1xuICAgKiBpbmRpY2F0ZWQgYnkgaW5kZXhPZikuIE5vdGUgdGhhdCB0aGlzIGlzIGEgY29weSBvZiB0aGUgaW50ZXJuYWwgYXJyYXkgdXNlZFxuICAgKiBmb3Igc3RvcmluZyB0aGUgbWVtYmVycyBzbyB0aGF0IG5vIG9uZSBjYW4gbWVzcyB3aXRoIGludGVybmFsIHN0YXRlLlxuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXkuc2xpY2UoKTtcbiAgfVxufVxuZXhwb3J0cy5BcnJheVNldCA9IEFycmF5U2V0O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqXG4gKiBCYXNlZCBvbiB0aGUgQmFzZSA2NCBWTFEgaW1wbGVtZW50YXRpb24gaW4gQ2xvc3VyZSBDb21waWxlcjpcbiAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2xvc3VyZS1jb21waWxlci9zb3VyY2UvYnJvd3NlL3RydW5rL3NyYy9jb20vZ29vZ2xlL2RlYnVnZ2luZy9zb3VyY2VtYXAvQmFzZTY0VkxRLmphdmFcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSBUaGUgQ2xvc3VyZSBDb21waWxlciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmVcbiAqICAgIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4gKiAgICBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWRcbiAqICAgIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgR29vZ2xlIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZFxuICogICAgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gKiBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTllcbiAqIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG5jb25zdCBiYXNlNjQgPSByZXF1aXJlKFwiLi9iYXNlNjRcIik7XG5cbi8vIEEgc2luZ2xlIGJhc2UgNjQgZGlnaXQgY2FuIGNvbnRhaW4gNiBiaXRzIG9mIGRhdGEuIEZvciB0aGUgYmFzZSA2NCB2YXJpYWJsZVxuLy8gbGVuZ3RoIHF1YW50aXRpZXMgd2UgdXNlIGluIHRoZSBzb3VyY2UgbWFwIHNwZWMsIHRoZSBmaXJzdCBiaXQgaXMgdGhlIHNpZ24sXG4vLyB0aGUgbmV4dCBmb3VyIGJpdHMgYXJlIHRoZSBhY3R1YWwgdmFsdWUsIGFuZCB0aGUgNnRoIGJpdCBpcyB0aGVcbi8vIGNvbnRpbnVhdGlvbiBiaXQuIFRoZSBjb250aW51YXRpb24gYml0IHRlbGxzIHVzIHdoZXRoZXIgdGhlcmUgYXJlIG1vcmVcbi8vIGRpZ2l0cyBpbiB0aGlzIHZhbHVlIGZvbGxvd2luZyB0aGlzIGRpZ2l0LlxuLy9cbi8vICAgQ29udGludWF0aW9uXG4vLyAgIHwgICAgU2lnblxuLy8gICB8ICAgIHxcbi8vICAgViAgICBWXG4vLyAgIDEwMTAxMVxuXG5jb25zdCBWTFFfQkFTRV9TSElGVCA9IDU7XG5cbi8vIGJpbmFyeTogMTAwMDAwXG5jb25zdCBWTFFfQkFTRSA9IDEgPDwgVkxRX0JBU0VfU0hJRlQ7XG5cbi8vIGJpbmFyeTogMDExMTExXG5jb25zdCBWTFFfQkFTRV9NQVNLID0gVkxRX0JBU0UgLSAxO1xuXG4vLyBiaW5hcnk6IDEwMDAwMFxuY29uc3QgVkxRX0NPTlRJTlVBVElPTl9CSVQgPSBWTFFfQkFTRTtcblxuLyoqXG4gKiBDb252ZXJ0cyBmcm9tIGEgdHdvLWNvbXBsZW1lbnQgdmFsdWUgdG8gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICogICAxIGJlY29tZXMgMiAoMTAgYmluYXJ5KSwgLTEgYmVjb21lcyAzICgxMSBiaW5hcnkpXG4gKiAgIDIgYmVjb21lcyA0ICgxMDAgYmluYXJ5KSwgLTIgYmVjb21lcyA1ICgxMDEgYmluYXJ5KVxuICovXG5mdW5jdGlvbiB0b1ZMUVNpZ25lZChhVmFsdWUpIHtcbiAgcmV0dXJuIGFWYWx1ZSA8IDBcbiAgICA/ICgoLWFWYWx1ZSkgPDwgMSkgKyAxXG4gICAgOiAoYVZhbHVlIDw8IDEpICsgMDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0byBhIHR3by1jb21wbGVtZW50IHZhbHVlIGZyb20gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICogICAyICgxMCBiaW5hcnkpIGJlY29tZXMgMSwgMyAoMTEgYmluYXJ5KSBiZWNvbWVzIC0xXG4gKiAgIDQgKDEwMCBiaW5hcnkpIGJlY29tZXMgMiwgNSAoMTAxIGJpbmFyeSkgYmVjb21lcyAtMlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmZ1bmN0aW9uIGZyb21WTFFTaWduZWQoYVZhbHVlKSB7XG4gIGNvbnN0IGlzTmVnYXRpdmUgPSAoYVZhbHVlICYgMSkgPT09IDE7XG4gIGNvbnN0IHNoaWZ0ZWQgPSBhVmFsdWUgPj4gMTtcbiAgcmV0dXJuIGlzTmVnYXRpdmVcbiAgICA/IC1zaGlmdGVkXG4gICAgOiBzaGlmdGVkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgNjQgVkxRIGVuY29kZWQgdmFsdWUuXG4gKi9cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2VuY29kZShhVmFsdWUpIHtcbiAgbGV0IGVuY29kZWQgPSBcIlwiO1xuICBsZXQgZGlnaXQ7XG5cbiAgbGV0IHZscSA9IHRvVkxRU2lnbmVkKGFWYWx1ZSk7XG5cbiAgZG8ge1xuICAgIGRpZ2l0ID0gdmxxICYgVkxRX0JBU0VfTUFTSztcbiAgICB2bHEgPj4+PSBWTFFfQkFTRV9TSElGVDtcbiAgICBpZiAodmxxID4gMCkge1xuICAgICAgLy8gVGhlcmUgYXJlIHN0aWxsIG1vcmUgZGlnaXRzIGluIHRoaXMgdmFsdWUsIHNvIHdlIG11c3QgbWFrZSBzdXJlIHRoZVxuICAgICAgLy8gY29udGludWF0aW9uIGJpdCBpcyBtYXJrZWQuXG4gICAgICBkaWdpdCB8PSBWTFFfQ09OVElOVUFUSU9OX0JJVDtcbiAgICB9XG4gICAgZW5jb2RlZCArPSBiYXNlNjQuZW5jb2RlKGRpZ2l0KTtcbiAgfSB3aGlsZSAodmxxID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG5jb25zdCBpbnRUb0NoYXJNYXAgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIi5zcGxpdChcIlwiKTtcblxuLyoqXG4gKiBFbmNvZGUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2Ugb2YgMCB0byA2MyB0byBhIHNpbmdsZSBiYXNlIDY0IGRpZ2l0LlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKG51bWJlcikge1xuICBpZiAoMCA8PSBudW1iZXIgJiYgbnVtYmVyIDwgaW50VG9DaGFyTWFwLmxlbmd0aCkge1xuICAgIHJldHVybiBpbnRUb0NoYXJNYXBbbnVtYmVyXTtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYzOiBcIiArIG51bWJlcik7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG5leHBvcnRzLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcbmV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZSBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoLlxuICpcbiAqIEBwYXJhbSBhTG93IEluZGljZXMgaGVyZSBhbmQgbG93ZXIgZG8gbm90IGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAqIEBwYXJhbSBhSGlnaCBJbmRpY2VzIGhlcmUgYW5kIGhpZ2hlciBkbyBub3QgY29udGFpbiB0aGUgbmVlZGxlLlxuICogQHBhcmFtIGFOZWVkbGUgVGhlIGVsZW1lbnQgYmVpbmcgc2VhcmNoZWQgZm9yLlxuICogQHBhcmFtIGFIYXlzdGFjayBUaGUgbm9uLWVtcHR5IGFycmF5IGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIGFDb21wYXJlIEZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3byBlbGVtZW50cyBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMS5cbiAqIEBwYXJhbSBhQmlhcyBFaXRoZXIgJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gcmVjdXJzaXZlU2VhcmNoKGFMb3csIGFIaWdoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICAvLyBUaGlzIGZ1bmN0aW9uIHRlcm1pbmF0ZXMgd2hlbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICAvL1xuICAvLyAgIDEuIFdlIGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAvL1xuICAvLyAgIDIuIFdlIGRpZCBub3QgZmluZCB0aGUgZXhhY3QgZWxlbWVudCwgYnV0IHdlIGNhbiByZXR1cm4gdGhlIGluZGV4IG9mXG4gIC8vICAgICAgdGhlIG5leHQtY2xvc2VzdCBlbGVtZW50LlxuICAvL1xuICAvLyAgIDMuIFdlIGRpZCBub3QgZmluZCB0aGUgZXhhY3QgZWxlbWVudCwgYW5kIHRoZXJlIGlzIG5vIG5leHQtY2xvc2VzdFxuICAvLyAgICAgIGVsZW1lbnQgdGhhbiB0aGUgb25lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCBzbyB3ZSByZXR1cm4gLTEuXG4gIGNvbnN0IG1pZCA9IE1hdGguZmxvb3IoKGFIaWdoIC0gYUxvdykgLyAyKSArIGFMb3c7XG4gIGNvbnN0IGNtcCA9IGFDb21wYXJlKGFOZWVkbGUsIGFIYXlzdGFja1ttaWRdLCB0cnVlKTtcbiAgaWYgKGNtcCA9PT0gMCkge1xuICAgIC8vIEZvdW5kIHRoZSBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgICByZXR1cm4gbWlkO1xuICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAvLyBPdXIgbmVlZGxlIGlzIGdyZWF0ZXIgdGhhbiBhSGF5c3RhY2tbbWlkXS5cbiAgICBpZiAoYUhpZ2ggLSBtaWQgPiAxKSB7XG4gICAgICAvLyBUaGUgZWxlbWVudCBpcyBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgIHJldHVybiByZWN1cnNpdmVTZWFyY2gobWlkLCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgIH1cblxuICAgIC8vIFRoZSBleGFjdCBuZWVkbGUgZWxlbWVudCB3YXMgbm90IGZvdW5kIGluIHRoaXMgaGF5c3RhY2suIERldGVybWluZSBpZlxuICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgIHJldHVybiBhSGlnaCA8IGFIYXlzdGFjay5sZW5ndGggPyBhSGlnaCA6IC0xO1xuICAgIH1cbiAgICByZXR1cm4gbWlkO1xuICB9XG5cbiAgLy8gT3VyIG5lZWRsZSBpcyBsZXNzIHRoYW4gYUhheXN0YWNrW21pZF0uXG4gIGlmIChtaWQgLSBhTG93ID4gMSkge1xuICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSBsb3dlciBoYWxmLlxuICAgIHJldHVybiByZWN1cnNpdmVTZWFyY2goYUxvdywgbWlkLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcyk7XG4gIH1cblxuICAvLyB3ZSBhcmUgaW4gdGVybWluYXRpb24gY2FzZSAoMykgb3IgKDIpIGFuZCByZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHRoaW5nLlxuICBpZiAoYUJpYXMgPT0gZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCkge1xuICAgIHJldHVybiBtaWQ7XG4gIH1cbiAgcmV0dXJuIGFMb3cgPCAwID8gLTEgOiBhTG93O1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYmluYXJ5IHNlYXJjaCB3aGljaCB3aWxsIGFsd2F5cyB0cnkgYW5kIHJldHVyblxuICogdGhlIGluZGV4IG9mIHRoZSBjbG9zZXN0IGVsZW1lbnQgaWYgdGhlcmUgaXMgbm8gZXhhY3QgaGl0LiBUaGlzIGlzIGJlY2F1c2VcbiAqIG1hcHBpbmdzIGJldHdlZW4gb3JpZ2luYWwgYW5kIGdlbmVyYXRlZCBsaW5lL2NvbCBwYWlycyBhcmUgc2luZ2xlIHBvaW50cyxcbiAqIGFuZCB0aGVyZSBpcyBhbiBpbXBsaWNpdCByZWdpb24gYmV0d2VlbiBlYWNoIG9mIHRoZW0sIHNvIGEgbWlzcyBqdXN0IG1lYW5zXG4gKiB0aGF0IHlvdSBhcmVuJ3Qgb24gdGhlIHZlcnkgc3RhcnQgb2YgYSByZWdpb24uXG4gKlxuICogQHBhcmFtIGFOZWVkbGUgVGhlIGVsZW1lbnQgeW91IGFyZSBsb29raW5nIGZvci5cbiAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIGFycmF5IHRoYXQgaXMgYmVpbmcgc2VhcmNoZWQuXG4gKiBAcGFyYW0gYUNvbXBhcmUgQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0aGUgbmVlZGxlIGFuZCBhbiBlbGVtZW50IGluIHRoZVxuICogICAgIGFycmF5IGFuZCByZXR1cm5zIC0xLCAwLCBvciAxIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBuZWVkbGUgaXMgbGVzc1xuICogICAgIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlIGVsZW1lbnQsIHJlc3BlY3RpdmVseS5cbiAqIEBwYXJhbSBhQmlhcyBFaXRoZXIgJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqL1xuZXhwb3J0cy5zZWFyY2ggPSBmdW5jdGlvbiBzZWFyY2goYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpIHtcbiAgaWYgKGFIYXlzdGFjay5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBsZXQgaW5kZXggPSByZWN1cnNpdmVTZWFyY2goLTEsIGFIYXlzdGFjay5sZW5ndGgsIGFOZWVkbGUsIGFIYXlzdGFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb21wYXJlLCBhQmlhcyB8fCBleHBvcnRzLkdSRUFURVNUX0xPV0VSX0JPVU5EKTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8vIFdlIGhhdmUgZm91bmQgZWl0aGVyIHRoZSBleGFjdCBlbGVtZW50LCBvciB0aGUgbmV4dC1jbG9zZXN0IGVsZW1lbnQgdGhhblxuICAvLyB0aGUgb25lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLiBIb3dldmVyLCB0aGVyZSBtYXkgYmUgbW9yZSB0aGFuIG9uZSBzdWNoXG4gIC8vIGVsZW1lbnQuIE1ha2Ugc3VyZSB3ZSBhbHdheXMgcmV0dXJuIHRoZSBzbWFsbGVzdCBvZiB0aGVzZS5cbiAgd2hpbGUgKGluZGV4IC0gMSA+PSAwKSB7XG4gICAgaWYgKGFDb21wYXJlKGFIYXlzdGFja1tpbmRleF0sIGFIYXlzdGFja1tpbmRleCAtIDFdLCB0cnVlKSAhPT0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC0taW5kZXg7XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDE0IE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciBtYXBwaW5nQiBpcyBhZnRlciBtYXBwaW5nQSB3aXRoIHJlc3BlY3QgdG8gZ2VuZXJhdGVkXG4gKiBwb3NpdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVkUG9zaXRpb25BZnRlcihtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgLy8gT3B0aW1pemVkIGZvciBtb3N0IGNvbW1vbiBjYXNlXG4gIGNvbnN0IGxpbmVBID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZTtcbiAgY29uc3QgbGluZUIgPSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBjb25zdCBjb2x1bW5BID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uO1xuICBjb25zdCBjb2x1bW5CID0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICByZXR1cm4gbGluZUIgPiBsaW5lQSB8fCBsaW5lQiA9PSBsaW5lQSAmJiBjb2x1bW5CID49IGNvbHVtbkEgfHxcbiAgICAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCKSA8PSAwO1xufVxuXG4vKipcbiAqIEEgZGF0YSBzdHJ1Y3R1cmUgdG8gcHJvdmlkZSBhIHNvcnRlZCB2aWV3IG9mIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIGFcbiAqIHBlcmZvcm1hbmNlIGNvbnNjaW91cyBtYW5uZXIuIEl0IHRyYWRlcyBhIG5lZ2xpZ2libGUgb3ZlcmhlYWQgaW4gZ2VuZXJhbFxuICogY2FzZSBmb3IgYSBsYXJnZSBzcGVlZHVwIGluIGNhc2Ugb2YgbWFwcGluZ3MgYmVpbmcgYWRkZWQgaW4gb3JkZXIuXG4gKi9cbmNsYXNzIE1hcHBpbmdMaXN0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICAgIC8vIFNlcnZlcyBhcyBpbmZpbXVtXG4gICAgdGhpcy5fbGFzdCA9IHtnZW5lcmF0ZWRMaW5lOiAtMSwgZ2VuZXJhdGVkQ29sdW1uOiAwfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIHRocm91Z2ggaW50ZXJuYWwgaXRlbXMuIFRoaXMgbWV0aG9kIHRha2VzIHRoZSBzYW1lIGFyZ3VtZW50cyB0aGF0XG4gICAqIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgdGFrZXMuXG4gICAqXG4gICAqIE5PVEU6IFRoZSBvcmRlciBvZiB0aGUgbWFwcGluZ3MgaXMgTk9UIGd1YXJhbnRlZWQuXG4gICAqL1xuICB1bnNvcnRlZEZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZykge1xuICAgIHRoaXMuX2FycmF5LmZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIHRoZSBnaXZlbiBzb3VyY2UgbWFwcGluZy5cbiAgICpcbiAgICogQHBhcmFtIE9iamVjdCBhTWFwcGluZ1xuICAgKi9cbiAgYWRkKGFNYXBwaW5nKSB7XG4gICAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIodGhpcy5fbGFzdCwgYU1hcHBpbmcpKSB7XG4gICAgICB0aGlzLl9sYXN0ID0gYU1hcHBpbmc7XG4gICAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc29ydGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmxhdCwgc29ydGVkIGFycmF5IG9mIG1hcHBpbmdzLiBUaGUgbWFwcGluZ3MgYXJlIHNvcnRlZCBieVxuICAgKiBnZW5lcmF0ZWQgcG9zaXRpb24uXG4gICAqXG4gICAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHJldHVybnMgaW50ZXJuYWwgZGF0YSB3aXRob3V0IGNvcHlpbmcsIGZvclxuICAgKiBwZXJmb3JtYW5jZS4gVGhlIHJldHVybiB2YWx1ZSBtdXN0IE5PVCBiZSBtdXRhdGVkLCBhbmQgc2hvdWxkIGJlIHRyZWF0ZWQgYXNcbiAgICogYW4gaW1tdXRhYmxlIGJvcnJvdy4gSWYgeW91IHdhbnQgdG8gdGFrZSBvd25lcnNoaXAsIHlvdSBtdXN0IG1ha2UgeW91ciBvd25cbiAgICogY29weS5cbiAgICovXG4gIHRvQXJyYXkoKSB7XG4gICAgaWYgKCF0aGlzLl9zb3J0ZWQpIHtcbiAgICAgIHRoaXMuX2FycmF5LnNvcnQodXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCk7XG4gICAgICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYXJyYXk7XG4gIH1cbn1cblxuZXhwb3J0cy5NYXBwaW5nTGlzdCA9IE1hcHBpbmdMaXN0O1xuIiwiaWYgKHR5cGVvZiBmZXRjaCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIC8vIFdlYiB2ZXJzaW9uIG9mIHJlYWRpbmcgYSB3YXNtIGZpbGUgaW50byBhbiBhcnJheSBidWZmZXIuXG5cbiAgbGV0IG1hcHBpbmdzV2FzbVVybCA9IG51bGw7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZWFkV2FzbSgpIHtcbiAgICBpZiAodHlwZW9mIG1hcHBpbmdzV2FzbVVybCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcHJvdmlkZSB0aGUgVVJMIG9mIGxpYi9tYXBwaW5ncy53YXNtIGJ5IGNhbGxpbmcgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiU291cmNlTWFwQ29uc3VtZXIuaW5pdGlhbGl6ZSh7ICdsaWIvbWFwcGluZ3Mud2FzbSc6IC4uLiB9KSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgXCJiZWZvcmUgdXNpbmcgU291cmNlTWFwQ29uc3VtZXJcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZldGNoKG1hcHBpbmdzV2FzbVVybClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLmluaXRpYWxpemUgPSB1cmwgPT4gbWFwcGluZ3NXYXNtVXJsID0gdXJsO1xufSBlbHNlIHtcbiAgLy8gTm9kZSB2ZXJzaW9uIG9mIHJlYWRpbmcgYSB3YXNtIGZpbGUgaW50byBhbiBhcnJheSBidWZmZXIuXG4gIGNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuICBjb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZWFkV2FzbSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3Qgd2FzbVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCBcIm1hcHBpbmdzLndhc21cIik7XG4gICAgICBmcy5yZWFkRmlsZSh3YXNtUGF0aCwgbnVsbCwgKGVycm9yLCBkYXRhKSA9PiB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZShkYXRhLmJ1ZmZlcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5pbml0aWFsaXplID0gXyA9PiB7XG4gICAgY29uc29sZS5kZWJ1ZyhcIlNvdXJjZU1hcENvbnN1bWVyLmluaXRpYWxpemUgaXMgYSBuby1vcCB3aGVuIHJ1bm5pbmcgaW4gbm9kZS5qc1wiKTtcbiAgfTtcbn1cbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jb25zdCBiaW5hcnlTZWFyY2ggPSByZXF1aXJlKFwiLi9iaW5hcnktc2VhcmNoXCIpO1xuY29uc3QgQXJyYXlTZXQgPSByZXF1aXJlKFwiLi9hcnJheS1zZXRcIikuQXJyYXlTZXQ7XG5jb25zdCBiYXNlNjRWTFEgPSByZXF1aXJlKFwiLi9iYXNlNjQtdmxxXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5jb25zdCByZWFkV2FzbSA9IHJlcXVpcmUoXCIuLi9saWIvcmVhZC13YXNtXCIpO1xuY29uc3Qgd2FzbSA9IHJlcXVpcmUoXCIuL3dhc21cIik7XG5cbmNvbnN0IElOVEVSTkFMID0gU3ltYm9sKFwic21jSW50ZXJuYWxcIik7XG5cbmNsYXNzIFNvdXJjZU1hcENvbnN1bWVyIHtcbiAgY29uc3RydWN0b3IoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICAgIC8vIElmIHRoZSBjb25zdHJ1Y3RvciB3YXMgY2FsbGVkIGJ5IHN1cGVyKCksIGp1c3QgcmV0dXJuIFByb21pc2U8dGhpcz4uXG4gICAgLy8gWWVzLCB0aGlzIGlzIGEgaGFjayB0byByZXRhaW4gdGhlIHByZS1leGlzdGluZyBBUEkgb2YgdGhlIGJhc2UtY2xhc3NcbiAgICAvLyBjb25zdHJ1Y3RvciBhbHNvIGJlaW5nIGFuIGFzeW5jIGZhY3RvcnkgZnVuY3Rpb24uXG4gICAgaWYgKGFTb3VyY2VNYXAgPT0gSU5URVJOQUwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9mYWN0b3J5KGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpO1xuICB9XG5cbiAgc3RhdGljIGluaXRpYWxpemUob3B0cykge1xuICAgIHJlYWRXYXNtLmluaXRpYWxpemUob3B0c1tcImxpYi9tYXBwaW5ncy53YXNtXCJdKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tU291cmNlTWFwKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgICByZXR1cm4gX2ZhY3RvcnlCU00oYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGBTb3VyY2VNYXBDb25zdW1lcmAgZnJvbSBgcmF3U291cmNlTWFwYCBhbmQgYHNvdXJjZU1hcFVybGBcbiAgICogKHNlZSB0aGUgYFNvdXJjZU1hcENvbnN1bWVyYCBjb25zdHJ1Y3RvciBmb3IgZGV0YWlscy4gVGhlbiwgaW52b2tlIHRoZSBgYXN5bmNcbiAgICogZnVuY3Rpb24gZihTb3VyY2VNYXBDb25zdW1lcikgLT4gVGAgd2l0aCB0aGUgbmV3bHkgY29uc3RydWN0ZWQgY29uc3VtZXIsIHdhaXRcbiAgICogZm9yIGBmYCB0byBjb21wbGV0ZSwgY2FsbCBgZGVzdHJveWAgb24gdGhlIGNvbnN1bWVyLCBhbmQgcmV0dXJuIGBmYCdzIHJldHVyblxuICAgKiB2YWx1ZS5cbiAgICpcbiAgICogWW91IG11c3Qgbm90IHVzZSB0aGUgY29uc3VtZXIgYWZ0ZXIgYGZgIGNvbXBsZXRlcyFcbiAgICpcbiAgICogQnkgdXNpbmcgYHdpdGhgLCB5b3UgZG8gbm90IGhhdmUgdG8gcmVtZW1iZXIgdG8gbWFudWFsbHkgY2FsbCBgZGVzdHJveWAgb25cbiAgICogdGhlIGNvbnN1bWVyLCBzaW5jZSBpdCB3aWxsIGJlIGNhbGxlZCBhdXRvbWF0aWNhbGx5IG9uY2UgYGZgIGNvbXBsZXRlcy5cbiAgICpcbiAgICogYGBganNcbiAgICogY29uc3QgeFNxdWFyZWQgPSBhd2FpdCBTb3VyY2VNYXBDb25zdW1lci53aXRoKFxuICAgKiAgIG15UmF3U291cmNlTWFwLFxuICAgKiAgIG51bGwsXG4gICAqICAgYXN5bmMgZnVuY3Rpb24gKGNvbnN1bWVyKSB7XG4gICAqICAgICAvLyBVc2UgYGNvbnN1bWVyYCBpbnNpZGUgaGVyZSBhbmQgZG9uJ3Qgd29ycnkgYWJvdXQgcmVtZW1iZXJpbmdcbiAgICogICAgIC8vIHRvIGNhbGwgYGRlc3Ryb3lgLlxuICAgKlxuICAgKiAgICAgY29uc3QgeCA9IGF3YWl0IHdoYXRldmVyKGNvbnN1bWVyKTtcbiAgICogICAgIHJldHVybiB4ICogeDtcbiAgICogICB9XG4gICAqICk7XG4gICAqXG4gICAqIC8vIFlvdSBtYXkgbm90IHVzZSB0aGF0IGBjb25zdW1lcmAgYW55bW9yZSBvdXQgaGVyZTsgaXQgaGFzXG4gICAqIC8vIGJlZW4gZGVzdHJveWVkLiBCdXQgeW91IGNhbiB1c2UgYHhTcXVhcmVkYC5cbiAgICogY29uc29sZS5sb2coeFNxdWFyZWQpO1xuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyB3aXRoKHJhd1NvdXJjZU1hcCwgc291cmNlTWFwVXJsLCBmKSB7XG4gICAgLy8gTm90ZTogVGhlIGBhY29ybmAgdmVyc2lvbiB0aGF0IGB3ZWJwYWNrYCBjdXJyZW50bHkgZGVwZW5kcyBvbiBkb2Vzbid0XG4gICAgLy8gc3VwcG9ydCBgYXN5bmNgIGZ1bmN0aW9ucywgYW5kIHRoZSBub2RlcyB0aGF0IHdlIHN1cHBvcnQgZG9uJ3QgYWxsIGhhdmVcbiAgICAvLyBgLmZpbmFsbHlgLiBUaGVyZWZvcmUsIHRoaXMgaXMgd3JpdHRlbiBhIGJpdCBtb3JlIGNvbnZvbHV0ZWRseSB0aGFuIGl0XG4gICAgLy8gc2hvdWxkIHJlYWxseSBiZS5cblxuICAgIGxldCBjb25zdW1lciA9IG51bGw7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBTb3VyY2VNYXBDb25zdW1lcihyYXdTb3VyY2VNYXAsIHNvdXJjZU1hcFVybCk7XG4gICAgcmV0dXJuIHByb21pc2VcbiAgICAgIC50aGVuKGMgPT4ge1xuICAgICAgICBjb25zdW1lciA9IGM7XG4gICAgICAgIHJldHVybiBmKGMpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKHggPT4ge1xuICAgICAgICBpZiAoY29uc3VtZXIpIHtcbiAgICAgICAgICBjb25zdW1lci5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9LCBlID0+IHtcbiAgICAgICAgaWYgKGNvbnN1bWVyKSB7XG4gICAgICAgICAgY29uc3VtZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gICAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICAgKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICAgKi9cbiAgX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50IF9wYXJzZU1hcHBpbmdzXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBlYWNoIG1hcHBpbmcgYmV0d2VlbiBhbiBvcmlnaW5hbCBzb3VyY2UvbGluZS9jb2x1bW4gYW5kIGFcbiAgICogZ2VuZXJhdGVkIGxpbmUvY29sdW1uIGluIHRoaXMgc291cmNlIG1hcC5cbiAgICpcbiAgICogQHBhcmFtIEZ1bmN0aW9uIGFDYWxsYmFja1xuICAgKiAgICAgICAgVGhlIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdpdGggZWFjaCBtYXBwaW5nLlxuICAgKiBAcGFyYW0gT2JqZWN0IGFDb250ZXh0XG4gICAqICAgICAgICBPcHRpb25hbC4gSWYgc3BlY2lmaWVkLCB0aGlzIG9iamVjdCB3aWxsIGJlIHRoZSB2YWx1ZSBvZiBgdGhpc2AgZXZlcnlcbiAgICogICAgICAgIHRpbWUgdGhhdCBgYUNhbGxiYWNrYCBpcyBjYWxsZWQuXG4gICAqIEBwYXJhbSBhT3JkZXJcbiAgICogICAgICAgIEVpdGhlciBgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSYCBvclxuICAgKiAgICAgICAgYFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSYC4gU3BlY2lmaWVzIHdoZXRoZXIgeW91IHdhbnQgdG9cbiAgICogICAgICAgIGl0ZXJhdGUgb3ZlciB0aGUgbWFwcGluZ3Mgc29ydGVkIGJ5IHRoZSBnZW5lcmF0ZWQgZmlsZSdzIGxpbmUvY29sdW1uXG4gICAqICAgICAgICBvcmRlciBvciB0aGUgb3JpZ2luYWwncyBzb3VyY2UvbGluZS9jb2x1bW4gb3JkZXIsIHJlc3BlY3RpdmVseS4gRGVmYXVsdHMgdG9cbiAgICogICAgICAgIGBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVJgLlxuICAgKi9cbiAgZWFjaE1hcHBpbmcoYUNhbGxiYWNrLCBhQ29udGV4dCwgYU9yZGVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3ViY2xhc3NlcyBtdXN0IGltcGxlbWVudCBlYWNoTWFwcGluZ1wiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICAgKiBsaW5lLCBhbmQgY29sdW1uIHByb3ZpZGVkLiBJZiBubyBjb2x1bW4gaXMgcHJvdmlkZWQsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gICAqIGNvcnJlc3BvbmRpbmcgdG8gYSBlaXRoZXIgdGhlIGxpbmUgd2UgYXJlIHNlYXJjaGluZyBmb3Igb3IgdGhlIG5leHRcbiAgICogY2xvc2VzdCBsaW5lIHRoYXQgaGFzIGFueSBtYXBwaW5ncy4gT3RoZXJ3aXNlLCByZXR1cm5zIGFsbCBtYXBwaW5nc1xuICAgKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBsaW5lIGFuZCBlaXRoZXIgdGhlIGNvbHVtbiB3ZSBhcmUgc2VhcmNoaW5nIGZvclxuICAgKiBvciB0aGUgbmV4dCBjbG9zZXN0IGNvbHVtbiB0aGF0IGhhcyBhbnkgb2Zmc2V0cy5cbiAgICpcbiAgICogVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gICAqICAgLSBjb2x1bW46IE9wdGlvbmFsLiB0aGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICAgKlxuICAgKiBhbmQgYW4gYXJyYXkgb2Ygb2JqZWN0cyBpcyByZXR1cm5lZCwgZWFjaCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICAgKiAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICAgKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAgICogICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAgICovXG4gIGFsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvcihhQXJncykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yXCIpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50IGRlc3Ryb3lcIik7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5Tb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVIgPSAxO1xuU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVIgPSAyO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCA9IDE7XG5Tb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCA9IDI7XG5cbmV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBBIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoIHdlIGNhblxuICogcXVlcnkgZm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBmaWxlIHBvc2l0aW9ucyBieSBnaXZpbmcgaXQgYSBmaWxlXG4gKiBwb3NpdGlvbiBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqXG4gKiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIHRoZSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yXG4gKiBhbHJlYWR5IHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNvdXJjZSBtYXBzIGhhdmUgdGhlXG4gKiBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAqXG4gKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAqICAgLSBzb3VyY2VzOiBBbiBhcnJheSBvZiBVUkxzIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiAgIC0gbmFtZXM6IEFuIGFycmF5IG9mIGlkZW50aWZpZXJzIHdoaWNoIGNhbiBiZSByZWZlcmVuY2VkIGJ5IGluZGl2aWR1YWwgbWFwcGluZ3MuXG4gKiAgIC0gc291cmNlUm9vdDogT3B0aW9uYWwuIFRoZSBVUkwgcm9vdCBmcm9tIHdoaWNoIGFsbCBzb3VyY2VzIGFyZSByZWxhdGl2ZS5cbiAqICAgLSBzb3VyY2VzQ29udGVudDogT3B0aW9uYWwuIEFuIGFycmF5IG9mIGNvbnRlbnRzIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiAgIC0gbWFwcGluZ3M6IEEgc3RyaW5nIG9mIGJhc2U2NCBWTFFzIHdoaWNoIGNvbnRhaW4gdGhlIGFjdHVhbCBtYXBwaW5ncy5cbiAqICAgLSBmaWxlOiBPcHRpb25hbC4gVGhlIGdlbmVyYXRlZCBmaWxlIHRoaXMgc291cmNlIG1hcCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKlxuICogSGVyZSBpcyBhbiBleGFtcGxlIHNvdXJjZSBtYXAsIHRha2VuIGZyb20gdGhlIHNvdXJjZSBtYXAgc3BlY1swXTpcbiAqXG4gKiAgICAge1xuICogICAgICAgdmVyc2lvbiA6IDMsXG4gKiAgICAgICBmaWxlOiBcIm91dC5qc1wiLFxuICogICAgICAgc291cmNlUm9vdCA6IFwiXCIsXG4gKiAgICAgICBzb3VyY2VzOiBbXCJmb28uanNcIiwgXCJiYXIuanNcIl0sXG4gKiAgICAgICBuYW1lczogW1wic3JjXCIsIFwibWFwc1wiLCBcImFyZVwiLCBcImZ1blwiXSxcbiAqICAgICAgIG1hcHBpbmdzOiBcIkFBLEFCOztBQkNERTtcIlxuICogICAgIH1cbiAqXG4gKiBUaGUgc2Vjb25kIHBhcmFtZXRlciwgaWYgZ2l2ZW4sIGlzIGEgc3RyaW5nIHdob3NlIHZhbHVlIGlzIHRoZSBVUkxcbiAqIGF0IHdoaWNoIHRoZSBzb3VyY2UgbWFwIHdhcyBmb3VuZC4gIFRoaXMgVVJMIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAqIHNvdXJjZXMgYXJyYXkuXG4gKlxuICogWzBdOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFVMVJHQWVoUXdSeXBVVG92RjFLUmxwaU9GemUwYi1fMmdjNmZBSDBLWTBrL2VkaXQ/cGxpPTEjXG4gKi9cbmNsYXNzIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgZXh0ZW5kcyBTb3VyY2VNYXBDb25zdW1lciB7XG4gIGNvbnN0cnVjdG9yKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgICByZXR1cm4gc3VwZXIoSU5URVJOQUwpLnRoZW4odGhhdCA9PiB7XG4gICAgICBsZXQgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgICAgIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsIFwidmVyc2lvblwiKTtcbiAgICAgIGxldCBzb3VyY2VzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCBcInNvdXJjZXNcIik7XG4gICAgICAvLyBTYXNzIDMuMyBsZWF2ZXMgb3V0IHRoZSAnbmFtZXMnIGFycmF5LCBzbyB3ZSBkZXZpYXRlIGZyb20gdGhlIHNwZWMgKHdoaWNoXG4gICAgICAvLyByZXF1aXJlcyB0aGUgYXJyYXkpIHRvIHBsYXkgbmljZSBoZXJlLlxuICAgICAgY29uc3QgbmFtZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsIFwibmFtZXNcIiwgW10pO1xuICAgICAgbGV0IHNvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsIFwic291cmNlUm9vdFwiLCBudWxsKTtcbiAgICAgIGNvbnN0IHNvdXJjZXNDb250ZW50ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCBcInNvdXJjZXNDb250ZW50XCIsIG51bGwpO1xuICAgICAgY29uc3QgbWFwcGluZ3MgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsIFwibWFwcGluZ3NcIik7XG4gICAgICBjb25zdCBmaWxlID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCBcImZpbGVcIiwgbnVsbCk7XG5cbiAgICAgIC8vIE9uY2UgYWdhaW4sIFNhc3MgZGV2aWF0ZXMgZnJvbSB0aGUgc3BlYyBhbmQgc3VwcGxpZXMgdGhlIHZlcnNpb24gYXMgYVxuICAgICAgLy8gc3RyaW5nIHJhdGhlciB0aGFuIGEgbnVtYmVyLCBzbyB3ZSB1c2UgbG9vc2UgZXF1YWxpdHkgY2hlY2tpbmcgaGVyZS5cbiAgICAgIGlmICh2ZXJzaW9uICE9IHRoYXQuX3ZlcnNpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgdmVyc2lvbjogXCIgKyB2ZXJzaW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNvdXJjZVJvb3QpIHtcbiAgICAgICAgc291cmNlUm9vdCA9IHV0aWwubm9ybWFsaXplKHNvdXJjZVJvb3QpO1xuICAgICAgfVxuXG4gICAgICBzb3VyY2VzID0gc291cmNlc1xuICAgICAgICAubWFwKFN0cmluZylcbiAgICAgICAgLy8gU29tZSBzb3VyY2UgbWFwcyBwcm9kdWNlIHJlbGF0aXZlIHNvdXJjZSBwYXRocyBsaWtlIFwiLi9mb28uanNcIiBpbnN0ZWFkIG9mXG4gICAgICAgIC8vIFwiZm9vLmpzXCIuICBOb3JtYWxpemUgdGhlc2UgZmlyc3Qgc28gdGhhdCBmdXR1cmUgY29tcGFyaXNvbnMgd2lsbCBzdWNjZWVkLlxuICAgICAgICAvLyBTZWUgYnVnemlsLmxhLzEwOTA3NjguXG4gICAgICAgIC5tYXAodXRpbC5ub3JtYWxpemUpXG4gICAgICAgIC8vIEFsd2F5cyBlbnN1cmUgdGhhdCBhYnNvbHV0ZSBzb3VyY2VzIGFyZSBpbnRlcm5hbGx5IHN0b3JlZCByZWxhdGl2ZSB0b1xuICAgICAgICAvLyB0aGUgc291cmNlIHJvb3QsIGlmIHRoZSBzb3VyY2Ugcm9vdCBpcyBhYnNvbHV0ZS4gTm90IGRvaW5nIHRoaXMgd291bGRcbiAgICAgICAgLy8gYmUgcGFydGljdWxhcmx5IHByb2JsZW1hdGljIHdoZW4gdGhlIHNvdXJjZSByb290IGlzIGEgcHJlZml4IG9mIHRoZVxuICAgICAgICAvLyBzb3VyY2UgKHZhbGlkLCBidXQgd2h5Pz8pLiBTZWUgZ2l0aHViIGlzc3VlICMxOTkgYW5kIGJ1Z3ppbC5sYS8xMTg4OTgyLlxuICAgICAgICAubWFwKGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICAgIHJldHVybiBzb3VyY2VSb290ICYmIHV0aWwuaXNBYnNvbHV0ZShzb3VyY2VSb290KSAmJiB1dGlsLmlzQWJzb2x1dGUoc291cmNlKVxuICAgICAgICAgICAgPyB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZSlcbiAgICAgICAgICAgIDogc291cmNlO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gUGFzcyBgdHJ1ZWAgYmVsb3cgdG8gYWxsb3cgZHVwbGljYXRlIG5hbWVzIGFuZCBzb3VyY2VzLiBXaGlsZSBzb3VyY2UgbWFwc1xuICAgICAgLy8gYXJlIGludGVuZGVkIHRvIGJlIGNvbXByZXNzZWQgYW5kIGRlZHVwbGljYXRlZCwgdGhlIFR5cGVTY3JpcHQgY29tcGlsZXJcbiAgICAgIC8vIHNvbWV0aW1lcyBnZW5lcmF0ZXMgc291cmNlIG1hcHMgd2l0aCBkdXBsaWNhdGVzIGluIHRoZW0uIFNlZSBHaXRodWIgaXNzdWVcbiAgICAgIC8vICM3MiBhbmQgYnVnemlsLmxhLzg4OTQ5Mi5cbiAgICAgIHRoYXQuX25hbWVzID0gQXJyYXlTZXQuZnJvbUFycmF5KG5hbWVzLm1hcChTdHJpbmcpLCB0cnVlKTtcbiAgICAgIHRoYXQuX3NvdXJjZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoc291cmNlcywgdHJ1ZSk7XG5cbiAgICAgIHRoYXQuX2Fic29sdXRlU291cmNlcyA9IHRoYXQuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbihzKSB7XG4gICAgICAgIHJldHVybiB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc291cmNlUm9vdCwgcywgYVNvdXJjZU1hcFVSTCk7XG4gICAgICB9KTtcblxuICAgICAgdGhhdC5zb3VyY2VSb290ID0gc291cmNlUm9vdDtcbiAgICAgIHRoYXQuc291cmNlc0NvbnRlbnQgPSBzb3VyY2VzQ29udGVudDtcbiAgICAgIHRoYXQuX21hcHBpbmdzID0gbWFwcGluZ3M7XG4gICAgICB0aGF0Ll9zb3VyY2VNYXBVUkwgPSBhU291cmNlTWFwVVJMO1xuICAgICAgdGhhdC5maWxlID0gZmlsZTtcblxuICAgICAgdGhhdC5fY29tcHV0ZWRDb2x1bW5TcGFucyA9IGZhbHNlO1xuICAgICAgdGhhdC5fbWFwcGluZ3NQdHIgPSAwO1xuICAgICAgdGhhdC5fd2FzbSA9IG51bGw7XG5cbiAgICAgIHJldHVybiB3YXNtKCkudGhlbih3ID0+IHtcbiAgICAgICAgdGhhdC5fd2FzbSA9IHc7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBmaW5kIHRoZSBpbmRleCBvZiBhIHNvdXJjZS4gIFJldHVybnMgLTEgaWYgbm90XG4gICAqIGZvdW5kLlxuICAgKi9cbiAgX2ZpbmRTb3VyY2VJbmRleChhU291cmNlKSB7XG4gICAgbGV0IHJlbGF0aXZlU291cmNlID0gYVNvdXJjZTtcbiAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHJlbGF0aXZlU291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIHJlbGF0aXZlU291cmNlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc291cmNlcy5oYXMocmVsYXRpdmVTb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc291cmNlcy5pbmRleE9mKHJlbGF0aXZlU291cmNlKTtcbiAgICB9XG5cbiAgICAvLyBNYXliZSBhU291cmNlIGlzIGFuIGFic29sdXRlIFVSTCBhcyByZXR1cm5lZCBieSB8c291cmNlc3wuICBJblxuICAgIC8vIHRoaXMgY2FzZSB3ZSBjYW4ndCBzaW1wbHkgdW5kbyB0aGUgdHJhbnNmb3JtLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fYWJzb2x1dGVTb3VyY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAodGhpcy5fYWJzb2x1dGVTb3VyY2VzW2ldID09IGFTb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgZnJvbSBhIFNvdXJjZU1hcEdlbmVyYXRvci5cbiAgICpcbiAgICogQHBhcmFtIFNvdXJjZU1hcEdlbmVyYXRvciBhU291cmNlTWFwXG4gICAqICAgICAgICBUaGUgc291cmNlIG1hcCB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG4gICAqIEBwYXJhbSBTdHJpbmcgYVNvdXJjZU1hcFVSTFxuICAgKiAgICAgICAgVGhlIFVSTCBhdCB3aGljaCB0aGUgc291cmNlIG1hcCBjYW4gYmUgZm91bmQgKG9wdGlvbmFsKVxuICAgKiBAcmV0dXJucyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyXG4gICAqL1xuICBzdGF0aWMgZnJvbVNvdXJjZU1hcChhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gICAgcmV0dXJuIG5ldyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAudG9TdHJpbmcoKSk7XG4gIH1cblxuICBnZXQgc291cmNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fYWJzb2x1dGVTb3VyY2VzLnNsaWNlKCk7XG4gIH1cblxuICBfZ2V0TWFwcGluZ3NQdHIoKSB7XG4gICAgaWYgKHRoaXMuX21hcHBpbmdzUHRyID09PSAwKSB7XG4gICAgICB0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLCB0aGlzLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9tYXBwaW5nc1B0cjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gICAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICAgKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICAgKi9cbiAgX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICBjb25zdCBzaXplID0gYVN0ci5sZW5ndGg7XG5cbiAgICBjb25zdCBtYXBwaW5nc0J1ZlB0ciA9IHRoaXMuX3dhc20uZXhwb3J0cy5hbGxvY2F0ZV9tYXBwaW5ncyhzaXplKTtcbiAgICBjb25zdCBtYXBwaW5nc0J1ZiA9IG5ldyBVaW50OEFycmF5KHRoaXMuX3dhc20uZXhwb3J0cy5tZW1vcnkuYnVmZmVyLCBtYXBwaW5nc0J1ZlB0ciwgc2l6ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIG1hcHBpbmdzQnVmW2ldID0gYVN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIH1cblxuICAgIGNvbnN0IG1hcHBpbmdzUHRyID0gdGhpcy5fd2FzbS5leHBvcnRzLnBhcnNlX21hcHBpbmdzKG1hcHBpbmdzQnVmUHRyKTtcblxuICAgIGlmICghbWFwcGluZ3NQdHIpIHtcbiAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5fd2FzbS5leHBvcnRzLmdldF9sYXN0X2Vycm9yKCk7XG4gICAgICBsZXQgbXNnID0gYEVycm9yIHBhcnNpbmcgbWFwcGluZ3MgKGNvZGUgJHtlcnJvcn0pOiBgO1xuXG4gICAgICAvLyBYWFg6IGtlZXAgdGhlc2UgZXJyb3IgY29kZXMgaW4gc3luYyB3aXRoIGBmaXR6Z2VuL3NvdXJjZS1tYXAtbWFwcGluZ3NgLlxuICAgICAgc3dpdGNoIChlcnJvcikge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbXNnICs9IFwidGhlIG1hcHBpbmdzIGNvbnRhaW5lZCBhIG5lZ2F0aXZlIGxpbmUsIGNvbHVtbiwgc291cmNlIGluZGV4LCBvciBuYW1lIGluZGV4XCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBtc2cgKz0gXCJ0aGUgbWFwcGluZ3MgY29udGFpbmVkIGEgbnVtYmVyIGxhcmdlciB0aGFuIDIqKjMyXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtc2cgKz0gXCJyZWFjaGVkIEVPRiB3aGlsZSBpbiB0aGUgbWlkZGxlIG9mIHBhcnNpbmcgYSBWTFFcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIG1zZyArPSBcImludmFsaWQgYmFzZSA2NCBjaGFyYWN0ZXIgd2hpbGUgcGFyc2luZyBhIFZMUVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIG1zZyArPSBcInVua25vd24gZXJyb3IgY29kZVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG5cbiAgICB0aGlzLl9tYXBwaW5nc1B0ciA9IG1hcHBpbmdzUHRyO1xuICB9XG5cbiAgZWFjaE1hcHBpbmcoYUNhbGxiYWNrLCBhQ29udGV4dCwgYU9yZGVyKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGFDb250ZXh0IHx8IG51bGw7XG4gICAgY29uc3Qgb3JkZXIgPSBhT3JkZXIgfHwgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSO1xuICAgIGNvbnN0IHNvdXJjZVJvb3QgPSB0aGlzLnNvdXJjZVJvb3Q7XG5cbiAgICB0aGlzLl93YXNtLndpdGhNYXBwaW5nQ2FsbGJhY2soXG4gICAgICBtYXBwaW5nID0+IHtcbiAgICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzb3VyY2VSb290LCBtYXBwaW5nLnNvdXJjZSwgdGhpcy5fc291cmNlTWFwVVJMKTtcblxuICAgICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IHRoaXMuX25hbWVzLmF0KG1hcHBpbmcubmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYUNhbGxiYWNrLmNhbGwoY29udGV4dCwgbWFwcGluZyk7XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKG9yZGVyKSB7XG4gICAgICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSOlxuICAgICAgICAgIHRoaXMuX3dhc20uZXhwb3J0cy5ieV9nZW5lcmF0ZWRfbG9jYXRpb24odGhpcy5fZ2V0TWFwcGluZ3NQdHIoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVI6XG4gICAgICAgICAgdGhpcy5fd2FzbS5leHBvcnRzLmJ5X29yaWdpbmFsX2xvY2F0aW9uKHRoaXMuX2dldE1hcHBpbmdzUHRyKCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gb3JkZXIgb2YgaXRlcmF0aW9uLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBhbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IoYUFyZ3MpIHtcbiAgICBsZXQgc291cmNlID0gdXRpbC5nZXRBcmcoYUFyZ3MsIFwic291cmNlXCIpO1xuICAgIGNvbnN0IG9yaWdpbmFsTGluZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCBcImxpbmVcIik7XG4gICAgY29uc3Qgb3JpZ2luYWxDb2x1bW4gPSBhQXJncy5jb2x1bW4gfHwgMDtcblxuICAgIHNvdXJjZSA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChzb3VyY2UpO1xuICAgIGlmIChzb3VyY2UgPCAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgaWYgKG9yaWdpbmFsTGluZSA8IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpbmUgbnVtYmVycyBtdXN0IGJlID49IDFcIik7XG4gICAgfVxuXG4gICAgaWYgKG9yaWdpbmFsQ29sdW1uIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29sdW1uIG51bWJlcnMgbXVzdCBiZSA+PSAwXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IG1hcHBpbmdzID0gW107XG5cbiAgICB0aGlzLl93YXNtLndpdGhNYXBwaW5nQ2FsbGJhY2soXG4gICAgICBtID0+IHtcbiAgICAgICAgbGV0IGxhc3RDb2x1bW4gPSBtLmxhc3RHZW5lcmF0ZWRDb2x1bW47XG4gICAgICAgIGlmICh0aGlzLl9jb21wdXRlZENvbHVtblNwYW5zICYmIGxhc3RDb2x1bW4gPT09IG51bGwpIHtcbiAgICAgICAgICBsYXN0Q29sdW1uID0gSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgICAgbWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgbGluZTogbS5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbS5nZW5lcmF0ZWRDb2x1bW4sXG4gICAgICAgICAgbGFzdENvbHVtbixcbiAgICAgICAgfSk7XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHRoaXMuX3dhc20uZXhwb3J0cy5hbGxfZ2VuZXJhdGVkX2xvY2F0aW9uc19mb3IoXG4gICAgICAgICAgdGhpcy5fZ2V0TWFwcGluZ3NQdHIoKSxcbiAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgb3JpZ2luYWxMaW5lIC0gMSxcbiAgICAgICAgICBcImNvbHVtblwiIGluIGFBcmdzLFxuICAgICAgICAgIG9yaWdpbmFsQ29sdW1uXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHJldHVybiBtYXBwaW5ncztcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX21hcHBpbmdzUHRyICE9PSAwKSB7XG4gICAgICB0aGlzLl93YXNtLmV4cG9ydHMuZnJlZV9tYXBwaW5ncyh0aGlzLl9tYXBwaW5nc1B0cik7XG4gICAgICB0aGlzLl9tYXBwaW5nc1B0ciA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIGxhc3QgY29sdW1uIGZvciBlYWNoIGdlbmVyYXRlZCBtYXBwaW5nLiBUaGUgbGFzdCBjb2x1bW4gaXNcbiAgICogaW5jbHVzaXZlLlxuICAgKi9cbiAgY29tcHV0ZUNvbHVtblNwYW5zKCkge1xuICAgIGlmICh0aGlzLl9jb21wdXRlZENvbHVtblNwYW5zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fd2FzbS5leHBvcnRzLmNvbXB1dGVfY29sdW1uX3NwYW5zKHRoaXMuX2dldE1hcHBpbmdzUHRyKCkpO1xuICAgIHRoaXMuX2NvbXB1dGVkQ29sdW1uU3BhbnMgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSwgbGluZSwgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdlbmVyYXRlZFxuICAgKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAgICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAgICogICAgIGlzIDEtYmFzZWQuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGNvbHVtblxuICAgKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gICAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICAgKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICAgKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICAgKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gICAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICAgKlxuICAgKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICAgKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAgICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICAgKiAgICAgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICAgKiAgIC0gbmFtZTogVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIsIG9yIG51bGwuXG4gICAqL1xuICBvcmlnaW5hbFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgY29uc3QgbmVlZGxlID0ge1xuICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsIFwibGluZVwiKSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsIFwiY29sdW1uXCIpXG4gICAgfTtcblxuICAgIGlmIChuZWVkbGUuZ2VuZXJhdGVkTGluZSA8IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpbmUgbnVtYmVycyBtdXN0IGJlID49IDFcIik7XG4gICAgfVxuXG4gICAgaWYgKG5lZWRsZS5nZW5lcmF0ZWRDb2x1bW4gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb2x1bW4gbnVtYmVycyBtdXN0IGJlID49IDBcIik7XG4gICAgfVxuXG4gICAgbGV0IGJpYXMgPSB1dGlsLmdldEFyZyhhQXJncywgXCJiaWFzXCIsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKTtcbiAgICBpZiAoYmlhcyA9PSBudWxsKSB7XG4gICAgICBiaWFzID0gU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQ7XG4gICAgfVxuXG4gICAgbGV0IG1hcHBpbmc7XG4gICAgdGhpcy5fd2FzbS53aXRoTWFwcGluZ0NhbGxiYWNrKG0gPT4gbWFwcGluZyA9IG0sICgpID0+IHtcbiAgICAgIHRoaXMuX3dhc20uZXhwb3J0cy5vcmlnaW5hbF9sb2NhdGlvbl9mb3IoXG4gICAgICAgIHRoaXMuX2dldE1hcHBpbmdzUHRyKCksXG4gICAgICAgIG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC0gMSxcbiAgICAgICAgbmVlZGxlLmdlbmVyYXRlZENvbHVtbixcbiAgICAgICAgYmlhc1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lID09PSBuZWVkbGUuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICBsZXQgc291cmNlID0gdXRpbC5nZXRBcmcobWFwcGluZywgXCJzb3VyY2VcIiwgbnVsbCk7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmF0KHNvdXJjZSk7XG4gICAgICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHRoaXMuc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5hbWUgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCBcIm5hbWVcIiwgbnVsbCk7XG4gICAgICAgIGlmIChuYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgbmFtZSA9IHRoaXMuX25hbWVzLmF0KG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgXCJvcmlnaW5hbExpbmVcIiwgbnVsbCksXG4gICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCBcIm9yaWdpbmFsQ29sdW1uXCIsIG51bGwpLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc291cmNlOiBudWxsLFxuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgIG5hbWU6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0cnVlIGlmIHdlIGhhdmUgdGhlIHNvdXJjZSBjb250ZW50IGZvciBldmVyeSBzb3VyY2UgaW4gdGhlIHNvdXJjZVxuICAgKiBtYXAsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCkge1xuICAgIGlmICghdGhpcy5zb3VyY2VzQ29udGVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudC5sZW5ndGggPj0gdGhpcy5fc291cmNlcy5zaXplKCkgJiZcbiAgICAgICF0aGlzLnNvdXJjZXNDb250ZW50LnNvbWUoZnVuY3Rpb24oc2MpIHsgcmV0dXJuIHNjID09IG51bGw7IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50LiBUaGUgb25seSBhcmd1bWVudCBpcyB0aGUgdXJsIG9mIHRoZVxuICAgKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gICAqIGF2YWlsYWJsZS5cbiAgICovXG4gIHNvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgbnVsbE9uTWlzc2luZykge1xuICAgIGlmICghdGhpcy5zb3VyY2VzQ29udGVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9maW5kU291cmNlSW5kZXgoYVNvdXJjZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W2luZGV4XTtcbiAgICB9XG5cbiAgICBsZXQgcmVsYXRpdmVTb3VyY2UgPSBhU291cmNlO1xuICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgcmVsYXRpdmVTb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuc291cmNlUm9vdCwgcmVsYXRpdmVTb3VyY2UpO1xuICAgIH1cblxuICAgIGxldCB1cmw7XG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsXG4gICAgICAgICYmICh1cmwgPSB1dGlsLnVybFBhcnNlKHRoaXMuc291cmNlUm9vdCkpKSB7XG4gICAgICAvLyBYWFg6IGZpbGU6Ly8gVVJJcyBhbmQgYWJzb2x1dGUgcGF0aHMgbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yIGZvclxuICAgICAgLy8gbWFueSB1c2Vycy4gV2UgY2FuIGhlbHAgdGhlbSBvdXQgd2hlbiB0aGV5IGV4cGVjdCBmaWxlOi8vIFVSSXMgdG9cbiAgICAgIC8vIGJlaGF2ZSBsaWtlIGl0IHdvdWxkIGlmIHRoZXkgd2VyZSBydW5uaW5nIGEgbG9jYWwgSFRUUCBzZXJ2ZXIuIFNlZVxuICAgICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODg1NTk3LlxuICAgICAgY29uc3QgZmlsZVVyaUFic1BhdGggPSByZWxhdGl2ZVNvdXJjZS5yZXBsYWNlKC9eZmlsZTpcXC9cXC8vLCBcIlwiKTtcbiAgICAgIGlmICh1cmwuc2NoZW1lID09IFwiZmlsZVwiXG4gICAgICAgICAgJiYgdGhpcy5fc291cmNlcy5oYXMoZmlsZVVyaUFic1BhdGgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihmaWxlVXJpQWJzUGF0aCldO1xuICAgICAgfVxuXG4gICAgICBpZiAoKCF1cmwucGF0aCB8fCB1cmwucGF0aCA9PSBcIi9cIilcbiAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhcIi9cIiArIHJlbGF0aXZlU291cmNlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoXCIvXCIgKyByZWxhdGl2ZVNvdXJjZSldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCByZWN1cnNpdmVseSBmcm9tXG4gICAgLy8gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yLiBJbiB0aGF0IGNhc2UsIHdlXG4gICAgLy8gZG9uJ3Qgd2FudCB0byB0aHJvdyBpZiB3ZSBjYW4ndCBmaW5kIHRoZSBzb3VyY2UgLSB3ZSBqdXN0IHdhbnQgdG9cbiAgICAvLyByZXR1cm4gbnVsbCwgc28gd2UgcHJvdmlkZSBhIGZsYWcgdG8gZXhpdCBncmFjZWZ1bGx5LlxuICAgIGlmIChudWxsT25NaXNzaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHJlbGF0aXZlU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gICAqIGxpbmUsIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aFxuICAgKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAgICogICAgIGlzIDEtYmFzZWQuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgY29sdW1uXG4gICAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAgICogICAtIGJpYXM6IEVpdGhlciAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gICAqICAgICAnU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gICAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gICAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAgICogICAgIERlZmF1bHRzIHRvICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gICAqXG4gICAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAgICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICAgKiAgICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAgICovXG4gIGdlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgbGV0IHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCBcInNvdXJjZVwiKTtcbiAgICBzb3VyY2UgPSB0aGlzLl9maW5kU291cmNlSW5kZXgoc291cmNlKTtcbiAgICBpZiAoc291cmNlIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBsYXN0Q29sdW1uOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IG5lZWRsZSA9IHtcbiAgICAgIHNvdXJjZSxcbiAgICAgIG9yaWdpbmFsTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsIFwibGluZVwiKSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgXCJjb2x1bW5cIilcbiAgICB9O1xuXG4gICAgaWYgKG5lZWRsZS5vcmlnaW5hbExpbmUgPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMaW5lIG51bWJlcnMgbXVzdCBiZSA+PSAxXCIpO1xuICAgIH1cblxuICAgIGlmIChuZWVkbGUub3JpZ2luYWxDb2x1bW4gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb2x1bW4gbnVtYmVycyBtdXN0IGJlID49IDBcIik7XG4gICAgfVxuXG4gICAgbGV0IGJpYXMgPSB1dGlsLmdldEFyZyhhQXJncywgXCJiaWFzXCIsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKTtcbiAgICBpZiAoYmlhcyA9PSBudWxsKSB7XG4gICAgICBiaWFzID0gU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQ7XG4gICAgfVxuXG4gICAgbGV0IG1hcHBpbmc7XG4gICAgdGhpcy5fd2FzbS53aXRoTWFwcGluZ0NhbGxiYWNrKG0gPT4gbWFwcGluZyA9IG0sICgpID0+IHtcbiAgICAgIHRoaXMuX3dhc20uZXhwb3J0cy5nZW5lcmF0ZWRfbG9jYXRpb25fZm9yKFxuICAgICAgICB0aGlzLl9nZXRNYXBwaW5nc1B0cigpLFxuICAgICAgICBuZWVkbGUuc291cmNlLFxuICAgICAgICBuZWVkbGUub3JpZ2luYWxMaW5lIC0gMSxcbiAgICAgICAgbmVlZGxlLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICBiaWFzXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSA9PT0gbmVlZGxlLnNvdXJjZSkge1xuICAgICAgICBsZXQgbGFzdENvbHVtbiA9IG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbjtcbiAgICAgICAgaWYgKHRoaXMuX2NvbXB1dGVkQ29sdW1uU3BhbnMgJiYgbGFzdENvbHVtbiA9PT0gbnVsbCkge1xuICAgICAgICAgIGxhc3RDb2x1bW4gPSBJbmZpbml0eTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsIFwiZ2VuZXJhdGVkTGluZVwiLCBudWxsKSxcbiAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsIFwiZ2VuZXJhdGVkQ29sdW1uXCIsIG51bGwpLFxuICAgICAgICAgIGxhc3RDb2x1bW4sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGwsXG4gICAgICBsYXN0Q29sdW1uOiBudWxsXG4gICAgfTtcbiAgfVxufVxuXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuZXhwb3J0cy5CYXNpY1NvdXJjZU1hcENvbnN1bWVyID0gQmFzaWNTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBBbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoXG4gKiB3ZSBjYW4gcXVlcnkgZm9yIGluZm9ybWF0aW9uLiBJdCBkaWZmZXJzIGZyb20gQmFzaWNTb3VyY2VNYXBDb25zdW1lciBpblxuICogdGhhdCBpdCB0YWtlcyBcImluZGV4ZWRcIiBzb3VyY2UgbWFwcyAoaS5lLiBvbmVzIHdpdGggYSBcInNlY3Rpb25zXCIgZmllbGQpIGFzXG4gKiBpbnB1dC5cbiAqXG4gKiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgcmF3IHNvdXJjZSBtYXAgKGVpdGhlciBhcyBhIEpTT04gc3RyaW5nLCBvciBhbHJlYWR5XG4gKiBwYXJzZWQgdG8gYW4gb2JqZWN0KS4gQWNjb3JkaW5nIHRvIHRoZSBzcGVjIGZvciBpbmRleGVkIHNvdXJjZSBtYXBzLCB0aGV5XG4gKiBoYXZlIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAqXG4gKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAqICAgLSBmaWxlOiBPcHRpb25hbC4gVGhlIGdlbmVyYXRlZCBmaWxlIHRoaXMgc291cmNlIG1hcCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKiAgIC0gc2VjdGlvbnM6IEEgbGlzdCBvZiBzZWN0aW9uIGRlZmluaXRpb25zLlxuICpcbiAqIEVhY2ggdmFsdWUgdW5kZXIgdGhlIFwic2VjdGlvbnNcIiBmaWVsZCBoYXMgdHdvIGZpZWxkczpcbiAqICAgLSBvZmZzZXQ6IFRoZSBvZmZzZXQgaW50byB0aGUgb3JpZ2luYWwgc3BlY2lmaWVkIGF0IHdoaWNoIHRoaXMgc2VjdGlvblxuICogICAgICAgYmVnaW5zIHRvIGFwcGx5LCBkZWZpbmVkIGFzIGFuIG9iamVjdCB3aXRoIGEgXCJsaW5lXCIgYW5kIFwiY29sdW1uXCJcbiAqICAgICAgIGZpZWxkLlxuICogICAtIG1hcDogQSBzb3VyY2UgbWFwIGRlZmluaXRpb24uIFRoaXMgc291cmNlIG1hcCBjb3VsZCBhbHNvIGJlIGluZGV4ZWQsXG4gKiAgICAgICBidXQgZG9lc24ndCBoYXZlIHRvIGJlLlxuICpcbiAqIEluc3RlYWQgb2YgdGhlIFwibWFwXCIgZmllbGQsIGl0J3MgYWxzbyBwb3NzaWJsZSB0byBoYXZlIGEgXCJ1cmxcIiBmaWVsZFxuICogc3BlY2lmeWluZyBhIFVSTCB0byByZXRyaWV2ZSBhIHNvdXJjZSBtYXAgZnJvbSwgYnV0IHRoYXQncyBjdXJyZW50bHlcbiAqIHVuc3VwcG9ydGVkLlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIHNvdXJjZSBtYXAsIHRha2VuIGZyb20gdGhlIHNvdXJjZSBtYXAgc3BlY1swXSwgYnV0XG4gKiBtb2RpZmllZCB0byBvbWl0IGEgc2VjdGlvbiB3aGljaCB1c2VzIHRoZSBcInVybFwiIGZpZWxkLlxuICpcbiAqICB7XG4gKiAgICB2ZXJzaW9uIDogMyxcbiAqICAgIGZpbGU6IFwiYXBwLmpzXCIsXG4gKiAgICBzZWN0aW9uczogW3tcbiAqICAgICAgb2Zmc2V0OiB7bGluZToxMDAsIGNvbHVtbjoxMH0sXG4gKiAgICAgIG1hcDoge1xuICogICAgICAgIHZlcnNpb24gOiAzLFxuICogICAgICAgIGZpbGU6IFwic2VjdGlvbi5qc1wiLFxuICogICAgICAgIHNvdXJjZXM6IFtcImZvby5qc1wiLCBcImJhci5qc1wiXSxcbiAqICAgICAgICBuYW1lczogW1wic3JjXCIsIFwibWFwc1wiLCBcImFyZVwiLCBcImZ1blwiXSxcbiAqICAgICAgICBtYXBwaW5nczogXCJBQUFBLEU7O0FCQ0RFO1wiXG4gKiAgICAgIH1cbiAqICAgIH1dLFxuICogIH1cbiAqXG4gKiBUaGUgc2Vjb25kIHBhcmFtZXRlciwgaWYgZ2l2ZW4sIGlzIGEgc3RyaW5nIHdob3NlIHZhbHVlIGlzIHRoZSBVUkxcbiAqIGF0IHdoaWNoIHRoZSBzb3VyY2UgbWFwIHdhcyBmb3VuZC4gIFRoaXMgVVJMIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAqIHNvdXJjZXMgYXJyYXkuXG4gKlxuICogWzBdOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFVMVJHQWVoUXdSeXBVVG92RjFLUmxwaU9GemUwYi1fMmdjNmZBSDBLWTBrL2VkaXQjaGVhZGluZz1oLjUzNWVzM3hlcHJndFxuICovXG5jbGFzcyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIgZXh0ZW5kcyBTb3VyY2VNYXBDb25zdW1lciB7XG4gIGNvbnN0cnVjdG9yKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgICByZXR1cm4gc3VwZXIoSU5URVJOQUwpLnRoZW4odGhhdCA9PiB7XG4gICAgICBsZXQgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgICAgIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsIFwidmVyc2lvblwiKTtcbiAgICAgIGNvbnN0IHNlY3Rpb25zID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCBcInNlY3Rpb25zXCIpO1xuXG4gICAgICBpZiAodmVyc2lvbiAhPSB0aGF0Ll92ZXJzaW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHZlcnNpb246IFwiICsgdmVyc2lvbik7XG4gICAgICB9XG5cbiAgICAgIHRoYXQuX3NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgICAgIHRoYXQuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG4gICAgICB0aGF0Ll9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBudWxsO1xuICAgICAgdGhhdC5fX29yaWdpbmFsTWFwcGluZ3MgPSBudWxsO1xuICAgICAgdGhhdC5fX2dlbmVyYXRlZE1hcHBpbmdzVW5zb3J0ZWQgPSBudWxsO1xuICAgICAgdGhhdC5fX29yaWdpbmFsTWFwcGluZ3NVbnNvcnRlZCA9IG51bGw7XG5cbiAgICAgIGxldCBsYXN0T2Zmc2V0ID0ge1xuICAgICAgICBsaW5lOiAtMSxcbiAgICAgICAgY29sdW1uOiAwXG4gICAgICB9O1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHNlY3Rpb25zLm1hcChzID0+IHtcbiAgICAgICAgaWYgKHMudXJsKSB7XG4gICAgICAgICAgLy8gVGhlIHVybCBmaWVsZCB3aWxsIHJlcXVpcmUgc3VwcG9ydCBmb3IgYXN5bmNocm9uaWNpdHkuXG4gICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvaXNzdWVzLzE2XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3VwcG9ydCBmb3IgdXJsIGZpZWxkIGluIHNlY3Rpb25zIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdXRpbC5nZXRBcmcocywgXCJvZmZzZXRcIik7XG4gICAgICAgIGNvbnN0IG9mZnNldExpbmUgPSB1dGlsLmdldEFyZyhvZmZzZXQsIFwibGluZVwiKTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0Q29sdW1uID0gdXRpbC5nZXRBcmcob2Zmc2V0LCBcImNvbHVtblwiKTtcblxuICAgICAgICBpZiAob2Zmc2V0TGluZSA8IGxhc3RPZmZzZXQubGluZSB8fFxuICAgICAgICAgICAgKG9mZnNldExpbmUgPT09IGxhc3RPZmZzZXQubGluZSAmJiBvZmZzZXRDb2x1bW4gPCBsYXN0T2Zmc2V0LmNvbHVtbikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWN0aW9uIG9mZnNldHMgbXVzdCBiZSBvcmRlcmVkIGFuZCBub24tb3ZlcmxhcHBpbmcuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICAgICAgY29uc3QgY29ucyA9IG5ldyBTb3VyY2VNYXBDb25zdW1lcih1dGlsLmdldEFyZyhzLCBcIm1hcFwiKSwgYVNvdXJjZU1hcFVSTCk7XG4gICAgICAgIHJldHVybiBjb25zLnRoZW4oY29uc3VtZXIgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZW5lcmF0ZWRPZmZzZXQ6IHtcbiAgICAgICAgICAgICAgLy8gVGhlIG9mZnNldCBmaWVsZHMgYXJlIDAtYmFzZWQsIGJ1dCB3ZSB1c2UgMS1iYXNlZCBpbmRpY2VzIHdoZW5cbiAgICAgICAgICAgICAgLy8gZW5jb2RpbmcvZGVjb2RpbmcgZnJvbSBWTFEuXG4gICAgICAgICAgICAgIGdlbmVyYXRlZExpbmU6IG9mZnNldExpbmUgKyAxLFxuICAgICAgICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG9mZnNldENvbHVtbiArIDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25zdW1lclxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfSkpLnRoZW4ocyA9PiB7XG4gICAgICAgIHRoYXQuX3NlY3Rpb25zID0gcztcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGBfX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmQgYF9fb3JpZ2luYWxNYXBwaW5nc2AgYXJlIGFycmF5cyB0aGF0IGhvbGQgdGhlXG4gIC8vIHBhcnNlZCBtYXBwaW5nIGNvb3JkaW5hdGVzIGZyb20gdGhlIHNvdXJjZSBtYXAncyBcIm1hcHBpbmdzXCIgYXR0cmlidXRlLiBUaGV5XG4gIC8vIGFyZSBsYXppbHkgaW5zdGFudGlhdGVkLCBhY2Nlc3NlZCB2aWEgdGhlIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICAvLyBgX29yaWdpbmFsTWFwcGluZ3NgIGdldHRlcnMgcmVzcGVjdGl2ZWx5LCBhbmQgd2Ugb25seSBwYXJzZSB0aGUgbWFwcGluZ3NcbiAgLy8gYW5kIGNyZWF0ZSB0aGVzZSBhcnJheXMgb25jZSBxdWVyaWVkIGZvciBhIHNvdXJjZSBsb2NhdGlvbi4gV2UganVtcCB0aHJvdWdoXG4gIC8vIHRoZXNlIGhvb3BzIGJlY2F1c2UgdGhlcmUgY2FuIGJlIG1hbnkgdGhvdXNhbmRzIG9mIG1hcHBpbmdzLCBhbmQgcGFyc2luZ1xuICAvLyB0aGVtIGlzIGV4cGVuc2l2ZSwgc28gd2Ugb25seSB3YW50IHRvIGRvIGl0IGlmIHdlIG11c3QuXG4gIC8vXG4gIC8vIEVhY2ggb2JqZWN0IGluIHRoZSBhcnJheXMgaXMgb2YgdGhlIGZvcm06XG4gIC8vXG4gIC8vICAgICB7XG4gIC8vICAgICAgIGdlbmVyYXRlZExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4gIC8vICAgICAgIGdlbmVyYXRlZENvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBjb2RlLFxuICAvLyAgICAgICBzb3VyY2U6IFRoZSBwYXRoIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSB0aGF0IGdlbmVyYXRlZCB0aGlzXG4gIC8vICAgICAgICAgICAgICAgY2h1bmsgb2YgY29kZSxcbiAgLy8gICAgICAgb3JpZ2luYWxMaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSB0aGF0XG4gIC8vICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbiAgLy8gICAgICAgb3JpZ2luYWxDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbiAgLy8gICAgICAgbmFtZTogVGhlIG5hbWUgb2YgdGhlIG9yaWdpbmFsIHN5bWJvbCB3aGljaCBnZW5lcmF0ZWQgdGhpcyBjaHVuayBvZlxuICAvLyAgICAgICAgICAgICBjb2RlLlxuICAvLyAgICAgfVxuICAvL1xuICAvLyBBbGwgcHJvcGVydGllcyBleGNlcHQgZm9yIGBnZW5lcmF0ZWRMaW5lYCBhbmQgYGdlbmVyYXRlZENvbHVtbmAgY2FuIGJlXG4gIC8vIGBudWxsYC5cbiAgLy9cbiAgLy8gYF9nZW5lcmF0ZWRNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucy5cbiAgLy9cbiAgLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBpcyBvcmRlcmVkIGJ5IHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMuXG4gIGdldCBfZ2VuZXJhdGVkTWFwcGluZ3MoKSB7XG4gICAgaWYgKCF0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MpIHtcbiAgICAgIHRoaXMuX3NvcnRHZW5lcmF0ZWRNYXBwaW5ncygpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gIH1cblxuICBnZXQgX29yaWdpbmFsTWFwcGluZ3MoKSB7XG4gICAgaWYgKCF0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncykge1xuICAgICAgdGhpcy5fc29ydE9yaWdpbmFsTWFwcGluZ3MoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX29yaWdpbmFsTWFwcGluZ3M7XG4gIH1cblxuICBnZXQgX2dlbmVyYXRlZE1hcHBpbmdzVW5zb3J0ZWQoKSB7XG4gICAgaWYgKCF0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NVbnNvcnRlZCkge1xuICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzVW5zb3J0ZWQ7XG4gIH1cblxuICBnZXQgX29yaWdpbmFsTWFwcGluZ3NVbnNvcnRlZCgpIHtcbiAgICBpZiAoIXRoaXMuX19vcmlnaW5hbE1hcHBpbmdzVW5zb3J0ZWQpIHtcbiAgICAgIHRoaXMuX3BhcnNlTWFwcGluZ3ModGhpcy5fbWFwcGluZ3MsIHRoaXMuc291cmNlUm9vdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzVW5zb3J0ZWQ7XG4gIH1cblxuICBfc29ydEdlbmVyYXRlZE1hcHBpbmdzKCkge1xuICAgIGNvbnN0IG1hcHBpbmdzID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NVbnNvcnRlZDtcbiAgICBtYXBwaW5ncy5zb3J0KHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQpO1xuICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IG1hcHBpbmdzO1xuICB9XG5cbiAgX3NvcnRPcmlnaW5hbE1hcHBpbmdzKCkge1xuICAgIGNvbnN0IG1hcHBpbmdzID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1Vuc29ydGVkO1xuICAgIG1hcHBpbmdzLnNvcnQodXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBtYXBwaW5ncztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBvcmlnaW5hbCBzb3VyY2VzLlxuICAgKi9cbiAgZ2V0IHNvdXJjZXMoKSB7XG4gICAgY29uc3Qgc291cmNlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBzb3VyY2VzLnB1c2godGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSwgbGluZSwgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdlbmVyYXRlZFxuICAgKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAgICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAgICogICAgIGlzIDEtYmFzZWQuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGNvbHVtblxuICAgKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gICAqXG4gICAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSwgb3IgbnVsbC5cbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gICAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICAgKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gICAqICAgICBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gICAqICAgLSBuYW1lOiBUaGUgb3JpZ2luYWwgaWRlbnRpZmllciwgb3IgbnVsbC5cbiAgICovXG4gIG9yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICBjb25zdCBuZWVkbGUgPSB7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgXCJsaW5lXCIpLFxuICAgICAgZ2VuZXJhdGVkQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgXCJjb2x1bW5cIilcbiAgICB9O1xuXG4gICAgLy8gRmluZCB0aGUgc2VjdGlvbiBjb250YWluaW5nIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24gd2UncmUgdHJ5aW5nIHRvIG1hcFxuICAgIC8vIHRvIGFuIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgIGNvbnN0IHNlY3Rpb25JbmRleCA9IGJpbmFyeVNlYXJjaC5zZWFyY2gobmVlZGxlLCB0aGlzLl9zZWN0aW9ucyxcbiAgICAgIGZ1bmN0aW9uKGFOZWVkbGUsIHNlY3Rpb24pIHtcbiAgICAgICAgY29uc3QgY21wID0gYU5lZWRsZS5nZW5lcmF0ZWRMaW5lIC0gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZTtcbiAgICAgICAgaWYgKGNtcCkge1xuICAgICAgICAgIHJldHVybiBjbXA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKGFOZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgfSk7XG4gICAgY29uc3Qgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW3NlY3Rpb25JbmRleF07XG5cbiAgICBpZiAoIXNlY3Rpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBuYW1lOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzZWN0aW9uLmNvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgbGluZTogbmVlZGxlLmdlbmVyYXRlZExpbmUgLVxuICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgY29sdW1uOiBuZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgIDogMCksXG4gICAgICBiaWFzOiBhQXJncy5iaWFzXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRydWUgaWYgd2UgaGF2ZSB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGV2ZXJ5IHNvdXJjZSBpbiB0aGUgc291cmNlXG4gICAqIG1hcCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlY3Rpb25zLmV2ZXJ5KGZ1bmN0aW9uKHMpIHtcbiAgICAgIHJldHVybiBzLmNvbnN1bWVyLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gICAqIG9yaWdpbmFsIHNvdXJjZSBmaWxlLiBSZXR1cm5zIG51bGwgaWYgbm8gb3JpZ2luYWwgc291cmNlIGNvbnRlbnQgaXNcbiAgICogYXZhaWxhYmxlLlxuICAgKi9cbiAgc291cmNlQ29udGVudEZvcihhU291cmNlLCBudWxsT25NaXNzaW5nKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICBjb25zdCBjb250ZW50ID0gc2VjdGlvbi5jb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIHRydWUpO1xuICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChudWxsT25NaXNzaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gICAqIGxpbmUsIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aFxuICAgKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAgICogICAgIGlzIDEtYmFzZWQuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgY29sdW1uXG4gICAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAgICpcbiAgICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICAgKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAgICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gICAqICAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICAgKi9cbiAgZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG5cbiAgICAgIC8vIE9ubHkgY29uc2lkZXIgdGhpcyBzZWN0aW9uIGlmIHRoZSByZXF1ZXN0ZWQgc291cmNlIGlzIGluIHRoZSBsaXN0IG9mXG4gICAgICAvLyBzb3VyY2VzIG9mIHRoZSBjb25zdW1lci5cbiAgICAgIGlmIChzZWN0aW9uLmNvbnN1bWVyLl9maW5kU291cmNlSW5kZXgodXRpbC5nZXRBcmcoYUFyZ3MsIFwic291cmNlXCIpKSA9PT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBnZW5lcmF0ZWRQb3NpdGlvbiA9IHNlY3Rpb24uY29uc3VtZXIuZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpO1xuICAgICAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHtcbiAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWRQb3NpdGlvbi5saW5lICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWRQb3NpdGlvbi5jb2x1bW4gK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IGdlbmVyYXRlZFBvc2l0aW9uLmxpbmVcbiAgICAgICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgICAgICA6IDApXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAgICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gICAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gICAqL1xuICBfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIGNvbnN0IGdlbmVyYXRlZE1hcHBpbmdzID0gdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzVW5zb3J0ZWQgPSBbXTtcbiAgICBjb25zdCBvcmlnaW5hbE1hcHBpbmdzID0gdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NVbnNvcnRlZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcblxuICAgICAgY29uc3Qgc2VjdGlvbk1hcHBpbmdzID0gW107XG4gICAgICBzZWN0aW9uLmNvbnN1bWVyLmVhY2hNYXBwaW5nKG0gPT4gc2VjdGlvbk1hcHBpbmdzLnB1c2gobSkpO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNlY3Rpb25NYXBwaW5ncy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCBtYXBwaW5nID0gc2VjdGlvbk1hcHBpbmdzW2pdO1xuXG4gICAgICAgIC8vIFRPRE86IHRlc3QgaWYgbnVsbCBpcyBjb3JyZWN0IGhlcmUuICBUaGUgb3JpZ2luYWwgY29kZSB1c2VkXG4gICAgICAgIC8vIGBzb3VyY2VgLCB3aGljaCB3b3VsZCBhY3R1YWxseSBoYXZlIGdvdHRlbiB1c2VkIGFzIG51bGwgYmVjYXVzZVxuICAgICAgICAvLyB2YXIncyBnZXQgaG9pc3RlZC5cbiAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2lzc3Vlcy8zMzNcbiAgICAgICAgbGV0IHNvdXJjZSA9IHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZVJvb3QsIG51bGwsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihzb3VyY2UpO1xuXG4gICAgICAgIGxldCBuYW1lID0gbnVsbDtcbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSkge1xuICAgICAgICAgIHRoaXMuX25hbWVzLmFkZChtYXBwaW5nLm5hbWUpO1xuICAgICAgICAgIG5hbWUgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG1hcHBpbmcubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgbWFwcGluZ3MgY29taW5nIGZyb20gdGhlIGNvbnN1bWVyIGZvciB0aGUgc2VjdGlvbiBoYXZlXG4gICAgICAgIC8vIGdlbmVyYXRlZCBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBzZWN0aW9uLCBzbyB3ZVxuICAgICAgICAvLyBuZWVkIHRvIG9mZnNldCB0aGVtIHRvIGJlIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgY29uY2F0ZW5hdGVkXG4gICAgICAgIC8vIGdlbmVyYXRlZCBmaWxlLlxuICAgICAgICBjb25zdCBhZGp1c3RlZE1hcHBpbmcgPSB7XG4gICAgICAgICAgc291cmNlLFxuICAgICAgICAgIGdlbmVyYXRlZExpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG1hcHBpbmcuZ2VuZXJhdGVkTGluZVxuICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICA6IDApLFxuICAgICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgb3JpZ2luYWxDb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgbmFtZVxuICAgICAgICB9O1xuXG4gICAgICAgIGdlbmVyYXRlZE1hcHBpbmdzLnB1c2goYWRqdXN0ZWRNYXBwaW5nKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhZGp1c3RlZE1hcHBpbmcub3JpZ2luYWxMaW5lID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgb3JpZ2luYWxNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlYWNoTWFwcGluZyhhQ2FsbGJhY2ssIGFDb250ZXh0LCBhT3JkZXIpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gYUNvbnRleHQgfHwgbnVsbDtcbiAgICBjb25zdCBvcmRlciA9IGFPcmRlciB8fCBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVI7XG5cbiAgICBsZXQgbWFwcGluZ3M7XG4gICAgc3dpdGNoIChvcmRlcikge1xuICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSOlxuICAgICAgbWFwcGluZ3MgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVI6XG4gICAgICBtYXBwaW5ncyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3M7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBvcmRlciBvZiBpdGVyYXRpb24uXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHNvdXJjZVJvb3QgPSB0aGlzLnNvdXJjZVJvb3Q7XG4gICAgbWFwcGluZ3MubWFwKGZ1bmN0aW9uKG1hcHBpbmcpIHtcbiAgICAgIGxldCBzb3VyY2UgPSBudWxsO1xuICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuYXQobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBzb3VyY2UgPSB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlLFxuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4sXG4gICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgIG9yaWdpbmFsQ29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICBuYW1lOiBtYXBwaW5nLm5hbWUgPT09IG51bGwgPyBudWxsIDogdGhpcy5fbmFtZXMuYXQobWFwcGluZy5uYW1lKVxuICAgICAgfTtcbiAgICB9LCB0aGlzKS5mb3JFYWNoKGFDYWxsYmFjaywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogRmluZCB0aGUgbWFwcGluZyB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgaHlwb3RoZXRpY2FsIFwibmVlZGxlXCIgbWFwcGluZyB0aGF0XG4gICAqIHdlIGFyZSBzZWFyY2hpbmcgZm9yIGluIHRoZSBnaXZlbiBcImhheXN0YWNrXCIgb2YgbWFwcGluZ3MuXG4gICAqL1xuICBfZmluZE1hcHBpbmcoYU5lZWRsZSwgYU1hcHBpbmdzLCBhTGluZU5hbWUsXG4gICAgICAgICAgICAgIGFDb2x1bW5OYW1lLCBhQ29tcGFyYXRvciwgYUJpYXMpIHtcbiAgICAvLyBUbyByZXR1cm4gdGhlIHBvc2l0aW9uIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCB3ZSBtdXN0IGZpcnN0IGZpbmQgdGhlXG4gICAgLy8gbWFwcGluZyBmb3IgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCB0aGVuIHJldHVybiB0aGUgb3Bwb3NpdGUgcG9zaXRpb24gaXRcbiAgICAvLyBwb2ludHMgdG8uIEJlY2F1c2UgdGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHdlIGNhbiB1c2UgYmluYXJ5IHNlYXJjaCB0b1xuICAgIC8vIGZpbmQgdGhlIGJlc3QgbWFwcGluZy5cblxuICAgIGlmIChhTmVlZGxlW2FMaW5lTmFtZV0gPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkxpbmUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMSwgZ290IFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthTGluZU5hbWVdKTtcbiAgICB9XG4gICAgaWYgKGFOZWVkbGVbYUNvbHVtbk5hbWVdIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNvbHVtbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwLCBnb3QgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKyBhTmVlZGxlW2FDb2x1bW5OYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJpbmFyeVNlYXJjaC5zZWFyY2goYU5lZWRsZSwgYU1hcHBpbmdzLCBhQ29tcGFyYXRvciwgYUJpYXMpO1xuICB9XG5cbiAgYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yKGFBcmdzKSB7XG4gICAgY29uc3QgbGluZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCBcImxpbmVcIik7XG5cbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIGV4YWN0IG1hdGNoLCBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmdcbiAgICAvLyByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBtYXBwaW5nIGxlc3MgdGhhbiB0aGUgbmVlZGxlLiBCeVxuICAgIC8vIHNldHRpbmcgbmVlZGxlLm9yaWdpbmFsQ29sdW1uIHRvIDAsIHdlIHRodXMgZmluZCB0aGUgbGFzdCBtYXBwaW5nIGZvclxuICAgIC8vIHRoZSBnaXZlbiBsaW5lLCBwcm92aWRlZCBzdWNoIGEgbWFwcGluZyBleGlzdHMuXG4gICAgY29uc3QgbmVlZGxlID0ge1xuICAgICAgc291cmNlOiB1dGlsLmdldEFyZyhhQXJncywgXCJzb3VyY2VcIiksXG4gICAgICBvcmlnaW5hbExpbmU6IGxpbmUsXG4gICAgICBvcmlnaW5hbENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsIFwiY29sdW1uXCIsIDApXG4gICAgfTtcblxuICAgIG5lZWRsZS5zb3VyY2UgPSB0aGlzLl9maW5kU291cmNlSW5kZXgobmVlZGxlLnNvdXJjZSk7XG4gICAgaWYgKG5lZWRsZS5zb3VyY2UgPCAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgaWYgKG5lZWRsZS5vcmlnaW5hbExpbmUgPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMaW5lIG51bWJlcnMgbXVzdCBiZSA+PSAxXCIpO1xuICAgIH1cblxuICAgIGlmIChuZWVkbGUub3JpZ2luYWxDb2x1bW4gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb2x1bW4gbnVtYmVycyBtdXN0IGJlID49IDBcIik7XG4gICAgfVxuXG4gICAgY29uc3QgbWFwcGluZ3MgPSBbXTtcblxuICAgIGxldCBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKG5lZWRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgbGV0IG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKGFBcmdzLmNvbHVtbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdW50aWwgZWl0aGVyIHdlIHJ1biBvdXQgb2YgbWFwcGluZ3MsIG9yIHdlIHJ1biBpbnRvXG4gICAgICAgIC8vIGEgbWFwcGluZyBmb3IgYSBkaWZmZXJlbnQgbGluZSB0aGFuIHRoZSBvbmUgd2UgZm91bmQuIFNpbmNlXG4gICAgICAgIC8vIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBmaW5kIGFsbCBtYXBwaW5ncyBmb3JcbiAgICAgICAgLy8gdGhlIGxpbmUgd2UgZm91bmQuXG4gICAgICAgIHdoaWxlIChtYXBwaW5nICYmIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSBvcmlnaW5hbExpbmUpIHtcbiAgICAgICAgICBsZXQgbGFzdENvbHVtbiA9IG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbjtcbiAgICAgICAgICBpZiAodGhpcy5fY29tcHV0ZWRDb2x1bW5TcGFucyAmJiBsYXN0Q29sdW1uID09PSBudWxsKSB7XG4gICAgICAgICAgICBsYXN0Q29sdW1uID0gSW5maW5pdHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgXCJnZW5lcmF0ZWRMaW5lXCIsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCBcImdlbmVyYXRlZENvbHVtblwiLCBudWxsKSxcbiAgICAgICAgICAgIGxhc3RDb2x1bW4sXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdW50aWwgZWl0aGVyIHdlIHJ1biBvdXQgb2YgbWFwcGluZ3MsIG9yIHdlIHJ1biBpbnRvXG4gICAgICAgIC8vIGEgbWFwcGluZyBmb3IgYSBkaWZmZXJlbnQgbGluZSB0aGFuIHRoZSBvbmUgd2Ugd2VyZSBzZWFyY2hpbmcgZm9yLlxuICAgICAgICAvLyBTaW5jZSBtYXBwaW5ncyBhcmUgc29ydGVkLCB0aGlzIGlzIGd1YXJhbnRlZWQgdG8gZmluZCBhbGwgbWFwcGluZ3MgZm9yXG4gICAgICAgIC8vIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLlxuICAgICAgICB3aGlsZSAobWFwcGluZyAmJlxuICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09IGxpbmUgJiZcbiAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPT0gb3JpZ2luYWxDb2x1bW4pIHtcbiAgICAgICAgICBsZXQgbGFzdENvbHVtbiA9IG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbjtcbiAgICAgICAgICBpZiAodGhpcy5fY29tcHV0ZWRDb2x1bW5TcGFucyAmJiBsYXN0Q29sdW1uID09PSBudWxsKSB7XG4gICAgICAgICAgICBsYXN0Q29sdW1uID0gSW5maW5pdHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgXCJnZW5lcmF0ZWRMaW5lXCIsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCBcImdlbmVyYXRlZENvbHVtblwiLCBudWxsKSxcbiAgICAgICAgICAgIGxhc3RDb2x1bW4sXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXBwaW5ncztcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0cy5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIgPSBJbmRleGVkU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qXG4gKiBDaGVhdCB0byBnZXQgYXJvdW5kIGludGVyLXR3aW5nbGVkIGNsYXNzZXMuICBgZmFjdG9yeSgpYCBjYW4gYmUgYXQgdGhlIGVuZFxuICogd2hlcmUgaXQgaGFzIGFjY2VzcyB0byBub24taG9pc3RlZCBjbGFzc2VzLCBidXQgaXQgZ2V0cyBob2lzdGVkIGl0c2VsZi5cbiAqL1xuZnVuY3Rpb24gX2ZhY3RvcnkoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICBsZXQgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSBcInN0cmluZ1wiKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgY29uc3QgY29uc3VtZXIgPSBzb3VyY2VNYXAuc2VjdGlvbnMgIT0gbnVsbFxuICAgICAgPyBuZXcgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTClcbiAgICAgIDogbmV3IEJhc2ljU291cmNlTWFwQ29uc3VtZXIoc291cmNlTWFwLCBhU291cmNlTWFwVVJMKTtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjb25zdW1lcik7XG59XG5cbmZ1bmN0aW9uIF9mYWN0b3J5QlNNKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgcmV0dXJuIEJhc2ljU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcChhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKTtcbn1cbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuY29uc3QgYmFzZTY0VkxRID0gcmVxdWlyZShcIi4vYmFzZTY0LXZscVwiKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3QgQXJyYXlTZXQgPSByZXF1aXJlKFwiLi9hcnJheS1zZXRcIikuQXJyYXlTZXQ7XG5jb25zdCBNYXBwaW5nTGlzdCA9IHJlcXVpcmUoXCIuL21hcHBpbmctbGlzdFwiKS5NYXBwaW5nTGlzdDtcblxuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiB0aGUgU291cmNlTWFwR2VuZXJhdG9yIHJlcHJlc2VudHMgYSBzb3VyY2UgbWFwIHdoaWNoIGlzXG4gKiBiZWluZyBidWlsdCBpbmNyZW1lbnRhbGx5LiBZb3UgbWF5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZ1xuICogcHJvcGVydGllczpcbiAqXG4gKiAgIC0gZmlsZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICogICAtIHNvdXJjZVJvb3Q6IEEgcm9vdCBmb3IgYWxsIHJlbGF0aXZlIFVSTHMgaW4gdGhpcyBzb3VyY2UgbWFwLlxuICovXG5jbGFzcyBTb3VyY2VNYXBHZW5lcmF0b3Ige1xuICBjb25zdHJ1Y3RvcihhQXJncykge1xuICAgIGlmICghYUFyZ3MpIHtcbiAgICAgIGFBcmdzID0ge307XG4gICAgfVxuICAgIHRoaXMuX2ZpbGUgPSB1dGlsLmdldEFyZyhhQXJncywgXCJmaWxlXCIsIG51bGwpO1xuICAgIHRoaXMuX3NvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhhQXJncywgXCJzb3VyY2VSb290XCIsIG51bGwpO1xuICAgIHRoaXMuX3NraXBWYWxpZGF0aW9uID0gdXRpbC5nZXRBcmcoYUFyZ3MsIFwic2tpcFZhbGlkYXRpb25cIiwgZmFsc2UpO1xuICAgIHRoaXMuX3NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuICAgIHRoaXMuX21hcHBpbmdzID0gbmV3IE1hcHBpbmdMaXN0KCk7XG4gICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFNvdXJjZU1hcEdlbmVyYXRvciBiYXNlZCBvbiBhIFNvdXJjZU1hcENvbnN1bWVyXG4gICAqXG4gICAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcC5cbiAgICovXG4gIHN0YXRpYyBmcm9tU291cmNlTWFwKGFTb3VyY2VNYXBDb25zdW1lcikge1xuICAgIGNvbnN0IHNvdXJjZVJvb3QgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlUm9vdDtcbiAgICBjb25zdCBnZW5lcmF0b3IgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKHtcbiAgICAgIGZpbGU6IGFTb3VyY2VNYXBDb25zdW1lci5maWxlLFxuICAgICAgc291cmNlUm9vdFxuICAgIH0pO1xuICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbihtYXBwaW5nKSB7XG4gICAgICBjb25zdCBuZXdNYXBwaW5nID0ge1xuICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBuZXdNYXBwaW5nLnNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3TWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG5ld01hcHBpbmcuc291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld01hcHBpbmcub3JpZ2luYWwgPSB7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3TWFwcGluZy5uYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGdlbmVyYXRvci5hZGRNYXBwaW5nKG5ld01hcHBpbmcpO1xuICAgIH0pO1xuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24oc291cmNlRmlsZSkge1xuICAgICAgbGV0IHNvdXJjZVJlbGF0aXZlID0gc291cmNlRmlsZTtcbiAgICAgIGlmIChzb3VyY2VSb290ICE9PSBudWxsKSB7XG4gICAgICAgIHNvdXJjZVJlbGF0aXZlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFnZW5lcmF0b3IuX3NvdXJjZXMuaGFzKHNvdXJjZVJlbGF0aXZlKSkge1xuICAgICAgICBnZW5lcmF0b3IuX3NvdXJjZXMuYWRkKHNvdXJjZVJlbGF0aXZlKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBnZW5lcmF0b3Iuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHNpbmdsZSBtYXBwaW5nIGZyb20gb3JpZ2luYWwgc291cmNlIGxpbmUgYW5kIGNvbHVtbiB0byB0aGUgZ2VuZXJhdGVkXG4gICAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBmb3IgdGhpcyBzb3VyY2UgbWFwIGJlaW5nIGNyZWF0ZWQuIFRoZSBtYXBwaW5nXG4gICAqIG9iamVjdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBnZW5lcmF0ZWQ6IEFuIG9iamVjdCB3aXRoIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAgICogICAtIG9yaWdpbmFsOiBBbiBvYmplY3Qgd2l0aCB0aGUgb3JpZ2luYWwgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAgICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIChyZWxhdGl2ZSB0byB0aGUgc291cmNlUm9vdCkuXG4gICAqICAgLSBuYW1lOiBBbiBvcHRpb25hbCBvcmlnaW5hbCB0b2tlbiBuYW1lIGZvciB0aGlzIG1hcHBpbmcuXG4gICAqL1xuICBhZGRNYXBwaW5nKGFBcmdzKSB7XG4gICAgY29uc3QgZ2VuZXJhdGVkID0gdXRpbC5nZXRBcmcoYUFyZ3MsIFwiZ2VuZXJhdGVkXCIpO1xuICAgIGNvbnN0IG9yaWdpbmFsID0gdXRpbC5nZXRBcmcoYUFyZ3MsIFwib3JpZ2luYWxcIiwgbnVsbCk7XG4gICAgbGV0IHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCBcInNvdXJjZVwiLCBudWxsKTtcbiAgICBsZXQgbmFtZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCBcIm5hbWVcIiwgbnVsbCk7XG5cbiAgICBpZiAoIXRoaXMuX3NraXBWYWxpZGF0aW9uKSB7XG4gICAgICB0aGlzLl92YWxpZGF0ZU1hcHBpbmcoZ2VuZXJhdGVkLCBvcmlnaW5hbCwgc291cmNlLCBuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZSA9IFN0cmluZyhzb3VyY2UpO1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKTtcbiAgICAgIGlmICghdGhpcy5fbmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIHRoaXMuX25hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9tYXBwaW5ncy5hZGQoe1xuICAgICAgZ2VuZXJhdGVkTGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IGdlbmVyYXRlZC5jb2x1bW4sXG4gICAgICBvcmlnaW5hbExpbmU6IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwubGluZSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiBvcmlnaW5hbCAhPSBudWxsICYmIG9yaWdpbmFsLmNvbHVtbixcbiAgICAgIHNvdXJjZSxcbiAgICAgIG5hbWVcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLlxuICAgKi9cbiAgc2V0U291cmNlQ29udGVudChhU291cmNlRmlsZSwgYVNvdXJjZUNvbnRlbnQpIHtcbiAgICBsZXQgc291cmNlID0gYVNvdXJjZUZpbGU7XG4gICAgaWYgKHRoaXMuX3NvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLl9zb3VyY2VSb290LCBzb3VyY2UpO1xuICAgIH1cblxuICAgIGlmIChhU291cmNlQ29udGVudCAhPSBudWxsKSB7XG4gICAgICAvLyBBZGQgdGhlIHNvdXJjZSBjb250ZW50IHRvIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcC5cbiAgICAgIC8vIENyZWF0ZSBhIG5ldyBfc291cmNlc0NvbnRlbnRzIG1hcCBpZiB0aGUgcHJvcGVydHkgaXMgbnVsbC5cbiAgICAgIGlmICghdGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhzb3VyY2UpXSA9IGFTb3VyY2VDb250ZW50O1xuICAgIH0gZWxzZSBpZiAodGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAvLyBSZW1vdmUgdGhlIHNvdXJjZSBmaWxlIGZyb20gdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwLlxuICAgICAgLy8gSWYgdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwIGlzIGVtcHR5LCBzZXQgdGhlIHByb3BlcnR5IHRvIG51bGwuXG4gICAgICBkZWxldGUgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoc291cmNlKV07XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fc291cmNlc0NvbnRlbnRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgbWFwcGluZ3Mgb2YgYSBzdWItc291cmNlLW1hcCBmb3IgYSBzcGVjaWZpYyBzb3VyY2UgZmlsZSB0byB0aGVcbiAgICogc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQuIEVhY2ggbWFwcGluZyB0byB0aGUgc3VwcGxpZWQgc291cmNlIGZpbGUgaXNcbiAgICogcmV3cml0dGVuIHVzaW5nIHRoZSBzdXBwbGllZCBzb3VyY2UgbWFwLiBOb3RlOiBUaGUgcmVzb2x1dGlvbiBmb3IgdGhlXG4gICAqIHJlc3VsdGluZyBtYXBwaW5ncyBpcyB0aGUgbWluaW1pdW0gb2YgdGhpcyBtYXAgYW5kIHRoZSBzdXBwbGllZCBtYXAuXG4gICAqXG4gICAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZC5cbiAgICogQHBhcmFtIGFTb3VyY2VGaWxlIE9wdGlvbmFsLiBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlLlxuICAgKiAgICAgICAgSWYgb21pdHRlZCwgU291cmNlTWFwQ29uc3VtZXIncyBmaWxlIHByb3BlcnR5IHdpbGwgYmUgdXNlZC5cbiAgICogQHBhcmFtIGFTb3VyY2VNYXBQYXRoIE9wdGlvbmFsLiBUaGUgZGlybmFtZSBvZiB0aGUgcGF0aCB0byB0aGUgc291cmNlIG1hcFxuICAgKiAgICAgICAgdG8gYmUgYXBwbGllZC4gSWYgcmVsYXRpdmUsIGl0IGlzIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBDb25zdW1lci5cbiAgICogICAgICAgIFRoaXMgcGFyYW1ldGVyIGlzIG5lZWRlZCB3aGVuIHRoZSB0d28gc291cmNlIG1hcHMgYXJlbid0IGluIHRoZSBzYW1lXG4gICAqICAgICAgICBkaXJlY3RvcnksIGFuZCB0aGUgc291cmNlIG1hcCB0byBiZSBhcHBsaWVkIGNvbnRhaW5zIHJlbGF0aXZlIHNvdXJjZVxuICAgKiAgICAgICAgcGF0aHMuIElmIHNvLCB0aG9zZSByZWxhdGl2ZSBzb3VyY2UgcGF0aHMgbmVlZCB0byBiZSByZXdyaXR0ZW5cbiAgICogICAgICAgIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IuXG4gICAqL1xuICBhcHBseVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIsIGFTb3VyY2VGaWxlLCBhU291cmNlTWFwUGF0aCkge1xuICAgIGxldCBzb3VyY2VGaWxlID0gYVNvdXJjZUZpbGU7XG4gICAgLy8gSWYgYVNvdXJjZUZpbGUgaXMgb21pdHRlZCwgd2Ugd2lsbCB1c2UgdGhlIGZpbGUgcHJvcGVydHkgb2YgdGhlIFNvdXJjZU1hcFxuICAgIGlmIChhU291cmNlRmlsZSA9PSBudWxsKSB7XG4gICAgICBpZiAoYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgXCJTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwIHJlcXVpcmVzIGVpdGhlciBhbiBleHBsaWNpdCBzb3VyY2UgZmlsZSwgXCIgK1xuICAgICAgICAgICdvciB0aGUgc291cmNlIG1hcFxcJ3MgXCJmaWxlXCIgcHJvcGVydHkuIEJvdGggd2VyZSBvbWl0dGVkLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHNvdXJjZUZpbGUgPSBhU291cmNlTWFwQ29uc3VtZXIuZmlsZTtcbiAgICB9XG4gICAgY29uc3Qgc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgLy8gTWFrZSBcInNvdXJjZUZpbGVcIiByZWxhdGl2ZSBpZiBhbiBhYnNvbHV0ZSBVcmwgaXMgcGFzc2VkLlxuICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgIH1cbiAgICAvLyBBcHBseWluZyB0aGUgU291cmNlTWFwIGNhbiBhZGQgYW5kIHJlbW92ZSBpdGVtcyBmcm9tIHRoZSBzb3VyY2VzIGFuZFxuICAgIC8vIHRoZSBuYW1lcyBhcnJheS5cbiAgICBjb25zdCBuZXdTb3VyY2VzID0gdGhpcy5fbWFwcGluZ3MudG9BcnJheSgpLmxlbmd0aCA+IDBcbiAgICAgID8gbmV3IEFycmF5U2V0KClcbiAgICAgIDogdGhpcy5fc291cmNlcztcbiAgICBjb25zdCBuZXdOYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gICAgLy8gRmluZCBtYXBwaW5ncyBmb3IgdGhlIFwic291cmNlRmlsZVwiXG4gICAgdGhpcy5fbWFwcGluZ3MudW5zb3J0ZWRGb3JFYWNoKGZ1bmN0aW9uKG1hcHBpbmcpIHtcbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSA9PT0gc291cmNlRmlsZSAmJiBtYXBwaW5nLm9yaWdpbmFsTGluZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGl0IGNhbiBiZSBtYXBwZWQgYnkgdGhlIHNvdXJjZSBtYXAsIHRoZW4gdXBkYXRlIHRoZSBtYXBwaW5nLlxuICAgICAgICBjb25zdCBvcmlnaW5hbCA9IGFTb3VyY2VNYXBDb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIENvcHkgbWFwcGluZ1xuICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gb3JpZ2luYWwuc291cmNlO1xuICAgICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwuam9pbihhU291cmNlTWFwUGF0aCwgbWFwcGluZy5zb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbWFwcGluZy5zb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IG9yaWdpbmFsLmxpbmU7XG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgICAgICBpZiAob3JpZ2luYWwubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLm5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBzb3VyY2UgPSBtYXBwaW5nLnNvdXJjZTtcbiAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCAmJiAhbmV3U291cmNlcy5oYXMoc291cmNlKSkge1xuICAgICAgICBuZXdTb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBuYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgaWYgKG5hbWUgIT0gbnVsbCAmJiAhbmV3TmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIG5ld05hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cblxuICAgIH0sIHRoaXMpO1xuICAgIHRoaXMuX3NvdXJjZXMgPSBuZXdTb3VyY2VzO1xuICAgIHRoaXMuX25hbWVzID0gbmV3TmFtZXM7XG5cbiAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50cyBvZiBhcHBsaWVkIG1hcC5cbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uKHNyY0ZpbGUpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzcmNGaWxlKTtcbiAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGFTb3VyY2VNYXBQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICBzcmNGaWxlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBzcmNGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgc3JjRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc3JjRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTb3VyY2VDb250ZW50KHNyY0ZpbGUsIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgbWFwcGluZyBjYW4gaGF2ZSBvbmUgb2YgdGhlIHRocmVlIGxldmVscyBvZiBkYXRhOlxuICAgKlxuICAgKiAgIDEuIEp1c3QgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAgICogICAyLiBUaGUgR2VuZXJhdGVkIHBvc2l0aW9uLCBvcmlnaW5hbCBwb3NpdGlvbiwgYW5kIG9yaWdpbmFsIHNvdXJjZS5cbiAgICogICAzLiBHZW5lcmF0ZWQgYW5kIG9yaWdpbmFsIHBvc2l0aW9uLCBvcmlnaW5hbCBzb3VyY2UsIGFzIHdlbGwgYXMgYSBuYW1lXG4gICAqICAgICAgdG9rZW4uXG4gICAqXG4gICAqIFRvIG1haW50YWluIGNvbnNpc3RlbmN5LCB3ZSB2YWxpZGF0ZSB0aGF0IGFueSBuZXcgbWFwcGluZyBiZWluZyBhZGRlZCBmYWxsc1xuICAgKiBpbiB0byBvbmUgb2YgdGhlc2UgY2F0ZWdvcmllcy5cbiAgICovXG4gIF92YWxpZGF0ZU1hcHBpbmcoYUdlbmVyYXRlZCwgYU9yaWdpbmFsLCBhU291cmNlLCBhTmFtZSkge1xuICAgIC8vIFdoZW4gYU9yaWdpbmFsIGlzIHRydXRoeSBidXQgaGFzIGVtcHR5IHZhbHVlcyBmb3IgLmxpbmUgYW5kIC5jb2x1bW4sXG4gICAgLy8gaXQgaXMgbW9zdCBsaWtlbHkgYSBwcm9ncmFtbWVyIGVycm9yLiBJbiB0aGlzIGNhc2Ugd2UgdGhyb3cgYSB2ZXJ5XG4gICAgLy8gc3BlY2lmaWMgZXJyb3IgbWVzc2FnZSB0byB0cnkgdG8gZ3VpZGUgdGhlbSB0aGUgcmlnaHQgd2F5LlxuICAgIC8vIEZvciBleGFtcGxlOiBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wb2x5bWVyLWJ1bmRsZXIvcHVsbC81MTlcbiAgICBpZiAoYU9yaWdpbmFsICYmIHR5cGVvZiBhT3JpZ2luYWwubGluZSAhPT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgYU9yaWdpbmFsLmNvbHVtbiAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIm9yaWdpbmFsLmxpbmUgYW5kIG9yaWdpbmFsLmNvbHVtbiBhcmUgbm90IG51bWJlcnMgLS0geW91IHByb2JhYmx5IG1lYW50IHRvIG9taXQgXCIgK1xuICAgICAgICAgICAgXCJ0aGUgb3JpZ2luYWwgbWFwcGluZyBlbnRpcmVseSBhbmQgb25seSBtYXAgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi4gSWYgc28sIHBhc3MgXCIgK1xuICAgICAgICAgICAgXCJudWxsIGZvciB0aGUgb3JpZ2luYWwgbWFwcGluZyBpbnN0ZWFkIG9mIGFuIG9iamVjdCB3aXRoIGVtcHR5IG9yIG51bGwgdmFsdWVzLlwiXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGFHZW5lcmF0ZWQgJiYgXCJsaW5lXCIgaW4gYUdlbmVyYXRlZCAmJiBcImNvbHVtblwiIGluIGFHZW5lcmF0ZWRcbiAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICYmICFhT3JpZ2luYWwgJiYgIWFTb3VyY2UgJiYgIWFOYW1lKSB7XG4gICAgICAvLyBDYXNlIDEuXG5cbiAgICB9IGVsc2UgaWYgKGFHZW5lcmF0ZWQgJiYgXCJsaW5lXCIgaW4gYUdlbmVyYXRlZCAmJiBcImNvbHVtblwiIGluIGFHZW5lcmF0ZWRcbiAgICAgICAgICAgICAmJiBhT3JpZ2luYWwgJiYgXCJsaW5lXCIgaW4gYU9yaWdpbmFsICYmIFwiY29sdW1uXCIgaW4gYU9yaWdpbmFsXG4gICAgICAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsLmxpbmUgPiAwICYmIGFPcmlnaW5hbC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICYmIGFTb3VyY2UpIHtcbiAgICAgIC8vIENhc2VzIDIgYW5kIDMuXG5cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBtYXBwaW5nOiBcIiArIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZ2VuZXJhdGVkOiBhR2VuZXJhdGVkLFxuICAgICAgICBzb3VyY2U6IGFTb3VyY2UsXG4gICAgICAgIG9yaWdpbmFsOiBhT3JpZ2luYWwsXG4gICAgICAgIG5hbWU6IGFOYW1lXG4gICAgICB9KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZSB0aGUgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gdG8gdGhlIHN0cmVhbSBvZiBiYXNlIDY0IFZMUXNcbiAgICogc3BlY2lmaWVkIGJ5IHRoZSBzb3VyY2UgbWFwIGZvcm1hdC5cbiAgICovXG4gIF9zZXJpYWxpemVNYXBwaW5ncygpIHtcbiAgICBsZXQgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIGxldCBwcmV2aW91c0dlbmVyYXRlZExpbmUgPSAxO1xuICAgIGxldCBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gMDtcbiAgICBsZXQgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgIGxldCBwcmV2aW91c05hbWUgPSAwO1xuICAgIGxldCBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgbGV0IG5leHQ7XG4gICAgbGV0IG1hcHBpbmc7XG4gICAgbGV0IG5hbWVJZHg7XG4gICAgbGV0IHNvdXJjZUlkeDtcblxuICAgIGNvbnN0IG1hcHBpbmdzID0gdGhpcy5fbWFwcGluZ3MudG9BcnJheSgpO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBtYXBwaW5ncy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbWFwcGluZyA9IG1hcHBpbmdzW2ldO1xuICAgICAgbmV4dCA9IFwiXCI7XG5cbiAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICAgIHdoaWxlIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIG5leHQgKz0gXCI7XCI7XG4gICAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaSA+IDApIHtcbiAgICAgICAgaWYgKCF1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmcsIG1hcHBpbmdzW2kgLSAxXSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0ICs9IFwiLFwiO1xuICAgICAgfVxuXG4gICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlSWR4ID0gdGhpcy5fc291cmNlcy5pbmRleE9mKG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKHNvdXJjZUlkeCAtIHByZXZpb3VzU291cmNlKTtcbiAgICAgICAgcHJldmlvdXNTb3VyY2UgPSBzb3VyY2VJZHg7XG5cbiAgICAgICAgLy8gbGluZXMgYXJlIHN0b3JlZCAwLWJhc2VkIGluIFNvdXJjZU1hcCBzcGVjIHZlcnNpb24gM1xuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5vcmlnaW5hbExpbmUgLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbExpbmUpO1xuICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lIC0gMTtcblxuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4pO1xuICAgICAgICBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICBpZiAobWFwcGluZy5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICBuYW1lSWR4ID0gdGhpcy5fbmFtZXMuaW5kZXhPZihtYXBwaW5nLm5hbWUpO1xuICAgICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShuYW1lSWR4IC0gcHJldmlvdXNOYW1lKTtcbiAgICAgICAgICBwcmV2aW91c05hbWUgPSBuYW1lSWR4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCArPSBuZXh0O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBfZ2VuZXJhdGVTb3VyY2VzQ29udGVudChhU291cmNlcywgYVNvdXJjZVJvb3QpIHtcbiAgICByZXR1cm4gYVNvdXJjZXMubWFwKGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoYVNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKGFTb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgfVxuICAgICAgY29uc3Qga2V5ID0gdXRpbC50b1NldFN0cmluZyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9zb3VyY2VzQ29udGVudHMsIGtleSlcbiAgICAgICAgPyB0aGlzLl9zb3VyY2VzQ29udGVudHNba2V5XVxuICAgICAgICA6IG51bGw7XG4gICAgfSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogRXh0ZXJuYWxpemUgdGhlIHNvdXJjZSBtYXAuXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgY29uc3QgbWFwID0ge1xuICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgIHNvdXJjZXM6IHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgbmFtZXM6IHRoaXMuX25hbWVzLnRvQXJyYXkoKSxcbiAgICAgIG1hcHBpbmdzOiB0aGlzLl9zZXJpYWxpemVNYXBwaW5ncygpXG4gICAgfTtcbiAgICBpZiAodGhpcy5fZmlsZSAhPSBudWxsKSB7XG4gICAgICBtYXAuZmlsZSA9IHRoaXMuX2ZpbGU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIG1hcC5zb3VyY2VSb290ID0gdGhpcy5fc291cmNlUm9vdDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgbWFwLnNvdXJjZXNDb250ZW50ID0gdGhpcy5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChtYXAuc291cmNlcywgbWFwLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBzb3VyY2UgbWFwIGJlaW5nIGdlbmVyYXRlZCB0byBhIHN0cmluZy5cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKTtcbiAgfVxufVxuXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl92ZXJzaW9uID0gMztcbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gU291cmNlTWFwR2VuZXJhdG9yO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG5jb25zdCBTb3VyY2VNYXBHZW5lcmF0b3IgPSByZXF1aXJlKFwiLi9zb3VyY2UtbWFwLWdlbmVyYXRvclwiKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuLy8gTWF0Y2hlcyBhIFdpbmRvd3Mtc3R5bGUgYFxcclxcbmAgbmV3bGluZSBvciBhIGBcXG5gIG5ld2xpbmUgdXNlZCBieSBhbGwgb3RoZXJcbi8vIG9wZXJhdGluZyBzeXN0ZW1zIHRoZXNlIGRheXMgKGNhcHR1cmluZyB0aGUgcmVzdWx0KS5cbmNvbnN0IFJFR0VYX05FV0xJTkUgPSAvKFxccj9cXG4pLztcblxuLy8gTmV3bGluZSBjaGFyYWN0ZXIgY29kZSBmb3IgY2hhckNvZGVBdCgpIGNvbXBhcmlzb25zXG5jb25zdCBORVdMSU5FX0NPREUgPSAxMDtcblxuLy8gUHJpdmF0ZSBzeW1ib2wgZm9yIGlkZW50aWZ5aW5nIGBTb3VyY2VOb2RlYHMgd2hlbiBtdWx0aXBsZSB2ZXJzaW9ucyBvZlxuLy8gdGhlIHNvdXJjZS1tYXAgbGlicmFyeSBhcmUgbG9hZGVkLiBUaGlzIE1VU1QgTk9UIENIQU5HRSBhY3Jvc3Ncbi8vIHZlcnNpb25zIVxuY29uc3QgaXNTb3VyY2VOb2RlID0gXCIkJCRpc1NvdXJjZU5vZGUkJCRcIjtcblxuLyoqXG4gKiBTb3VyY2VOb2RlcyBwcm92aWRlIGEgd2F5IHRvIGFic3RyYWN0IG92ZXIgaW50ZXJwb2xhdGluZy9jb25jYXRlbmF0aW5nXG4gKiBzbmlwcGV0cyBvZiBnZW5lcmF0ZWQgSmF2YVNjcmlwdCBzb3VyY2UgY29kZSB3aGlsZSBtYWludGFpbmluZyB0aGUgbGluZSBhbmRcbiAqIGNvbHVtbiBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwYXJhbSBhTGluZSBUaGUgb3JpZ2luYWwgbGluZSBudW1iZXIuXG4gKiBAcGFyYW0gYUNvbHVtbiBUaGUgb3JpZ2luYWwgY29sdW1uIG51bWJlci5cbiAqIEBwYXJhbSBhU291cmNlIFRoZSBvcmlnaW5hbCBzb3VyY2UncyBmaWxlbmFtZS5cbiAqIEBwYXJhbSBhQ2h1bmtzIE9wdGlvbmFsLiBBbiBhcnJheSBvZiBzdHJpbmdzIHdoaWNoIGFyZSBzbmlwcGV0cyBvZlxuICogICAgICAgIGdlbmVyYXRlZCBKUywgb3Igb3RoZXIgU291cmNlTm9kZXMuXG4gKiBAcGFyYW0gYU5hbWUgVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIuXG4gKi9cbmNsYXNzIFNvdXJjZU5vZGUge1xuICBjb25zdHJ1Y3RvcihhTGluZSwgYUNvbHVtbiwgYVNvdXJjZSwgYUNodW5rcywgYU5hbWUpIHtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdGhpcy5zb3VyY2VDb250ZW50cyA9IHt9O1xuICAgIHRoaXMubGluZSA9IGFMaW5lID09IG51bGwgPyBudWxsIDogYUxpbmU7XG4gICAgdGhpcy5jb2x1bW4gPSBhQ29sdW1uID09IG51bGwgPyBudWxsIDogYUNvbHVtbjtcbiAgICB0aGlzLnNvdXJjZSA9IGFTb3VyY2UgPT0gbnVsbCA/IG51bGwgOiBhU291cmNlO1xuICAgIHRoaXMubmFtZSA9IGFOYW1lID09IG51bGwgPyBudWxsIDogYU5hbWU7XG4gICAgdGhpc1tpc1NvdXJjZU5vZGVdID0gdHJ1ZTtcbiAgICBpZiAoYUNodW5rcyAhPSBudWxsKSB0aGlzLmFkZChhQ2h1bmtzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgU291cmNlTm9kZSBmcm9tIGdlbmVyYXRlZCBjb2RlIGFuZCBhIFNvdXJjZU1hcENvbnN1bWVyLlxuICAgKlxuICAgKiBAcGFyYW0gYUdlbmVyYXRlZENvZGUgVGhlIGdlbmVyYXRlZCBjb2RlXG4gICAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcCBmb3IgdGhlIGdlbmVyYXRlZCBjb2RlXG4gICAqIEBwYXJhbSBhUmVsYXRpdmVQYXRoIE9wdGlvbmFsLiBUaGUgcGF0aCB0aGF0IHJlbGF0aXZlIHNvdXJjZXMgaW4gdGhlXG4gICAqICAgICAgICBTb3VyY2VNYXBDb25zdW1lciBzaG91bGQgYmUgcmVsYXRpdmUgdG8uXG4gICAqL1xuICBzdGF0aWMgZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAoYUdlbmVyYXRlZENvZGUsIGFTb3VyY2VNYXBDb25zdW1lciwgYVJlbGF0aXZlUGF0aCkge1xuICAgIC8vIFRoZSBTb3VyY2VOb2RlIHdlIHdhbnQgdG8gZmlsbCB3aXRoIHRoZSBnZW5lcmF0ZWQgY29kZVxuICAgIC8vIGFuZCB0aGUgU291cmNlTWFwXG4gICAgY29uc3Qgbm9kZSA9IG5ldyBTb3VyY2VOb2RlKCk7XG5cbiAgICAvLyBBbGwgZXZlbiBpbmRpY2VzIG9mIHRoaXMgYXJyYXkgYXJlIG9uZSBsaW5lIG9mIHRoZSBnZW5lcmF0ZWQgY29kZSxcbiAgICAvLyB3aGlsZSBhbGwgb2RkIGluZGljZXMgYXJlIHRoZSBuZXdsaW5lcyBiZXR3ZWVuIHR3byBhZGphY2VudCBsaW5lc1xuICAgIC8vIChzaW5jZSBgUkVHRVhfTkVXTElORWAgY2FwdHVyZXMgaXRzIG1hdGNoKS5cbiAgICAvLyBQcm9jZXNzZWQgZnJhZ21lbnRzIGFyZSBhY2Nlc3NlZCBieSBjYWxsaW5nIGBzaGlmdE5leHRMaW5lYC5cbiAgICBjb25zdCByZW1haW5pbmdMaW5lcyA9IGFHZW5lcmF0ZWRDb2RlLnNwbGl0KFJFR0VYX05FV0xJTkUpO1xuICAgIGxldCByZW1haW5pbmdMaW5lc0luZGV4ID0gMDtcbiAgICBjb25zdCBzaGlmdE5leHRMaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCBsaW5lQ29udGVudHMgPSBnZXROZXh0TGluZSgpO1xuICAgICAgLy8gVGhlIGxhc3QgbGluZSBvZiBhIGZpbGUgbWlnaHQgbm90IGhhdmUgYSBuZXdsaW5lLlxuICAgICAgY29uc3QgbmV3TGluZSA9IGdldE5leHRMaW5lKCkgfHwgXCJcIjtcbiAgICAgIHJldHVybiBsaW5lQ29udGVudHMgKyBuZXdMaW5lO1xuXG4gICAgICBmdW5jdGlvbiBnZXROZXh0TGluZSgpIHtcbiAgICAgICAgcmV0dXJuIHJlbWFpbmluZ0xpbmVzSW5kZXggPCByZW1haW5pbmdMaW5lcy5sZW5ndGggP1xuICAgICAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleCsrXSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gV2UgbmVlZCB0byByZW1lbWJlciB0aGUgcG9zaXRpb24gb2YgXCJyZW1haW5pbmdMaW5lc1wiXG4gICAgbGV0IGxhc3RHZW5lcmF0ZWRMaW5lID0gMSwgbGFzdEdlbmVyYXRlZENvbHVtbiA9IDA7XG5cbiAgICAvLyBUaGUgZ2VuZXJhdGUgU291cmNlTm9kZXMgd2UgbmVlZCBhIGNvZGUgcmFuZ2UuXG4gICAgLy8gVG8gZXh0cmFjdCBpdCBjdXJyZW50IGFuZCBsYXN0IG1hcHBpbmcgaXMgdXNlZC5cbiAgICAvLyBIZXJlIHdlIHN0b3JlIHRoZSBsYXN0IG1hcHBpbmcuXG4gICAgbGV0IGxhc3RNYXBwaW5nID0gbnVsbDtcbiAgICBsZXQgbmV4dExpbmU7XG5cbiAgICBhU291cmNlTWFwQ29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24obWFwcGluZykge1xuICAgICAgaWYgKGxhc3RNYXBwaW5nICE9PSBudWxsKSB7XG4gICAgICAgIC8vIFdlIGFkZCB0aGUgY29kZSBmcm9tIFwibGFzdE1hcHBpbmdcIiB0byBcIm1hcHBpbmdcIjpcbiAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlcmUgaXMgYSBuZXcgbGluZSBpbiBiZXR3ZWVuLlxuICAgICAgICBpZiAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICAvLyBBc3NvY2lhdGUgZmlyc3QgbGluZSB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkTGluZSsrO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgICAgIC8vIFRoZSByZW1haW5pbmcgY29kZSBpcyBhZGRlZCB3aXRob3V0IG1hcHBpbmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGVyZSBpcyBubyBuZXcgbGluZSBpbiBiZXR3ZWVuLlxuICAgICAgICAgIC8vIEFzc29jaWF0ZSB0aGUgY29kZSBiZXR3ZWVuIFwibGFzdEdlbmVyYXRlZENvbHVtblwiIGFuZFxuICAgICAgICAgIC8vIFwibWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cIiB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICAgIG5leHRMaW5lID0gcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gfHwgXCJcIjtcbiAgICAgICAgICBjb25zdCBjb2RlID0gbmV4dExpbmUuc3Vic3RyKDAsIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSA9IG5leHRMaW5lLnN1YnN0cihtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuICAgICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgY29kZSk7XG4gICAgICAgICAgLy8gTm8gbW9yZSByZW1haW5pbmcgY29kZSwgY29udGludWVcbiAgICAgICAgICBsYXN0TWFwcGluZyA9IG1hcHBpbmc7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBXZSBhZGQgdGhlIGdlbmVyYXRlZCBjb2RlIHVudGlsIHRoZSBmaXJzdCBtYXBwaW5nXG4gICAgICAvLyB0byB0aGUgU291cmNlTm9kZSB3aXRob3V0IGFueSBtYXBwaW5nLlxuICAgICAgLy8gRWFjaCBsaW5lIGlzIGFkZGVkIGFzIHNlcGFyYXRlIHN0cmluZy5cbiAgICAgIHdoaWxlIChsYXN0R2VuZXJhdGVkTGluZSA8IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICBub2RlLmFkZChzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICBsYXN0R2VuZXJhdGVkTGluZSsrO1xuICAgICAgfVxuICAgICAgaWYgKGxhc3RHZW5lcmF0ZWRDb2x1bW4gPCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikge1xuICAgICAgICBuZXh0TGluZSA9IHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdIHx8IFwiXCI7XG4gICAgICAgIG5vZGUuYWRkKG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikpO1xuICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSA9IG5leHRMaW5lLnN1YnN0cihtYXBwaW5nLmdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcbiAgICAgIH1cbiAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICB9LCB0aGlzKTtcbiAgICAvLyBXZSBoYXZlIHByb2Nlc3NlZCBhbGwgbWFwcGluZ3MuXG4gICAgaWYgKHJlbWFpbmluZ0xpbmVzSW5kZXggPCByZW1haW5pbmdMaW5lcy5sZW5ndGgpIHtcbiAgICAgIGlmIChsYXN0TWFwcGluZykge1xuICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIHJlbWFpbmluZyBjb2RlIGluIHRoZSBjdXJyZW50IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgfVxuICAgICAgLy8gYW5kIGFkZCB0aGUgcmVtYWluaW5nIGxpbmVzIHdpdGhvdXQgYW55IG1hcHBpbmdcbiAgICAgIG5vZGUuYWRkKHJlbWFpbmluZ0xpbmVzLnNwbGljZShyZW1haW5pbmdMaW5lc0luZGV4KS5qb2luKFwiXCIpKTtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50IGludG8gU291cmNlTm9kZVxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24oc291cmNlRmlsZSkge1xuICAgICAgY29uc3QgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYVJlbGF0aXZlUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm9kZTtcblxuICAgIGZ1bmN0aW9uIGFkZE1hcHBpbmdXaXRoQ29kZShtYXBwaW5nLCBjb2RlKSB7XG4gICAgICBpZiAobWFwcGluZyA9PT0gbnVsbCB8fCBtYXBwaW5nLnNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUuYWRkKGNvZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc291cmNlID0gYVJlbGF0aXZlUGF0aFxuICAgICAgICAgID8gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgIDogbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIG5vZGUuYWRkKG5ldyBTb3VyY2VOb2RlKG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBpbmcubmFtZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhpcyBzb3VyY2Ugbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gICAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICAgKi9cbiAgYWRkKGFDaHVuaykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICAgIGFDaHVuay5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICAgIHRoaXMuYWRkKGNodW5rKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoYUNodW5rW2lzU291cmNlTm9kZV0gfHwgdHlwZW9mIGFDaHVuayA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgaWYgKGFDaHVuaykge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goYUNodW5rKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgXCJFeHBlY3RlZCBhIFNvdXJjZU5vZGUsIHN0cmluZywgb3IgYW4gYXJyYXkgb2YgU291cmNlTm9kZXMgYW5kIHN0cmluZ3MuIEdvdCBcIiArIGFDaHVua1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBzb3VyY2Ugbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gICAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICAgKi9cbiAgcHJlcGVuZChhQ2h1bmspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgICBmb3IgKGxldCBpID0gYUNodW5rLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMucHJlcGVuZChhQ2h1bmtbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYUNodW5rW2lzU291cmNlTm9kZV0gfHwgdHlwZW9mIGFDaHVuayA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhpcy5jaGlsZHJlbi51bnNoaWZ0KGFDaHVuayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhbGsgb3ZlciB0aGUgdHJlZSBvZiBKUyBzbmlwcGV0cyBpbiB0aGlzIG5vZGUgYW5kIGl0cyBjaGlsZHJlbi4gVGhlXG4gICAqIHdhbGtpbmcgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgZm9yIGVhY2ggc25pcHBldCBvZiBKUyBhbmQgaXMgcGFzc2VkIHRoYXRcbiAgICogc25pcHBldCBhbmQgdGhlIGl0cyBvcmlnaW5hbCBhc3NvY2lhdGVkIHNvdXJjZSdzIGxpbmUvY29sdW1uIGxvY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gYUZuIFRoZSB0cmF2ZXJzYWwgZnVuY3Rpb24uXG4gICAqL1xuICB3YWxrKGFGbikge1xuICAgIGxldCBjaHVuaztcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2h1bmsgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNodW5rW2lzU291cmNlTm9kZV0pIHtcbiAgICAgICAgY2h1bmsud2FsayhhRm4pO1xuICAgICAgfSBlbHNlIGlmIChjaHVuayAhPT0gXCJcIikge1xuICAgICAgICBhRm4oY2h1bmssIHsgc291cmNlOiB0aGlzLnNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpa2UgYFN0cmluZy5wcm90b3R5cGUuam9pbmAgZXhjZXB0IGZvciBTb3VyY2VOb2Rlcy4gSW5zZXJ0cyBgYVN0cmAgYmV0d2VlblxuICAgKiBlYWNoIG9mIGB0aGlzLmNoaWxkcmVuYC5cbiAgICpcbiAgICogQHBhcmFtIGFTZXAgVGhlIHNlcGFyYXRvci5cbiAgICovXG4gIGpvaW4oYVNlcCkge1xuICAgIGxldCBuZXdDaGlsZHJlbjtcbiAgICBsZXQgaTtcbiAgICBjb25zdCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgbmV3Q2hpbGRyZW4gPSBbXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW4gLSAxOyBpKyspIHtcbiAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaChhU2VwKTtcbiAgICAgIH1cbiAgICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgICB0aGlzLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlIG9uIHRoZSB2ZXJ5IHJpZ2h0LW1vc3Qgc291cmNlIHNuaXBwZXQuIFVzZWZ1bFxuICAgKiBmb3IgdHJpbW1pbmcgd2hpdGVzcGFjZSBmcm9tIHRoZSBlbmQgb2YgYSBzb3VyY2Ugbm9kZSwgZXRjLlxuICAgKlxuICAgKiBAcGFyYW0gYVBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICogQHBhcmFtIGFSZXBsYWNlbWVudCBUaGUgdGhpbmcgdG8gcmVwbGFjZSB0aGUgcGF0dGVybiB3aXRoLlxuICAgKi9cbiAgcmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpIHtcbiAgICBjb25zdCBsYXN0Q2hpbGQgPSB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgaWYgKGxhc3RDaGlsZFtpc1NvdXJjZU5vZGVdKSB7XG4gICAgICBsYXN0Q2hpbGQucmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxhc3RDaGlsZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdID0gbGFzdENoaWxkLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChcIlwiLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLiBUaGlzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvclxuICAgKiBpbiB0aGUgc291cmNlc0NvbnRlbnQgZmllbGQuXG4gICAqXG4gICAqIEBwYXJhbSBhU291cmNlRmlsZSBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlXG4gICAqIEBwYXJhbSBhU291cmNlQ29udGVudCBUaGUgY29udGVudCBvZiB0aGUgc291cmNlIGZpbGVcbiAgICovXG4gIHNldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgdGhpcy5zb3VyY2VDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKGFTb3VyY2VGaWxlKV0gPSBhU291cmNlQ29udGVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgU291cmNlTm9kZXMuIFRoZSB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaFxuICAgKiBzb3VyY2UgZmlsZSBjb250ZW50IGFuZCBpcyBwYXNzZWQgdGhlIGZpbGVuYW1lIGFuZCBzb3VyY2UgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICAgKi9cbiAgd2Fsa1NvdXJjZUNvbnRlbnRzKGFGbikge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5jaGlsZHJlbltpXVtpc1NvdXJjZU5vZGVdKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW5baV0ud2Fsa1NvdXJjZUNvbnRlbnRzKGFGbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc291cmNlcyA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQ29udGVudHMpO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhRm4odXRpbC5mcm9tU2V0U3RyaW5nKHNvdXJjZXNbaV0pLCB0aGlzLnNvdXJjZUNvbnRlbnRzW3NvdXJjZXNbaV1dKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZS4gV2Fsa3Mgb3ZlciB0aGUgdHJlZVxuICAgKiBhbmQgY29uY2F0ZW5hdGVzIGFsbCB0aGUgdmFyaW91cyBzbmlwcGV0cyB0b2dldGhlciB0byBvbmUgc3RyaW5nLlxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgdGhpcy53YWxrKGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICBzdHIgKz0gY2h1bms7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZSBhbG9uZyB3aXRoIGEgc291cmNlXG4gICAqIG1hcC5cbiAgICovXG4gIHRvU3RyaW5nV2l0aFNvdXJjZU1hcChhQXJncykge1xuICAgIGNvbnN0IGdlbmVyYXRlZCA9IHtcbiAgICAgIGNvZGU6IFwiXCIsXG4gICAgICBsaW5lOiAxLFxuICAgICAgY29sdW1uOiAwXG4gICAgfTtcbiAgICBjb25zdCBtYXAgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKTtcbiAgICBsZXQgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgIGxldCBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgIGxldCBsYXN0T3JpZ2luYWxMaW5lID0gbnVsbDtcbiAgICBsZXQgbGFzdE9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgICBsZXQgbGFzdE9yaWdpbmFsTmFtZSA9IG51bGw7XG4gICAgdGhpcy53YWxrKGZ1bmN0aW9uKGNodW5rLCBvcmlnaW5hbCkge1xuICAgICAgZ2VuZXJhdGVkLmNvZGUgKz0gY2h1bms7XG4gICAgICBpZiAob3JpZ2luYWwuc291cmNlICE9PSBudWxsXG4gICAgICAgICAgJiYgb3JpZ2luYWwubGluZSAhPT0gbnVsbFxuICAgICAgICAgICYmIG9yaWdpbmFsLmNvbHVtbiAhPT0gbnVsbCkge1xuICAgICAgICBpZiAobGFzdE9yaWdpbmFsU291cmNlICE9PSBvcmlnaW5hbC5zb3VyY2VcbiAgICAgICAgICB8fCBsYXN0T3JpZ2luYWxMaW5lICE9PSBvcmlnaW5hbC5saW5lXG4gICAgICAgICAgfHwgbGFzdE9yaWdpbmFsQ29sdW1uICE9PSBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICB8fCBsYXN0T3JpZ2luYWxOYW1lICE9PSBvcmlnaW5hbC5uYW1lKSB7XG4gICAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgICAgbGFzdE9yaWdpbmFsTGluZSA9IG9yaWdpbmFsLmxpbmU7XG4gICAgICAgIGxhc3RPcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgICAgbGFzdE9yaWdpbmFsTmFtZSA9IG9yaWdpbmFsLm5hbWU7XG4gICAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaWR4ID0gMCwgbGVuZ3RoID0gY2h1bmsubGVuZ3RoOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGlmIChjaHVuay5jaGFyQ29kZUF0KGlkeCkgPT09IE5FV0xJTkVfQ09ERSkge1xuICAgICAgICAgIGdlbmVyYXRlZC5saW5lKys7XG4gICAgICAgICAgZ2VuZXJhdGVkLmNvbHVtbiA9IDA7XG4gICAgICAgICAgLy8gTWFwcGluZ3MgZW5kIGF0IGVvbFxuICAgICAgICAgIGlmIChpZHggKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICAgIGxpbmU6IG9yaWdpbmFsLmxpbmUsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZW5lcmF0ZWQuY29sdW1uKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLndhbGtTb3VyY2VDb250ZW50cyhmdW5jdGlvbihzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KSB7XG4gICAgICBtYXAuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7IGNvZGU6IGdlbmVyYXRlZC5jb2RlLCBtYXAgfTtcbiAgfVxufVxuXG5leHBvcnRzLlNvdXJjZU5vZGUgPSBTb3VyY2VOb2RlO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG4vKipcbiAqIFRoaXMgaXMgYSBoZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdmFsdWVzIGZyb20gcGFyYW1ldGVyL29wdGlvbnNcbiAqIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIGFyZ3MgVGhlIG9iamVjdCB3ZSBhcmUgZXh0cmFjdGluZyB2YWx1ZXMgZnJvbVxuICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHdlIGFyZSBnZXR0aW5nLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBBbiBvcHRpb25hbCB2YWx1ZSB0byByZXR1cm4gaWYgdGhlIHByb3BlcnR5IGlzIG1pc3NpbmdcbiAqIGZyb20gdGhlIG9iamVjdC4gSWYgdGhpcyBpcyBub3Qgc3BlY2lmaWVkIGFuZCB0aGUgcHJvcGVydHkgaXMgbWlzc2luZywgYW5cbiAqIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICovXG5mdW5jdGlvbiBnZXRBcmcoYUFyZ3MsIGFOYW1lLCBhRGVmYXVsdFZhbHVlKSB7XG4gIGlmIChhTmFtZSBpbiBhQXJncykge1xuICAgIHJldHVybiBhQXJnc1thTmFtZV07XG4gIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgIHJldHVybiBhRGVmYXVsdFZhbHVlO1xuICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhTmFtZSArICdcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LicpO1xuXG59XG5leHBvcnRzLmdldEFyZyA9IGdldEFyZztcblxuY29uc3QgdXJsUmVnZXhwID0gL14oPzooW1xcdytcXC0uXSspOik/XFwvXFwvKD86KFxcdys6XFx3KylAKT8oW1xcdy4tXSopKD86OihcXGQrKSk/KC4qKSQvO1xuY29uc3QgZGF0YVVybFJlZ2V4cCA9IC9eZGF0YTouK1xcLC4rJC87XG5cbmZ1bmN0aW9uIHVybFBhcnNlKGFVcmwpIHtcbiAgY29uc3QgbWF0Y2ggPSBhVXJsLm1hdGNoKHVybFJlZ2V4cCk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHNjaGVtZTogbWF0Y2hbMV0sXG4gICAgYXV0aDogbWF0Y2hbMl0sXG4gICAgaG9zdDogbWF0Y2hbM10sXG4gICAgcG9ydDogbWF0Y2hbNF0sXG4gICAgcGF0aDogbWF0Y2hbNV1cbiAgfTtcbn1cbmV4cG9ydHMudXJsUGFyc2UgPSB1cmxQYXJzZTtcblxuZnVuY3Rpb24gdXJsR2VuZXJhdGUoYVBhcnNlZFVybCkge1xuICBsZXQgdXJsID0gXCJcIjtcbiAgaWYgKGFQYXJzZWRVcmwuc2NoZW1lKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuc2NoZW1lICsgXCI6XCI7XG4gIH1cbiAgdXJsICs9IFwiLy9cIjtcbiAgaWYgKGFQYXJzZWRVcmwuYXV0aCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLmF1dGggKyBcIkBcIjtcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5ob3N0KSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuaG9zdDtcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5wb3J0KSB7XG4gICAgdXJsICs9IFwiOlwiICsgYVBhcnNlZFVybC5wb3J0O1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLnBhdGgpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5wYXRoO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5leHBvcnRzLnVybEdlbmVyYXRlID0gdXJsR2VuZXJhdGU7XG5cbmNvbnN0IE1BWF9DQUNIRURfSU5QVVRTID0gMzI7XG5cbi8qKlxuICogVGFrZXMgc29tZSBmdW5jdGlvbiBgZihpbnB1dCkgLT4gcmVzdWx0YCBhbmQgcmV0dXJucyBhIG1lbW9pemVkIHZlcnNpb24gb2ZcbiAqIGBmYC5cbiAqXG4gKiBXZSBrZWVwIGF0IG1vc3QgYE1BWF9DQUNIRURfSU5QVVRTYCBtZW1vaXplZCByZXN1bHRzIG9mIGBmYCBhbGl2ZS4gVGhlXG4gKiBtZW1vaXphdGlvbiBpcyBhIGR1bWItc2ltcGxlLCBsaW5lYXIgbGVhc3QtcmVjZW50bHktdXNlZCBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gbHJ1TWVtb2l6ZShmKSB7XG4gIGNvbnN0IGNhY2hlID0gW107XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWNoZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGNhY2hlW2ldLmlucHV0ID09PSBpbnB1dCkge1xuICAgICAgICBjb25zdCB0ZW1wID0gY2FjaGVbMF07XG4gICAgICAgIGNhY2hlWzBdID0gY2FjaGVbaV07XG4gICAgICAgIGNhY2hlW2ldID0gdGVtcDtcbiAgICAgICAgcmV0dXJuIGNhY2hlWzBdLnJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBmKGlucHV0KTtcblxuICAgIGNhY2hlLnVuc2hpZnQoe1xuICAgICAgaW5wdXQsXG4gICAgICByZXN1bHQsXG4gICAgfSk7XG5cbiAgICBpZiAoY2FjaGUubGVuZ3RoID4gTUFYX0NBQ0hFRF9JTlBVVFMpIHtcbiAgICAgIGNhY2hlLnBvcCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbi8qKlxuICogTm9ybWFsaXplcyBhIHBhdGgsIG9yIHRoZSBwYXRoIHBvcnRpb24gb2YgYSBVUkw6XG4gKlxuICogLSBSZXBsYWNlcyBjb25zZWN1dGl2ZSBzbGFzaGVzIHdpdGggb25lIHNsYXNoLlxuICogLSBSZW1vdmVzIHVubmVjZXNzYXJ5ICcuJyBwYXJ0cy5cbiAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnPGRpcj4vLi4nIHBhcnRzLlxuICpcbiAqIEJhc2VkIG9uIGNvZGUgaW4gdGhlIE5vZGUuanMgJ3BhdGgnIGNvcmUgbW9kdWxlLlxuICpcbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciB1cmwgdG8gbm9ybWFsaXplLlxuICovXG5jb25zdCBub3JtYWxpemUgPSBscnVNZW1vaXplKGZ1bmN0aW9uIG5vcm1hbGl6ZShhUGF0aCkge1xuICBsZXQgcGF0aCA9IGFQYXRoO1xuICBjb25zdCB1cmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIGlmICh1cmwpIHtcbiAgICBpZiAoIXVybC5wYXRoKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuICAgIHBhdGggPSB1cmwucGF0aDtcbiAgfVxuICBjb25zdCBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpO1xuXG4gIC8vIFNwbGl0IHRoZSBwYXRoIGludG8gcGFydHMgYmV0d2VlbiBgL2AgY2hhcmFjdGVycy4gVGhpcyBpcyBtdWNoIGZhc3RlciB0aGFuXG4gIC8vIHVzaW5nIGAuc3BsaXQoL1xcLysvZylgLlxuICBjb25zdCBwYXJ0cyA9IFtdO1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3RhcnQgPSBpO1xuICAgIGkgPSBwYXRoLmluZGV4T2YoXCIvXCIsIHN0YXJ0KTtcbiAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgIHBhcnRzLnB1c2gocGF0aC5zbGljZShzdGFydCkpO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRzLnB1c2gocGF0aC5zbGljZShzdGFydCwgaSkpO1xuICAgICAgd2hpbGUgKGkgPCBwYXRoLmxlbmd0aCAmJiBwYXRoW2ldID09PSBcIi9cIikge1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IHVwID0gMDtcbiAgZm9yIChpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgaWYgKHBhcnQgPT09IFwiLlwiKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSBcIi4uXCIpIHtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCA+IDApIHtcbiAgICAgIGlmIChwYXJ0ID09PSBcIlwiKSB7XG4gICAgICAgIC8vIFRoZSBmaXJzdCBwYXJ0IGlzIGJsYW5rIGlmIHRoZSBwYXRoIGlzIGFic29sdXRlLiBUcnlpbmcgdG8gZ29cbiAgICAgICAgLy8gYWJvdmUgdGhlIHJvb3QgaXMgYSBuby1vcC4gVGhlcmVmb3JlIHdlIGNhbiByZW1vdmUgYWxsICcuLicgcGFydHNcbiAgICAgICAgLy8gZGlyZWN0bHkgYWZ0ZXIgdGhlIHJvb3QuXG4gICAgICAgIHBhcnRzLnNwbGljZShpICsgMSwgdXApO1xuICAgICAgICB1cCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMik7XG4gICAgICAgIHVwLS07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHBhdGggPSBwYXJ0cy5qb2luKFwiL1wiKTtcblxuICBpZiAocGF0aCA9PT0gXCJcIikge1xuICAgIHBhdGggPSBpc0Fic29sdXRlID8gXCIvXCIgOiBcIi5cIjtcbiAgfVxuXG4gIGlmICh1cmwpIHtcbiAgICB1cmwucGF0aCA9IHBhdGg7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKHVybCk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59KTtcbmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xuXG4vKipcbiAqIEpvaW5zIHR3byBwYXRocy9VUkxzLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgam9pbmVkIHdpdGggdGhlIHJvb3QuXG4gKlxuICogLSBJZiBhUGF0aCBpcyBhIFVSTCBvciBhIGRhdGEgVVJJLCBhUGF0aCBpcyByZXR1cm5lZCwgdW5sZXNzIGFQYXRoIGlzIGFcbiAqICAgc2NoZW1lLXJlbGF0aXZlIFVSTDogVGhlbiB0aGUgc2NoZW1lIG9mIGFSb290LCBpZiBhbnksIGlzIHByZXBlbmRlZFxuICogICBmaXJzdC5cbiAqIC0gT3RoZXJ3aXNlIGFQYXRoIGlzIGEgcGF0aC4gSWYgYVJvb3QgaXMgYSBVUkwsIHRoZW4gaXRzIHBhdGggcG9ydGlvblxuICogICBpcyB1cGRhdGVkIHdpdGggdGhlIHJlc3VsdCBhbmQgYVJvb3QgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSB0aGUgcmVzdWx0XG4gKiAgIGlzIHJldHVybmVkLlxuICogICAtIElmIGFQYXRoIGlzIGFic29sdXRlLCB0aGUgcmVzdWx0IGlzIGFQYXRoLlxuICogICAtIE90aGVyd2lzZSB0aGUgdHdvIHBhdGhzIGFyZSBqb2luZWQgd2l0aCBhIHNsYXNoLlxuICogLSBKb2luaW5nIGZvciBleGFtcGxlICdodHRwOi8vJyBhbmQgJ3d3dy5leGFtcGxlLmNvbScgaXMgYWxzbyBzdXBwb3J0ZWQuXG4gKi9cbmZ1bmN0aW9uIGpvaW4oYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cbiAgaWYgKGFQYXRoID09PSBcIlwiKSB7XG4gICAgYVBhdGggPSBcIi5cIjtcbiAgfVxuICBjb25zdCBhUGF0aFVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgY29uc3QgYVJvb3RVcmwgPSB1cmxQYXJzZShhUm9vdCk7XG4gIGlmIChhUm9vdFVybCkge1xuICAgIGFSb290ID0gYVJvb3RVcmwucGF0aCB8fCBcIi9cIjtcbiAgfVxuXG4gIC8vIGBqb2luKGZvbywgJy8vd3d3LmV4YW1wbGUub3JnJylgXG4gIGlmIChhUGF0aFVybCAmJiAhYVBhdGhVcmwuc2NoZW1lKSB7XG4gICAgaWYgKGFSb290VXJsKSB7XG4gICAgICBhUGF0aFVybC5zY2hlbWUgPSBhUm9vdFVybC5zY2hlbWU7XG4gICAgfVxuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUGF0aFVybCk7XG4gIH1cblxuICBpZiAoYVBhdGhVcmwgfHwgYVBhdGgubWF0Y2goZGF0YVVybFJlZ2V4cCkpIHtcbiAgICByZXR1cm4gYVBhdGg7XG4gIH1cblxuICAvLyBgam9pbignaHR0cDovLycsICd3d3cuZXhhbXBsZS5jb20nKWBcbiAgaWYgKGFSb290VXJsICYmICFhUm9vdFVybC5ob3N0ICYmICFhUm9vdFVybC5wYXRoKSB7XG4gICAgYVJvb3RVcmwuaG9zdCA9IGFQYXRoO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cblxuICBjb25zdCBqb2luZWQgPSBhUGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiXG4gICAgPyBhUGF0aFxuICAgIDogbm9ybWFsaXplKGFSb290LnJlcGxhY2UoL1xcLyskLywgXCJcIikgKyBcIi9cIiArIGFQYXRoKTtcblxuICBpZiAoYVJvb3RVcmwpIHtcbiAgICBhUm9vdFVybC5wYXRoID0gam9pbmVkO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cbiAgcmV0dXJuIGpvaW5lZDtcbn1cbmV4cG9ydHMuam9pbiA9IGpvaW47XG5cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKGFQYXRoKSB7XG4gIHJldHVybiBhUGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiIHx8IHVybFJlZ2V4cC50ZXN0KGFQYXRoKTtcbn07XG5cbi8qKlxuICogTWFrZSBhIHBhdGggcmVsYXRpdmUgdG8gYSBVUkwgb3IgYW5vdGhlciBwYXRoLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgbWFkZSByZWxhdGl2ZSB0byBhUm9vdC5cbiAqL1xuZnVuY3Rpb24gcmVsYXRpdmUoYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cblxuICBhUm9vdCA9IGFSb290LnJlcGxhY2UoL1xcLyQvLCBcIlwiKTtcblxuICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgdGhlIHBhdGggdG8gYmUgYWJvdmUgdGhlIHJvb3QuIEluIHRoaXMgY2FzZSwgc2ltcGx5XG4gIC8vIGNoZWNraW5nIHdoZXRoZXIgdGhlIHJvb3QgaXMgYSBwcmVmaXggb2YgdGhlIHBhdGggd29uJ3Qgd29yay4gSW5zdGVhZCwgd2VcbiAgLy8gbmVlZCB0byByZW1vdmUgY29tcG9uZW50cyBmcm9tIHRoZSByb290IG9uZSBieSBvbmUsIHVudGlsIGVpdGhlciB3ZSBmaW5kXG4gIC8vIGEgcHJlZml4IHRoYXQgZml0cywgb3Igd2UgcnVuIG91dCBvZiBjb21wb25lbnRzIHRvIHJlbW92ZS5cbiAgbGV0IGxldmVsID0gMDtcbiAgd2hpbGUgKGFQYXRoLmluZGV4T2YoYVJvb3QgKyBcIi9cIikgIT09IDApIHtcbiAgICBjb25zdCBpbmRleCA9IGFSb290Lmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG9ubHkgcGFydCBvZiB0aGUgcm9vdCB0aGF0IGlzIGxlZnQgaXMgdGhlIHNjaGVtZSAoaS5lLiBodHRwOi8vLFxuICAgIC8vIGZpbGU6Ly8vLCBldGMuKSwgb25lIG9yIG1vcmUgc2xhc2hlcyAoLyksIG9yIHNpbXBseSBub3RoaW5nIGF0IGFsbCwgd2VcbiAgICAvLyBoYXZlIGV4aGF1c3RlZCBhbGwgY29tcG9uZW50cywgc28gdGhlIHBhdGggaXMgbm90IHJlbGF0aXZlIHRvIHRoZSByb290LlxuICAgIGFSb290ID0gYVJvb3Quc2xpY2UoMCwgaW5kZXgpO1xuICAgIGlmIChhUm9vdC5tYXRjaCgvXihbXlxcL10rOlxcLyk/XFwvKiQvKSkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cblxuICAgICsrbGV2ZWw7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgd2UgYWRkIGEgXCIuLi9cIiBmb3IgZWFjaCBjb21wb25lbnQgd2UgcmVtb3ZlZCBmcm9tIHRoZSByb290LlxuICByZXR1cm4gQXJyYXkobGV2ZWwgKyAxKS5qb2luKFwiLi4vXCIpICsgYVBhdGguc3Vic3RyKGFSb290Lmxlbmd0aCArIDEpO1xufVxuZXhwb3J0cy5yZWxhdGl2ZSA9IHJlbGF0aXZlO1xuXG5jb25zdCBzdXBwb3J0c051bGxQcm90byA9IChmdW5jdGlvbigpIHtcbiAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuICEoXCJfX3Byb3RvX19cIiBpbiBvYmopO1xufSgpKTtcblxuZnVuY3Rpb24gaWRlbnRpdHkocykge1xuICByZXR1cm4gcztcbn1cblxuLyoqXG4gKiBCZWNhdXNlIGJlaGF2aW9yIGdvZXMgd2Fja3kgd2hlbiB5b3Ugc2V0IGBfX3Byb3RvX19gIG9uIG9iamVjdHMsIHdlXG4gKiBoYXZlIHRvIHByZWZpeCBhbGwgdGhlIHN0cmluZ3MgaW4gb3VyIHNldCB3aXRoIGFuIGFyYml0cmFyeSBjaGFyYWN0ZXIuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvcHVsbC8zMSBhbmRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvaXNzdWVzLzMwXG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbmZ1bmN0aW9uIHRvU2V0U3RyaW5nKGFTdHIpIHtcbiAgaWYgKGlzUHJvdG9TdHJpbmcoYVN0cikpIHtcbiAgICByZXR1cm4gXCIkXCIgKyBhU3RyO1xuICB9XG5cbiAgcmV0dXJuIGFTdHI7XG59XG5leHBvcnRzLnRvU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IHRvU2V0U3RyaW5nO1xuXG5mdW5jdGlvbiBmcm9tU2V0U3RyaW5nKGFTdHIpIHtcbiAgaWYgKGlzUHJvdG9TdHJpbmcoYVN0cikpIHtcbiAgICByZXR1cm4gYVN0ci5zbGljZSgxKTtcbiAgfVxuXG4gIHJldHVybiBhU3RyO1xufVxuZXhwb3J0cy5mcm9tU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IGZyb21TZXRTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzUHJvdG9TdHJpbmcocykge1xuICBpZiAoIXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBsZW5ndGggPSBzLmxlbmd0aDtcblxuICBpZiAobGVuZ3RoIDwgOSAvKiBcIl9fcHJvdG9fX1wiLmxlbmd0aCAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLW11bHRpLXNwYWNlcyAqL1xuICBpZiAocy5jaGFyQ29kZUF0KGxlbmd0aCAtIDEpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMikgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSAzKSAhPT0gMTExIC8qICdvJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDQpICE9PSAxMTYgLyogJ3QnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNSkgIT09IDExMSAvKiAnbycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA2KSAhPT0gMTE0IC8qICdyJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDcpICE9PSAxMTIgLyogJ3AnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gOCkgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA5KSAhPT0gOTUgIC8qICdfJyAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLW11bHRpLXNwYWNlcyAqL1xuXG4gIGZvciAobGV0IGkgPSBsZW5ndGggLSAxMDsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAocy5jaGFyQ29kZUF0KGkpICE9PSAzNiAvKiAnJCcgKi8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdoZXJlIHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uLCBidXQgZGlmZmVyZW50IGdlbmVyYXRlZFxuICogbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGEgbWFwcGluZyB3aXRoIGFcbiAqIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICBsZXQgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCB8fCBvbmx5Q29tcGFyZU9yaWdpbmFsKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xufVxuZXhwb3J0cy5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyA9IGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zO1xuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBkZWZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgaW5kaWNlcyB3aGVyZVxuICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiwgYnV0IGRpZmZlcmVudFxuICogc291cmNlL25hbWUvb3JpZ2luYWwgbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGFcbiAqIG1hcHBpbmcgd2l0aCBhIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgbGV0IGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCB8fCBvbmx5Q29tcGFyZUdlbmVyYXRlZCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQ7XG5cbmZ1bmN0aW9uIHN0cmNtcChhU3RyMSwgYVN0cjIpIHtcbiAgaWYgKGFTdHIxID09PSBhU3RyMikge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKGFTdHIxID09PSBudWxsKSB7XG4gICAgcmV0dXJuIDE7IC8vIGFTdHIyICE9PSBudWxsXG4gIH1cblxuICBpZiAoYVN0cjIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gLTE7IC8vIGFTdHIxICE9PSBudWxsXG4gIH1cblxuICBpZiAoYVN0cjEgPiBhU3RyMikge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBpbmZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgc3RyaW5ncyB3aGVyZVxuICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgbGV0IGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQ7XG5cbi8qKlxuICogU3RyaXAgYW55IEpTT04gWFNTSSBhdm9pZGFuY2UgcHJlZml4IGZyb20gdGhlIHN0cmluZyAoYXMgZG9jdW1lbnRlZFxuICogaW4gdGhlIHNvdXJjZSBtYXBzIHNwZWNpZmljYXRpb24pLCBhbmQgdGhlbiBwYXJzZSB0aGUgc3RyaW5nIGFzXG4gKiBKU09OLlxuICovXG5mdW5jdGlvbiBwYXJzZVNvdXJjZU1hcElucHV0KHN0cikge1xuICByZXR1cm4gSlNPTi5wYXJzZShzdHIucmVwbGFjZSgvXlxcKV19J1teXFxuXSpcXG4vLCBcIlwiKSk7XG59XG5leHBvcnRzLnBhcnNlU291cmNlTWFwSW5wdXQgPSBwYXJzZVNvdXJjZU1hcElucHV0O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIFVSTCBvZiBhIHNvdXJjZSBnaXZlbiB0aGUgdGhlIHNvdXJjZSByb290LCB0aGUgc291cmNlJ3NcbiAqIFVSTCwgYW5kIHRoZSBzb3VyY2UgbWFwJ3MgVVJMLlxuICovXG5mdW5jdGlvbiBjb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHNvdXJjZVVSTCwgc291cmNlTWFwVVJMKSB7XG4gIHNvdXJjZVVSTCA9IHNvdXJjZVVSTCB8fCBcIlwiO1xuXG4gIGlmIChzb3VyY2VSb290KSB7XG4gICAgLy8gVGhpcyBmb2xsb3dzIHdoYXQgQ2hyb21lIGRvZXMuXG4gICAgaWYgKHNvdXJjZVJvb3Rbc291cmNlUm9vdC5sZW5ndGggLSAxXSAhPT0gXCIvXCIgJiYgc291cmNlVVJMWzBdICE9PSBcIi9cIikge1xuICAgICAgc291cmNlUm9vdCArPSBcIi9cIjtcbiAgICB9XG4gICAgLy8gVGhlIHNwZWMgc2F5czpcbiAgICAvLyAgIExpbmUgNDogQW4gb3B0aW9uYWwgc291cmNlIHJvb3QsIHVzZWZ1bCBmb3IgcmVsb2NhdGluZyBzb3VyY2VcbiAgICAvLyAgIGZpbGVzIG9uIGEgc2VydmVyIG9yIHJlbW92aW5nIHJlcGVhdGVkIHZhbHVlcyBpbiB0aGVcbiAgICAvLyAgIOKAnHNvdXJjZXPigJ0gZW50cnkuICBUaGlzIHZhbHVlIGlzIHByZXBlbmRlZCB0byB0aGUgaW5kaXZpZHVhbFxuICAgIC8vICAgZW50cmllcyBpbiB0aGUg4oCcc291cmNl4oCdIGZpZWxkLlxuICAgIHNvdXJjZVVSTCA9IHNvdXJjZVJvb3QgKyBzb3VyY2VVUkw7XG4gIH1cblxuICAvLyBIaXN0b3JpY2FsbHksIFNvdXJjZU1hcENvbnN1bWVyIGRpZCBub3QgdGFrZSB0aGUgc291cmNlTWFwVVJMIGFzXG4gIC8vIGEgcGFyYW1ldGVyLiAgVGhpcyBtb2RlIGlzIHN0aWxsIHNvbWV3aGF0IHN1cHBvcnRlZCwgd2hpY2ggaXMgd2h5XG4gIC8vIHRoaXMgY29kZSBibG9jayBpcyBjb25kaXRpb25hbC4gIEhvd2V2ZXIsIGl0J3MgcHJlZmVyYWJsZSB0byBwYXNzXG4gIC8vIHRoZSBzb3VyY2UgbWFwIFVSTCB0byBTb3VyY2VNYXBDb25zdW1lciwgc28gdGhhdCB0aGlzIGZ1bmN0aW9uXG4gIC8vIGNhbiBpbXBsZW1lbnQgdGhlIHNvdXJjZSBVUkwgcmVzb2x1dGlvbiBhbGdvcml0aG0gYXMgb3V0bGluZWQgaW5cbiAgLy8gdGhlIHNwZWMuICBUaGlzIGJsb2NrIGlzIGJhc2ljYWxseSB0aGUgZXF1aXZhbGVudCBvZjpcbiAgLy8gICAgbmV3IFVSTChzb3VyY2VVUkwsIHNvdXJjZU1hcFVSTCkudG9TdHJpbmcoKVxuICAvLyAuLi4gZXhjZXB0IGl0IGF2b2lkcyB1c2luZyBVUkwsIHdoaWNoIHdhc24ndCBhdmFpbGFibGUgaW4gdGhlXG4gIC8vIG9sZGVyIHJlbGVhc2VzIG9mIG5vZGUgc3RpbGwgc3VwcG9ydGVkIGJ5IHRoaXMgbGlicmFyeS5cbiAgLy9cbiAgLy8gVGhlIHNwZWMgc2F5czpcbiAgLy8gICBJZiB0aGUgc291cmNlcyBhcmUgbm90IGFic29sdXRlIFVSTHMgYWZ0ZXIgcHJlcGVuZGluZyBvZiB0aGVcbiAgLy8gICDigJxzb3VyY2VSb2904oCdLCB0aGUgc291cmNlcyBhcmUgcmVzb2x2ZWQgcmVsYXRpdmUgdG8gdGhlXG4gIC8vICAgU291cmNlTWFwIChsaWtlIHJlc29sdmluZyBzY3JpcHQgc3JjIGluIGEgaHRtbCBkb2N1bWVudCkuXG4gIGlmIChzb3VyY2VNYXBVUkwpIHtcbiAgICBjb25zdCBwYXJzZWQgPSB1cmxQYXJzZShzb3VyY2VNYXBVUkwpO1xuICAgIGlmICghcGFyc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzb3VyY2VNYXBVUkwgY291bGQgbm90IGJlIHBhcnNlZFwiKTtcbiAgICB9XG4gICAgaWYgKHBhcnNlZC5wYXRoKSB7XG4gICAgICAvLyBTdHJpcCB0aGUgbGFzdCBwYXRoIGNvbXBvbmVudCwgYnV0IGtlZXAgdGhlIFwiL1wiLlxuICAgICAgY29uc3QgaW5kZXggPSBwYXJzZWQucGF0aC5sYXN0SW5kZXhPZihcIi9cIik7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBwYXJzZWQucGF0aCA9IHBhcnNlZC5wYXRoLnN1YnN0cmluZygwLCBpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VVUkwgPSBqb2luKHVybEdlbmVyYXRlKHBhcnNlZCksIHNvdXJjZVVSTCk7XG4gIH1cblxuICByZXR1cm4gbm9ybWFsaXplKHNvdXJjZVVSTCk7XG59XG5leHBvcnRzLmNvbXB1dGVTb3VyY2VVUkwgPSBjb21wdXRlU291cmNlVVJMO1xuIiwiY29uc3QgcmVhZFdhc20gPSByZXF1aXJlKFwiLi4vbGliL3JlYWQtd2FzbVwiKTtcblxuLyoqXG4gKiBQcm92aWRlIHRoZSBKSVQgd2l0aCBhIG5pY2Ugc2hhcGUgLyBoaWRkZW4gY2xhc3MuXG4gKi9cbmZ1bmN0aW9uIE1hcHBpbmcoKSB7XG4gIHRoaXMuZ2VuZXJhdGVkTGluZSA9IDA7XG4gIHRoaXMuZ2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgdGhpcy5sYXN0R2VuZXJhdGVkQ29sdW1uID0gbnVsbDtcbiAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICB0aGlzLm9yaWdpbmFsTGluZSA9IG51bGw7XG4gIHRoaXMub3JpZ2luYWxDb2x1bW4gPSBudWxsO1xuICB0aGlzLm5hbWUgPSBudWxsO1xufVxuXG5sZXQgY2FjaGVkV2FzbSA9IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2FzbSgpIHtcbiAgaWYgKGNhY2hlZFdhc20pIHtcbiAgICByZXR1cm4gY2FjaGVkV2FzbTtcbiAgfVxuXG4gIGNvbnN0IGNhbGxiYWNrU3RhY2sgPSBbXTtcblxuICBjYWNoZWRXYXNtID0gcmVhZFdhc20oKS50aGVuKGJ1ZmZlciA9PiB7XG4gICAgICByZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYnVmZmVyLCB7XG4gICAgICAgIGVudjoge1xuICAgICAgICAgIG1hcHBpbmdfY2FsbGJhY2soXG4gICAgICAgICAgICBnZW5lcmF0ZWRMaW5lLFxuICAgICAgICAgICAgZ2VuZXJhdGVkQ29sdW1uLFxuXG4gICAgICAgICAgICBoYXNMYXN0R2VuZXJhdGVkQ29sdW1uLFxuICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbixcblxuICAgICAgICAgICAgaGFzT3JpZ2luYWwsXG4gICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICBvcmlnaW5hbExpbmUsXG4gICAgICAgICAgICBvcmlnaW5hbENvbHVtbixcblxuICAgICAgICAgICAgaGFzTmFtZSxcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IG1hcHBpbmcgPSBuZXcgTWFwcGluZygpO1xuICAgICAgICAgICAgLy8gSlMgdXNlcyAxLWJhc2VkIGxpbmUgbnVtYmVycywgd2FzbSB1c2VzIDAtYmFzZWQuXG4gICAgICAgICAgICBtYXBwaW5nLmdlbmVyYXRlZExpbmUgPSBnZW5lcmF0ZWRMaW5lICsgMTtcbiAgICAgICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICAgICAgICBpZiAoaGFzTGFzdEdlbmVyYXRlZENvbHVtbikge1xuICAgICAgICAgICAgICAvLyBKUyB1c2VzIGluY2x1c2l2ZSBsYXN0IGdlbmVyYXRlZCBjb2x1bW4sIHdhc20gdXNlcyBleGNsdXNpdmUuXG4gICAgICAgICAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IGxhc3RHZW5lcmF0ZWRDb2x1bW4gLSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzT3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgICAgICAgIC8vIEpTIHVzZXMgMS1iYXNlZCBsaW5lIG51bWJlcnMsIHdhc20gdXNlcyAwLWJhc2VkLlxuICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IG9yaWdpbmFsTGluZSArIDE7XG4gICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBvcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAgICAgICBpZiAoaGFzTmFtZSkge1xuICAgICAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FsbGJhY2tTdGFja1tjYWxsYmFja1N0YWNrLmxlbmd0aCAtIDFdKG1hcHBpbmcpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBzdGFydF9hbGxfZ2VuZXJhdGVkX2xvY2F0aW9uc19mb3IoKSB7IGNvbnNvbGUudGltZShcImFsbF9nZW5lcmF0ZWRfbG9jYXRpb25zX2ZvclwiKTsgfSxcbiAgICAgICAgICBlbmRfYWxsX2dlbmVyYXRlZF9sb2NhdGlvbnNfZm9yKCkgeyBjb25zb2xlLnRpbWVFbmQoXCJhbGxfZ2VuZXJhdGVkX2xvY2F0aW9uc19mb3JcIik7IH0sXG5cbiAgICAgICAgICBzdGFydF9jb21wdXRlX2NvbHVtbl9zcGFucygpIHsgY29uc29sZS50aW1lKFwiY29tcHV0ZV9jb2x1bW5fc3BhbnNcIik7IH0sXG4gICAgICAgICAgZW5kX2NvbXB1dGVfY29sdW1uX3NwYW5zKCkgeyBjb25zb2xlLnRpbWVFbmQoXCJjb21wdXRlX2NvbHVtbl9zcGFuc1wiKTsgfSxcblxuICAgICAgICAgIHN0YXJ0X2dlbmVyYXRlZF9sb2NhdGlvbl9mb3IoKSB7IGNvbnNvbGUudGltZShcImdlbmVyYXRlZF9sb2NhdGlvbl9mb3JcIik7IH0sXG4gICAgICAgICAgZW5kX2dlbmVyYXRlZF9sb2NhdGlvbl9mb3IoKSB7IGNvbnNvbGUudGltZUVuZChcImdlbmVyYXRlZF9sb2NhdGlvbl9mb3JcIik7IH0sXG5cbiAgICAgICAgICBzdGFydF9vcmlnaW5hbF9sb2NhdGlvbl9mb3IoKSB7IGNvbnNvbGUudGltZShcIm9yaWdpbmFsX2xvY2F0aW9uX2ZvclwiKTsgfSxcbiAgICAgICAgICBlbmRfb3JpZ2luYWxfbG9jYXRpb25fZm9yKCkgeyBjb25zb2xlLnRpbWVFbmQoXCJvcmlnaW5hbF9sb2NhdGlvbl9mb3JcIik7IH0sXG5cbiAgICAgICAgICBzdGFydF9wYXJzZV9tYXBwaW5ncygpIHsgY29uc29sZS50aW1lKFwicGFyc2VfbWFwcGluZ3NcIik7IH0sXG4gICAgICAgICAgZW5kX3BhcnNlX21hcHBpbmdzKCkgeyBjb25zb2xlLnRpbWVFbmQoXCJwYXJzZV9tYXBwaW5nc1wiKTsgfSxcblxuICAgICAgICAgIHN0YXJ0X3NvcnRfYnlfZ2VuZXJhdGVkX2xvY2F0aW9uKCkgeyBjb25zb2xlLnRpbWUoXCJzb3J0X2J5X2dlbmVyYXRlZF9sb2NhdGlvblwiKTsgfSxcbiAgICAgICAgICBlbmRfc29ydF9ieV9nZW5lcmF0ZWRfbG9jYXRpb24oKSB7IGNvbnNvbGUudGltZUVuZChcInNvcnRfYnlfZ2VuZXJhdGVkX2xvY2F0aW9uXCIpOyB9LFxuXG4gICAgICAgICAgc3RhcnRfc29ydF9ieV9vcmlnaW5hbF9sb2NhdGlvbigpIHsgY29uc29sZS50aW1lKFwic29ydF9ieV9vcmlnaW5hbF9sb2NhdGlvblwiKTsgfSxcbiAgICAgICAgICBlbmRfc29ydF9ieV9vcmlnaW5hbF9sb2NhdGlvbigpIHsgY29uc29sZS50aW1lRW5kKFwic29ydF9ieV9vcmlnaW5hbF9sb2NhdGlvblwiKTsgfSxcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH0pLnRoZW4oV2FzbSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4cG9ydHM6IFdhc20uaW5zdGFuY2UuZXhwb3J0cyxcbiAgICAgIHdpdGhNYXBwaW5nQ2FsbGJhY2s6IChtYXBwaW5nQ2FsbGJhY2ssIGYpID0+IHtcbiAgICAgICAgY2FsbGJhY2tTdGFjay5wdXNoKG1hcHBpbmdDYWxsYmFjayk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZigpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGNhbGxiYWNrU3RhY2sucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KS50aGVuKG51bGwsIGUgPT4ge1xuICAgIGNhY2hlZFdhc20gPSBudWxsO1xuICAgIHRocm93IGU7XG4gIH0pO1xuXG4gIHJldHVybiBjYWNoZWRXYXNtO1xufTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRS50eHQgb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZShcIi4vbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yXCIpLlNvdXJjZU1hcEdlbmVyYXRvcjtcbmV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSByZXF1aXJlKFwiLi9saWIvc291cmNlLW1hcC1jb25zdW1lclwiKS5Tb3VyY2VNYXBDb25zdW1lcjtcbmV4cG9ydHMuU291cmNlTm9kZSA9IHJlcXVpcmUoXCIuL2xpYi9zb3VyY2Utbm9kZVwiKS5Tb3VyY2VOb2RlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbi8qIVxuICogWFJlZ0V4cC5idWlsZCA0LjIuMFxuICogPHhyZWdleHAuY29tPlxuICogU3RldmVuIExldml0aGFuIChjKSAyMDEyLXByZXNlbnQgTUlUIExpY2Vuc2VcbiAqL1xudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoWFJlZ0V4cCkge1xuICB2YXIgUkVHRVhfREFUQSA9ICd4cmVnZXhwJztcbiAgdmFyIHN1YlBhcnRzID0gLyhcXCgpKD8hXFw/KXxcXFxcKFsxLTldXFxkKil8XFxcXFtcXHNcXFNdfFxcWyg/OlteXFxcXFxcXV18XFxcXFtcXHNcXFNdKSpcXF0vZztcbiAgdmFyIHBhcnRzID0gWFJlZ0V4cC51bmlvbihbL1xcKHt7KFtcXHckXSspfX1cXCl8e3soW1xcdyRdKyl9fS8sIHN1YlBhcnRzXSwgJ2cnLCB7XG4gICAgY29uanVuY3Rpb246ICdvcidcbiAgfSk7XG4gIC8qKlxuICAgKiBTdHJpcHMgYSBsZWFkaW5nIGBeYCBhbmQgdHJhaWxpbmcgdW5lc2NhcGVkIGAkYCwgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdHRlcm4gUGF0dGVybiB0byBwcm9jZXNzLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBQYXR0ZXJuIHdpdGggZWRnZSBhbmNob3JzIHJlbW92ZWQuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGRlYW5jaG9yKHBhdHRlcm4pIHtcbiAgICAvLyBBbGxvdyBhbnkgbnVtYmVyIG9mIGVtcHR5IG5vbmNhcHR1cmluZyBncm91cHMgYmVmb3JlL2FmdGVyIGFuY2hvcnMsIGJlY2F1c2UgcmVnZXhlc1xuICAgIC8vIGJ1aWx0L2dlbmVyYXRlZCBieSBYUmVnRXhwIHNvbWV0aW1lcyBpbmNsdWRlIHRoZW1cbiAgICB2YXIgbGVhZGluZ0FuY2hvciA9IC9eKD86XFwoXFw/OlxcKSkqXFxeLztcbiAgICB2YXIgdHJhaWxpbmdBbmNob3IgPSAvXFwkKD86XFwoXFw/OlxcKSkqJC87XG5cbiAgICBpZiAobGVhZGluZ0FuY2hvci50ZXN0KHBhdHRlcm4pICYmIHRyYWlsaW5nQW5jaG9yLnRlc3QocGF0dGVybikgJiYgLy8gRW5zdXJlIHRoYXQgdGhlIHRyYWlsaW5nIGAkYCBpc24ndCBlc2NhcGVkXG4gICAgdHJhaWxpbmdBbmNob3IudGVzdChwYXR0ZXJuLnJlcGxhY2UoL1xcXFxbXFxzXFxTXS9nLCAnJykpKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi5yZXBsYWNlKGxlYWRpbmdBbmNob3IsICcnKS5yZXBsYWNlKHRyYWlsaW5nQW5jaG9yLCAnJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdHRlcm47XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBwcm92aWRlZCB2YWx1ZSB0byBhbiBYUmVnRXhwLiBOYXRpdmUgUmVnRXhwIGZsYWdzIGFyZSBub3QgcHJlc2VydmVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IHZhbHVlIFZhbHVlIHRvIGNvbnZlcnQuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FkZEZsYWdYXSBXaGV0aGVyIHRvIGFwcGx5IHRoZSBgeGAgZmxhZyBpbiBjYXNlcyB3aGVuIGB2YWx1ZWAgaXMgbm90XG4gICAqICAgYWxyZWFkeSBhIHJlZ2V4IGdlbmVyYXRlZCBieSBYUmVnRXhwXG4gICAqIEByZXR1cm5zIHtSZWdFeHB9IFhSZWdFeHAgb2JqZWN0IHdpdGggWFJlZ0V4cCBzeW50YXggYXBwbGllZC5cbiAgICovXG5cblxuICBmdW5jdGlvbiBhc1hSZWdFeHAodmFsdWUsIGFkZEZsYWdYKSB7XG4gICAgdmFyIGZsYWdzID0gYWRkRmxhZ1ggPyAneCcgOiAnJztcbiAgICByZXR1cm4gWFJlZ0V4cC5pc1JlZ0V4cCh2YWx1ZSkgPyB2YWx1ZVtSRUdFWF9EQVRBXSAmJiB2YWx1ZVtSRUdFWF9EQVRBXS5jYXB0dXJlTmFtZXMgPyAvLyBEb24ndCByZWNvbXBpbGUsIHRvIHByZXNlcnZlIGNhcHR1cmUgbmFtZXNcbiAgICB2YWx1ZSA6IC8vIFJlY29tcGlsZSBhcyBYUmVnRXhwXG4gICAgWFJlZ0V4cCh2YWx1ZS5zb3VyY2UsIGZsYWdzKSA6IC8vIENvbXBpbGUgc3RyaW5nIGFzIFhSZWdFeHBcbiAgICBYUmVnRXhwKHZhbHVlLCBmbGFncyk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdWJzdGl0dXRpb24pIHtcbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uIGluc3RhbmNlb2YgUmVnRXhwID8gc3Vic3RpdHV0aW9uIDogWFJlZ0V4cC5lc2NhcGUoc3Vic3RpdHV0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZHVjZVRvU3VicGF0dGVybnNPYmplY3Qoc3VicGF0dGVybnMsIGludGVycG9sYXRlZCwgc3VicGF0dGVybkluZGV4KSB7XG4gICAgc3VicGF0dGVybnNbXCJzdWJwYXR0ZXJuXCIuY29uY2F0KHN1YnBhdHRlcm5JbmRleCldID0gaW50ZXJwb2xhdGVkO1xuICAgIHJldHVybiBzdWJwYXR0ZXJucztcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtYmVkU3VicGF0dGVybkFmdGVyKHJhdywgc3VicGF0dGVybkluZGV4LCByYXdMaXRlcmFscykge1xuICAgIHZhciBoYXNTdWJwYXR0ZXJuID0gc3VicGF0dGVybkluZGV4IDwgcmF3TGl0ZXJhbHMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gcmF3ICsgKGhhc1N1YnBhdHRlcm4gPyBcInt7c3VicGF0dGVyblwiLmNvbmNhdChzdWJwYXR0ZXJuSW5kZXgsIFwifX1cIikgOiAnJyk7XG4gIH1cbiAgLyoqXG4gICAqIFByb3ZpZGVzIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFscyB0aGF0IGNyZWF0ZSByZWdleGVzIHdpdGggWFJlZ0V4cCBzeW50YXggYW5kIGZsYWdzLiBUaGVcbiAgICogcHJvdmlkZWQgcGF0dGVybiBpcyBoYW5kbGVkIGFzIGEgcmF3IHN0cmluZywgc28gYmFja3NsYXNoZXMgZG9uJ3QgbmVlZCB0byBiZSBlc2NhcGVkLlxuICAgKlxuICAgKiBJbnRlcnBvbGF0aW9uIG9mIHN0cmluZ3MgYW5kIHJlZ2V4ZXMgc2hhcmVzIHRoZSBmZWF0dXJlcyBvZiBgWFJlZ0V4cC5idWlsZGAuIEludGVycG9sYXRlZFxuICAgKiBwYXR0ZXJucyBhcmUgdHJlYXRlZCBhcyBhdG9taWMgdW5pdHMgd2hlbiBxdWFudGlmaWVkLCBpbnRlcnBvbGF0ZWQgc3RyaW5ncyBoYXZlIHRoZWlyIHNwZWNpYWxcbiAgICogY2hhcmFjdGVycyBlc2NhcGVkLCBhIGxlYWRpbmcgYF5gIGFuZCB0cmFpbGluZyB1bmVzY2FwZWQgYCRgIGFyZSBzdHJpcHBlZCBmcm9tIGludGVycG9sYXRlZFxuICAgKiByZWdleGVzIGlmIGJvdGggYXJlIHByZXNlbnQsIGFuZCBhbnkgYmFja3JlZmVyZW5jZXMgd2l0aGluIGFuIGludGVycG9sYXRlZCByZWdleCBhcmVcbiAgICogcmV3cml0dGVuIHRvIHdvcmsgd2l0aGluIHRoZSBvdmVyYWxsIHBhdHRlcm4uXG4gICAqXG4gICAqIEBtZW1iZXJPZiBYUmVnRXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbZmxhZ3NdIEFueSBjb21iaW5hdGlvbiBvZiBYUmVnRXhwIGZsYWdzLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEhhbmRsZXIgZm9yIHRlbXBsYXRlIGxpdGVyYWxzIHRoYXQgY29uc3RydWN0IHJlZ2V4ZXMgd2l0aCBYUmVnRXhwIHN5bnRheC5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogY29uc3QgaDEyID0gLzFbMC0yXXwwP1sxLTldLztcbiAgICogY29uc3QgaDI0ID0gLzJbMC0zXXxbMDFdWzAtOV0vO1xuICAgKiBjb25zdCBob3VycyA9IFhSZWdFeHAudGFnKCd4JylgJHtoMTJ9IDogfCAke2gyNH1gO1xuICAgKiBjb25zdCBtaW51dGVzID0gL15bMC01XVswLTldJC87XG4gICAqIC8vIE5vdGUgdGhhdCBleHBsaWNpdGx5IG5hbWluZyB0aGUgJ21pbnV0ZXMnIGdyb3VwIGlzIHJlcXVpcmVkIGZvciBuYW1lZCBiYWNrcmVmZXJlbmNlc1xuICAgKiBjb25zdCB0aW1lID0gWFJlZ0V4cC50YWcoJ3gnKWBeICR7aG91cnN9ICg/PG1pbnV0ZXM+JHttaW51dGVzfSkgJGA7XG4gICAqIHRpbWUudGVzdCgnMTA6NTknKTsgLy8gLT4gdHJ1ZVxuICAgKiBYUmVnRXhwLmV4ZWMoJzEwOjU5JywgdGltZSkubWludXRlczsgLy8gLT4gJzU5J1xuICAgKi9cblxuXG4gIFhSZWdFeHAudGFnID0gZnVuY3Rpb24gKGZsYWdzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChsaXRlcmFscykge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN1YnN0aXR1dGlvbnMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBzdWJzdGl0dXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN1YnBhdHRlcm5zID0gc3Vic3RpdHV0aW9ucy5tYXAoaW50ZXJwb2xhdGUpLnJlZHVjZShyZWR1Y2VUb1N1YnBhdHRlcm5zT2JqZWN0LCB7fSk7XG4gICAgICB2YXIgcGF0dGVybiA9IGxpdGVyYWxzLnJhdy5tYXAoZW1iZWRTdWJwYXR0ZXJuQWZ0ZXIpLmpvaW4oJycpO1xuICAgICAgcmV0dXJuIFhSZWdFeHAuYnVpbGQocGF0dGVybiwgc3VicGF0dGVybnMsIGZsYWdzKTtcbiAgICB9O1xuICB9O1xuICAvKipcbiAgICogQnVpbGRzIHJlZ2V4ZXMgdXNpbmcgbmFtZWQgc3VicGF0dGVybnMsIGZvciByZWFkYWJpbGl0eSBhbmQgcGF0dGVybiByZXVzZS4gQmFja3JlZmVyZW5jZXMgaW5cbiAgICogdGhlIG91dGVyIHBhdHRlcm4gYW5kIHByb3ZpZGVkIHN1YnBhdHRlcm5zIGFyZSBhdXRvbWF0aWNhbGx5IHJlbnVtYmVyZWQgdG8gd29yayBjb3JyZWN0bHkuXG4gICAqIE5hdGl2ZSBmbGFncyB1c2VkIGJ5IHByb3ZpZGVkIHN1YnBhdHRlcm5zIGFyZSBpZ25vcmVkIGluIGZhdm9yIG9mIHRoZSBgZmxhZ3NgIGFyZ3VtZW50LlxuICAgKlxuICAgKiBAbWVtYmVyT2YgWFJlZ0V4cFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVybiBYUmVnRXhwIHBhdHRlcm4gdXNpbmcgYHt7bmFtZX19YCBmb3IgZW1iZWRkZWQgc3VicGF0dGVybnMuIEFsbG93c1xuICAgKiAgIGAoe3tuYW1lfX0pYCBhcyBzaG9ydGhhbmQgZm9yIGAoPzxuYW1lPnt7bmFtZX19KWAuIFBhdHRlcm5zIGNhbm5vdCBiZSBlbWJlZGRlZCB3aXRoaW5cbiAgICogICBjaGFyYWN0ZXIgY2xhc3Nlcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IHN1YnMgTG9va3VwIG9iamVjdCBmb3IgbmFtZWQgc3VicGF0dGVybnMuIFZhbHVlcyBjYW4gYmUgc3RyaW5ncyBvciByZWdleGVzLiBBXG4gICAqICAgbGVhZGluZyBgXmAgYW5kIHRyYWlsaW5nIHVuZXNjYXBlZCBgJGAgYXJlIHN0cmlwcGVkIGZyb20gc3VicGF0dGVybnMsIGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbZmxhZ3NdIEFueSBjb21iaW5hdGlvbiBvZiBYUmVnRXhwIGZsYWdzLlxuICAgKiBAcmV0dXJucyB7UmVnRXhwfSBSZWdleCB3aXRoIGludGVycG9sYXRlZCBzdWJwYXR0ZXJucy5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogY29uc3QgdGltZSA9IFhSZWdFeHAuYnVpbGQoJyg/eCleIHt7aG91cnN9fSAoe3ttaW51dGVzfX0pICQnLCB7XG4gICAqICAgaG91cnM6IFhSZWdFeHAuYnVpbGQoJ3t7aDEyfX0gOiB8IHt7aDI0fX0nLCB7XG4gICAqICAgICBoMTI6IC8xWzAtMl18MD9bMS05XS8sXG4gICAqICAgICBoMjQ6IC8yWzAtM118WzAxXVswLTldL1xuICAgKiAgIH0sICd4JyksXG4gICAqICAgbWludXRlczogL15bMC01XVswLTldJC9cbiAgICogfSk7XG4gICAqIHRpbWUudGVzdCgnMTA6NTknKTsgLy8gLT4gdHJ1ZVxuICAgKiBYUmVnRXhwLmV4ZWMoJzEwOjU5JywgdGltZSkubWludXRlczsgLy8gLT4gJzU5J1xuICAgKi9cblxuXG4gIFhSZWdFeHAuYnVpbGQgPSBmdW5jdGlvbiAocGF0dGVybiwgc3VicywgZmxhZ3MpIHtcbiAgICBmbGFncyA9IGZsYWdzIHx8ICcnOyAvLyBVc2VkIHdpdGggYGFzWFJlZ0V4cGAgY2FsbHMgZm9yIGBwYXR0ZXJuYCBhbmQgc3VicGF0dGVybnMgaW4gYHN1YnNgLCB0byB3b3JrIGFyb3VuZCBob3dcbiAgICAvLyBzb21lIGJyb3dzZXJzIGNvbnZlcnQgYFJlZ0V4cCgnXFxuJylgIHRvIGEgcmVnZXggdGhhdCBjb250YWlucyB0aGUgbGl0ZXJhbCBjaGFyYWN0ZXJzIGBcXGBcbiAgICAvLyBhbmQgYG5gLiBTZWUgbW9yZSBkZXRhaWxzIGF0IDxodHRwczovL2dpdGh1Yi5jb20vc2xldml0aGFuL3hyZWdleHAvcHVsbC8xNjM+LlxuXG4gICAgdmFyIGFkZEZsYWdYID0gZmxhZ3MuaW5kZXhPZigneCcpICE9PSAtMTtcbiAgICB2YXIgaW5saW5lRmxhZ3MgPSAvXlxcKFxcPyhbXFx3JF0rKVxcKS8uZXhlYyhwYXR0ZXJuKTsgLy8gQWRkIGZsYWdzIHdpdGhpbiBhIGxlYWRpbmcgbW9kZSBtb2RpZmllciB0byB0aGUgb3ZlcmFsbCBwYXR0ZXJuJ3MgZmxhZ3NcblxuICAgIGlmIChpbmxpbmVGbGFncykge1xuICAgICAgZmxhZ3MgPSBYUmVnRXhwLl9jbGlwRHVwbGljYXRlcyhmbGFncyArIGlubGluZUZsYWdzWzFdKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgZm9yICh2YXIgcCBpbiBzdWJzKSB7XG4gICAgICBpZiAoc3Vicy5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAvLyBQYXNzaW5nIHRvIFhSZWdFeHAgZW5hYmxlcyBleHRlbmRlZCBzeW50YXggYW5kIGVuc3VyZXMgaW5kZXBlbmRlbnQgdmFsaWRpdHksXG4gICAgICAgIC8vIGxlc3QgYW4gdW5lc2NhcGVkIGAoYCwgYClgLCBgW2AsIG9yIHRyYWlsaW5nIGBcXGAgYnJlYWtzIHRoZSBgKD86KWAgd3JhcHBlci4gRm9yXG4gICAgICAgIC8vIHN1YnBhdHRlcm5zIHByb3ZpZGVkIGFzIG5hdGl2ZSByZWdleGVzLCBpdCBkaWVzIG9uIG9jdGFscyBhbmQgYWRkcyB0aGUgcHJvcGVydHlcbiAgICAgICAgLy8gdXNlZCB0byBob2xkIGV4dGVuZGVkIHJlZ2V4IGluc3RhbmNlIGRhdGEsIGZvciBzaW1wbGljaXR5LlxuICAgICAgICB2YXIgc3ViID0gYXNYUmVnRXhwKHN1YnNbcF0sIGFkZEZsYWdYKTtcbiAgICAgICAgZGF0YVtwXSA9IHtcbiAgICAgICAgICAvLyBEZWFuY2hvcmluZyBhbGxvd3MgZW1iZWRkaW5nIGluZGVwZW5kZW50bHkgdXNlZnVsIGFuY2hvcmVkIHJlZ2V4ZXMuIElmIHlvdVxuICAgICAgICAgIC8vIHJlYWxseSBuZWVkIHRvIGtlZXAgeW91ciBhbmNob3JzLCBkb3VibGUgdGhlbSAoaS5lLiwgYF5eLi4uJCRgKS5cbiAgICAgICAgICBwYXR0ZXJuOiBkZWFuY2hvcihzdWIuc291cmNlKSxcbiAgICAgICAgICBuYW1lczogc3ViW1JFR0VYX0RBVEFdLmNhcHR1cmVOYW1lcyB8fCBbXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gLy8gUGFzc2luZyB0byBYUmVnRXhwIGRpZXMgb24gb2N0YWxzIGFuZCBlbnN1cmVzIHRoZSBvdXRlciBwYXR0ZXJuIGlzIGluZGVwZW5kZW50bHkgdmFsaWQ7XG4gICAgLy8gaGVscHMga2VlcCB0aGlzIHNpbXBsZS4gTmFtZWQgY2FwdHVyZXMgd2lsbCBiZSBwdXQgYmFjay5cblxuXG4gICAgdmFyIHBhdHRlcm5Bc1JlZ2V4ID0gYXNYUmVnRXhwKHBhdHRlcm4sIGFkZEZsYWdYKTsgLy8gJ0NhcHMnIGlzIHNob3J0IGZvciAnY2FwdHVyZXMnXG5cbiAgICB2YXIgbnVtQ2FwcyA9IDA7XG4gICAgdmFyIG51bVByaW9yQ2FwcztcbiAgICB2YXIgbnVtT3V0ZXJDYXBzID0gMDtcbiAgICB2YXIgb3V0ZXJDYXBzTWFwID0gWzBdO1xuICAgIHZhciBvdXRlckNhcE5hbWVzID0gcGF0dGVybkFzUmVnZXhbUkVHRVhfREFUQV0uY2FwdHVyZU5hbWVzIHx8IFtdO1xuICAgIHZhciBvdXRwdXQgPSBwYXR0ZXJuQXNSZWdleC5zb3VyY2UucmVwbGFjZShwYXJ0cywgZnVuY3Rpb24gKCQwLCAkMSwgJDIsICQzLCAkNCkge1xuICAgICAgdmFyIHN1Yk5hbWUgPSAkMSB8fCAkMjtcbiAgICAgIHZhciBjYXBOYW1lO1xuICAgICAgdmFyIGludHJvO1xuICAgICAgdmFyIGxvY2FsQ2FwSW5kZXg7IC8vIE5hbWVkIHN1YnBhdHRlcm5cblxuICAgICAgaWYgKHN1Yk5hbWUpIHtcbiAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KHN1Yk5hbWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiVW5kZWZpbmVkIHByb3BlcnR5IFwiLmNvbmNhdCgkMCkpO1xuICAgICAgICB9IC8vIE5hbWVkIHN1YnBhdHRlcm4gd2FzIHdyYXBwZWQgaW4gYSBjYXB0dXJpbmcgZ3JvdXBcblxuXG4gICAgICAgIGlmICgkMSkge1xuICAgICAgICAgIGNhcE5hbWUgPSBvdXRlckNhcE5hbWVzW251bU91dGVyQ2Fwc107XG4gICAgICAgICAgb3V0ZXJDYXBzTWFwWysrbnVtT3V0ZXJDYXBzXSA9ICsrbnVtQ2FwczsgLy8gSWYgaXQncyBhIG5hbWVkIGdyb3VwLCBwcmVzZXJ2ZSB0aGUgbmFtZS4gT3RoZXJ3aXNlLCB1c2UgdGhlIHN1YnBhdHRlcm4gbmFtZVxuICAgICAgICAgIC8vIGFzIHRoZSBjYXB0dXJlIG5hbWVcblxuICAgICAgICAgIGludHJvID0gXCIoPzxcIi5jb25jYXQoY2FwTmFtZSB8fCBzdWJOYW1lLCBcIj5cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50cm8gPSAnKD86JztcbiAgICAgICAgfVxuXG4gICAgICAgIG51bVByaW9yQ2FwcyA9IG51bUNhcHM7XG4gICAgICAgIHZhciByZXdyaXR0ZW5TdWJwYXR0ZXJuID0gZGF0YVtzdWJOYW1lXS5wYXR0ZXJuLnJlcGxhY2Uoc3ViUGFydHMsIGZ1bmN0aW9uIChtYXRjaCwgcGFyZW4sIGJhY2tyZWYpIHtcbiAgICAgICAgICAvLyBDYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICBpZiAocGFyZW4pIHtcbiAgICAgICAgICAgIGNhcE5hbWUgPSBkYXRhW3N1Yk5hbWVdLm5hbWVzW251bUNhcHMgLSBudW1QcmlvckNhcHNdO1xuICAgICAgICAgICAgKytudW1DYXBzOyAvLyBJZiB0aGUgY3VycmVudCBjYXB0dXJlIGhhcyBhIG5hbWUsIHByZXNlcnZlIHRoZSBuYW1lXG5cbiAgICAgICAgICAgIGlmIChjYXBOYW1lKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcIig/PFwiLmNvbmNhdChjYXBOYW1lLCBcIj5cIik7XG4gICAgICAgICAgICB9IC8vIEJhY2tyZWZlcmVuY2VcblxuICAgICAgICAgIH0gZWxzZSBpZiAoYmFja3JlZikge1xuICAgICAgICAgICAgbG9jYWxDYXBJbmRleCA9ICtiYWNrcmVmIC0gMTsgLy8gUmV3cml0ZSB0aGUgYmFja3JlZmVyZW5jZVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YVtzdWJOYW1lXS5uYW1lc1tsb2NhbENhcEluZGV4XSA/IC8vIE5lZWQgdG8gcHJlc2VydmUgdGhlIGJhY2tyZWZlcmVuY2UgbmFtZSBpbiBjYXNlIHVzaW5nIGZsYWcgYG5gXG4gICAgICAgICAgICBcIlxcXFxrPFwiLmNvbmNhdChkYXRhW3N1Yk5hbWVdLm5hbWVzW2xvY2FsQ2FwSW5kZXhdLCBcIj5cIikgOiBcIlxcXFxcIi5jb25jYXQoK2JhY2tyZWYgKyBudW1QcmlvckNhcHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChpbnRybykuY29uY2F0KHJld3JpdHRlblN1YnBhdHRlcm4sIFwiKVwiKTtcbiAgICAgIH0gLy8gQ2FwdHVyaW5nIGdyb3VwXG5cblxuICAgICAgaWYgKCQzKSB7XG4gICAgICAgIGNhcE5hbWUgPSBvdXRlckNhcE5hbWVzW251bU91dGVyQ2Fwc107XG4gICAgICAgIG91dGVyQ2Fwc01hcFsrK251bU91dGVyQ2Fwc10gPSArK251bUNhcHM7IC8vIElmIHRoZSBjdXJyZW50IGNhcHR1cmUgaGFzIGEgbmFtZSwgcHJlc2VydmUgdGhlIG5hbWVcblxuICAgICAgICBpZiAoY2FwTmFtZSkge1xuICAgICAgICAgIHJldHVybiBcIig/PFwiLmNvbmNhdChjYXBOYW1lLCBcIj5cIik7XG4gICAgICAgIH0gLy8gQmFja3JlZmVyZW5jZVxuXG4gICAgICB9IGVsc2UgaWYgKCQ0KSB7XG4gICAgICAgIGxvY2FsQ2FwSW5kZXggPSArJDQgLSAxOyAvLyBSZXdyaXRlIHRoZSBiYWNrcmVmZXJlbmNlXG5cbiAgICAgICAgcmV0dXJuIG91dGVyQ2FwTmFtZXNbbG9jYWxDYXBJbmRleF0gPyAvLyBOZWVkIHRvIHByZXNlcnZlIHRoZSBiYWNrcmVmZXJlbmNlIG5hbWUgaW4gY2FzZSB1c2luZyBmbGFnIGBuYFxuICAgICAgICBcIlxcXFxrPFwiLmNvbmNhdChvdXRlckNhcE5hbWVzW2xvY2FsQ2FwSW5kZXhdLCBcIj5cIikgOiBcIlxcXFxcIi5jb25jYXQob3V0ZXJDYXBzTWFwWyskNF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJDA7XG4gICAgfSk7XG4gICAgcmV0dXJuIFhSZWdFeHAob3V0cHV0LCBmbGFncyk7XG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbi8qIVxuICogWFJlZ0V4cC5tYXRjaFJlY3Vyc2l2ZSA0LjIuMFxuICogPHhyZWdleHAuY29tPlxuICogU3RldmVuIExldml0aGFuIChjKSAyMDA5LXByZXNlbnQgTUlUIExpY2Vuc2VcbiAqL1xudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoWFJlZ0V4cCkge1xuICAvKipcbiAgICogUmV0dXJucyBhIG1hdGNoIGRldGFpbCBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHByb3ZpZGVkIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHJvdyhuYW1lLCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgZW5kOiBlbmRcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIG1hdGNoIHN0cmluZ3MgYmV0d2VlbiBvdXRlcm1vc3QgbGVmdCBhbmQgcmlnaHQgZGVsaW1pdGVycywgb3IgYW4gYXJyYXkgb2ZcbiAgICogb2JqZWN0cyB3aXRoIGRldGFpbGVkIG1hdGNoIHBhcnRzIGFuZCBwb3NpdGlvbiBkYXRhLiBBbiBlcnJvciBpcyB0aHJvd24gaWYgZGVsaW1pdGVycyBhcmVcbiAgICogdW5iYWxhbmNlZCB3aXRoaW4gdGhlIGRhdGEuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBYUmVnRXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNlYXJjaC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGxlZnQgTGVmdCBkZWxpbWl0ZXIgYXMgYW4gWFJlZ0V4cCBwYXR0ZXJuLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcmlnaHQgUmlnaHQgZGVsaW1pdGVyIGFzIGFuIFhSZWdFeHAgcGF0dGVybi5cbiAgICogQHBhcmFtIHtTdHJpbmd9IFtmbGFnc10gQW55IG5hdGl2ZSBvciBYUmVnRXhwIGZsYWdzLCB1c2VkIGZvciB0aGUgbGVmdCBhbmQgcmlnaHQgZGVsaW1pdGVycy5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBMZXRzIHlvdSBzcGVjaWZ5IGB2YWx1ZU5hbWVzYCBhbmQgYGVzY2FwZUNoYXJgIG9wdGlvbnMuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gQXJyYXkgb2YgbWF0Y2hlcywgb3IgYW4gZW1wdHkgYXJyYXkuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIC8vIEJhc2ljIHVzYWdlXG4gICAqIGxldCBzdHIgPSAnKHQoKGUpKXMpdCgpKGluZyknO1xuICAgKiBYUmVnRXhwLm1hdGNoUmVjdXJzaXZlKHN0ciwgJ1xcXFwoJywgJ1xcXFwpJywgJ2cnKTtcbiAgICogLy8gLT4gWyd0KChlKSlzJywgJycsICdpbmcnXVxuICAgKlxuICAgKiAvLyBFeHRlbmRlZCBpbmZvcm1hdGlvbiBtb2RlIHdpdGggdmFsdWVOYW1lc1xuICAgKiBzdHIgPSAnSGVyZSBpcyA8ZGl2PiA8ZGl2PmFuPC9kaXY+PC9kaXY+IGV4YW1wbGUnO1xuICAgKiBYUmVnRXhwLm1hdGNoUmVjdXJzaXZlKHN0ciwgJzxkaXZcXFxccyo+JywgJzwvZGl2PicsICdnaScsIHtcbiAgICogICB2YWx1ZU5hbWVzOiBbJ2JldHdlZW4nLCAnbGVmdCcsICdtYXRjaCcsICdyaWdodCddXG4gICAqIH0pO1xuICAgKiAvLyAtPiBbXG4gICAqIC8vIHtuYW1lOiAnYmV0d2VlbicsIHZhbHVlOiAnSGVyZSBpcyAnLCAgICAgICBzdGFydDogMCwgIGVuZDogOH0sXG4gICAqIC8vIHtuYW1lOiAnbGVmdCcsICAgIHZhbHVlOiAnPGRpdj4nLCAgICAgICAgICBzdGFydDogOCwgIGVuZDogMTN9LFxuICAgKiAvLyB7bmFtZTogJ21hdGNoJywgICB2YWx1ZTogJyA8ZGl2PmFuPC9kaXY+Jywgc3RhcnQ6IDEzLCBlbmQ6IDI3fSxcbiAgICogLy8ge25hbWU6ICdyaWdodCcsICAgdmFsdWU6ICc8L2Rpdj4nLCAgICAgICAgIHN0YXJ0OiAyNywgZW5kOiAzM30sXG4gICAqIC8vIHtuYW1lOiAnYmV0d2VlbicsIHZhbHVlOiAnIGV4YW1wbGUnLCAgICAgICBzdGFydDogMzMsIGVuZDogNDF9XG4gICAqIC8vIF1cbiAgICpcbiAgICogLy8gT21pdHRpbmcgdW5uZWVkZWQgcGFydHMgd2l0aCBudWxsIHZhbHVlTmFtZXMsIGFuZCB1c2luZyBlc2NhcGVDaGFyXG4gICAqIHN0ciA9ICcuLi57MX0uXFxcXHt7ZnVuY3Rpb24oeCx5KXtyZXR1cm4ge3k6eH19fSc7XG4gICAqIFhSZWdFeHAubWF0Y2hSZWN1cnNpdmUoc3RyLCAneycsICd9JywgJ2cnLCB7XG4gICAqICAgdmFsdWVOYW1lczogWydsaXRlcmFsJywgbnVsbCwgJ3ZhbHVlJywgbnVsbF0sXG4gICAqICAgZXNjYXBlQ2hhcjogJ1xcXFwnXG4gICAqIH0pO1xuICAgKiAvLyAtPiBbXG4gICAqIC8vIHtuYW1lOiAnbGl0ZXJhbCcsIHZhbHVlOiAnLi4uJywgIHN0YXJ0OiAwLCBlbmQ6IDN9LFxuICAgKiAvLyB7bmFtZTogJ3ZhbHVlJywgICB2YWx1ZTogJzEnLCAgICBzdGFydDogNCwgZW5kOiA1fSxcbiAgICogLy8ge25hbWU6ICdsaXRlcmFsJywgdmFsdWU6ICcuXFxcXHsnLCBzdGFydDogNiwgZW5kOiA5fSxcbiAgICogLy8ge25hbWU6ICd2YWx1ZScsICAgdmFsdWU6ICdmdW5jdGlvbih4LHkpe3JldHVybiB7eTp4fX0nLCBzdGFydDogMTAsIGVuZDogMzd9XG4gICAqIC8vIF1cbiAgICpcbiAgICogLy8gU3RpY2t5IG1vZGUgdmlhIGZsYWcgeVxuICAgKiBzdHIgPSAnPDE+PDw8Mj4+PjwzPjQ8NT4nO1xuICAgKiBYUmVnRXhwLm1hdGNoUmVjdXJzaXZlKHN0ciwgJzwnLCAnPicsICdneScpO1xuICAgKiAvLyAtPiBbJzEnLCAnPDwyPj4nLCAnMyddXG4gICAqL1xuXG5cbiAgWFJlZ0V4cC5tYXRjaFJlY3Vyc2l2ZSA9IGZ1bmN0aW9uIChzdHIsIGxlZnQsIHJpZ2h0LCBmbGFncywgb3B0aW9ucykge1xuICAgIGZsYWdzID0gZmxhZ3MgfHwgJyc7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIGdsb2JhbCA9IGZsYWdzLmluZGV4T2YoJ2cnKSAhPT0gLTE7XG4gICAgdmFyIHN0aWNreSA9IGZsYWdzLmluZGV4T2YoJ3knKSAhPT0gLTE7IC8vIEZsYWcgYHlgIGlzIGNvbnRyb2xsZWQgaW50ZXJuYWxseVxuXG4gICAgdmFyIGJhc2ljRmxhZ3MgPSBmbGFncy5yZXBsYWNlKC95L2csICcnKTtcbiAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgICBlc2NhcGVDaGFyID0gX29wdGlvbnMuZXNjYXBlQ2hhcjtcbiAgICB2YXIgdk4gPSBvcHRpb25zLnZhbHVlTmFtZXM7XG4gICAgdmFyIG91dHB1dCA9IFtdO1xuICAgIHZhciBvcGVuVG9rZW5zID0gMDtcbiAgICB2YXIgZGVsaW1TdGFydCA9IDA7XG4gICAgdmFyIGRlbGltRW5kID0gMDtcbiAgICB2YXIgbGFzdE91dGVyRW5kID0gMDtcbiAgICB2YXIgb3V0ZXJTdGFydDtcbiAgICB2YXIgaW5uZXJTdGFydDtcbiAgICB2YXIgbGVmdE1hdGNoO1xuICAgIHZhciByaWdodE1hdGNoO1xuICAgIHZhciBlc2M7XG4gICAgbGVmdCA9IFhSZWdFeHAobGVmdCwgYmFzaWNGbGFncyk7XG4gICAgcmlnaHQgPSBYUmVnRXhwKHJpZ2h0LCBiYXNpY0ZsYWdzKTtcblxuICAgIGlmIChlc2NhcGVDaGFyKSB7XG4gICAgICBpZiAoZXNjYXBlQ2hhci5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHVzZSBtb3JlIHRoYW4gb25lIGVzY2FwZSBjaGFyYWN0ZXInKTtcbiAgICAgIH1cblxuICAgICAgZXNjYXBlQ2hhciA9IFhSZWdFeHAuZXNjYXBlKGVzY2FwZUNoYXIpOyAvLyBFeGFtcGxlIG9mIGNvbmNhdGVuYXRlZCBgZXNjYCByZWdleDpcbiAgICAgIC8vIGBlc2NhcGVDaGFyYDogJyUnXG4gICAgICAvLyBgbGVmdGA6ICc8J1xuICAgICAgLy8gYHJpZ2h0YDogJz4nXG4gICAgICAvLyBSZWdleCBpczogLyg/OiVbXFxTXFxzXXwoPzooPyE8fD4pW14lXSkrKSsvXG5cbiAgICAgIGVzYyA9IG5ldyBSZWdFeHAoXCIoPzpcIi5jb25jYXQoZXNjYXBlQ2hhciwgXCJbXFxcXFNcXFxcc118KD86KD8hXCIpLmNvbmNhdCggLy8gVXNpbmcgYFhSZWdFeHAudW5pb25gIHNhZmVseSByZXdyaXRlcyBiYWNrcmVmZXJlbmNlcyBpbiBgbGVmdGAgYW5kIGByaWdodGAuXG4gICAgICAvLyBJbnRlbnRpb25hbGx5IG5vdCBwYXNzaW5nIGBiYXNpY0ZsYWdzYCB0byBgWFJlZ0V4cC51bmlvbmAgc2luY2UgYW55IHN5bnRheFxuICAgICAgLy8gdHJhbnNmb3JtYXRpb24gcmVzdWx0aW5nIGZyb20gdGhvc2UgZmxhZ3Mgd2FzIGFscmVhZHkgYXBwbGllZCB0byBgbGVmdGAgYW5kXG4gICAgICAvLyBgcmlnaHRgIHdoZW4gdGhleSB3ZXJlIHBhc3NlZCB0aHJvdWdoIHRoZSBYUmVnRXhwIGNvbnN0cnVjdG9yIGFib3ZlLlxuICAgICAgWFJlZ0V4cC51bmlvbihbbGVmdCwgcmlnaHRdLCAnJywge1xuICAgICAgICBjb25qdW5jdGlvbjogJ29yJ1xuICAgICAgfSkuc291cmNlLCBcIilbXlwiKS5jb25jYXQoZXNjYXBlQ2hhciwgXCJdKSspK1wiKSwgLy8gRmxhZ3MgYGd5YCBub3QgbmVlZGVkIGhlcmVcbiAgICAgIGZsYWdzLnJlcGxhY2UoL1teaW11XSsvZywgJycpKTtcbiAgICB9XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgLy8gSWYgdXNpbmcgYW4gZXNjYXBlIGNoYXJhY3RlciwgYWR2YW5jZSB0byB0aGUgZGVsaW1pdGVyJ3MgbmV4dCBzdGFydGluZyBwb3NpdGlvbixcbiAgICAgIC8vIHNraXBwaW5nIGFueSBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gYmV0d2VlblxuICAgICAgaWYgKGVzY2FwZUNoYXIpIHtcbiAgICAgICAgZGVsaW1FbmQgKz0gKFhSZWdFeHAuZXhlYyhzdHIsIGVzYywgZGVsaW1FbmQsICdzdGlja3knKSB8fCBbJyddKVswXS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGxlZnRNYXRjaCA9IFhSZWdFeHAuZXhlYyhzdHIsIGxlZnQsIGRlbGltRW5kKTtcbiAgICAgIHJpZ2h0TWF0Y2ggPSBYUmVnRXhwLmV4ZWMoc3RyLCByaWdodCwgZGVsaW1FbmQpOyAvLyBLZWVwIHRoZSBsZWZ0bW9zdCBtYXRjaCBvbmx5XG5cbiAgICAgIGlmIChsZWZ0TWF0Y2ggJiYgcmlnaHRNYXRjaCkge1xuICAgICAgICBpZiAobGVmdE1hdGNoLmluZGV4IDw9IHJpZ2h0TWF0Y2guaW5kZXgpIHtcbiAgICAgICAgICByaWdodE1hdGNoID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZWZ0TWF0Y2ggPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IC8vIFBhdGhzIChMTTogbGVmdE1hdGNoLCBSTTogcmlnaHRNYXRjaCwgT1Q6IG9wZW5Ub2tlbnMpOlxuICAgICAgLy8gTE0gfCBSTSB8IE9UIHwgUmVzdWx0XG4gICAgICAvLyAxICB8IDAgIHwgMSAgfCBsb29wXG4gICAgICAvLyAxICB8IDAgIHwgMCAgfCBsb29wXG4gICAgICAvLyAwICB8IDEgIHwgMSAgfCBsb29wXG4gICAgICAvLyAwICB8IDEgIHwgMCAgfCB0aHJvd1xuICAgICAgLy8gMCAgfCAwICB8IDEgIHwgdGhyb3dcbiAgICAgIC8vIDAgIHwgMCAgfCAwICB8IGJyZWFrXG4gICAgICAvLyBUaGUgcGF0aHMgYWJvdmUgZG9uJ3QgaW5jbHVkZSB0aGUgc3RpY2t5IG1vZGUgc3BlY2lhbCBjYXNlLiBUaGUgbG9vcCBlbmRzIGFmdGVyIHRoZVxuICAgICAgLy8gZmlyc3QgY29tcGxldGVkIG1hdGNoIGlmIG5vdCBgZ2xvYmFsYC5cblxuXG4gICAgICBpZiAobGVmdE1hdGNoIHx8IHJpZ2h0TWF0Y2gpIHtcbiAgICAgICAgZGVsaW1TdGFydCA9IChsZWZ0TWF0Y2ggfHwgcmlnaHRNYXRjaCkuaW5kZXg7XG4gICAgICAgIGRlbGltRW5kID0gZGVsaW1TdGFydCArIChsZWZ0TWF0Y2ggfHwgcmlnaHRNYXRjaClbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIGlmICghb3BlblRva2Vucykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHN0aWNreSAmJiAhb3BlblRva2VucyAmJiBkZWxpbVN0YXJ0ID4gbGFzdE91dGVyRW5kKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAobGVmdE1hdGNoKSB7XG4gICAgICAgIGlmICghb3BlblRva2Vucykge1xuICAgICAgICAgIG91dGVyU3RhcnQgPSBkZWxpbVN0YXJ0O1xuICAgICAgICAgIGlubmVyU3RhcnQgPSBkZWxpbUVuZDtcbiAgICAgICAgfVxuXG4gICAgICAgICsrb3BlblRva2VucztcbiAgICAgIH0gZWxzZSBpZiAocmlnaHRNYXRjaCAmJiBvcGVuVG9rZW5zKSB7XG4gICAgICAgIGlmICghIC0tb3BlblRva2Vucykge1xuICAgICAgICAgIGlmICh2Tikge1xuICAgICAgICAgICAgaWYgKHZOWzBdICYmIG91dGVyU3RhcnQgPiBsYXN0T3V0ZXJFbmQpIHtcbiAgICAgICAgICAgICAgb3V0cHV0LnB1c2gocm93KHZOWzBdLCBzdHIuc2xpY2UobGFzdE91dGVyRW5kLCBvdXRlclN0YXJ0KSwgbGFzdE91dGVyRW5kLCBvdXRlclN0YXJ0KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2TlsxXSkge1xuICAgICAgICAgICAgICBvdXRwdXQucHVzaChyb3codk5bMV0sIHN0ci5zbGljZShvdXRlclN0YXJ0LCBpbm5lclN0YXJ0KSwgb3V0ZXJTdGFydCwgaW5uZXJTdGFydCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodk5bMl0pIHtcbiAgICAgICAgICAgICAgb3V0cHV0LnB1c2gocm93KHZOWzJdLCBzdHIuc2xpY2UoaW5uZXJTdGFydCwgZGVsaW1TdGFydCksIGlubmVyU3RhcnQsIGRlbGltU3RhcnQpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZOWzNdKSB7XG4gICAgICAgICAgICAgIG91dHB1dC5wdXNoKHJvdyh2TlszXSwgc3RyLnNsaWNlKGRlbGltU3RhcnQsIGRlbGltRW5kKSwgZGVsaW1TdGFydCwgZGVsaW1FbmQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goc3RyLnNsaWNlKGlubmVyU3RhcnQsIGRlbGltU3RhcnQpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsYXN0T3V0ZXJFbmQgPSBkZWxpbUVuZDtcblxuICAgICAgICAgIGlmICghZ2xvYmFsKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5iYWxhbmNlZCBkZWxpbWl0ZXIgZm91bmQgaW4gc3RyaW5nJyk7XG4gICAgICB9IC8vIElmIHRoZSBkZWxpbWl0ZXIgbWF0Y2hlZCBhbiBlbXB0eSBzdHJpbmcsIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcblxuXG4gICAgICBpZiAoZGVsaW1TdGFydCA9PT0gZGVsaW1FbmQpIHtcbiAgICAgICAgKytkZWxpbUVuZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ2xvYmFsICYmICFzdGlja3kgJiYgdk4gJiYgdk5bMF0gJiYgc3RyLmxlbmd0aCA+IGxhc3RPdXRlckVuZCkge1xuICAgICAgb3V0cHV0LnB1c2gocm93KHZOWzBdLCBzdHIuc2xpY2UobGFzdE91dGVyRW5kKSwgbGFzdE91dGVyRW5kLCBzdHIubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyohXG4gKiBYUmVnRXhwIFVuaWNvZGUgQmFzZSA0LjIuMFxuICogPHhyZWdleHAuY29tPlxuICogU3RldmVuIExldml0aGFuIChjKSAyMDA4LXByZXNlbnQgTUlUIExpY2Vuc2VcbiAqL1xudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoWFJlZ0V4cCkge1xuICAvKipcbiAgICogQWRkcyBiYXNlIHN1cHBvcnQgZm9yIFVuaWNvZGUgbWF0Y2hpbmc6XG4gICAqIC0gQWRkcyBzeW50YXggYFxccHsuLn1gIGZvciBtYXRjaGluZyBVbmljb2RlIHRva2Vucy4gVG9rZW5zIGNhbiBiZSBpbnZlcnRlZCB1c2luZyBgXFxQey4ufWAgb3JcbiAgICogICBgXFxwe14uLn1gLiBUb2tlbiBuYW1lcyBpZ25vcmUgY2FzZSwgc3BhY2VzLCBoeXBoZW5zLCBhbmQgdW5kZXJzY29yZXMuIFlvdSBjYW4gb21pdCB0aGVcbiAgICogICBicmFjZXMgZm9yIHRva2VuIG5hbWVzIHRoYXQgYXJlIGEgc2luZ2xlIGxldHRlciAoZS5nLiBgXFxwTGAgb3IgYFBMYCkuXG4gICAqIC0gQWRkcyBmbGFnIEEgKGFzdHJhbCksIHdoaWNoIGVuYWJsZXMgMjEtYml0IFVuaWNvZGUgc3VwcG9ydC5cbiAgICogLSBBZGRzIHRoZSBgWFJlZ0V4cC5hZGRVbmljb2RlRGF0YWAgbWV0aG9kIHVzZWQgYnkgb3RoZXIgYWRkb25zIHRvIHByb3ZpZGUgY2hhcmFjdGVyIGRhdGEuXG4gICAqXG4gICAqIFVuaWNvZGUgQmFzZSByZWxpZXMgb24gZXh0ZXJuYWxseSBwcm92aWRlZCBVbmljb2RlIGNoYXJhY3RlciBkYXRhLiBPZmZpY2lhbCBhZGRvbnMgYXJlXG4gICAqIGF2YWlsYWJsZSB0byBwcm92aWRlIGRhdGEgZm9yIFVuaWNvZGUgY2F0ZWdvcmllcywgc2NyaXB0cywgYmxvY2tzLCBhbmQgcHJvcGVydGllcy5cbiAgICpcbiAgICogQHJlcXVpcmVzIFhSZWdFeHBcbiAgICovXG4gIC8vID09LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS09PVxuICAvLyBQcml2YXRlIHN0dWZmXG4gIC8vID09LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS09PVxuICAvLyBTdG9yYWdlIGZvciBVbmljb2RlIGRhdGFcbiAgdmFyIHVuaWNvZGUgPSB7fTsgLy8gUmV1c2UgdXRpbHNcblxuICB2YXIgZGVjID0gWFJlZ0V4cC5fZGVjO1xuICB2YXIgaGV4ID0gWFJlZ0V4cC5faGV4O1xuICB2YXIgcGFkNCA9IFhSZWdFeHAuX3BhZDQ7IC8vIEdlbmVyYXRlcyBhIHRva2VuIGxvb2t1cCBuYW1lOiBsb3dlcmNhc2UsIHdpdGggaHlwaGVucywgc3BhY2VzLCBhbmQgdW5kZXJzY29yZXMgcmVtb3ZlZFxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZShuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUucmVwbGFjZSgvWy0gX10rL2csICcnKS50b0xvd2VyQ2FzZSgpO1xuICB9IC8vIEdldHMgdGhlIGRlY2ltYWwgY29kZSBvZiBhIGxpdGVyYWwgY29kZSB1bml0LCBcXHhISCwgXFx1SEhISCwgb3IgYSBiYWNrc2xhc2gtZXNjYXBlZCBsaXRlcmFsXG5cblxuICBmdW5jdGlvbiBjaGFyQ29kZShjaHIpIHtcbiAgICB2YXIgZXNjID0gL15cXFxcW3h1XSguKykvLmV4ZWMoY2hyKTtcbiAgICByZXR1cm4gZXNjID8gZGVjKGVzY1sxXSkgOiBjaHIuY2hhckNvZGVBdChjaHJbMF0gPT09ICdcXFxcJyA/IDEgOiAwKTtcbiAgfSAvLyBJbnZlcnRzIGEgbGlzdCBvZiBvcmRlcmVkIEJNUCBjaGFyYWN0ZXJzIGFuZCByYW5nZXNcblxuXG4gIGZ1bmN0aW9uIGludmVydEJtcChyYW5nZSkge1xuICAgIHZhciBvdXRwdXQgPSAnJztcbiAgICB2YXIgbGFzdEVuZCA9IC0xO1xuICAgIFhSZWdFeHAuZm9yRWFjaChyYW5nZSwgLyhcXFxceC4ufFxcXFx1Li4uLnxcXFxcP1tcXHNcXFNdKSg/Oi0oXFxcXHguLnxcXFxcdS4uLi58XFxcXD9bXFxzXFxTXSkpPy8sIGZ1bmN0aW9uIChtKSB7XG4gICAgICB2YXIgc3RhcnQgPSBjaGFyQ29kZShtWzFdKTtcblxuICAgICAgaWYgKHN0YXJ0ID4gbGFzdEVuZCArIDEpIHtcbiAgICAgICAgb3V0cHV0ICs9IFwiXFxcXHVcIi5jb25jYXQocGFkNChoZXgobGFzdEVuZCArIDEpKSk7XG5cbiAgICAgICAgaWYgKHN0YXJ0ID4gbGFzdEVuZCArIDIpIHtcbiAgICAgICAgICBvdXRwdXQgKz0gXCItXFxcXHVcIi5jb25jYXQocGFkNChoZXgoc3RhcnQgLSAxKSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxhc3RFbmQgPSBjaGFyQ29kZShtWzJdIHx8IG1bMV0pO1xuICAgIH0pO1xuXG4gICAgaWYgKGxhc3RFbmQgPCAweEZGRkYpIHtcbiAgICAgIG91dHB1dCArPSBcIlxcXFx1XCIuY29uY2F0KHBhZDQoaGV4KGxhc3RFbmQgKyAxKSkpO1xuXG4gICAgICBpZiAobGFzdEVuZCA8IDB4RkZGRSkge1xuICAgICAgICBvdXRwdXQgKz0gJy1cXFxcdUZGRkYnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0gLy8gR2VuZXJhdGVzIGFuIGludmVydGVkIEJNUCByYW5nZSBvbiBmaXJzdCB1c2VcblxuXG4gIGZ1bmN0aW9uIGNhY2hlSW52ZXJ0ZWRCbXAoc2x1Zykge1xuICAgIHZhciBwcm9wID0gJ2IhJztcbiAgICByZXR1cm4gdW5pY29kZVtzbHVnXVtwcm9wXSB8fCAodW5pY29kZVtzbHVnXVtwcm9wXSA9IGludmVydEJtcCh1bmljb2RlW3NsdWddLmJtcCkpO1xuICB9IC8vIENvbWJpbmVzIGFuZCBvcHRpb25hbGx5IG5lZ2F0ZXMgQk1QIGFuZCBhc3RyYWwgZGF0YVxuXG5cbiAgZnVuY3Rpb24gYnVpbGRBc3RyYWwoc2x1ZywgaXNOZWdhdGVkKSB7XG4gICAgdmFyIGl0ZW0gPSB1bmljb2RlW3NsdWddO1xuICAgIHZhciBjb21iaW5lZCA9ICcnO1xuXG4gICAgaWYgKGl0ZW0uYm1wICYmICFpdGVtLmlzQm1wTGFzdCkge1xuICAgICAgY29tYmluZWQgPSBcIltcIi5jb25jYXQoaXRlbS5ibXAsIFwiXVwiKS5jb25jYXQoaXRlbS5hc3RyYWwgPyAnfCcgOiAnJyk7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW0uYXN0cmFsKSB7XG4gICAgICBjb21iaW5lZCArPSBpdGVtLmFzdHJhbDtcbiAgICB9XG5cbiAgICBpZiAoaXRlbS5pc0JtcExhc3QgJiYgaXRlbS5ibXApIHtcbiAgICAgIGNvbWJpbmVkICs9IFwiXCIuY29uY2F0KGl0ZW0uYXN0cmFsID8gJ3wnIDogJycsIFwiW1wiKS5jb25jYXQoaXRlbS5ibXAsIFwiXVwiKTtcbiAgICB9IC8vIEFzdHJhbCBVbmljb2RlIHRva2VucyBhbHdheXMgbWF0Y2ggYSBjb2RlIHBvaW50LCBuZXZlciBhIGNvZGUgdW5pdFxuXG5cbiAgICByZXR1cm4gaXNOZWdhdGVkID8gXCIoPzooPyFcIi5jb25jYXQoY29tYmluZWQsIFwiKSg/OltcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcMC1cXHVGRkZGXSkpXCIpIDogXCIoPzpcIi5jb25jYXQoY29tYmluZWQsIFwiKVwiKTtcbiAgfSAvLyBCdWlsZHMgYSBjb21wbGV0ZSBhc3RyYWwgcGF0dGVybiBvbiBmaXJzdCB1c2VcblxuXG4gIGZ1bmN0aW9uIGNhY2hlQXN0cmFsKHNsdWcsIGlzTmVnYXRlZCkge1xuICAgIHZhciBwcm9wID0gaXNOZWdhdGVkID8gJ2EhJyA6ICdhPSc7XG4gICAgcmV0dXJuIHVuaWNvZGVbc2x1Z11bcHJvcF0gfHwgKHVuaWNvZGVbc2x1Z11bcHJvcF0gPSBidWlsZEFzdHJhbChzbHVnLCBpc05lZ2F0ZWQpKTtcbiAgfSAvLyA9PS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPT1cbiAgLy8gQ29yZSBmdW5jdGlvbmFsaXR5XG4gIC8vID09LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS09PVxuXG4gIC8qXG4gICAqIEFkZCBhc3RyYWwgbW9kZSAoZmxhZyBBKSBhbmQgVW5pY29kZSB0b2tlbiBzeW50YXg6IGBcXHB7Li59YCwgYFxcUHsuLn1gLCBgXFxwe14uLn1gLCBgXFxwQ2AuXG4gICAqL1xuXG5cbiAgWFJlZ0V4cC5hZGRUb2tlbiggLy8gVXNlIGAqYCBpbnN0ZWFkIG9mIGArYCB0byBhdm9pZCBjYXB0dXJpbmcgYF5gIGFzIHRoZSB0b2tlbiBuYW1lIGluIGBcXHB7Xn1gXG4gIC9cXFxcKFtwUF0pKD86eyhcXF4/KShbXn1dKil9fChbQS1aYS16XSkpLywgZnVuY3Rpb24gKG1hdGNoLCBzY29wZSwgZmxhZ3MpIHtcbiAgICB2YXIgRVJSX0RPVUJMRV9ORUcgPSAnSW52YWxpZCBkb3VibGUgbmVnYXRpb24gJztcbiAgICB2YXIgRVJSX1VOS05PV05fTkFNRSA9ICdVbmtub3duIFVuaWNvZGUgdG9rZW4gJztcbiAgICB2YXIgRVJSX1VOS05PV05fUkVGID0gJ1VuaWNvZGUgdG9rZW4gbWlzc2luZyBkYXRhICc7XG4gICAgdmFyIEVSUl9BU1RSQUxfT05MWSA9ICdBc3RyYWwgbW9kZSByZXF1aXJlZCBmb3IgVW5pY29kZSB0b2tlbiAnO1xuICAgIHZhciBFUlJfQVNUUkFMX0lOX0NMQVNTID0gJ0FzdHJhbCBtb2RlIGRvZXMgbm90IHN1cHBvcnQgVW5pY29kZSB0b2tlbnMgd2l0aGluIGNoYXJhY3RlciBjbGFzc2VzJzsgLy8gTmVnYXRlZCB2aWEgXFxQey4ufSBvciBcXHB7Xi4ufVxuXG4gICAgdmFyIGlzTmVnYXRlZCA9IG1hdGNoWzFdID09PSAnUCcgfHwgISFtYXRjaFsyXTsgLy8gU3dpdGNoIGZyb20gQk1QICgwLUZGRkYpIHRvIGFzdHJhbCAoMC0xMEZGRkYpIG1vZGUgdmlhIGZsYWcgQVxuXG4gICAgdmFyIGlzQXN0cmFsTW9kZSA9IGZsYWdzLmluZGV4T2YoJ0EnKSAhPT0gLTE7IC8vIFRva2VuIGxvb2t1cCBuYW1lLiBDaGVjayBgWzRdYCBmaXJzdCB0byBhdm9pZCBwYXNzaW5nIGB1bmRlZmluZWRgIHZpYSBgXFxwe31gXG5cbiAgICB2YXIgc2x1ZyA9IG5vcm1hbGl6ZShtYXRjaFs0XSB8fCBtYXRjaFszXSk7IC8vIFRva2VuIGRhdGEgb2JqZWN0XG5cbiAgICB2YXIgaXRlbSA9IHVuaWNvZGVbc2x1Z107XG5cbiAgICBpZiAobWF0Y2hbMV0gPT09ICdQJyAmJiBtYXRjaFsyXSkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKEVSUl9ET1VCTEVfTkVHICsgbWF0Y2hbMF0pO1xuICAgIH1cblxuICAgIGlmICghdW5pY29kZS5oYXNPd25Qcm9wZXJ0eShzbHVnKSkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKEVSUl9VTktOT1dOX05BTUUgKyBtYXRjaFswXSk7XG4gICAgfSAvLyBTd2l0Y2ggdG8gdGhlIG5lZ2F0ZWQgZm9ybSBvZiB0aGUgcmVmZXJlbmNlZCBVbmljb2RlIHRva2VuXG5cblxuICAgIGlmIChpdGVtLmludmVyc2VPZikge1xuICAgICAgc2x1ZyA9IG5vcm1hbGl6ZShpdGVtLmludmVyc2VPZik7XG5cbiAgICAgIGlmICghdW5pY29kZS5oYXNPd25Qcm9wZXJ0eShzbHVnKSkge1xuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJcIi5jb25jYXQoRVJSX1VOS05PV05fUkVGICsgbWF0Y2hbMF0sIFwiIC0+IFwiKS5jb25jYXQoaXRlbS5pbnZlcnNlT2YpKTtcbiAgICAgIH1cblxuICAgICAgaXRlbSA9IHVuaWNvZGVbc2x1Z107XG4gICAgICBpc05lZ2F0ZWQgPSAhaXNOZWdhdGVkO1xuICAgIH1cblxuICAgIGlmICghKGl0ZW0uYm1wIHx8IGlzQXN0cmFsTW9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihFUlJfQVNUUkFMX09OTFkgKyBtYXRjaFswXSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXN0cmFsTW9kZSkge1xuICAgICAgaWYgKHNjb3BlID09PSAnY2xhc3MnKSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihFUlJfQVNUUkFMX0lOX0NMQVNTKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNhY2hlQXN0cmFsKHNsdWcsIGlzTmVnYXRlZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjb3BlID09PSAnY2xhc3MnID8gaXNOZWdhdGVkID8gY2FjaGVJbnZlcnRlZEJtcChzbHVnKSA6IGl0ZW0uYm1wIDogXCJcIi5jb25jYXQoKGlzTmVnYXRlZCA/ICdbXicgOiAnWycpICsgaXRlbS5ibXAsIFwiXVwiKTtcbiAgfSwge1xuICAgIHNjb3BlOiAnYWxsJyxcbiAgICBvcHRpb25hbEZsYWdzOiAnQScsXG4gICAgbGVhZENoYXI6ICdcXFxcJ1xuICB9KTtcbiAgLyoqXG4gICAqIEFkZHMgdG8gdGhlIGxpc3Qgb2YgVW5pY29kZSB0b2tlbnMgdGhhdCBYUmVnRXhwIHJlZ2V4ZXMgY2FuIG1hdGNoIHZpYSBgXFxwYCBvciBgXFxQYC5cbiAgICpcbiAgICogQG1lbWJlck9mIFhSZWdFeHBcbiAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBPYmplY3RzIHdpdGggbmFtZWQgY2hhcmFjdGVyIHJhbmdlcy4gRWFjaCBvYmplY3QgbWF5IGhhdmUgcHJvcGVydGllc1xuICAgKiAgIGBuYW1lYCwgYGFsaWFzYCwgYGlzQm1wTGFzdGAsIGBpbnZlcnNlT2ZgLCBgYm1wYCwgYW5kIGBhc3RyYWxgLiBBbGwgYnV0IGBuYW1lYCBhcmVcbiAgICogICBvcHRpb25hbCwgYWx0aG91Z2ggb25lIG9mIGBibXBgIG9yIGBhc3RyYWxgIGlzIHJlcXVpcmVkICh1bmxlc3MgYGludmVyc2VPZmAgaXMgc2V0KS4gSWZcbiAgICogICBgYXN0cmFsYCBpcyBhYnNlbnQsIHRoZSBgYm1wYCBkYXRhIGlzIHVzZWQgZm9yIEJNUCBhbmQgYXN0cmFsIG1vZGVzLiBJZiBgYm1wYCBpcyBhYnNlbnQsXG4gICAqICAgdGhlIG5hbWUgZXJyb3JzIGluIEJNUCBtb2RlIGJ1dCB3b3JrcyBpbiBhc3RyYWwgbW9kZS4gSWYgYm90aCBgYm1wYCBhbmQgYGFzdHJhbGAgYXJlXG4gICAqICAgcHJvdmlkZWQsIHRoZSBgYm1wYCBkYXRhIG9ubHkgaXMgdXNlZCBpbiBCTVAgbW9kZSwgYW5kIHRoZSBjb21iaW5hdGlvbiBvZiBgYm1wYCBhbmRcbiAgICogICBgYXN0cmFsYCBkYXRhIGlzIHVzZWQgaW4gYXN0cmFsIG1vZGUuIGBpc0JtcExhc3RgIGlzIG5lZWRlZCB3aGVuIGEgdG9rZW4gbWF0Y2hlcyBvcnBoYW5cbiAgICogICBoaWdoIHN1cnJvZ2F0ZXMgKmFuZCogdXNlcyBzdXJyb2dhdGUgcGFpcnMgdG8gbWF0Y2ggYXN0cmFsIGNvZGUgcG9pbnRzLiBUaGUgYGJtcGAgYW5kXG4gICAqICAgYGFzdHJhbGAgZGF0YSBzaG91bGQgYmUgYSBjb21iaW5hdGlvbiBvZiBsaXRlcmFsIGNoYXJhY3RlcnMgYW5kIGBcXHhISGAgb3IgYFxcdUhISEhgIGVzY2FwZVxuICAgKiAgIHNlcXVlbmNlcywgd2l0aCBoeXBoZW5zIHRvIGNyZWF0ZSByYW5nZXMuIEFueSByZWdleCBtZXRhY2hhcmFjdGVycyBpbiB0aGUgZGF0YSBzaG91bGQgYmVcbiAgICogICBlc2NhcGVkLCBhcGFydCBmcm9tIHJhbmdlLWNyZWF0aW5nIGh5cGhlbnMuIFRoZSBgYXN0cmFsYCBkYXRhIGNhbiBhZGRpdGlvbmFsbHkgdXNlXG4gICAqICAgY2hhcmFjdGVyIGNsYXNzZXMgYW5kIGFsdGVybmF0aW9uLCBhbmQgc2hvdWxkIHVzZSBzdXJyb2dhdGUgcGFpcnMgdG8gcmVwcmVzZW50IGFzdHJhbCBjb2RlXG4gICAqICAgcG9pbnRzLiBgaW52ZXJzZU9mYCBjYW4gYmUgdXNlZCB0byBhdm9pZCBkdXBsaWNhdGluZyBjaGFyYWN0ZXIgZGF0YSBpZiBhIFVuaWNvZGUgdG9rZW4gaXNcbiAgICogICBkZWZpbmVkIGFzIHRoZSBleGFjdCBpbnZlcnNlIG9mIGFub3RoZXIgdG9rZW4uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIC8vIEJhc2ljIHVzZVxuICAgKiBYUmVnRXhwLmFkZFVuaWNvZGVEYXRhKFt7XG4gICAqICAgbmFtZTogJ1hEaWdpdCcsXG4gICAqICAgYWxpYXM6ICdIZXhhZGVjaW1hbCcsXG4gICAqICAgYm1wOiAnMC05QS1GYS1mJ1xuICAgKiB9XSk7XG4gICAqIFhSZWdFeHAoJ1xcXFxwe1hEaWdpdH06XFxcXHB7SGV4YWRlY2ltYWx9KycpLnRlc3QoJzA6M0QnKTsgLy8gLT4gdHJ1ZVxuICAgKi9cblxuICBYUmVnRXhwLmFkZFVuaWNvZGVEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgRVJSX05PX05BTUUgPSAnVW5pY29kZSB0b2tlbiByZXF1aXJlcyBuYW1lJztcbiAgICB2YXIgRVJSX05PX0RBVEEgPSAnVW5pY29kZSB0b2tlbiBoYXMgbm8gY2hhcmFjdGVyIGRhdGEgJztcbiAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGRhdGFbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgIHZhciBpdGVtID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgaWYgKCFpdGVtLm5hbWUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJSX05PX05BTUUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEoaXRlbS5pbnZlcnNlT2YgfHwgaXRlbS5ibXAgfHwgaXRlbS5hc3RyYWwpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUl9OT19EQVRBICsgaXRlbS5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuaWNvZGVbbm9ybWFsaXplKGl0ZW0ubmFtZSldID0gaXRlbTtcblxuICAgICAgICBpZiAoaXRlbS5hbGlhcykge1xuICAgICAgICAgIHVuaWNvZGVbbm9ybWFsaXplKGl0ZW0uYWxpYXMpXSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmVzZXQgdGhlIHBhdHRlcm4gY2FjaGUgdXNlZCBieSB0aGUgYFhSZWdFeHBgIGNvbnN0cnVjdG9yLCBzaW5jZSB0aGUgc2FtZSBwYXR0ZXJuIGFuZFxuICAgICAgLy8gZmxhZ3MgbWlnaHQgbm93IHByb2R1Y2UgZGlmZmVyZW50IHJlc3VsdHNcblxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgWFJlZ0V4cC5jYWNoZS5mbHVzaCgncGF0dGVybnMnKTtcbiAgfTtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogUmV0dXJuIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBVbmljb2RlIGRlZmluaXRpb24gc3RydWN0dXJlIGZvciB0aGUgZ2l2ZW4gVW5pY29kZVxuICAgKiBQcm9wZXJ0eSBpZiB0aGUgZ2l2ZW4gbmFtZSBpcyBhIGxlZ2FsIFVuaWNvZGUgUHJvcGVydHkgZm9yIHVzZSBpbiBYUmVnRXhwIGBcXHBgIG9yIGBcXFBgIHJlZ2V4XG4gICAqIGNvbnN0cnVjdHMuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBYUmVnRXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgYnkgd2hpY2ggdGhlIFVuaWNvZGUgUHJvcGVydHkgbWF5IGJlIHJlY29nbml6ZWQgKGNhc2UtaW5zZW5zaXRpdmUpLFxuICAgKiAgIGUuZy4gYCdOJ2Agb3IgYCdOdW1iZXInYC4gVGhlIGdpdmVuIG5hbWUgaXMgbWF0Y2hlZCBhZ2FpbnN0IGFsbCByZWdpc3RlcmVkIFVuaWNvZGVcbiAgICogICBQcm9wZXJ0aWVzIGFuZCBQcm9wZXJ0eSBBbGlhc2VzLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZWZlcmVuY2UgdG8gZGVmaW5pdGlvbiBzdHJ1Y3R1cmUgd2hlbiB0aGUgbmFtZSBtYXRjaGVzIGEgVW5pY29kZSBQcm9wZXJ0eS5cbiAgICpcbiAgICogQG5vdGVcbiAgICogRm9yIG1vcmUgaW5mbyBvbiBVbmljb2RlIFByb3BlcnRpZXMsIHNlZSBhbHNvIGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyMTgvI0NhdGVnb3JpZXMuXG4gICAqXG4gICAqIEBub3RlXG4gICAqIFRoaXMgbWV0aG9kIGlzICpub3QqIHBhcnQgb2YgdGhlIG9mZmljaWFsbHkgZG9jdW1lbnRlZCBBUEkgYW5kIG1heSBjaGFuZ2Ugb3IgYmUgcmVtb3ZlZCBpblxuICAgKiB0aGUgZnV0dXJlLiBJdCBpcyBtZWFudCBmb3IgdXNlcmxhbmQgY29kZSB0aGF0IHdpc2hlcyB0byByZXVzZSB0aGUgKGxhcmdlKSBpbnRlcm5hbCBVbmljb2RlXG4gICAqIHN0cnVjdHVyZXMgc2V0IHVwIGJ5IFhSZWdFeHAuXG4gICAqL1xuXG5cbiAgWFJlZ0V4cC5fZ2V0VW5pY29kZVByb3BlcnR5ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc2x1ZyA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICByZXR1cm4gdW5pY29kZVtzbHVnXTtcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9ibG9ja3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90b29scy9vdXRwdXQvYmxvY2tzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyohXG4gKiBYUmVnRXhwIFVuaWNvZGUgQmxvY2tzIDQuMi4wXG4gKiA8eHJlZ2V4cC5jb20+XG4gKiBTdGV2ZW4gTGV2aXRoYW4gKGMpIDIwMTAtcHJlc2VudCBNSVQgTGljZW5zZVxuICogVW5pY29kZSBkYXRhIGJ5IE1hdGhpYXMgQnluZW5zIDxtYXRoaWFzYnluZW5zLmJlPlxuICovXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiBfZGVmYXVsdChYUmVnRXhwKSB7XG4gIC8qKlxuICAgKiBBZGRzIHN1cHBvcnQgZm9yIGFsbCBVbmljb2RlIGJsb2Nrcy4gQmxvY2sgbmFtZXMgdXNlIHRoZSBwcmVmaXggJ0luJy4gRS5nLixcbiAgICogYFxccHtJbkJhc2ljTGF0aW59YC4gVG9rZW4gbmFtZXMgYXJlIGNhc2UgaW5zZW5zaXRpdmUsIGFuZCBhbnkgc3BhY2VzLCBoeXBoZW5zLCBhbmRcbiAgICogdW5kZXJzY29yZXMgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqIFVzZXMgVW5pY29kZSAxMS4wLjAuXG4gICAqXG4gICAqIEByZXF1aXJlcyBYUmVnRXhwLCBVbmljb2RlIEJhc2VcbiAgICovXG4gIGlmICghWFJlZ0V4cC5hZGRVbmljb2RlRGF0YSkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignVW5pY29kZSBCYXNlIG11c3QgYmUgbG9hZGVkIGJlZm9yZSBVbmljb2RlIEJsb2NrcycpO1xuICB9XG5cbiAgWFJlZ0V4cC5hZGRVbmljb2RlRGF0YShfYmxvY2tzLmRlZmF1bHQpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NhdGVnb3JpZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90b29scy9vdXRwdXQvY2F0ZWdvcmllc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qIVxuICogWFJlZ0V4cCBVbmljb2RlIENhdGVnb3JpZXMgNC4yLjBcbiAqIDx4cmVnZXhwLmNvbT5cbiAqIFN0ZXZlbiBMZXZpdGhhbiAoYykgMjAxMC1wcmVzZW50IE1JVCBMaWNlbnNlXG4gKiBVbmljb2RlIGRhdGEgYnkgTWF0aGlhcyBCeW5lbnMgPG1hdGhpYXNieW5lbnMuYmU+XG4gKi9cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KFhSZWdFeHApIHtcbiAgLyoqXG4gICAqIEFkZHMgc3VwcG9ydCBmb3IgVW5pY29kZSdzIGdlbmVyYWwgY2F0ZWdvcmllcy4gRS5nLiwgYFxccHtMdX1gIG9yIGBcXHB7VXBwZXJjYXNlIExldHRlcn1gLiBTZWVcbiAgICogY2F0ZWdvcnkgZGVzY3JpcHRpb25zIGluIFVBWCAjNDQgPGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyNDQvI0dDX1ZhbHVlc19UYWJsZT4uIFRva2VuXG4gICAqIG5hbWVzIGFyZSBjYXNlIGluc2Vuc2l0aXZlLCBhbmQgYW55IHNwYWNlcywgaHlwaGVucywgYW5kIHVuZGVyc2NvcmVzIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiBVc2VzIFVuaWNvZGUgMTEuMC4wLlxuICAgKlxuICAgKiBAcmVxdWlyZXMgWFJlZ0V4cCwgVW5pY29kZSBCYXNlXG4gICAqL1xuICBpZiAoIVhSZWdFeHAuYWRkVW5pY29kZURhdGEpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ1VuaWNvZGUgQmFzZSBtdXN0IGJlIGxvYWRlZCBiZWZvcmUgVW5pY29kZSBDYXRlZ29yaWVzJyk7XG4gIH1cblxuICBYUmVnRXhwLmFkZFVuaWNvZGVEYXRhKF9jYXRlZ29yaWVzLmRlZmF1bHQpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3Byb3BlcnRpZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90b29scy9vdXRwdXQvcHJvcGVydGllc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qIVxuICogWFJlZ0V4cCBVbmljb2RlIFByb3BlcnRpZXMgNC4yLjBcbiAqIDx4cmVnZXhwLmNvbT5cbiAqIFN0ZXZlbiBMZXZpdGhhbiAoYykgMjAxMi1wcmVzZW50IE1JVCBMaWNlbnNlXG4gKiBVbmljb2RlIGRhdGEgYnkgTWF0aGlhcyBCeW5lbnMgPG1hdGhpYXNieW5lbnMuYmU+XG4gKi9cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KFhSZWdFeHApIHtcbiAgLyoqXG4gICAqIEFkZHMgcHJvcGVydGllcyB0byBtZWV0IHRoZSBVVFMgIzE4IExldmVsIDEgUkwxLjIgcmVxdWlyZW1lbnRzIGZvciBVbmljb2RlIHJlZ2V4IHN1cHBvcnQuIFNlZVxuICAgKiA8aHR0cDovL3VuaWNvZGUub3JnL3JlcG9ydHMvdHIxOC8jUkwxLjI+LiBGb2xsb3dpbmcgYXJlIGRlZmluaXRpb25zIG9mIHRoZXNlIHByb3BlcnRpZXMgZnJvbVxuICAgKiBVQVggIzQ0IDxodHRwOi8vdW5pY29kZS5vcmcvcmVwb3J0cy90cjQ0Lz46XG4gICAqXG4gICAqIC0gQWxwaGFiZXRpY1xuICAgKiAgIENoYXJhY3RlcnMgd2l0aCB0aGUgQWxwaGFiZXRpYyBwcm9wZXJ0eS4gR2VuZXJhdGVkIGZyb206IExvd2VyY2FzZSArIFVwcGVyY2FzZSArIEx0ICsgTG0gK1xuICAgKiAgIExvICsgTmwgKyBPdGhlcl9BbHBoYWJldGljLlxuICAgKlxuICAgKiAtIERlZmF1bHRfSWdub3JhYmxlX0NvZGVfUG9pbnRcbiAgICogICBGb3IgcHJvZ3JhbW1hdGljIGRldGVybWluYXRpb24gb2YgZGVmYXVsdCBpZ25vcmFibGUgY29kZSBwb2ludHMuIE5ldyBjaGFyYWN0ZXJzIHRoYXQgc2hvdWxkXG4gICAqICAgYmUgaWdub3JlZCBpbiByZW5kZXJpbmcgKHVubGVzcyBleHBsaWNpdGx5IHN1cHBvcnRlZCkgd2lsbCBiZSBhc3NpZ25lZCBpbiB0aGVzZSByYW5nZXMsXG4gICAqICAgcGVybWl0dGluZyBwcm9ncmFtcyB0byBjb3JyZWN0bHkgaGFuZGxlIHRoZSBkZWZhdWx0IHJlbmRlcmluZyBvZiBzdWNoIGNoYXJhY3RlcnMgd2hlbiBub3RcbiAgICogICBvdGhlcndpc2Ugc3VwcG9ydGVkLlxuICAgKlxuICAgKiAtIExvd2VyY2FzZVxuICAgKiAgIENoYXJhY3RlcnMgd2l0aCB0aGUgTG93ZXJjYXNlIHByb3BlcnR5LiBHZW5lcmF0ZWQgZnJvbTogTGwgKyBPdGhlcl9Mb3dlcmNhc2UuXG4gICAqXG4gICAqIC0gTm9uY2hhcmFjdGVyX0NvZGVfUG9pbnRcbiAgICogICBDb2RlIHBvaW50cyBwZXJtYW5lbnRseSByZXNlcnZlZCBmb3IgaW50ZXJuYWwgdXNlLlxuICAgKlxuICAgKiAtIFVwcGVyY2FzZVxuICAgKiAgIENoYXJhY3RlcnMgd2l0aCB0aGUgVXBwZXJjYXNlIHByb3BlcnR5LiBHZW5lcmF0ZWQgZnJvbTogTHUgKyBPdGhlcl9VcHBlcmNhc2UuXG4gICAqXG4gICAqIC0gV2hpdGVfU3BhY2VcbiAgICogICBTcGFjZXMsIHNlcGFyYXRvciBjaGFyYWN0ZXJzIGFuZCBvdGhlciBjb250cm9sIGNoYXJhY3RlcnMgd2hpY2ggc2hvdWxkIGJlIHRyZWF0ZWQgYnlcbiAgICogICBwcm9ncmFtbWluZyBsYW5ndWFnZXMgYXMgXCJ3aGl0ZSBzcGFjZVwiIGZvciB0aGUgcHVycG9zZSBvZiBwYXJzaW5nIGVsZW1lbnRzLlxuICAgKlxuICAgKiBUaGUgcHJvcGVydGllcyBBU0NJSSwgQW55LCBhbmQgQXNzaWduZWQgYXJlIGFsc28gaW5jbHVkZWQgYnV0IGFyZSBub3QgZGVmaW5lZCBpbiBVQVggIzQ0LiBVVFNcbiAgICogIzE4IFJMMS4yIGFkZGl0aW9uYWxseSByZXF1aXJlcyBzdXBwb3J0IGZvciBVbmljb2RlIHNjcmlwdHMgYW5kIGdlbmVyYWwgY2F0ZWdvcmllcy4gVGhlc2UgYXJlXG4gICAqIGluY2x1ZGVkIGluIFhSZWdFeHAncyBVbmljb2RlIENhdGVnb3JpZXMgYW5kIFVuaWNvZGUgU2NyaXB0cyBhZGRvbnMuXG4gICAqXG4gICAqIFRva2VuIG5hbWVzIGFyZSBjYXNlIGluc2Vuc2l0aXZlLCBhbmQgYW55IHNwYWNlcywgaHlwaGVucywgYW5kIHVuZGVyc2NvcmVzIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiBVc2VzIFVuaWNvZGUgMTEuMC4wLlxuICAgKlxuICAgKiBAcmVxdWlyZXMgWFJlZ0V4cCwgVW5pY29kZSBCYXNlXG4gICAqL1xuICBpZiAoIVhSZWdFeHAuYWRkVW5pY29kZURhdGEpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ1VuaWNvZGUgQmFzZSBtdXN0IGJlIGxvYWRlZCBiZWZvcmUgVW5pY29kZSBQcm9wZXJ0aWVzJyk7XG4gIH1cblxuICB2YXIgdW5pY29kZURhdGEgPSBfcHJvcGVydGllcy5kZWZhdWx0OyAvLyBBZGQgbm9uLWdlbmVyYXRlZCBkYXRhXG5cbiAgdW5pY29kZURhdGEucHVzaCh7XG4gICAgbmFtZTogJ0Fzc2lnbmVkJyxcbiAgICAvLyBTaW5jZSB0aGlzIGlzIGRlZmluZWQgYXMgdGhlIGludmVyc2Ugb2YgVW5pY29kZSBjYXRlZ29yeSBDbiAoVW5hc3NpZ25lZCksIHRoZSBVbmljb2RlXG4gICAgLy8gQ2F0ZWdvcmllcyBhZGRvbiBpcyByZXF1aXJlZCB0byB1c2UgdGhpcyBwcm9wZXJ0eVxuICAgIGludmVyc2VPZjogJ0NuJ1xuICB9KTtcbiAgWFJlZ0V4cC5hZGRVbmljb2RlRGF0YSh1bmljb2RlRGF0YSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfc2NyaXB0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3Rvb2xzL291dHB1dC9zY3JpcHRzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyohXG4gKiBYUmVnRXhwIFVuaWNvZGUgU2NyaXB0cyA0LjIuMFxuICogPHhyZWdleHAuY29tPlxuICogU3RldmVuIExldml0aGFuIChjKSAyMDEwLXByZXNlbnQgTUlUIExpY2Vuc2VcbiAqIFVuaWNvZGUgZGF0YSBieSBNYXRoaWFzIEJ5bmVucyA8bWF0aGlhc2J5bmVucy5iZT5cbiAqL1xudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoWFJlZ0V4cCkge1xuICAvKipcbiAgICogQWRkcyBzdXBwb3J0IGZvciBhbGwgVW5pY29kZSBzY3JpcHRzLiBFLmcuLCBgXFxwe0xhdGlufWAuIFRva2VuIG5hbWVzIGFyZSBjYXNlIGluc2Vuc2l0aXZlLFxuICAgKiBhbmQgYW55IHNwYWNlcywgaHlwaGVucywgYW5kIHVuZGVyc2NvcmVzIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiBVc2VzIFVuaWNvZGUgMTEuMC4wLlxuICAgKlxuICAgKiBAcmVxdWlyZXMgWFJlZ0V4cCwgVW5pY29kZSBCYXNlXG4gICAqL1xuICBpZiAoIVhSZWdFeHAuYWRkVW5pY29kZURhdGEpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ1VuaWNvZGUgQmFzZSBtdXN0IGJlIGxvYWRlZCBiZWZvcmUgVW5pY29kZSBTY3JpcHRzJyk7XG4gIH1cblxuICBYUmVnRXhwLmFkZFVuaWNvZGVEYXRhKF9zY3JpcHRzLmRlZmF1bHQpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3hyZWdleHAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3hyZWdleHBcIikpO1xuXG52YXIgX2J1aWxkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hZGRvbnMvYnVpbGRcIikpO1xuXG52YXIgX21hdGNocmVjdXJzaXZlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hZGRvbnMvbWF0Y2hyZWN1cnNpdmVcIikpO1xuXG52YXIgX3VuaWNvZGVCYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hZGRvbnMvdW5pY29kZS1iYXNlXCIpKTtcblxudmFyIF91bmljb2RlQmxvY2tzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hZGRvbnMvdW5pY29kZS1ibG9ja3NcIikpO1xuXG52YXIgX3VuaWNvZGVDYXRlZ29yaWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hZGRvbnMvdW5pY29kZS1jYXRlZ29yaWVzXCIpKTtcblxudmFyIF91bmljb2RlUHJvcGVydGllcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYWRkb25zL3VuaWNvZGUtcHJvcGVydGllc1wiKSk7XG5cbnZhciBfdW5pY29kZVNjcmlwdHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2FkZG9ucy91bmljb2RlLXNjcmlwdHNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4oMCwgX2J1aWxkLmRlZmF1bHQpKF94cmVnZXhwLmRlZmF1bHQpO1xuKDAsIF9tYXRjaHJlY3Vyc2l2ZS5kZWZhdWx0KShfeHJlZ2V4cC5kZWZhdWx0KTtcbigwLCBfdW5pY29kZUJhc2UuZGVmYXVsdCkoX3hyZWdleHAuZGVmYXVsdCk7XG4oMCwgX3VuaWNvZGVCbG9ja3MuZGVmYXVsdCkoX3hyZWdleHAuZGVmYXVsdCk7XG4oMCwgX3VuaWNvZGVDYXRlZ29yaWVzLmRlZmF1bHQpKF94cmVnZXhwLmRlZmF1bHQpO1xuKDAsIF91bmljb2RlUHJvcGVydGllcy5kZWZhdWx0KShfeHJlZ2V4cC5kZWZhdWx0KTtcbigwLCBfdW5pY29kZVNjcmlwdHMuZGVmYXVsdCkoX3hyZWdleHAuZGVmYXVsdCk7XG52YXIgX2RlZmF1bHQgPSBfeHJlZ2V4cC5kZWZhdWx0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuLyohXG4gKiBYUmVnRXhwIDQuMi4wXG4gKiA8eHJlZ2V4cC5jb20+XG4gKiBTdGV2ZW4gTGV2aXRoYW4gKGMpIDIwMDctcHJlc2VudCBNSVQgTGljZW5zZVxuICovXG5cbi8qKlxuICogWFJlZ0V4cCBwcm92aWRlcyBhdWdtZW50ZWQsIGV4dGVuc2libGUgcmVndWxhciBleHByZXNzaW9ucy4gWW91IGdldCBhZGRpdGlvbmFsIHJlZ2V4IHN5bnRheCBhbmRcbiAqIGZsYWdzLCBiZXlvbmQgd2hhdCBicm93c2VycyBzdXBwb3J0IG5hdGl2ZWx5LiBYUmVnRXhwIGlzIGFsc28gYSByZWdleCB1dGlsaXR5IGJlbHQgd2l0aCB0b29scyB0b1xuICogbWFrZSB5b3VyIGNsaWVudC1zaWRlIGdyZXBwaW5nIHNpbXBsZXIgYW5kIG1vcmUgcG93ZXJmdWwsIHdoaWxlIGZyZWVpbmcgeW91IGZyb20gcmVsYXRlZFxuICogY3Jvc3MtYnJvd3NlciBpbmNvbnNpc3RlbmNpZXMuXG4gKi9cbi8vID09LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS09PVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gPT0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLT09XG4vLyBQcm9wZXJ0eSBuYW1lIHVzZWQgZm9yIGV4dGVuZGVkIHJlZ2V4IGluc3RhbmNlIGRhdGFcbnZhciBSRUdFWF9EQVRBID0gJ3hyZWdleHAnOyAvLyBPcHRpb25hbCBmZWF0dXJlcyB0aGF0IGNhbiBiZSBpbnN0YWxsZWQgYW5kIHVuaW5zdGFsbGVkXG5cbnZhciBmZWF0dXJlcyA9IHtcbiAgYXN0cmFsOiBmYWxzZSxcbiAgbmFtZXNwYWNpbmc6IGZhbHNlXG59OyAvLyBOYXRpdmUgbWV0aG9kcyB0byB1c2UgYW5kIHJlc3RvcmUgKCduYXRpdmUnIGlzIGFuIEVTMyByZXNlcnZlZCBrZXl3b3JkKVxuXG52YXIgbmF0aXYgPSB7XG4gIGV4ZWM6IFJlZ0V4cC5wcm90b3R5cGUuZXhlYyxcbiAgdGVzdDogUmVnRXhwLnByb3RvdHlwZS50ZXN0LFxuICBtYXRjaDogU3RyaW5nLnByb3RvdHlwZS5tYXRjaCxcbiAgcmVwbGFjZTogU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlLFxuICBzcGxpdDogU3RyaW5nLnByb3RvdHlwZS5zcGxpdFxufTsgLy8gU3RvcmFnZSBmb3IgZml4ZWQvZXh0ZW5kZWQgbmF0aXZlIG1ldGhvZHNcblxudmFyIGZpeGVkID0ge307IC8vIFN0b3JhZ2UgZm9yIHJlZ2V4ZXMgY2FjaGVkIGJ5IGBYUmVnRXhwLmNhY2hlYFxuXG52YXIgcmVnZXhDYWNoZSA9IHt9OyAvLyBTdG9yYWdlIGZvciBwYXR0ZXJuIGRldGFpbHMgY2FjaGVkIGJ5IHRoZSBgWFJlZ0V4cGAgY29uc3RydWN0b3JcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9OyAvLyBTdG9yYWdlIGZvciByZWdleCBzeW50YXggdG9rZW5zIGFkZGVkIGludGVybmFsbHkgb3IgYnkgYFhSZWdFeHAuYWRkVG9rZW5gXG5cbnZhciB0b2tlbnMgPSBbXTsgLy8gVG9rZW4gc2NvcGVzXG5cbnZhciBkZWZhdWx0U2NvcGUgPSAnZGVmYXVsdCc7XG52YXIgY2xhc3NTY29wZSA9ICdjbGFzcyc7IC8vIFJlZ2V4ZXMgdGhhdCBtYXRjaCBuYXRpdmUgcmVnZXggc3ludGF4LCBpbmNsdWRpbmcgb2N0YWxzXG5cbnZhciBuYXRpdmVUb2tlbnMgPSB7XG4gIC8vIEFueSBuYXRpdmUgbXVsdGljaGFyYWN0ZXIgdG9rZW4gaW4gZGVmYXVsdCBzY29wZSwgb3IgYW55IHNpbmdsZSBjaGFyYWN0ZXJcbiAgJ2RlZmF1bHQnOiAvXFxcXCg/OjAoPzpbMC0zXVswLTddezAsMn18WzQtN11bMC03XT8pP3xbMS05XVxcZCp8eFtcXGRBLUZhLWZdezJ9fHUoPzpbXFxkQS1GYS1mXXs0fXx7W1xcZEEtRmEtZl0rfSl8Y1tBLVphLXpdfFtcXHNcXFNdKXxcXChcXD8oPzpbOj0hXXw8Wz0hXSl8Wz8qK11cXD98e1xcZCsoPzosXFxkKik/fVxcPz98W1xcc1xcU10vLFxuICAvLyBBbnkgbmF0aXZlIG11bHRpY2hhcmFjdGVyIHRva2VuIGluIGNoYXJhY3RlciBjbGFzcyBzY29wZSwgb3IgYW55IHNpbmdsZSBjaGFyYWN0ZXJcbiAgJ2NsYXNzJzogL1xcXFwoPzpbMC0zXVswLTddezAsMn18WzQtN11bMC03XT98eFtcXGRBLUZhLWZdezJ9fHUoPzpbXFxkQS1GYS1mXXs0fXx7W1xcZEEtRmEtZl0rfSl8Y1tBLVphLXpdfFtcXHNcXFNdKXxbXFxzXFxTXS9cbn07IC8vIEFueSBiYWNrcmVmZXJlbmNlIG9yIGRvbGxhci1wcmVmaXhlZCBjaGFyYWN0ZXIgaW4gcmVwbGFjZW1lbnQgc3RyaW5nc1xuXG52YXIgcmVwbGFjZW1lbnRUb2tlbiA9IC9cXCQoPzp7KFtcXHckXSspfXw8KFtcXHckXSspPnwoXFxkXFxkP3xbXFxzXFxTXSkpL2c7IC8vIENoZWNrIGZvciBjb3JyZWN0IGBleGVjYCBoYW5kbGluZyBvZiBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cHNcblxudmFyIGNvcnJlY3RFeGVjTnBjZyA9IG5hdGl2LmV4ZWMuY2FsbCgvKCk/Py8sICcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBDaGVjayBmb3IgRVM2IGBmbGFnc2AgcHJvcCBzdXBwb3J0XG5cbnZhciBoYXNGbGFnc1Byb3AgPSAveC8uZmxhZ3MgIT09IHVuZGVmaW5lZDsgLy8gU2hvcnRjdXQgdG8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5cbnZhciBfcmVmID0ge30sXG4gICAgdG9TdHJpbmcgPSBfcmVmLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiBoYXNOYXRpdmVGbGFnKGZsYWcpIHtcbiAgLy8gQ2FuJ3QgY2hlY2sgYmFzZWQgb24gdGhlIHByZXNlbmNlIG9mIHByb3BlcnRpZXMvZ2V0dGVycyBzaW5jZSBicm93c2VycyBtaWdodCBzdXBwb3J0IHN1Y2hcbiAgLy8gcHJvcGVydGllcyBldmVuIHdoZW4gdGhleSBkb24ndCBzdXBwb3J0IHRoZSBjb3JyZXNwb25kaW5nIGZsYWcgaW4gcmVnZXggY29uc3RydWN0aW9uICh0ZXN0ZWRcbiAgLy8gaW4gQ2hyb21lIDQ4LCB3aGVyZSBgJ3VuaWNvZGUnIGluIC94L2AgaXMgdHJ1ZSBidXQgdHJ5aW5nIHRvIGNvbnN0cnVjdCBhIHJlZ2V4IHdpdGggZmxhZyBgdWBcbiAgLy8gdGhyb3dzIGFuIGVycm9yKVxuICB2YXIgaXNTdXBwb3J0ZWQgPSB0cnVlO1xuXG4gIHRyeSB7XG4gICAgLy8gQ2FuJ3QgdXNlIHJlZ2V4IGxpdGVyYWxzIGZvciB0ZXN0aW5nIGV2ZW4gaW4gYSBgdHJ5YCBiZWNhdXNlIHJlZ2V4IGxpdGVyYWxzIHdpdGhcbiAgICAvLyB1bnN1cHBvcnRlZCBmbGFncyBjYXVzZSBhIGNvbXBpbGF0aW9uIGVycm9yIGluIElFXG4gICAgbmV3IFJlZ0V4cCgnJywgZmxhZyk7XG4gIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgIGlzU3VwcG9ydGVkID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59IC8vIENoZWNrIGZvciBFUzYgYHVgIGZsYWcgc3VwcG9ydFxuXG5cbnZhciBoYXNOYXRpdmVVID0gaGFzTmF0aXZlRmxhZygndScpOyAvLyBDaGVjayBmb3IgRVM2IGB5YCBmbGFnIHN1cHBvcnRcblxudmFyIGhhc05hdGl2ZVkgPSBoYXNOYXRpdmVGbGFnKCd5Jyk7IC8vIFRyYWNrZXIgZm9yIGtub3duIGZsYWdzLCBpbmNsdWRpbmcgYWRkb24gZmxhZ3NcblxudmFyIHJlZ2lzdGVyZWRGbGFncyA9IHtcbiAgZzogdHJ1ZSxcbiAgaTogdHJ1ZSxcbiAgbTogdHJ1ZSxcbiAgdTogaGFzTmF0aXZlVSxcbiAgeTogaGFzTmF0aXZlWVxufTtcbi8qKlxuICogQXR0YWNoZXMgZXh0ZW5kZWQgZGF0YSBhbmQgYFhSZWdFeHAucHJvdG90eXBlYCBwcm9wZXJ0aWVzIHRvIGEgcmVnZXggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXggUmVnZXggdG8gYXVnbWVudC5cbiAqIEBwYXJhbSB7QXJyYXl9IGNhcHR1cmVOYW1lcyBBcnJheSB3aXRoIGNhcHR1cmUgbmFtZXMsIG9yIGBudWxsYC5cbiAqIEBwYXJhbSB7U3RyaW5nfSB4U291cmNlIFhSZWdFeHAgcGF0dGVybiB1c2VkIHRvIGdlbmVyYXRlIGByZWdleGAsIG9yIGBudWxsYCBpZiBOL0EuXG4gKiBAcGFyYW0ge1N0cmluZ30geEZsYWdzIFhSZWdFeHAgZmxhZ3MgdXNlZCB0byBnZW5lcmF0ZSBgcmVnZXhgLCBvciBgbnVsbGAgaWYgTi9BLlxuICogQHBhcmFtIHtCb29sZWFufSBbaXNJbnRlcm5hbE9ubHk9ZmFsc2VdIFdoZXRoZXIgdGhlIHJlZ2V4IHdpbGwgYmUgdXNlZCBvbmx5IGZvciBpbnRlcm5hbFxuICogICBvcGVyYXRpb25zLCBhbmQgbmV2ZXIgZXhwb3NlZCB0byB1c2Vycy4gRm9yIGludGVybmFsLW9ubHkgcmVnZXhlcywgd2UgY2FuIGltcHJvdmUgcGVyZiBieVxuICogICBza2lwcGluZyBzb21lIG9wZXJhdGlvbnMgbGlrZSBhdHRhY2hpbmcgYFhSZWdFeHAucHJvdG90eXBlYCBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge1JlZ0V4cH0gQXVnbWVudGVkIHJlZ2V4LlxuICovXG5cbmZ1bmN0aW9uIGF1Z21lbnQocmVnZXgsIGNhcHR1cmVOYW1lcywgeFNvdXJjZSwgeEZsYWdzLCBpc0ludGVybmFsT25seSkge1xuICByZWdleFtSRUdFWF9EQVRBXSA9IHtcbiAgICBjYXB0dXJlTmFtZXM6IGNhcHR1cmVOYW1lc1xuICB9O1xuXG4gIGlmIChpc0ludGVybmFsT25seSkge1xuICAgIHJldHVybiByZWdleDtcbiAgfSAvLyBDYW4ndCBhdXRvLWluaGVyaXQgdGhlc2Ugc2luY2UgdGhlIFhSZWdFeHAgY29uc3RydWN0b3IgcmV0dXJucyBhIG5vbnByaW1pdGl2ZSB2YWx1ZVxuXG5cbiAgaWYgKHJlZ2V4Ll9fcHJvdG9fXykge1xuICAgIHJlZ2V4Ll9fcHJvdG9fXyA9IFhSZWdFeHAucHJvdG90eXBlO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIHAgaW4gWFJlZ0V4cC5wcm90b3R5cGUpIHtcbiAgICAgIC8vIEFuIGBYUmVnRXhwLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShwKWAgY2hlY2sgd291bGRuJ3QgYmUgd29ydGggaXQgaGVyZSwgc2luY2UgdGhpc1xuICAgICAgLy8gaXMgcGVyZm9ybWFuY2Ugc2Vuc2l0aXZlLCBhbmQgZW51bWVyYWJsZSBgT2JqZWN0LnByb3RvdHlwZWAgb3IgYFJlZ0V4cC5wcm90b3R5cGVgXG4gICAgICAvLyBleHRlbnNpb25zIGV4aXN0IG9uIGByZWdleC5wcm90b3R5cGVgIGFueXdheVxuICAgICAgcmVnZXhbcF0gPSBYUmVnRXhwLnByb3RvdHlwZVtwXTtcbiAgICB9XG4gIH1cblxuICByZWdleFtSRUdFWF9EQVRBXS5zb3VyY2UgPSB4U291cmNlOyAvLyBFbXVsYXRlIHRoZSBFUzYgYGZsYWdzYCBwcm9wIGJ5IGVuc3VyaW5nIGZsYWdzIGFyZSBpbiBhbHBoYWJldGljYWwgb3JkZXJcblxuICByZWdleFtSRUdFWF9EQVRBXS5mbGFncyA9IHhGbGFncyA/IHhGbGFncy5zcGxpdCgnJykuc29ydCgpLmpvaW4oJycpIDogeEZsYWdzO1xuICByZXR1cm4gcmVnZXg7XG59XG4vKipcbiAqIFJlbW92ZXMgYW55IGR1cGxpY2F0ZSBjaGFyYWN0ZXJzIGZyb20gdGhlIHByb3ZpZGVkIHN0cmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBTdHJpbmcgdG8gcmVtb3ZlIGR1cGxpY2F0ZSBjaGFyYWN0ZXJzIGZyb20uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBTdHJpbmcgd2l0aCBhbnkgZHVwbGljYXRlIGNoYXJhY3RlcnMgcmVtb3ZlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNsaXBEdXBsaWNhdGVzKHN0cikge1xuICByZXR1cm4gbmF0aXYucmVwbGFjZS5jYWxsKHN0ciwgLyhbXFxzXFxTXSkoPz1bXFxzXFxTXSpcXDEpL2csICcnKTtcbn1cbi8qKlxuICogQ29waWVzIGEgcmVnZXggb2JqZWN0IHdoaWxlIHByZXNlcnZpbmcgZXh0ZW5kZWQgZGF0YSBhbmQgYXVnbWVudGluZyB3aXRoIGBYUmVnRXhwLnByb3RvdHlwZWBcbiAqIHByb3BlcnRpZXMuIFRoZSBjb3B5IGhhcyBhIGZyZXNoIGBsYXN0SW5kZXhgIHByb3BlcnR5IChzZXQgdG8gemVybykuIEFsbG93cyBhZGRpbmcgYW5kIHJlbW92aW5nXG4gKiBmbGFncyBnIGFuZCB5IHdoaWxlIGNvcHlpbmcgdGhlIHJlZ2V4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXggUmVnZXggdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3Qgd2l0aCBvcHRpb25hbCBwcm9wZXJ0aWVzOlxuICogICAtIGBhZGRHYCB7Qm9vbGVhbn0gQWRkIGZsYWcgZyB3aGlsZSBjb3B5aW5nIHRoZSByZWdleC5cbiAqICAgLSBgYWRkWWAge0Jvb2xlYW59IEFkZCBmbGFnIHkgd2hpbGUgY29weWluZyB0aGUgcmVnZXguXG4gKiAgIC0gYHJlbW92ZUdgIHtCb29sZWFufSBSZW1vdmUgZmxhZyBnIHdoaWxlIGNvcHlpbmcgdGhlIHJlZ2V4LlxuICogICAtIGByZW1vdmVZYCB7Qm9vbGVhbn0gUmVtb3ZlIGZsYWcgeSB3aGlsZSBjb3B5aW5nIHRoZSByZWdleC5cbiAqICAgLSBgaXNJbnRlcm5hbE9ubHlgIHtCb29sZWFufSBXaGV0aGVyIHRoZSBjb3BpZWQgcmVnZXggd2lsbCBiZSB1c2VkIG9ubHkgZm9yIGludGVybmFsXG4gKiAgICAgb3BlcmF0aW9ucywgYW5kIG5ldmVyIGV4cG9zZWQgdG8gdXNlcnMuIEZvciBpbnRlcm5hbC1vbmx5IHJlZ2V4ZXMsIHdlIGNhbiBpbXByb3ZlIHBlcmYgYnlcbiAqICAgICBza2lwcGluZyBzb21lIG9wZXJhdGlvbnMgbGlrZSBhdHRhY2hpbmcgYFhSZWdFeHAucHJvdG90eXBlYCBwcm9wZXJ0aWVzLlxuICogICAtIGBzb3VyY2VgIHtTdHJpbmd9IE92ZXJyaWRlcyBgPHJlZ2V4Pi5zb3VyY2VgLCBmb3Igc3BlY2lhbCBjYXNlcy5cbiAqIEByZXR1cm5zIHtSZWdFeHB9IENvcHkgb2YgdGhlIHByb3ZpZGVkIHJlZ2V4LCBwb3NzaWJseSB3aXRoIG1vZGlmaWVkIGZsYWdzLlxuICovXG5cblxuZnVuY3Rpb24gY29weVJlZ2V4KHJlZ2V4LCBvcHRpb25zKSB7XG4gIGlmICghWFJlZ0V4cC5pc1JlZ0V4cChyZWdleCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUeXBlIFJlZ0V4cCBleHBlY3RlZCcpO1xuICB9XG5cbiAgdmFyIHhEYXRhID0gcmVnZXhbUkVHRVhfREFUQV0gfHwge307XG4gIHZhciBmbGFncyA9IGdldE5hdGl2ZUZsYWdzKHJlZ2V4KTtcbiAgdmFyIGZsYWdzVG9BZGQgPSAnJztcbiAgdmFyIGZsYWdzVG9SZW1vdmUgPSAnJztcbiAgdmFyIHhyZWdleHBTb3VyY2UgPSBudWxsO1xuICB2YXIgeHJlZ2V4cEZsYWdzID0gbnVsbDtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKG9wdGlvbnMucmVtb3ZlRykge1xuICAgIGZsYWdzVG9SZW1vdmUgKz0gJ2cnO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMucmVtb3ZlWSkge1xuICAgIGZsYWdzVG9SZW1vdmUgKz0gJ3knO1xuICB9XG5cbiAgaWYgKGZsYWdzVG9SZW1vdmUpIHtcbiAgICBmbGFncyA9IG5hdGl2LnJlcGxhY2UuY2FsbChmbGFncywgbmV3IFJlZ0V4cChcIltcIi5jb25jYXQoZmxhZ3NUb1JlbW92ZSwgXCJdK1wiKSwgJ2cnKSwgJycpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkRykge1xuICAgIGZsYWdzVG9BZGQgKz0gJ2cnO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkWSkge1xuICAgIGZsYWdzVG9BZGQgKz0gJ3knO1xuICB9XG5cbiAgaWYgKGZsYWdzVG9BZGQpIHtcbiAgICBmbGFncyA9IGNsaXBEdXBsaWNhdGVzKGZsYWdzICsgZmxhZ3NUb0FkZCk7XG4gIH1cblxuICBpZiAoIW9wdGlvbnMuaXNJbnRlcm5hbE9ubHkpIHtcbiAgICBpZiAoeERhdGEuc291cmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHhyZWdleHBTb3VyY2UgPSB4RGF0YS5zb3VyY2U7XG4gICAgfSAvLyBudWxsIG9yIHVuZGVmaW5lZDsgZG9uJ3Qgd2FudCB0byBhZGQgdG8gYGZsYWdzYCBpZiB0aGUgcHJldmlvdXMgdmFsdWUgd2FzIG51bGwsIHNpbmNlXG4gICAgLy8gdGhhdCBpbmRpY2F0ZXMgd2UncmUgbm90IHRyYWNraW5nIG9yaWdpbmFsIHByZWNvbXBpbGF0aW9uIGZsYWdzXG5cblxuICAgIGlmICh4RGF0YS5mbGFncyAhPSBudWxsKSB7XG4gICAgICAvLyBGbGFncyBhcmUgb25seSBhZGRlZCBmb3Igbm9uLWludGVybmFsIHJlZ2V4ZXMgYnkgYFhSZWdFeHAuZ2xvYmFsaXplYC4gRmxhZ3MgYXJlIG5ldmVyXG4gICAgICAvLyByZW1vdmVkIGZvciBub24taW50ZXJuYWwgcmVnZXhlcywgc28gZG9uJ3QgbmVlZCB0byBoYW5kbGUgaXRcbiAgICAgIHhyZWdleHBGbGFncyA9IGZsYWdzVG9BZGQgPyBjbGlwRHVwbGljYXRlcyh4RGF0YS5mbGFncyArIGZsYWdzVG9BZGQpIDogeERhdGEuZmxhZ3M7XG4gICAgfVxuICB9IC8vIEF1Z21lbnQgd2l0aCBgWFJlZ0V4cC5wcm90b3R5cGVgIHByb3BlcnRpZXMsIGJ1dCB1c2UgdGhlIG5hdGl2ZSBgUmVnRXhwYCBjb25zdHJ1Y3RvciB0byBhdm9pZFxuICAvLyBzZWFyY2hpbmcgZm9yIHNwZWNpYWwgdG9rZW5zLiBUaGF0IHdvdWxkIGJlIHdyb25nIGZvciByZWdleGVzIGNvbnN0cnVjdGVkIGJ5IGBSZWdFeHBgLCBhbmRcbiAgLy8gdW5uZWNlc3NhcnkgZm9yIHJlZ2V4ZXMgY29uc3RydWN0ZWQgYnkgYFhSZWdFeHBgIGJlY2F1c2UgdGhlIHJlZ2V4IGhhcyBhbHJlYWR5IHVuZGVyZ29uZSB0aGVcbiAgLy8gdHJhbnNsYXRpb24gdG8gbmF0aXZlIHJlZ2V4IHN5bnRheFxuXG5cbiAgcmVnZXggPSBhdWdtZW50KG5ldyBSZWdFeHAob3B0aW9ucy5zb3VyY2UgfHwgcmVnZXguc291cmNlLCBmbGFncyksIGhhc05hbWVkQ2FwdHVyZShyZWdleCkgPyB4RGF0YS5jYXB0dXJlTmFtZXMuc2xpY2UoMCkgOiBudWxsLCB4cmVnZXhwU291cmNlLCB4cmVnZXhwRmxhZ3MsIG9wdGlvbnMuaXNJbnRlcm5hbE9ubHkpO1xuICByZXR1cm4gcmVnZXg7XG59XG4vKipcbiAqIENvbnZlcnRzIGhleGFkZWNpbWFsIHRvIGRlY2ltYWwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBkZWMoaGV4KSB7XG4gIHJldHVybiBwYXJzZUludChoZXgsIDE2KTtcbn1cbi8qKlxuICogUmV0dXJucyBhIHBhdHRlcm4gdGhhdCBjYW4gYmUgdXNlZCBpbiBhIG5hdGl2ZSBSZWdFeHAgaW4gcGxhY2Ugb2YgYW4gaWdub3JhYmxlIHRva2VuIHN1Y2ggYXMgYW5cbiAqIGlubGluZSBjb21tZW50IG9yIHdoaXRlc3BhY2Ugd2l0aCBmbGFnIHguIFRoaXMgaXMgdXNlZCBkaXJlY3RseSBhcyBhIHRva2VuIGhhbmRsZXIgZnVuY3Rpb25cbiAqIHBhc3NlZCB0byBgWFJlZ0V4cC5hZGRUb2tlbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaCBNYXRjaCBhcmcgb2YgYFhSZWdFeHAuYWRkVG9rZW5gIGhhbmRsZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzY29wZSBTY29wZSBhcmcgb2YgYFhSZWdFeHAuYWRkVG9rZW5gIGhhbmRsZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmbGFncyBGbGFncyBhcmcgb2YgYFhSZWdFeHAuYWRkVG9rZW5gIGhhbmRsZXJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEVpdGhlciAnJyBvciAnKD86KScsIGRlcGVuZGluZyBvbiB3aGljaCBpcyBuZWVkZWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlIG1hdGNoLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0Q29udGV4dHVhbFRva2VuU2VwYXJhdG9yKG1hdGNoLCBzY29wZSwgZmxhZ3MpIHtcbiAgaWYgKCAvLyBObyBuZWVkIHRvIHNlcGFyYXRlIHRva2VucyBpZiBhdCB0aGUgYmVnaW5uaW5nIG9yIGVuZCBvZiBhIGdyb3VwXG4gIG1hdGNoLmlucHV0W21hdGNoLmluZGV4IC0gMV0gPT09ICcoJyB8fCBtYXRjaC5pbnB1dFttYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aF0gPT09ICcpJyB8fCAvLyBObyBuZWVkIHRvIHNlcGFyYXRlIHRva2VucyBpZiBiZWZvcmUgb3IgYWZ0ZXIgYSBgfGBcbiAgbWF0Y2guaW5wdXRbbWF0Y2guaW5kZXggLSAxXSA9PT0gJ3wnIHx8IG1hdGNoLmlucHV0W21hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXSA9PT0gJ3wnIHx8IC8vIE5vIG5lZWQgdG8gc2VwYXJhdGUgdG9rZW5zIGlmIGF0IHRoZSBiZWdpbm5pbmcgb3IgZW5kIG9mIHRoZSBwYXR0ZXJuXG4gIG1hdGNoLmluZGV4IDwgMSB8fCBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA+PSBtYXRjaC5pbnB1dC5sZW5ndGggfHwgLy8gTm8gbmVlZCB0byBzZXBhcmF0ZSB0b2tlbnMgaWYgYXQgdGhlIGJlZ2lubmluZyBvZiBhIG5vbmNhcHR1cmluZyBncm91cCBvciBsb29rYWhlYWQuXG4gIC8vIFRoZSB3YXkgdGhpcyBpcyB3cml0dGVuIHJlbGllcyBvbjpcbiAgLy8gLSBUaGUgc2VhcmNoIHJlZ2V4IG1hdGNoaW5nIG9ubHkgMy1jaGFyIHN0cmluZ3MuXG4gIC8vIC0gQWx0aG91Z2ggYHN1YnN0cmAgZ2l2ZXMgY2hhcnMgZnJvbSB0aGUgZW5kIG9mIHRoZSBzdHJpbmcgaWYgZ2l2ZW4gYSBuZWdhdGl2ZSBpbmRleCxcbiAgLy8gICB0aGUgcmVzdWx0aW5nIHN1YnN0cmluZyB3aWxsIGJlIHRvbyBzaG9ydCB0byBtYXRjaC4gRXg6IGAnYWJjZCcuc3Vic3RyKC0xLCAzKSA9PT0gJ2QnYFxuICBuYXRpdi50ZXN0LmNhbGwoL15cXChcXD9bOj0hXS8sIG1hdGNoLmlucHV0LnN1YnN0cihtYXRjaC5pbmRleCAtIDMsIDMpKSB8fCAvLyBBdm9pZCBzZXBhcmF0aW5nIHRva2VucyB3aGVuIHRoZSBmb2xsb3dpbmcgdG9rZW4gaXMgYSBxdWFudGlmaWVyXG4gIGlzUXVhbnRpZmllck5leHQobWF0Y2guaW5wdXQsIG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoLCBmbGFncykpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0gLy8gS2VlcCB0b2tlbnMgc2VwYXJhdGVkLiBUaGlzIGF2b2lkcyBlLmcuIGluYWR2ZXJ0ZWRseSBjaGFuZ2luZyBgXFwxIDFgIG9yIGBcXDEoPyMpMWAgdG8gYFxcMTFgLlxuICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhbGwgdG9rZW5zIHJlbWFpbiBhcyBkaXNjcmV0ZSBhdG9tcywgZS5nLiBpdCBhdm9pZHMgY29udmVydGluZyB0aGUgc3ludGF4XG4gIC8vIGVycm9yIGAoPyA6YCBpbnRvIGAoPzpgLlxuXG5cbiAgcmV0dXJuICcoPzopJztcbn1cbi8qKlxuICogUmV0dXJucyBuYXRpdmUgYFJlZ0V4cGAgZmxhZ3MgdXNlZCBieSBhIHJlZ2V4IG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4IFJlZ2V4IHRvIGNoZWNrLlxuICogQHJldHVybnMge1N0cmluZ30gTmF0aXZlIGZsYWdzIGluIHVzZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldE5hdGl2ZUZsYWdzKHJlZ2V4KSB7XG4gIHJldHVybiBoYXNGbGFnc1Byb3AgPyByZWdleC5mbGFncyA6IC8vIEV4cGxpY2l0bHkgdXNpbmcgYFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmdgIChyYXRoZXIgdGhhbiBlLmcuIGBTdHJpbmdgIG9yIGNvbmNhdGVuYXRpb25cbiAgLy8gd2l0aCBhbiBlbXB0eSBzdHJpbmcpIGFsbG93cyB0aGlzIHRvIGNvbnRpbnVlIHdvcmtpbmcgcHJlZGljdGFibHkgd2hlblxuICAvLyBgWFJlZ0V4cC5wcm9wdG90eXBlLnRvU3RyaW5nYCBpcyBvdmVycmlkZGVuXG4gIG5hdGl2LmV4ZWMuY2FsbCgvXFwvKFthLXpdKikkL2ksIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyZWdleCkpWzFdO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSByZWdleCBoYXMgZXh0ZW5kZWQgaW5zdGFuY2UgZGF0YSB1c2VkIHRvIHRyYWNrIGNhcHR1cmUgbmFtZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7UmVnRXhwfSByZWdleCBSZWdleCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSByZWdleCB1c2VzIG5hbWVkIGNhcHR1cmUuXG4gKi9cblxuXG5mdW5jdGlvbiBoYXNOYW1lZENhcHR1cmUocmVnZXgpIHtcbiAgcmV0dXJuICEhKHJlZ2V4W1JFR0VYX0RBVEFdICYmIHJlZ2V4W1JFR0VYX0RBVEFdLmNhcHR1cmVOYW1lcyk7XG59XG4vKipcbiAqIENvbnZlcnRzIGRlY2ltYWwgdG8gaGV4YWRlY2ltYWwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gZGVjXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5cblxuZnVuY3Rpb24gaGV4KGRlYykge1xuICByZXR1cm4gcGFyc2VJbnQoZGVjLCAxMCkudG9TdHJpbmcoMTYpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgbmV4dCBub25pZ25vcmFibGUgdG9rZW4gYWZ0ZXIgdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpcyBhIHF1YW50aWZpZXIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuIFBhdHRlcm4gdG8gc2VhcmNoIHdpdGhpbi5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwb3MgSW5kZXggaW4gYHBhdHRlcm5gIHRvIHNlYXJjaCBhdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBmbGFncyBGbGFncyB1c2VkIGJ5IHRoZSBwYXR0ZXJuLlxuICogQHJldHVybnMge0Jvb2xlYW59IFdoZXRoZXIgdGhlIG5leHQgbm9uaWdub3JhYmxlIHRva2VuIGlzIGEgcXVhbnRpZmllci5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzUXVhbnRpZmllck5leHQocGF0dGVybiwgcG9zLCBmbGFncykge1xuICB2YXIgaW5saW5lQ29tbWVudFBhdHRlcm4gPSAnXFxcXChcXFxcPyNbXildKlxcXFwpJztcbiAgdmFyIGxpbmVDb21tZW50UGF0dGVybiA9ICcjW14jXFxcXG5dKic7XG4gIHZhciBxdWFudGlmaWVyUGF0dGVybiA9ICdbPyorXXx7XFxcXGQrKD86LFxcXFxkKik/fSc7XG4gIHJldHVybiBuYXRpdi50ZXN0LmNhbGwoZmxhZ3MuaW5kZXhPZigneCcpICE9PSAtMSA/IC8vIElnbm9yZSBhbnkgbGVhZGluZyB3aGl0ZXNwYWNlLCBsaW5lIGNvbW1lbnRzLCBhbmQgaW5saW5lIGNvbW1lbnRzXG4gIC9eKD86XFxzfCNbXiNcXG5dKnxcXChcXD8jW14pXSpcXCkpKig/Ols/KitdfHtcXGQrKD86LFxcZCopP30pLyA6IC8vIElnbm9yZSBhbnkgbGVhZGluZyBpbmxpbmUgY29tbWVudHNcbiAgL14oPzpcXChcXD8jW14pXSpcXCkpKig/Ols/KitdfHtcXGQrKD86LFxcZCopP30pLywgcGF0dGVybi5zbGljZShwb3MpKTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgdmFsdWUgaXMgb2YgdGhlIHNwZWNpZmllZCB0eXBlLCBieSByZXNvbHZpbmcgaXRzIGludGVybmFsIFtbQ2xhc3NdXS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBPYmplY3QgdG8gY2hlY2suXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUeXBlIHRvIGNoZWNrIGZvciwgaW4gVGl0bGVDYXNlLlxuICogQHJldHVybnMge0Jvb2xlYW59IFdoZXRoZXIgdGhlIG9iamVjdCBtYXRjaGVzIHRoZSB0eXBlLlxuICovXG5cblxuZnVuY3Rpb24gaXNUeXBlKHZhbHVlLCB0eXBlKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IFwiLmNvbmNhdCh0eXBlLCBcIl1cIik7XG59XG4vKipcbiAqIEFkZHMgbGVhZGluZyB6ZXJvcyBpZiBzaG9ydGVyIHRoYW4gZm91ciBjaGFyYWN0ZXJzLiBVc2VkIGZvciBmaXhlZC1sZW5ndGggaGV4YWRlY2ltYWwgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5cblxuZnVuY3Rpb24gcGFkNChzdHIpIHtcbiAgd2hpbGUgKHN0ci5sZW5ndGggPCA0KSB7XG4gICAgc3RyID0gXCIwXCIuY29uY2F0KHN0cik7XG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuLyoqXG4gKiBDaGVja3MgZm9yIGZsYWctcmVsYXRlZCBlcnJvcnMsIGFuZCBzdHJpcHMvYXBwbGllcyBmbGFncyBpbiBhIGxlYWRpbmcgbW9kZSBtb2RpZmllci4gT2ZmbG9hZHNcbiAqIHRoZSBmbGFnIHByZXBhcmF0aW9uIGxvZ2ljIGZyb20gdGhlIGBYUmVnRXhwYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IHBhdHRlcm4gUmVnZXggcGF0dGVybiwgcG9zc2libHkgd2l0aCBhIGxlYWRpbmcgbW9kZSBtb2RpZmllci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBmbGFncyBBbnkgY29tYmluYXRpb24gb2YgZmxhZ3MuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBPYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIGBwYXR0ZXJuYCBhbmQgYGZsYWdzYC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHByZXBhcmVGbGFncyhwYXR0ZXJuLCBmbGFncykge1xuICAvLyBSZWNlbnQgYnJvd3NlcnMgdGhyb3cgb24gZHVwbGljYXRlIGZsYWdzLCBzbyBjb3B5IHRoaXMgYmVoYXZpb3IgZm9yIG5vbm5hdGl2ZSBmbGFnc1xuICBpZiAoY2xpcER1cGxpY2F0ZXMoZmxhZ3MpICE9PSBmbGFncykge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkludmFsaWQgZHVwbGljYXRlIHJlZ2V4IGZsYWcgXCIuY29uY2F0KGZsYWdzKSk7XG4gIH0gLy8gU3RyaXAgYW5kIGFwcGx5IGEgbGVhZGluZyBtb2RlIG1vZGlmaWVyIHdpdGggYW55IGNvbWJpbmF0aW9uIG9mIGZsYWdzIGV4Y2VwdCBnIG9yIHlcblxuXG4gIHBhdHRlcm4gPSBuYXRpdi5yZXBsYWNlLmNhbGwocGF0dGVybiwgL15cXChcXD8oW1xcdyRdKylcXCkvLCBmdW5jdGlvbiAoJDAsICQxKSB7XG4gICAgaWYgKG5hdGl2LnRlc3QuY2FsbCgvW2d5XS8sICQxKSkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQ2Fubm90IHVzZSBmbGFnIGcgb3IgeSBpbiBtb2RlIG1vZGlmaWVyIFwiLmNvbmNhdCgkMCkpO1xuICAgIH0gLy8gQWxsb3cgZHVwbGljYXRlIGZsYWdzIHdpdGhpbiB0aGUgbW9kZSBtb2RpZmllclxuXG5cbiAgICBmbGFncyA9IGNsaXBEdXBsaWNhdGVzKGZsYWdzICsgJDEpO1xuICAgIHJldHVybiAnJztcbiAgfSk7IC8vIFRocm93IG9uIHVua25vd24gbmF0aXZlIG9yIG5vbm5hdGl2ZSBmbGFnc1xuXG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGZsYWdzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgdmFyIGZsYWcgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgaWYgKCFyZWdpc3RlcmVkRmxhZ3NbZmxhZ10pIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVW5rbm93biByZWdleCBmbGFnIFwiLmNvbmNhdChmbGFnKSk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXR0ZXJuOiBwYXR0ZXJuLFxuICAgIGZsYWdzOiBmbGFnc1xuICB9O1xufVxuLyoqXG4gKiBQcmVwYXJlcyBhbiBvcHRpb25zIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB2YWx1ZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB2YWx1ZSBWYWx1ZSB0byBjb252ZXJ0IHRvIGFuIG9wdGlvbnMgb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gT3B0aW9ucyBvYmplY3QuXG4gKi9cblxuXG5mdW5jdGlvbiBwcmVwYXJlT3B0aW9ucyh2YWx1ZSkge1xuICB2YXIgb3B0aW9ucyA9IHt9O1xuXG4gIGlmIChpc1R5cGUodmFsdWUsICdTdHJpbmcnKSkge1xuICAgIFhSZWdFeHAuZm9yRWFjaCh2YWx1ZSwgL1teXFxzLF0rLywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICBvcHRpb25zW21hdGNoXSA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIFJlZ2lzdGVycyBhIGZsYWcgc28gaXQgZG9lc24ndCB0aHJvdyBhbiAndW5rbm93biBmbGFnJyBlcnJvci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZsYWcgU2luZ2xlLWNoYXJhY3RlciBmbGFnIHRvIHJlZ2lzdGVyLlxuICovXG5cblxuZnVuY3Rpb24gcmVnaXN0ZXJGbGFnKGZsYWcpIHtcbiAgaWYgKCEvXltcXHckXSQvLnRlc3QoZmxhZykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZsYWcgbXVzdCBiZSBhIHNpbmdsZSBjaGFyYWN0ZXIgQS1aYS16MC05XyQnKTtcbiAgfVxuXG4gIHJlZ2lzdGVyZWRGbGFnc1tmbGFnXSA9IHRydWU7XG59XG4vKipcbiAqIFJ1bnMgYnVpbHQtaW4gYW5kIGN1c3RvbSByZWdleCBzeW50YXggdG9rZW5zIGluIHJldmVyc2UgaW5zZXJ0aW9uIG9yZGVyIGF0IHRoZSBzcGVjaWZpZWRcbiAqIHBvc2l0aW9uLCB1bnRpbCBhIG1hdGNoIGlzIGZvdW5kLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVybiBPcmlnaW5hbCBwYXR0ZXJuIGZyb20gd2hpY2ggYW4gWFJlZ0V4cCBvYmplY3QgaXMgYmVpbmcgYnVpbHQuXG4gKiBAcGFyYW0ge1N0cmluZ30gZmxhZ3MgRmxhZ3MgYmVpbmcgdXNlZCB0byBjb25zdHJ1Y3QgdGhlIHJlZ2V4LlxuICogQHBhcmFtIHtOdW1iZXJ9IHBvcyBQb3NpdGlvbiB0byBzZWFyY2ggZm9yIHRva2VucyB3aXRoaW4gYHBhdHRlcm5gLlxuICogQHBhcmFtIHtOdW1iZXJ9IHNjb3BlIFJlZ2V4IHNjb3BlIHRvIGFwcGx5OiAnZGVmYXVsdCcgb3IgJ2NsYXNzJy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0IENvbnRleHQgb2JqZWN0IHRvIHVzZSBmb3IgdG9rZW4gaGFuZGxlciBmdW5jdGlvbnMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBPYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIGBtYXRjaExlbmd0aGAsIGBvdXRwdXRgLCBhbmQgYHJlcGFyc2VgOyBvciBgbnVsbGAuXG4gKi9cblxuXG5mdW5jdGlvbiBydW5Ub2tlbnMocGF0dGVybiwgZmxhZ3MsIHBvcywgc2NvcGUsIGNvbnRleHQpIHtcbiAgdmFyIGkgPSB0b2tlbnMubGVuZ3RoO1xuICB2YXIgbGVhZENoYXIgPSBwYXR0ZXJuW3Bvc107XG4gIHZhciByZXN1bHQgPSBudWxsO1xuICB2YXIgbWF0Y2g7XG4gIHZhciB0OyAvLyBSdW4gaW4gcmV2ZXJzZSBpbnNlcnRpb24gb3JkZXJcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdCA9IHRva2Vuc1tpXTtcblxuICAgIGlmICh0LmxlYWRDaGFyICYmIHQubGVhZENoYXIgIT09IGxlYWRDaGFyIHx8IHQuc2NvcGUgIT09IHNjb3BlICYmIHQuc2NvcGUgIT09ICdhbGwnIHx8IHQuZmxhZyAmJiAhKGZsYWdzLmluZGV4T2YodC5mbGFnKSAhPT0gLTEpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBtYXRjaCA9IFhSZWdFeHAuZXhlYyhwYXR0ZXJuLCB0LnJlZ2V4LCBwb3MsICdzdGlja3knKTtcblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBtYXRjaExlbmd0aDogbWF0Y2hbMF0ubGVuZ3RoLFxuICAgICAgICBvdXRwdXQ6IHQuaGFuZGxlci5jYWxsKGNvbnRleHQsIG1hdGNoLCBzY29wZSwgZmxhZ3MpLFxuICAgICAgICByZXBhcnNlOiB0LnJlcGFyc2VcbiAgICAgIH07IC8vIEZpbmlzaGVkIHdpdGggdG9rZW4gdGVzdHNcblxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogRW5hYmxlcyBvciBkaXNhYmxlcyBpbXBsaWNpdCBhc3RyYWwgbW9kZSBvcHQtaW4uIFdoZW4gZW5hYmxlZCwgZmxhZyBBIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG9cbiAqIGFsbCBuZXcgcmVnZXhlcyBjcmVhdGVkIGJ5IFhSZWdFeHAuIFRoaXMgY2F1c2VzIGFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIGNyZWF0aW5nIHJlZ2V4ZXMgaWZcbiAqIHRoZSBVbmljb2RlIEJhc2UgYWRkb24gaXMgbm90IGF2YWlsYWJsZSwgc2luY2UgZmxhZyBBIGlzIHJlZ2lzdGVyZWQgYnkgdGhhdCBhZGRvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCb29sZWFufSBvbiBgdHJ1ZWAgdG8gZW5hYmxlOyBgZmFsc2VgIHRvIGRpc2FibGUuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRBc3RyYWwob24pIHtcbiAgZmVhdHVyZXMuYXN0cmFsID0gb247XG59XG4vKipcbiAqIEFkZHMgbmFtZWQgY2FwdHVyZSBncm91cHMgdG8gdGhlIGBncm91cHNgIHByb3BlcnR5IG9mIG1hdGNoIGFycmF5cy4gU2VlIGhlcmUgZm9yIGRldGFpbHM6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1yZWdleHAtbmFtZWQtZ3JvdXBzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb24gYHRydWVgIHRvIGVuYWJsZTsgYGZhbHNlYCB0byBkaXNhYmxlLlxuICovXG5cblxuZnVuY3Rpb24gc2V0TmFtZXNwYWNpbmcob24pIHtcbiAgZmVhdHVyZXMubmFtZXNwYWNpbmcgPSBvbjtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgb2JqZWN0LCBvciB0aHJvd3MgYW4gZXJyb3IgaWYgaXQgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLiBUaGlzIGlzIHVzZWQgdG8gZm9sbG93XG4gKiB0aGUgRVM1IGFic3RyYWN0IG9wZXJhdGlvbiBgVG9PYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIE9iamVjdCB0byBjaGVjayBhbmQgcmV0dXJuLlxuICogQHJldHVybnMgeyp9IFRoZSBwcm92aWRlZCBvYmplY3QuXG4gKi9cblxuXG5mdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAvLyBudWxsIG9yIHVuZGVmaW5lZFxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IG51bGwgb3IgdW5kZWZpbmVkIHRvIG9iamVjdCcpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufSAvLyA9PS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPT1cbi8vIENvbnN0cnVjdG9yXG4vLyA9PS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPT1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGV4dGVuZGVkIHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3QgZm9yIG1hdGNoaW5nIHRleHQgd2l0aCBhIHBhdHRlcm4uIERpZmZlcnMgZnJvbSBhXG4gKiBuYXRpdmUgcmVndWxhciBleHByZXNzaW9uIGluIHRoYXQgYWRkaXRpb25hbCBzeW50YXggYW5kIGZsYWdzIGFyZSBzdXBwb3J0ZWQuIFRoZSByZXR1cm5lZCBvYmplY3RcbiAqIGlzIGluIGZhY3QgYSBuYXRpdmUgYFJlZ0V4cGAgYW5kIHdvcmtzIHdpdGggYWxsIG5hdGl2ZSBtZXRob2RzLlxuICpcbiAqIEBjbGFzcyBYUmVnRXhwXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gcGF0dGVybiBSZWdleCBwYXR0ZXJuIHN0cmluZywgb3IgYW4gZXhpc3RpbmcgcmVnZXggb2JqZWN0IHRvIGNvcHkuXG4gKiBAcGFyYW0ge1N0cmluZ30gW2ZsYWdzXSBBbnkgY29tYmluYXRpb24gb2YgZmxhZ3MuXG4gKiAgIE5hdGl2ZSBmbGFnczpcbiAqICAgICAtIGBnYCAtIGdsb2JhbFxuICogICAgIC0gYGlgIC0gaWdub3JlIGNhc2VcbiAqICAgICAtIGBtYCAtIG11bHRpbGluZSBhbmNob3JzXG4gKiAgICAgLSBgdWAgLSB1bmljb2RlIChFUzYpXG4gKiAgICAgLSBgeWAgLSBzdGlja3kgKEZpcmVmb3ggMyssIEVTNilcbiAqICAgQWRkaXRpb25hbCBYUmVnRXhwIGZsYWdzOlxuICogICAgIC0gYG5gIC0gZXhwbGljaXQgY2FwdHVyZVxuICogICAgIC0gYHNgIC0gZG90IG1hdGNoZXMgYWxsIChha2Egc2luZ2xlbGluZSlcbiAqICAgICAtIGB4YCAtIGZyZWUtc3BhY2luZyBhbmQgbGluZSBjb21tZW50cyAoYWthIGV4dGVuZGVkKVxuICogICAgIC0gYEFgIC0gYXN0cmFsIChyZXF1aXJlcyB0aGUgVW5pY29kZSBCYXNlIGFkZG9uKVxuICogICBGbGFncyBjYW5ub3QgYmUgcHJvdmlkZWQgd2hlbiBjb25zdHJ1Y3Rpbmcgb25lIGBSZWdFeHBgIGZyb20gYW5vdGhlci5cbiAqIEByZXR1cm5zIHtSZWdFeHB9IEV4dGVuZGVkIHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIFdpdGggbmFtZWQgY2FwdHVyZSBhbmQgZmxhZyB4XG4gKiBYUmVnRXhwKGAoPzx5ZWFyPiAgWzAtOV17NH0gKSAtPyAgIyB5ZWFyXG4gKiAgICAgICAgICAoPzxtb250aD4gWzAtOV17Mn0gKSAtPyAgIyBtb250aFxuICogICAgICAgICAgKD88ZGF5PiAgIFswLTldezJ9ICkgICAgICMgZGF5YCwgJ3gnKTtcbiAqXG4gKiAvLyBQcm92aWRpbmcgYSByZWdleCBvYmplY3QgY29waWVzIGl0LiBOYXRpdmUgcmVnZXhlcyBhcmUgcmVjb21waWxlZCB1c2luZyBuYXRpdmUgKG5vdCBYUmVnRXhwKVxuICogLy8gc3ludGF4LiBDb3BpZXMgbWFpbnRhaW4gZXh0ZW5kZWQgZGF0YSwgYXJlIGF1Z21lbnRlZCB3aXRoIGBYUmVnRXhwLnByb3RvdHlwZWAgcHJvcGVydGllcywgYW5kXG4gKiAvLyBoYXZlIGZyZXNoIGBsYXN0SW5kZXhgIHByb3BlcnRpZXMgKHNldCB0byB6ZXJvKS5cbiAqIFhSZWdFeHAoL3JlZ2V4Lyk7XG4gKi9cblxuXG5mdW5jdGlvbiBYUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSB7XG4gIGlmIChYUmVnRXhwLmlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgaWYgKGZsYWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBzdXBwbHkgZmxhZ3Mgd2hlbiBjb3B5aW5nIGEgUmVnRXhwJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvcHlSZWdleChwYXR0ZXJuKTtcbiAgfSAvLyBDb3B5IHRoZSBhcmd1bWVudCBiZWhhdmlvciBvZiBgUmVnRXhwYFxuXG5cbiAgcGF0dGVybiA9IHBhdHRlcm4gPT09IHVuZGVmaW5lZCA/ICcnIDogU3RyaW5nKHBhdHRlcm4pO1xuICBmbGFncyA9IGZsYWdzID09PSB1bmRlZmluZWQgPyAnJyA6IFN0cmluZyhmbGFncyk7XG5cbiAgaWYgKFhSZWdFeHAuaXNJbnN0YWxsZWQoJ2FzdHJhbCcpICYmICEoZmxhZ3MuaW5kZXhPZignQScpICE9PSAtMSkpIHtcbiAgICAvLyBUaGlzIGNhdXNlcyBhbiBlcnJvciB0byBiZSB0aHJvd24gaWYgdGhlIFVuaWNvZGUgQmFzZSBhZGRvbiBpcyBub3QgYXZhaWxhYmxlXG4gICAgZmxhZ3MgKz0gJ0EnO1xuICB9XG5cbiAgaWYgKCFwYXR0ZXJuQ2FjaGVbcGF0dGVybl0pIHtcbiAgICBwYXR0ZXJuQ2FjaGVbcGF0dGVybl0gPSB7fTtcbiAgfVxuXG4gIGlmICghcGF0dGVybkNhY2hlW3BhdHRlcm5dW2ZsYWdzXSkge1xuICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgaGFzTmFtZWRDYXB0dXJlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmVOYW1lczogW11cbiAgICB9O1xuICAgIHZhciBzY29wZSA9IGRlZmF1bHRTY29wZTtcbiAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgdmFyIHBvcyA9IDA7XG4gICAgdmFyIHJlc3VsdDsgLy8gQ2hlY2sgZm9yIGZsYWctcmVsYXRlZCBlcnJvcnMsIGFuZCBzdHJpcC9hcHBseSBmbGFncyBpbiBhIGxlYWRpbmcgbW9kZSBtb2RpZmllclxuXG4gICAgdmFyIGFwcGxpZWQgPSBwcmVwYXJlRmxhZ3MocGF0dGVybiwgZmxhZ3MpO1xuICAgIHZhciBhcHBsaWVkUGF0dGVybiA9IGFwcGxpZWQucGF0dGVybjtcbiAgICB2YXIgYXBwbGllZEZsYWdzID0gYXBwbGllZC5mbGFnczsgLy8gVXNlIFhSZWdFeHAncyB0b2tlbnMgdG8gdHJhbnNsYXRlIHRoZSBwYXR0ZXJuIHRvIGEgbmF0aXZlIHJlZ2V4IHBhdHRlcm4uXG4gICAgLy8gYGFwcGxpZWRQYXR0ZXJuLmxlbmd0aGAgbWF5IGNoYW5nZSBvbiBlYWNoIGl0ZXJhdGlvbiBpZiB0b2tlbnMgdXNlIGByZXBhcnNlYFxuXG4gICAgd2hpbGUgKHBvcyA8IGFwcGxpZWRQYXR0ZXJuLmxlbmd0aCkge1xuICAgICAgZG8ge1xuICAgICAgICAvLyBDaGVjayBmb3IgY3VzdG9tIHRva2VucyBhdCB0aGUgY3VycmVudCBwb3NpdGlvblxuICAgICAgICByZXN1bHQgPSBydW5Ub2tlbnMoYXBwbGllZFBhdHRlcm4sIGFwcGxpZWRGbGFncywgcG9zLCBzY29wZSwgY29udGV4dCk7IC8vIElmIHRoZSBtYXRjaGVkIHRva2VuIHVzZWQgdGhlIGByZXBhcnNlYCBvcHRpb24sIHNwbGljZSBpdHMgb3V0cHV0IGludG8gdGhlXG4gICAgICAgIC8vIHBhdHRlcm4gYmVmb3JlIHJ1bm5pbmcgdG9rZW5zIGFnYWluIGF0IHRoZSBzYW1lIHBvc2l0aW9uXG5cbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQucmVwYXJzZSkge1xuICAgICAgICAgIGFwcGxpZWRQYXR0ZXJuID0gYXBwbGllZFBhdHRlcm4uc2xpY2UoMCwgcG9zKSArIHJlc3VsdC5vdXRwdXQgKyBhcHBsaWVkUGF0dGVybi5zbGljZShwb3MgKyByZXN1bHQubWF0Y2hMZW5ndGgpO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChyZXN1bHQgJiYgcmVzdWx0LnJlcGFyc2UpO1xuXG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIG91dHB1dCArPSByZXN1bHQub3V0cHV0O1xuICAgICAgICBwb3MgKz0gcmVzdWx0Lm1hdGNoTGVuZ3RoIHx8IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBHZXQgdGhlIG5hdGl2ZSB0b2tlbiBhdCB0aGUgY3VycmVudCBwb3NpdGlvblxuICAgICAgICB2YXIgX1hSZWdFeHAkZXhlYyA9IFhSZWdFeHAuZXhlYyhhcHBsaWVkUGF0dGVybiwgbmF0aXZlVG9rZW5zW3Njb3BlXSwgcG9zLCAnc3RpY2t5JyksXG4gICAgICAgICAgICBfWFJlZ0V4cCRleGVjMiA9IF9zbGljZWRUb0FycmF5KF9YUmVnRXhwJGV4ZWMsIDEpLFxuICAgICAgICAgICAgdG9rZW4gPSBfWFJlZ0V4cCRleGVjMlswXTtcblxuICAgICAgICBvdXRwdXQgKz0gdG9rZW47XG4gICAgICAgIHBvcyArPSB0b2tlbi5sZW5ndGg7XG5cbiAgICAgICAgaWYgKHRva2VuID09PSAnWycgJiYgc2NvcGUgPT09IGRlZmF1bHRTY29wZSkge1xuICAgICAgICAgIHNjb3BlID0gY2xhc3NTY29wZTtcbiAgICAgICAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ10nICYmIHNjb3BlID09PSBjbGFzc1Njb3BlKSB7XG4gICAgICAgICAgc2NvcGUgPSBkZWZhdWx0U2NvcGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXR0ZXJuQ2FjaGVbcGF0dGVybl1bZmxhZ3NdID0ge1xuICAgICAgLy8gVXNlIGJhc2ljIGNsZWFudXAgdG8gY29sbGFwc2UgcmVwZWF0ZWQgZW1wdHkgZ3JvdXBzIGxpa2UgYCg/OikoPzopYCB0byBgKD86KWAuIEVtcHR5XG4gICAgICAvLyBncm91cHMgYXJlIHNvbWV0aW1lcyBpbnNlcnRlZCBkdXJpbmcgcmVnZXggdHJhbnNwaWxhdGlvbiBpbiBvcmRlciB0byBrZWVwIHRva2Vuc1xuICAgICAgLy8gc2VwYXJhdGVkLiBIb3dldmVyLCBtb3JlIHRoYW4gb25lIGVtcHR5IGdyb3VwIGluIGEgcm93IGlzIG5ldmVyIG5lZWRlZC5cbiAgICAgIHBhdHRlcm46IG5hdGl2LnJlcGxhY2UuY2FsbChvdXRwdXQsIC8oPzpcXChcXD86XFwpKSsvZywgJyg/OiknKSxcbiAgICAgIC8vIFN0cmlwIGFsbCBidXQgbmF0aXZlIGZsYWdzXG4gICAgICBmbGFnczogbmF0aXYucmVwbGFjZS5jYWxsKGFwcGxpZWRGbGFncywgL1teZ2ltdXldKy9nLCAnJyksXG4gICAgICAvLyBgY29udGV4dC5jYXB0dXJlTmFtZXNgIGhhcyBhbiBpdGVtIGZvciBlYWNoIGNhcHR1cmluZyBncm91cCwgZXZlbiBpZiB1bm5hbWVkXG4gICAgICBjYXB0dXJlczogY29udGV4dC5oYXNOYW1lZENhcHR1cmUgPyBjb250ZXh0LmNhcHR1cmVOYW1lcyA6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgdmFyIGdlbmVyYXRlZCA9IHBhdHRlcm5DYWNoZVtwYXR0ZXJuXVtmbGFnc107XG4gIHJldHVybiBhdWdtZW50KG5ldyBSZWdFeHAoZ2VuZXJhdGVkLnBhdHRlcm4sIGdlbmVyYXRlZC5mbGFncyksIGdlbmVyYXRlZC5jYXB0dXJlcywgcGF0dGVybiwgZmxhZ3MpO1xufSAvLyBBZGQgYFJlZ0V4cC5wcm90b3R5cGVgIHRvIHRoZSBwcm90b3R5cGUgY2hhaW5cblxuXG5YUmVnRXhwLnByb3RvdHlwZSA9IC8oPzopLzsgLy8gPT0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLT09XG4vLyBQdWJsaWMgcHJvcGVydGllc1xuLy8gPT0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLT09XG5cbi8qKlxuICogVGhlIFhSZWdFeHAgdmVyc2lvbiBudW1iZXIgYXMgYSBzdHJpbmcgY29udGFpbmluZyB0aHJlZSBkb3Qtc2VwYXJhdGVkIHBhcnRzLiBGb3IgZXhhbXBsZSxcbiAqICcyLjAuMC1iZXRhLTMnLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBYUmVnRXhwXG4gKiBAdHlwZSBTdHJpbmdcbiAqL1xuXG5YUmVnRXhwLnZlcnNpb24gPSAnNC4yLjAnOyAvLyA9PS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPT1cbi8vIFB1YmxpYyBtZXRob2RzXG4vLyA9PS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPT1cbi8vIEludGVudGlvbmFsbHkgdW5kb2N1bWVudGVkOyB1c2VkIGluIHRlc3RzIGFuZCBhZGRvbnNcblxuWFJlZ0V4cC5fY2xpcER1cGxpY2F0ZXMgPSBjbGlwRHVwbGljYXRlcztcblhSZWdFeHAuX2hhc05hdGl2ZUZsYWcgPSBoYXNOYXRpdmVGbGFnO1xuWFJlZ0V4cC5fZGVjID0gZGVjO1xuWFJlZ0V4cC5faGV4ID0gaGV4O1xuWFJlZ0V4cC5fcGFkNCA9IHBhZDQ7XG4vKipcbiAqIEV4dGVuZHMgWFJlZ0V4cCBzeW50YXggYW5kIGFsbG93cyBjdXN0b20gZmxhZ3MuIFRoaXMgaXMgdXNlZCBpbnRlcm5hbGx5IGFuZCBjYW4gYmUgdXNlZCB0b1xuICogY3JlYXRlIFhSZWdFeHAgYWRkb25zLiBJZiBtb3JlIHRoYW4gb25lIHRva2VuIGNhbiBtYXRjaCB0aGUgc2FtZSBzdHJpbmcsIHRoZSBsYXN0IGFkZGVkIHdpbnMuXG4gKlxuICogQG1lbWJlck9mIFhSZWdFeHBcbiAqIEBwYXJhbSB7UmVnRXhwfSByZWdleCBSZWdleCBvYmplY3QgdGhhdCBtYXRjaGVzIHRoZSBuZXcgdG9rZW4uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIG5ldyBwYXR0ZXJuIHN0cmluZyAodXNpbmcgbmF0aXZlIHJlZ2V4IHN5bnRheClcbiAqICAgdG8gcmVwbGFjZSB0aGUgbWF0Y2hlZCB0b2tlbiB3aXRoaW4gYWxsIGZ1dHVyZSBYUmVnRXhwIHJlZ2V4ZXMuIEhhcyBhY2Nlc3MgdG8gcGVyc2lzdGVudFxuICogICBwcm9wZXJ0aWVzIG9mIHRoZSByZWdleCBiZWluZyBidWlsdCwgdGhyb3VnaCBgdGhpc2AuIEludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAgIC0gVGhlIG1hdGNoIGFycmF5LCB3aXRoIG5hbWVkIGJhY2tyZWZlcmVuY2UgcHJvcGVydGllcy5cbiAqICAgLSBUaGUgcmVnZXggc2NvcGUgd2hlcmUgdGhlIG1hdGNoIHdhcyBmb3VuZDogJ2RlZmF1bHQnIG9yICdjbGFzcycuXG4gKiAgIC0gVGhlIGZsYWdzIHVzZWQgYnkgdGhlIHJlZ2V4LCBpbmNsdWRpbmcgYW55IGZsYWdzIGluIGEgbGVhZGluZyBtb2RlIG1vZGlmaWVyLlxuICogICBUaGUgaGFuZGxlciBmdW5jdGlvbiBiZWNvbWVzIHBhcnQgb2YgdGhlIFhSZWdFeHAgY29uc3RydWN0aW9uIHByb2Nlc3MsIHNvIGJlIGNhcmVmdWwgbm90IHRvXG4gKiAgIGNvbnN0cnVjdCBYUmVnRXhwcyB3aXRoaW4gdGhlIGZ1bmN0aW9uIG9yIHlvdSB3aWxsIHRyaWdnZXIgaW5maW5pdGUgcmVjdXJzaW9uLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdCB3aXRoIG9wdGlvbmFsIHByb3BlcnRpZXM6XG4gKiAgIC0gYHNjb3BlYCB7U3RyaW5nfSBTY29wZSB3aGVyZSB0aGUgdG9rZW4gYXBwbGllczogJ2RlZmF1bHQnLCAnY2xhc3MnLCBvciAnYWxsJy5cbiAqICAgLSBgZmxhZ2Age1N0cmluZ30gU2luZ2xlLWNoYXJhY3RlciBmbGFnIHRoYXQgdHJpZ2dlcnMgdGhlIHRva2VuLiBUaGlzIGFsc28gcmVnaXN0ZXJzIHRoZVxuICogICAgIGZsYWcsIHdoaWNoIHByZXZlbnRzIFhSZWdFeHAgZnJvbSB0aHJvd2luZyBhbiAndW5rbm93biBmbGFnJyBlcnJvciB3aGVuIHRoZSBmbGFnIGlzIHVzZWQuXG4gKiAgIC0gYG9wdGlvbmFsRmxhZ3NgIHtTdHJpbmd9IEFueSBjdXN0b20gZmxhZ3MgY2hlY2tlZCBmb3Igd2l0aGluIHRoZSB0b2tlbiBgaGFuZGxlcmAgdGhhdCBhcmVcbiAqICAgICBub3QgcmVxdWlyZWQgdG8gdHJpZ2dlciB0aGUgdG9rZW4uIFRoaXMgcmVnaXN0ZXJzIHRoZSBmbGFncywgdG8gcHJldmVudCBYUmVnRXhwIGZyb21cbiAqICAgICB0aHJvd2luZyBhbiAndW5rbm93biBmbGFnJyBlcnJvciB3aGVuIGFueSBvZiB0aGUgZmxhZ3MgYXJlIHVzZWQuXG4gKiAgIC0gYHJlcGFyc2VgIHtCb29sZWFufSBXaGV0aGVyIHRoZSBgaGFuZGxlcmAgZnVuY3Rpb24ncyBvdXRwdXQgc2hvdWxkIG5vdCBiZSB0cmVhdGVkIGFzXG4gKiAgICAgZmluYWwsIGFuZCBpbnN0ZWFkIGJlIHJlcGFyc2VhYmxlIGJ5IG90aGVyIHRva2VucyAoaW5jbHVkaW5nIHRoZSBjdXJyZW50IHRva2VuKS4gQWxsb3dzXG4gKiAgICAgdG9rZW4gY2hhaW5pbmcgb3IgZGVmZXJyaW5nLlxuICogICAtIGBsZWFkQ2hhcmAge1N0cmluZ30gU2luZ2xlIGNoYXJhY3RlciB0aGF0IG9jY3VycyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFueSBzdWNjZXNzZnVsIG1hdGNoXG4gKiAgICAgb2YgdGhlIHRva2VuIChub3QgYWx3YXlzIGFwcGxpY2FibGUpLiBUaGlzIGRvZXNuJ3QgY2hhbmdlIHRoZSBiZWhhdmlvciBvZiB0aGUgdG9rZW4gdW5sZXNzXG4gKiAgICAgeW91IHByb3ZpZGUgYW4gZXJyb25lb3VzIHZhbHVlLiBIb3dldmVyLCBwcm92aWRpbmcgaXQgY2FuIGluY3JlYXNlIHRoZSB0b2tlbidzIHBlcmZvcm1hbmNlXG4gKiAgICAgc2luY2UgdGhlIHRva2VuIGNhbiBiZSBza2lwcGVkIGF0IGFueSBwb3NpdGlvbnMgd2hlcmUgdGhpcyBjaGFyYWN0ZXIgZG9lc24ndCBhcHBlYXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEJhc2ljIHVzYWdlOiBBZGQgXFxhIGZvciB0aGUgQUxFUlQgY29udHJvbCBjb2RlXG4gKiBYUmVnRXhwLmFkZFRva2VuKFxuICogICAvXFxcXGEvLFxuICogICAoKSA9PiAnXFxcXHgwNycsXG4gKiAgIHtzY29wZTogJ2FsbCd9XG4gKiApO1xuICogWFJlZ0V4cCgnXFxcXGFbXFxcXGEtXFxcXG5dKycpLnRlc3QoJ1xceDA3XFxuXFx4MDcnKTsgLy8gLT4gdHJ1ZVxuICpcbiAqIC8vIEFkZCB0aGUgVSAodW5ncmVlZHkpIGZsYWcgZnJvbSBQQ1JFIGFuZCBSRTIsIHdoaWNoIHJldmVyc2VzIGdyZWVkeSBhbmQgbGF6eSBxdWFudGlmaWVycy5cbiAqIC8vIFNpbmNlIGBzY29wZWAgaXMgbm90IHNwZWNpZmllZCwgaXQgdXNlcyAnZGVmYXVsdCcgKGkuZS4sIHRyYW5zZm9ybWF0aW9ucyBhcHBseSBvdXRzaWRlIG9mXG4gKiAvLyBjaGFyYWN0ZXIgY2xhc3NlcyBvbmx5KVxuICogWFJlZ0V4cC5hZGRUb2tlbihcbiAqICAgLyhbPyorXXx7XFxkKyg/OixcXGQqKT99KShcXD8/KS8sXG4gKiAgIChtYXRjaCkgPT4gYCR7bWF0Y2hbMV19JHttYXRjaFsyXSA/ICcnIDogJz8nfWAsXG4gKiAgIHtmbGFnOiAnVSd9XG4gKiApO1xuICogWFJlZ0V4cCgnYSsnLCAnVScpLmV4ZWMoJ2FhYScpWzBdOyAvLyAtPiAnYSdcbiAqIFhSZWdFeHAoJ2ErPycsICdVJykuZXhlYygnYWFhJylbMF07IC8vIC0+ICdhYWEnXG4gKi9cblxuWFJlZ0V4cC5hZGRUb2tlbiA9IGZ1bmN0aW9uIChyZWdleCwgaGFuZGxlciwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIG9wdGlvbmFsRmxhZ3MgPSBfb3B0aW9ucy5vcHRpb25hbEZsYWdzO1xuXG4gIGlmIChvcHRpb25zLmZsYWcpIHtcbiAgICByZWdpc3RlckZsYWcob3B0aW9ucy5mbGFnKTtcbiAgfVxuXG4gIGlmIChvcHRpb25hbEZsYWdzKSB7XG4gICAgb3B0aW9uYWxGbGFncyA9IG5hdGl2LnNwbGl0LmNhbGwob3B0aW9uYWxGbGFncywgJycpO1xuICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IG9wdGlvbmFsRmxhZ3NbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgdmFyIGZsYWcgPSBfc3RlcDIudmFsdWU7XG4gICAgICAgIHJlZ2lzdGVyRmxhZyhmbGFnKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQWRkIHRvIHRoZSBwcml2YXRlIGxpc3Qgb2Ygc3ludGF4IHRva2Vuc1xuXG5cbiAgdG9rZW5zLnB1c2goe1xuICAgIHJlZ2V4OiBjb3B5UmVnZXgocmVnZXgsIHtcbiAgICAgIGFkZEc6IHRydWUsXG4gICAgICBhZGRZOiBoYXNOYXRpdmVZLFxuICAgICAgaXNJbnRlcm5hbE9ubHk6IHRydWVcbiAgICB9KSxcbiAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlIHx8IGRlZmF1bHRTY29wZSxcbiAgICBmbGFnOiBvcHRpb25zLmZsYWcsXG4gICAgcmVwYXJzZTogb3B0aW9ucy5yZXBhcnNlLFxuICAgIGxlYWRDaGFyOiBvcHRpb25zLmxlYWRDaGFyXG4gIH0pOyAvLyBSZXNldCB0aGUgcGF0dGVybiBjYWNoZSB1c2VkIGJ5IHRoZSBgWFJlZ0V4cGAgY29uc3RydWN0b3IsIHNpbmNlIHRoZSBzYW1lIHBhdHRlcm4gYW5kIGZsYWdzXG4gIC8vIG1pZ2h0IG5vdyBwcm9kdWNlIGRpZmZlcmVudCByZXN1bHRzXG5cbiAgWFJlZ0V4cC5jYWNoZS5mbHVzaCgncGF0dGVybnMnKTtcbn07XG4vKipcbiAqIENhY2hlcyBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYFhSZWdFeHAocGF0dGVybiwgZmxhZ3MpYC4gT24gYW55IHN1YnNlcXVlbnQgY2FsbCB3aXRoXG4gKiB0aGUgc2FtZSBwYXR0ZXJuIGFuZCBmbGFnIGNvbWJpbmF0aW9uLCB0aGUgY2FjaGVkIGNvcHkgb2YgdGhlIHJlZ2V4IGlzIHJldHVybmVkLlxuICpcbiAqIEBtZW1iZXJPZiBYUmVnRXhwXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVybiBSZWdleCBwYXR0ZXJuIHN0cmluZy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbZmxhZ3NdIEFueSBjb21iaW5hdGlvbiBvZiBYUmVnRXhwIGZsYWdzLlxuICogQHJldHVybnMge1JlZ0V4cH0gQ2FjaGVkIFhSZWdFeHAgb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiB3aGlsZSAobWF0Y2ggPSBYUmVnRXhwLmNhY2hlKCcuJywgJ2dzJykuZXhlYyhzdHIpKSB7XG4gKiAgIC8vIFRoZSByZWdleCBpcyBjb21waWxlZCBvbmNlIG9ubHlcbiAqIH1cbiAqL1xuXG5cblhSZWdFeHAuY2FjaGUgPSBmdW5jdGlvbiAocGF0dGVybiwgZmxhZ3MpIHtcbiAgaWYgKCFyZWdleENhY2hlW3BhdHRlcm5dKSB7XG4gICAgcmVnZXhDYWNoZVtwYXR0ZXJuXSA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHJlZ2V4Q2FjaGVbcGF0dGVybl1bZmxhZ3NdIHx8IChyZWdleENhY2hlW3BhdHRlcm5dW2ZsYWdzXSA9IFhSZWdFeHAocGF0dGVybiwgZmxhZ3MpKTtcbn07IC8vIEludGVudGlvbmFsbHkgdW5kb2N1bWVudGVkOyB1c2VkIGluIHRlc3RzXG5cblxuWFJlZ0V4cC5jYWNoZS5mbHVzaCA9IGZ1bmN0aW9uIChjYWNoZU5hbWUpIHtcbiAgaWYgKGNhY2hlTmFtZSA9PT0gJ3BhdHRlcm5zJykge1xuICAgIC8vIEZsdXNoIHRoZSBwYXR0ZXJuIGNhY2hlIHVzZWQgYnkgdGhlIGBYUmVnRXhwYCBjb25zdHJ1Y3RvclxuICAgIHBhdHRlcm5DYWNoZSA9IHt9O1xuICB9IGVsc2Uge1xuICAgIC8vIEZsdXNoIHRoZSByZWdleCBjYWNoZSBwb3B1bGF0ZWQgYnkgYFhSZWdFeHAuY2FjaGVgXG4gICAgcmVnZXhDYWNoZSA9IHt9O1xuICB9XG59O1xuLyoqXG4gKiBFc2NhcGVzIGFueSByZWd1bGFyIGV4cHJlc3Npb24gbWV0YWNoYXJhY3RlcnMsIGZvciB1c2Ugd2hlbiBtYXRjaGluZyBsaXRlcmFsIHN0cmluZ3MuIFRoZSByZXN1bHRcbiAqIGNhbiBzYWZlbHkgYmUgdXNlZCBhdCBhbnkgcG9pbnQgd2l0aGluIGEgcmVnZXggdGhhdCB1c2VzIGFueSBmbGFncy5cbiAqXG4gKiBAbWVtYmVyT2YgWFJlZ0V4cFxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBTdHJpbmcgdG8gZXNjYXBlLlxuICogQHJldHVybnMge1N0cmluZ30gU3RyaW5nIHdpdGggcmVnZXggbWV0YWNoYXJhY3RlcnMgZXNjYXBlZC5cbiAqIEBleGFtcGxlXG4gKlxuICogWFJlZ0V4cC5lc2NhcGUoJ0VzY2FwZWQ/IDwuPicpO1xuICogLy8gLT4gJ0VzY2FwZWRcXD9cXCA8XFwuPidcbiAqL1xuXG5cblhSZWdFeHAuZXNjYXBlID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gbmF0aXYucmVwbGFjZS5jYWxsKHRvT2JqZWN0KHN0ciksIC9bLVxcW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJyk7XG59O1xuLyoqXG4gKiBFeGVjdXRlcyBhIHJlZ2V4IHNlYXJjaCBpbiBhIHNwZWNpZmllZCBzdHJpbmcuIFJldHVybnMgYSBtYXRjaCBhcnJheSBvciBgbnVsbGAuIElmIHRoZSBwcm92aWRlZFxuICogcmVnZXggdXNlcyBuYW1lZCBjYXB0dXJlLCBuYW1lZCBiYWNrcmVmZXJlbmNlIHByb3BlcnRpZXMgYXJlIGluY2x1ZGVkIG9uIHRoZSBtYXRjaCBhcnJheS5cbiAqIE9wdGlvbmFsIGBwb3NgIGFuZCBgc3RpY2t5YCBhcmd1bWVudHMgc3BlY2lmeSB0aGUgc2VhcmNoIHN0YXJ0IHBvc2l0aW9uLCBhbmQgd2hldGhlciB0aGUgbWF0Y2hcbiAqIG11c3Qgc3RhcnQgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBvbmx5LiBUaGUgYGxhc3RJbmRleGAgcHJvcGVydHkgb2YgdGhlIHByb3ZpZGVkIHJlZ2V4IGlzIG5vdFxuICogdXNlZCwgYnV0IGlzIHVwZGF0ZWQgZm9yIGNvbXBhdGliaWxpdHkuIEFsc28gZml4ZXMgYnJvd3NlciBidWdzIGNvbXBhcmVkIHRvIHRoZSBuYXRpdmVcbiAqIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIGFuZCBjYW4gYmUgdXNlZCByZWxpYWJseSBjcm9zcy1icm93c2VyLlxuICpcbiAqIEBtZW1iZXJPZiBYUmVnRXhwXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFN0cmluZyB0byBzZWFyY2guXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXggUmVnZXggdG8gc2VhcmNoIHdpdGguXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvcz0wXSBaZXJvLWJhc2VkIGluZGV4IGF0IHdoaWNoIHRvIHN0YXJ0IHRoZSBzZWFyY2guXG4gKiBAcGFyYW0ge0Jvb2xlYW58U3RyaW5nfSBbc3RpY2t5PWZhbHNlXSBXaGV0aGVyIHRoZSBtYXRjaCBtdXN0IHN0YXJ0IGF0IHRoZSBzcGVjaWZpZWQgcG9zaXRpb25cbiAqICAgb25seS4gVGhlIHN0cmluZyBgJ3N0aWNreSdgIGlzIGFjY2VwdGVkIGFzIGFuIGFsdGVybmF0aXZlIHRvIGB0cnVlYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gTWF0Y2ggYXJyYXkgd2l0aCBuYW1lZCBiYWNrcmVmZXJlbmNlIHByb3BlcnRpZXMsIG9yIGBudWxsYC5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQmFzaWMgdXNlLCB3aXRoIG5hbWVkIGJhY2tyZWZlcmVuY2VcbiAqIGxldCBtYXRjaCA9IFhSZWdFeHAuZXhlYygnVSsyNjIwJywgWFJlZ0V4cCgnVVxcXFwrKD88aGV4PlswLTlBLUZdezR9KScpKTtcbiAqIG1hdGNoLmhleDsgLy8gLT4gJzI2MjAnXG4gKlxuICogLy8gV2l0aCBwb3MgYW5kIHN0aWNreSwgaW4gYSBsb29wXG4gKiBsZXQgcG9zID0gMiwgcmVzdWx0ID0gW10sIG1hdGNoO1xuICogd2hpbGUgKG1hdGNoID0gWFJlZ0V4cC5leGVjKCc8MT48Mj48Mz48ND41PDY+JywgLzwoXFxkKT4vLCBwb3MsICdzdGlja3knKSkge1xuICogICByZXN1bHQucHVzaChtYXRjaFsxXSk7XG4gKiAgIHBvcyA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICogfVxuICogLy8gcmVzdWx0IC0+IFsnMicsICczJywgJzQnXVxuICovXG5cblxuWFJlZ0V4cC5leGVjID0gZnVuY3Rpb24gKHN0ciwgcmVnZXgsIHBvcywgc3RpY2t5KSB7XG4gIHZhciBjYWNoZUtleSA9ICdnJztcbiAgdmFyIGFkZFkgPSBmYWxzZTtcbiAgdmFyIGZha2VZID0gZmFsc2U7XG4gIHZhciBtYXRjaDtcbiAgYWRkWSA9IGhhc05hdGl2ZVkgJiYgISEoc3RpY2t5IHx8IHJlZ2V4LnN0aWNreSAmJiBzdGlja3kgIT09IGZhbHNlKTtcblxuICBpZiAoYWRkWSkge1xuICAgIGNhY2hlS2V5ICs9ICd5JztcbiAgfSBlbHNlIGlmIChzdGlja3kpIHtcbiAgICAvLyBTaW11bGF0ZSBzdGlja3kgbWF0Y2hpbmcgYnkgYXBwZW5kaW5nIGFuIGVtcHR5IGNhcHR1cmUgdG8gdGhlIG9yaWdpbmFsIHJlZ2V4LiBUaGVcbiAgICAvLyByZXN1bHRpbmcgcmVnZXggd2lsbCBzdWNjZWVkIG5vIG1hdHRlciB3aGF0IGF0IHRoZSBjdXJyZW50IGluZGV4IChzZXQgd2l0aCBgbGFzdEluZGV4YCksXG4gICAgLy8gYW5kIHdpbGwgbm90IHNlYXJjaCB0aGUgcmVzdCBvZiB0aGUgc3ViamVjdCBzdHJpbmcuIFdlJ2xsIGtub3cgdGhhdCB0aGUgb3JpZ2luYWwgcmVnZXhcbiAgICAvLyBoYXMgZmFpbGVkIGlmIHRoYXQgbGFzdCBjYXB0dXJlIGlzIGAnJ2AgcmF0aGVyIHRoYW4gYHVuZGVmaW5lZGAgKGkuZS4sIGlmIHRoYXQgbGFzdFxuICAgIC8vIGNhcHR1cmUgcGFydGljaXBhdGVkIGluIHRoZSBtYXRjaCkuXG4gICAgZmFrZVkgPSB0cnVlO1xuICAgIGNhY2hlS2V5ICs9ICdGYWtlWSc7XG4gIH1cblxuICByZWdleFtSRUdFWF9EQVRBXSA9IHJlZ2V4W1JFR0VYX0RBVEFdIHx8IHt9OyAvLyBTaGFyZXMgY2FjaGVkIGNvcGllcyB3aXRoIGBYUmVnRXhwLm1hdGNoYC9gcmVwbGFjZWBcblxuICB2YXIgcjIgPSByZWdleFtSRUdFWF9EQVRBXVtjYWNoZUtleV0gfHwgKHJlZ2V4W1JFR0VYX0RBVEFdW2NhY2hlS2V5XSA9IGNvcHlSZWdleChyZWdleCwge1xuICAgIGFkZEc6IHRydWUsXG4gICAgYWRkWTogYWRkWSxcbiAgICBzb3VyY2U6IGZha2VZID8gXCJcIi5jb25jYXQocmVnZXguc291cmNlLCBcInwoKVwiKSA6IHVuZGVmaW5lZCxcbiAgICByZW1vdmVZOiBzdGlja3kgPT09IGZhbHNlLFxuICAgIGlzSW50ZXJuYWxPbmx5OiB0cnVlXG4gIH0pKTtcbiAgcG9zID0gcG9zIHx8IDA7XG4gIHIyLmxhc3RJbmRleCA9IHBvczsgLy8gRml4ZWQgYGV4ZWNgIHJlcXVpcmVkIGZvciBgbGFzdEluZGV4YCBmaXgsIG5hbWVkIGJhY2tyZWZlcmVuY2VzLCBldGMuXG5cbiAgbWF0Y2ggPSBmaXhlZC5leGVjLmNhbGwocjIsIHN0cik7IC8vIEdldCByaWQgb2YgdGhlIGNhcHR1cmUgYWRkZWQgYnkgdGhlIHBzZXVkby1zdGlja3kgbWF0Y2hlciBpZiBuZWVkZWQuIEFuIGVtcHR5IHN0cmluZyBtZWFuc1xuICAvLyB0aGUgb3JpZ2luYWwgcmVnZXhwIGZhaWxlZCAoc2VlIGFib3ZlKS5cblxuICBpZiAoZmFrZVkgJiYgbWF0Y2ggJiYgbWF0Y2gucG9wKCkgPT09ICcnKSB7XG4gICAgbWF0Y2ggPSBudWxsO1xuICB9XG5cbiAgaWYgKHJlZ2V4Lmdsb2JhbCkge1xuICAgIHJlZ2V4Lmxhc3RJbmRleCA9IG1hdGNoID8gcjIubGFzdEluZGV4IDogMDtcbiAgfVxuXG4gIHJldHVybiBtYXRjaDtcbn07XG4vKipcbiAqIEV4ZWN1dGVzIGEgcHJvdmlkZWQgZnVuY3Rpb24gb25jZSBwZXIgcmVnZXggbWF0Y2guIFNlYXJjaGVzIGFsd2F5cyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZVxuICogc3RyaW5nIGFuZCBjb250aW51ZSB1bnRpbCB0aGUgZW5kLCByZWdhcmRsZXNzIG9mIHRoZSBzdGF0ZSBvZiB0aGUgcmVnZXgncyBgZ2xvYmFsYCBwcm9wZXJ0eSBhbmRcbiAqIGluaXRpYWwgYGxhc3RJbmRleGAuXG4gKlxuICogQG1lbWJlck9mIFhSZWdFeHBcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7UmVnRXhwfSByZWdleCBSZWdleCB0byBzZWFyY2ggd2l0aC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgZm9yIGVhY2ggbWF0Y2guIEludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAqICAgLSBUaGUgbWF0Y2ggYXJyYXksIHdpdGggbmFtZWQgYmFja3JlZmVyZW5jZSBwcm9wZXJ0aWVzLlxuICogICAtIFRoZSB6ZXJvLWJhc2VkIG1hdGNoIGluZGV4LlxuICogICAtIFRoZSBzdHJpbmcgYmVpbmcgdHJhdmVyc2VkLlxuICogICAtIFRoZSByZWdleCBvYmplY3QgYmVpbmcgdXNlZCB0byB0cmF2ZXJzZSB0aGUgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBFeHRyYWN0cyBldmVyeSBvdGhlciBkaWdpdCBmcm9tIGEgc3RyaW5nXG4gKiBjb25zdCBldmVucyA9IFtdO1xuICogWFJlZ0V4cC5mb3JFYWNoKCcxYTIzNDUnLCAvXFxkLywgKG1hdGNoLCBpKSA9PiB7XG4gKiAgIGlmIChpICUgMikgZXZlbnMucHVzaCgrbWF0Y2hbMF0pO1xuICogfSk7XG4gKiAvLyBldmVucyAtPiBbMiwgNF1cbiAqL1xuXG5cblhSZWdFeHAuZm9yRWFjaCA9IGZ1bmN0aW9uIChzdHIsIHJlZ2V4LCBjYWxsYmFjaykge1xuICB2YXIgcG9zID0gMDtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIG1hdGNoO1xuXG4gIHdoaWxlIChtYXRjaCA9IFhSZWdFeHAuZXhlYyhzdHIsIHJlZ2V4LCBwb3MpKSB7XG4gICAgLy8gQmVjYXVzZSBgcmVnZXhgIGlzIHByb3ZpZGVkIHRvIGBjYWxsYmFja2AsIHRoZSBmdW5jdGlvbiBjb3VsZCB1c2UgdGhlIGRlcHJlY2F0ZWQvXG4gICAgLy8gbm9uc3RhbmRhcmQgYFJlZ0V4cC5wcm90b3R5cGUuY29tcGlsZWAgdG8gbXV0YXRlIHRoZSByZWdleC4gSG93ZXZlciwgc2luY2UgYFhSZWdFeHAuZXhlY2BcbiAgICAvLyBkb2Vzbid0IHVzZSBgbGFzdEluZGV4YCB0byBzZXQgdGhlIHNlYXJjaCBwb3NpdGlvbiwgdGhpcyBjYW4ndCBsZWFkIHRvIGFuIGluZmluaXRlIGxvb3AsXG4gICAgLy8gYXQgbGVhc3QuIEFjdHVhbGx5LCBiZWNhdXNlIG9mIHRoZSB3YXkgYFhSZWdFeHAuZXhlY2AgY2FjaGVzIGdsb2JhbGl6ZWQgdmVyc2lvbnMgb2ZcbiAgICAvLyByZWdleGVzLCBtdXRhdGluZyB0aGUgcmVnZXggd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBpdGVyYXRpb24gb3IgbWF0Y2hlZCBzdHJpbmdzLFxuICAgIC8vIHdoaWNoIGlzIGEgbmljZSBzaWRlIGVmZmVjdCB0aGF0IGJyaW5ncyBleHRyYSBzYWZldHkuXG4gICAgY2FsbGJhY2sobWF0Y2gsICsraSwgc3RyLCByZWdleCk7XG4gICAgcG9zID0gbWF0Y2guaW5kZXggKyAobWF0Y2hbMF0ubGVuZ3RoIHx8IDEpO1xuICB9XG59O1xuLyoqXG4gKiBDb3BpZXMgYSByZWdleCBvYmplY3QgYW5kIGFkZHMgZmxhZyBgZ2AuIFRoZSBjb3B5IG1haW50YWlucyBleHRlbmRlZCBkYXRhLCBpcyBhdWdtZW50ZWQgd2l0aFxuICogYFhSZWdFeHAucHJvdG90eXBlYCBwcm9wZXJ0aWVzLCBhbmQgaGFzIGEgZnJlc2ggYGxhc3RJbmRleGAgcHJvcGVydHkgKHNldCB0byB6ZXJvKS4gTmF0aXZlXG4gKiByZWdleGVzIGFyZSBub3QgcmVjb21waWxlZCB1c2luZyBYUmVnRXhwIHN5bnRheC5cbiAqXG4gKiBAbWVtYmVyT2YgWFJlZ0V4cFxuICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4IFJlZ2V4IHRvIGdsb2JhbGl6ZS5cbiAqIEByZXR1cm5zIHtSZWdFeHB9IENvcHkgb2YgdGhlIHByb3ZpZGVkIHJlZ2V4IHdpdGggZmxhZyBgZ2AgYWRkZWQuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGNvbnN0IGdsb2JhbENvcHkgPSBYUmVnRXhwLmdsb2JhbGl6ZSgvcmVnZXgvKTtcbiAqIGdsb2JhbENvcHkuZ2xvYmFsOyAvLyAtPiB0cnVlXG4gKi9cblxuXG5YUmVnRXhwLmdsb2JhbGl6ZSA9IGZ1bmN0aW9uIChyZWdleCkge1xuICByZXR1cm4gY29weVJlZ2V4KHJlZ2V4LCB7XG4gICAgYWRkRzogdHJ1ZVxuICB9KTtcbn07XG4vKipcbiAqIEluc3RhbGxzIG9wdGlvbmFsIGZlYXR1cmVzIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIG9wdGlvbnMuIENhbiBiZSB1bmRvbmUgdXNpbmdcbiAqIGBYUmVnRXhwLnVuaW5zdGFsbGAuXG4gKlxuICogQG1lbWJlck9mIFhSZWdFeHBcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gb3B0aW9ucyBPcHRpb25zIG9iamVjdCBvciBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIFdpdGggYW4gb3B0aW9ucyBvYmplY3RcbiAqIFhSZWdFeHAuaW5zdGFsbCh7XG4gKiAgIC8vIEVuYWJsZXMgc3VwcG9ydCBmb3IgYXN0cmFsIGNvZGUgcG9pbnRzIGluIFVuaWNvZGUgYWRkb25zIChpbXBsaWNpdGx5IHNldHMgZmxhZyBBKVxuICogICBhc3RyYWw6IHRydWUsXG4gKlxuICogICAvLyBBZGRzIG5hbWVkIGNhcHR1cmUgZ3JvdXBzIHRvIHRoZSBgZ3JvdXBzYCBwcm9wZXJ0eSBvZiBtYXRjaGVzXG4gKiAgIG5hbWVzcGFjaW5nOiB0cnVlXG4gKiB9KTtcbiAqXG4gKiAvLyBXaXRoIGFuIG9wdGlvbnMgc3RyaW5nXG4gKiBYUmVnRXhwLmluc3RhbGwoJ2FzdHJhbCBuYW1lc3BhY2luZycpO1xuICovXG5cblxuWFJlZ0V4cC5pbnN0YWxsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IHByZXBhcmVPcHRpb25zKG9wdGlvbnMpO1xuXG4gIGlmICghZmVhdHVyZXMuYXN0cmFsICYmIG9wdGlvbnMuYXN0cmFsKSB7XG4gICAgc2V0QXN0cmFsKHRydWUpO1xuICB9XG5cbiAgaWYgKCFmZWF0dXJlcy5uYW1lc3BhY2luZyAmJiBvcHRpb25zLm5hbWVzcGFjaW5nKSB7XG4gICAgc2V0TmFtZXNwYWNpbmcodHJ1ZSk7XG4gIH1cbn07XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGFuIGluZGl2aWR1YWwgb3B0aW9uYWwgZmVhdHVyZSBpcyBpbnN0YWxsZWQuXG4gKlxuICogQG1lbWJlck9mIFhSZWdFeHBcbiAqIEBwYXJhbSB7U3RyaW5nfSBmZWF0dXJlIE5hbWUgb2YgdGhlIGZlYXR1cmUgdG8gY2hlY2suIE9uZSBvZjpcbiAqICAgLSBgYXN0cmFsYFxuICogICAtIGBuYW1lc3BhY2luZ2BcbiAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSBmZWF0dXJlIGlzIGluc3RhbGxlZC5cbiAqIEBleGFtcGxlXG4gKlxuICogWFJlZ0V4cC5pc0luc3RhbGxlZCgnYXN0cmFsJyk7XG4gKi9cblxuXG5YUmVnRXhwLmlzSW5zdGFsbGVkID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgcmV0dXJuICEhZmVhdHVyZXNbZmVhdHVyZV07XG59O1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiBhbiBvYmplY3QgaXMgYSByZWdleDsgYGZhbHNlYCBpZiBpdCBpc24ndC4gVGhpcyB3b3JrcyBjb3JyZWN0bHkgZm9yIHJlZ2V4ZXNcbiAqIGNyZWF0ZWQgaW4gYW5vdGhlciBmcmFtZSwgd2hlbiBgaW5zdGFuY2VvZmAgYW5kIGBjb25zdHJ1Y3RvcmAgY2hlY2tzIHdvdWxkIGZhaWwuXG4gKlxuICogQG1lbWJlck9mIFhSZWdFeHBcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgT2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybnMge0Jvb2xlYW59IFdoZXRoZXIgdGhlIG9iamVjdCBpcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogWFJlZ0V4cC5pc1JlZ0V4cCgnc3RyaW5nJyk7IC8vIC0+IGZhbHNlXG4gKiBYUmVnRXhwLmlzUmVnRXhwKC9yZWdleC9pKTsgLy8gLT4gdHJ1ZVxuICogWFJlZ0V4cC5pc1JlZ0V4cChSZWdFeHAoJ14nLCAnbScpKTsgLy8gLT4gdHJ1ZVxuICogWFJlZ0V4cC5pc1JlZ0V4cChYUmVnRXhwKCcoP3MpLicpKTsgLy8gLT4gdHJ1ZVxuICovXG5cblxuWFJlZ0V4cC5pc1JlZ0V4cCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTsgLy8gaXNUeXBlKHZhbHVlLCAnUmVnRXhwJyk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgbWF0Y2hlZCBzdHJpbmcsIG9yIGluIGdsb2JhbCBtb2RlLCBhbiBhcnJheSBjb250YWluaW5nIGFsbCBtYXRjaGVkIHN0cmluZ3MuXG4gKiBUaGlzIGlzIGVzc2VudGlhbGx5IGEgbW9yZSBjb252ZW5pZW50IHJlLWltcGxlbWVudGF0aW9uIG9mIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCB0aGF0IGdpdmVzXG4gKiB0aGUgcmVzdWx0IHR5cGVzIHlvdSBhY3R1YWxseSB3YW50IChzdHJpbmcgaW5zdGVhZCBvZiBgZXhlY2Atc3R5bGUgYXJyYXkgaW4gbWF0Y2gtZmlyc3QgbW9kZSxcbiAqIGFuZCBhbiBlbXB0eSBhcnJheSBpbnN0ZWFkIG9mIGBudWxsYCB3aGVuIG5vIG1hdGNoZXMgYXJlIGZvdW5kIGluIG1hdGNoLWFsbCBtb2RlKS4gSXQgYWxzbyBsZXRzXG4gKiB5b3Ugb3ZlcnJpZGUgZmxhZyBnIGFuZCBpZ25vcmUgYGxhc3RJbmRleGAsIGFuZCBmaXhlcyBicm93c2VyIGJ1Z3MuXG4gKlxuICogQG1lbWJlck9mIFhSZWdFeHBcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7UmVnRXhwfSByZWdleCBSZWdleCB0byBzZWFyY2ggd2l0aC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbc2NvcGU9J29uZSddIFVzZSAnb25lJyB0byByZXR1cm4gdGhlIGZpcnN0IG1hdGNoIGFzIGEgc3RyaW5nLiBVc2UgJ2FsbCcgdG9cbiAqICAgcmV0dXJuIGFuIGFycmF5IG9mIGFsbCBtYXRjaGVkIHN0cmluZ3MuIElmIG5vdCBleHBsaWNpdGx5IHNwZWNpZmllZCBhbmQgYHJlZ2V4YCB1c2VzIGZsYWcgZyxcbiAqICAgYHNjb3BlYCBpcyAnYWxsJy5cbiAqIEByZXR1cm5zIHtTdHJpbmd8QXJyYXl9IEluIG1hdGNoLWZpcnN0IG1vZGU6IEZpcnN0IG1hdGNoIGFzIGEgc3RyaW5nLCBvciBgbnVsbGAuIEluIG1hdGNoLWFsbFxuICogICBtb2RlOiBBcnJheSBvZiBhbGwgbWF0Y2hlZCBzdHJpbmdzLCBvciBhbiBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gTWF0Y2ggZmlyc3RcbiAqIFhSZWdFeHAubWF0Y2goJ2FiYycsIC9cXHcvKTsgLy8gLT4gJ2EnXG4gKiBYUmVnRXhwLm1hdGNoKCdhYmMnLCAvXFx3L2csICdvbmUnKTsgLy8gLT4gJ2EnXG4gKiBYUmVnRXhwLm1hdGNoKCdhYmMnLCAveC9nLCAnb25lJyk7IC8vIC0+IG51bGxcbiAqXG4gKiAvLyBNYXRjaCBhbGxcbiAqIFhSZWdFeHAubWF0Y2goJ2FiYycsIC9cXHcvZyk7IC8vIC0+IFsnYScsICdiJywgJ2MnXVxuICogWFJlZ0V4cC5tYXRjaCgnYWJjJywgL1xcdy8sICdhbGwnKTsgLy8gLT4gWydhJywgJ2InLCAnYyddXG4gKiBYUmVnRXhwLm1hdGNoKCdhYmMnLCAveC8sICdhbGwnKTsgLy8gLT4gW11cbiAqL1xuXG5cblhSZWdFeHAubWF0Y2ggPSBmdW5jdGlvbiAoc3RyLCByZWdleCwgc2NvcGUpIHtcbiAgdmFyIGdsb2JhbCA9IHJlZ2V4Lmdsb2JhbCAmJiBzY29wZSAhPT0gJ29uZScgfHwgc2NvcGUgPT09ICdhbGwnO1xuICB2YXIgY2FjaGVLZXkgPSAoZ2xvYmFsID8gJ2cnIDogJycpICsgKHJlZ2V4LnN0aWNreSA/ICd5JyA6ICcnKSB8fCAnbm9HWSc7XG4gIHJlZ2V4W1JFR0VYX0RBVEFdID0gcmVnZXhbUkVHRVhfREFUQV0gfHwge307IC8vIFNoYXJlcyBjYWNoZWQgY29waWVzIHdpdGggYFhSZWdFeHAuZXhlY2AvYHJlcGxhY2VgXG5cbiAgdmFyIHIyID0gcmVnZXhbUkVHRVhfREFUQV1bY2FjaGVLZXldIHx8IChyZWdleFtSRUdFWF9EQVRBXVtjYWNoZUtleV0gPSBjb3B5UmVnZXgocmVnZXgsIHtcbiAgICBhZGRHOiAhIWdsb2JhbCxcbiAgICByZW1vdmVHOiBzY29wZSA9PT0gJ29uZScsXG4gICAgaXNJbnRlcm5hbE9ubHk6IHRydWVcbiAgfSkpO1xuICB2YXIgcmVzdWx0ID0gbmF0aXYubWF0Y2guY2FsbCh0b09iamVjdChzdHIpLCByMik7XG5cbiAgaWYgKHJlZ2V4Lmdsb2JhbCkge1xuICAgIHJlZ2V4Lmxhc3RJbmRleCA9IHNjb3BlID09PSAnb25lJyAmJiByZXN1bHQgPyAvLyBDYW4ndCB1c2UgYHIyLmxhc3RJbmRleGAgc2luY2UgYHIyYCBpcyBub25nbG9iYWwgaW4gdGhpcyBjYXNlXG4gICAgcmVzdWx0LmluZGV4ICsgcmVzdWx0WzBdLmxlbmd0aCA6IDA7XG4gIH1cblxuICByZXR1cm4gZ2xvYmFsID8gcmVzdWx0IHx8IFtdIDogcmVzdWx0ICYmIHJlc3VsdFswXTtcbn07XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgbWF0Y2hlcyBmcm9tIHNlYXJjaGluZyBhIHN0cmluZyB1c2luZyBhIGNoYWluIG9mIHJlZ2V4ZXMgdGhhdCBzdWNjZXNzaXZlbHkgc2VhcmNoXG4gKiB3aXRoaW4gcHJldmlvdXMgbWF0Y2hlcy4gVGhlIHByb3ZpZGVkIGBjaGFpbmAgYXJyYXkgY2FuIGNvbnRhaW4gcmVnZXhlcyBhbmQgb3Igb2JqZWN0cyB3aXRoXG4gKiBgcmVnZXhgIGFuZCBgYmFja3JlZmAgcHJvcGVydGllcy4gV2hlbiBhIGJhY2tyZWZlcmVuY2UgaXMgc3BlY2lmaWVkLCB0aGUgbmFtZWQgb3IgbnVtYmVyZWRcbiAqIGJhY2tyZWZlcmVuY2UgaXMgcGFzc2VkIGZvcndhcmQgdG8gdGhlIG5leHQgcmVnZXggb3IgcmV0dXJuZWQuXG4gKlxuICogQG1lbWJlck9mIFhSZWdFeHBcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IGNoYWluIFJlZ2V4ZXMgdGhhdCBlYWNoIHNlYXJjaCBmb3IgbWF0Y2hlcyB3aXRoaW4gcHJlY2VkaW5nIHJlc3VsdHMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IE1hdGNoZXMgYnkgdGhlIGxhc3QgcmVnZXggaW4gdGhlIGNoYWluLCBvciBhbiBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQmFzaWMgdXNhZ2U7IG1hdGNoZXMgbnVtYmVycyB3aXRoaW4gPGI+IHRhZ3NcbiAqIFhSZWdFeHAubWF0Y2hDaGFpbignMSA8Yj4yPC9iPiAzIDxiPjQgYSA1NjwvYj4nLCBbXG4gKiAgIFhSZWdFeHAoJyg/aXMpPGI+Lio/PC9iPicpLFxuICogICAvXFxkKy9cbiAqIF0pO1xuICogLy8gLT4gWycyJywgJzQnLCAnNTYnXVxuICpcbiAqIC8vIFBhc3NpbmcgZm9yd2FyZCBhbmQgcmV0dXJuaW5nIHNwZWNpZmljIGJhY2tyZWZlcmVuY2VzXG4gKiBodG1sID0gJzxhIGhyZWY9XCJodHRwOi8veHJlZ2V4cC5jb20vYXBpL1wiPlhSZWdFeHA8L2E+XFxcbiAqICAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly93d3cuZ29vZ2xlLmNvbS9cIj5Hb29nbGU8L2E+JztcbiAqIFhSZWdFeHAubWF0Y2hDaGFpbihodG1sLCBbXG4gKiAgIHtyZWdleDogLzxhIGhyZWY9XCIoW15cIl0rKVwiPi9pLCBiYWNrcmVmOiAxfSxcbiAqICAge3JlZ2V4OiBYUmVnRXhwKCcoP2kpXmh0dHBzPzovLyg/PGRvbWFpbj5bXi8/I10rKScpLCBiYWNrcmVmOiAnZG9tYWluJ31cbiAqIF0pO1xuICogLy8gLT4gWyd4cmVnZXhwLmNvbScsICd3d3cuZ29vZ2xlLmNvbSddXG4gKi9cblxuXG5YUmVnRXhwLm1hdGNoQ2hhaW4gPSBmdW5jdGlvbiAoc3RyLCBjaGFpbikge1xuICByZXR1cm4gZnVuY3Rpb24gcmVjdXJzZUNoYWluKHZhbHVlcywgbGV2ZWwpIHtcbiAgICB2YXIgaXRlbSA9IGNoYWluW2xldmVsXS5yZWdleCA/IGNoYWluW2xldmVsXSA6IHtcbiAgICAgIHJlZ2V4OiBjaGFpbltsZXZlbF1cbiAgICB9O1xuICAgIHZhciBtYXRjaGVzID0gW107XG5cbiAgICBmdW5jdGlvbiBhZGRNYXRjaChtYXRjaCkge1xuICAgICAgaWYgKGl0ZW0uYmFja3JlZikge1xuICAgICAgICB2YXIgRVJSX1VOREVGSU5FRF9HUk9VUCA9IFwiQmFja3JlZmVyZW5jZSB0byB1bmRlZmluZWQgZ3JvdXA6IFwiLmNvbmNhdChpdGVtLmJhY2tyZWYpO1xuICAgICAgICB2YXIgaXNOYW1lZEJhY2tyZWYgPSBpc05hTihpdGVtLmJhY2tyZWYpO1xuXG4gICAgICAgIGlmIChpc05hbWVkQmFja3JlZiAmJiBYUmVnRXhwLmlzSW5zdGFsbGVkKCduYW1lc3BhY2luZycpKSB7XG4gICAgICAgICAgLy8gYGdyb3Vwc2AgaGFzIGBudWxsYCBhcyBwcm90b3R5cGUsIHNvIHVzaW5nIGBpbmAgaW5zdGVhZCBvZiBgaGFzT3duUHJvcGVydHlgXG4gICAgICAgICAgaWYgKCEoaXRlbS5iYWNrcmVmIGluIG1hdGNoLmdyb3VwcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihFUlJfVU5ERUZJTkVEX0dST1VQKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIW1hdGNoLmhhc093blByb3BlcnR5KGl0ZW0uYmFja3JlZikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoRVJSX1VOREVGSU5FRF9HUk9VUCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmFja3JlZlZhbHVlID0gaXNOYW1lZEJhY2tyZWYgJiYgWFJlZ0V4cC5pc0luc3RhbGxlZCgnbmFtZXNwYWNpbmcnKSA/IG1hdGNoLmdyb3Vwc1tpdGVtLmJhY2tyZWZdIDogbWF0Y2hbaXRlbS5iYWNrcmVmXTtcbiAgICAgICAgbWF0Y2hlcy5wdXNoKGJhY2tyZWZWYWx1ZSB8fCAnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXRjaGVzLnB1c2gobWF0Y2hbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7XG4gICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IHZhbHVlc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBfc3RlcDMudmFsdWU7XG4gICAgICAgIFhSZWdFeHAuZm9yRWFjaCh2YWx1ZSwgaXRlbS5yZWdleCwgYWRkTWF0Y2gpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTtcbiAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsZXZlbCA9PT0gY2hhaW4ubGVuZ3RoIC0gMSB8fCAhbWF0Y2hlcy5sZW5ndGggPyBtYXRjaGVzIDogcmVjdXJzZUNoYWluKG1hdGNoZXMsIGxldmVsICsgMSk7XG4gIH0oW3N0cl0sIDApO1xufTtcbi8qKlxuICogUmV0dXJucyBhIG5ldyBzdHJpbmcgd2l0aCBvbmUgb3IgYWxsIG1hdGNoZXMgb2YgYSBwYXR0ZXJuIHJlcGxhY2VkLiBUaGUgcGF0dGVybiBjYW4gYmUgYSBzdHJpbmdcbiAqIG9yIHJlZ2V4LCBhbmQgdGhlIHJlcGxhY2VtZW50IGNhbiBiZSBhIHN0cmluZyBvciBhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCBtYXRjaC4gVG9cbiAqIHBlcmZvcm0gYSBnbG9iYWwgc2VhcmNoIGFuZCByZXBsYWNlLCB1c2UgdGhlIG9wdGlvbmFsIGBzY29wZWAgYXJndW1lbnQgb3IgaW5jbHVkZSBmbGFnIGcgaWYgdXNpbmdcbiAqIGEgcmVnZXguIFJlcGxhY2VtZW50IHN0cmluZ3MgY2FuIHVzZSBgJHtufWAgb3IgYCQ8bj5gIGZvciBuYW1lZCBhbmQgbnVtYmVyZWQgYmFja3JlZmVyZW5jZXMuXG4gKiBSZXBsYWNlbWVudCBmdW5jdGlvbnMgY2FuIHVzZSBuYW1lZCBiYWNrcmVmZXJlbmNlcyB2aWEgYGFyZ3VtZW50c1swXS5uYW1lYC4gQWxzbyBmaXhlcyBicm93c2VyXG4gKiBidWdzIGNvbXBhcmVkIHRvIHRoZSBuYXRpdmUgYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgYW5kIGNhbiBiZSB1c2VkIHJlbGlhYmx5IGNyb3NzLWJyb3dzZXIuXG4gKlxuICogQG1lbWJlck9mIFhSZWdFeHBcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gc2VhcmNoIFNlYXJjaCBwYXR0ZXJuIHRvIGJlIHJlcGxhY2VkLlxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHJlcGxhY2VtZW50IFJlcGxhY2VtZW50IHN0cmluZyBvciBhIGZ1bmN0aW9uIGludm9rZWQgdG8gY3JlYXRlIGl0LlxuICogICBSZXBsYWNlbWVudCBzdHJpbmdzIGNhbiBpbmNsdWRlIHNwZWNpYWwgcmVwbGFjZW1lbnQgc3ludGF4OlxuICogICAgIC0gJCQgLSBJbnNlcnRzIGEgbGl0ZXJhbCAkIGNoYXJhY3Rlci5cbiAqICAgICAtICQmLCAkMCAtIEluc2VydHMgdGhlIG1hdGNoZWQgc3Vic3RyaW5nLlxuICogICAgIC0gJGAgLSBJbnNlcnRzIHRoZSBzdHJpbmcgdGhhdCBwcmVjZWRlcyB0aGUgbWF0Y2hlZCBzdWJzdHJpbmcgKGxlZnQgY29udGV4dCkuXG4gKiAgICAgLSAkJyAtIEluc2VydHMgdGhlIHN0cmluZyB0aGF0IGZvbGxvd3MgdGhlIG1hdGNoZWQgc3Vic3RyaW5nIChyaWdodCBjb250ZXh0KS5cbiAqICAgICAtICRuLCAkbm4gLSBXaGVyZSBuL25uIGFyZSBkaWdpdHMgcmVmZXJlbmNpbmcgYW4gZXhpc3RlbnQgY2FwdHVyaW5nIGdyb3VwLCBpbnNlcnRzXG4gKiAgICAgICBiYWNrcmVmZXJlbmNlIG4vbm4uXG4gKiAgICAgLSAke259LCAkPG4+IC0gV2hlcmUgbiBpcyBhIG5hbWUgb3IgYW55IG51bWJlciBvZiBkaWdpdHMgdGhhdCByZWZlcmVuY2UgYW4gZXhpc3RlbnQgY2FwdHVyaW5nXG4gKiAgICAgICBncm91cCwgaW5zZXJ0cyBiYWNrcmVmZXJlbmNlIG4uXG4gKiAgIFJlcGxhY2VtZW50IGZ1bmN0aW9ucyBhcmUgaW52b2tlZCB3aXRoIHRocmVlIG9yIG1vcmUgYXJndW1lbnRzOlxuICogICAgIC0gVGhlIG1hdGNoZWQgc3Vic3RyaW5nIChjb3JyZXNwb25kcyB0byAkJiBhYm92ZSkuIE5hbWVkIGJhY2tyZWZlcmVuY2VzIGFyZSBhY2Nlc3NpYmxlIGFzXG4gKiAgICAgICBwcm9wZXJ0aWVzIG9mIHRoaXMgZmlyc3QgYXJndW1lbnQuXG4gKiAgICAgLSAwLi5uIGFyZ3VtZW50cywgb25lIGZvciBlYWNoIGJhY2tyZWZlcmVuY2UgKGNvcnJlc3BvbmRpbmcgdG8gJDEsICQyLCBldGMuIGFib3ZlKS5cbiAqICAgICAtIFRoZSB6ZXJvLWJhc2VkIGluZGV4IG9mIHRoZSBtYXRjaCB3aXRoaW4gdGhlIHRvdGFsIHNlYXJjaCBzdHJpbmcuXG4gKiAgICAgLSBUaGUgdG90YWwgc3RyaW5nIGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIHtTdHJpbmd9IFtzY29wZT0nb25lJ10gVXNlICdvbmUnIHRvIHJlcGxhY2UgdGhlIGZpcnN0IG1hdGNoIG9ubHksIG9yICdhbGwnLiBJZiBub3RcbiAqICAgZXhwbGljaXRseSBzcGVjaWZpZWQgYW5kIHVzaW5nIGEgcmVnZXggd2l0aCBmbGFnIGcsIGBzY29wZWAgaXMgJ2FsbCcuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBOZXcgc3RyaW5nIHdpdGggb25lIG9yIGFsbCBtYXRjaGVzIHJlcGxhY2VkLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBSZWdleCBzZWFyY2gsIHVzaW5nIG5hbWVkIGJhY2tyZWZlcmVuY2VzIGluIHJlcGxhY2VtZW50IHN0cmluZ1xuICogY29uc3QgbmFtZSA9IFhSZWdFeHAoJyg/PGZpcnN0PlxcXFx3KykgKD88bGFzdD5cXFxcdyspJyk7XG4gKiBYUmVnRXhwLnJlcGxhY2UoJ0pvaG4gU21pdGgnLCBuYW1lLCAnJDxsYXN0PiwgJDxmaXJzdD4nKTtcbiAqIC8vIC0+ICdTbWl0aCwgSm9obidcbiAqXG4gKiAvLyBSZWdleCBzZWFyY2gsIHVzaW5nIG5hbWVkIGJhY2tyZWZlcmVuY2VzIGluIHJlcGxhY2VtZW50IGZ1bmN0aW9uXG4gKiBYUmVnRXhwLnJlcGxhY2UoJ0pvaG4gU21pdGgnLCBuYW1lLCAobWF0Y2gpID0+IGAke21hdGNoLmxhc3R9LCAke21hdGNoLmZpcnN0fWApO1xuICogLy8gLT4gJ1NtaXRoLCBKb2huJ1xuICpcbiAqIC8vIFN0cmluZyBzZWFyY2gsIHdpdGggcmVwbGFjZS1hbGxcbiAqIFhSZWdFeHAucmVwbGFjZSgnUmVnRXhwIGJ1aWxkcyBSZWdFeHBzJywgJ1JlZ0V4cCcsICdYUmVnRXhwJywgJ2FsbCcpO1xuICogLy8gLT4gJ1hSZWdFeHAgYnVpbGRzIFhSZWdFeHBzJ1xuICovXG5cblxuWFJlZ0V4cC5yZXBsYWNlID0gZnVuY3Rpb24gKHN0ciwgc2VhcmNoLCByZXBsYWNlbWVudCwgc2NvcGUpIHtcbiAgdmFyIGlzUmVnZXggPSBYUmVnRXhwLmlzUmVnRXhwKHNlYXJjaCk7XG4gIHZhciBnbG9iYWwgPSBzZWFyY2guZ2xvYmFsICYmIHNjb3BlICE9PSAnb25lJyB8fCBzY29wZSA9PT0gJ2FsbCc7XG4gIHZhciBjYWNoZUtleSA9IChnbG9iYWwgPyAnZycgOiAnJykgKyAoc2VhcmNoLnN0aWNreSA/ICd5JyA6ICcnKSB8fCAnbm9HWSc7XG4gIHZhciBzMiA9IHNlYXJjaDtcblxuICBpZiAoaXNSZWdleCkge1xuICAgIHNlYXJjaFtSRUdFWF9EQVRBXSA9IHNlYXJjaFtSRUdFWF9EQVRBXSB8fCB7fTsgLy8gU2hhcmVzIGNhY2hlZCBjb3BpZXMgd2l0aCBgWFJlZ0V4cC5leGVjYC9gbWF0Y2hgLiBTaW5jZSBhIGNvcHkgaXMgdXNlZCwgYHNlYXJjaGAnc1xuICAgIC8vIGBsYXN0SW5kZXhgIGlzbid0IHVwZGF0ZWQgKmR1cmluZyogcmVwbGFjZW1lbnQgaXRlcmF0aW9uc1xuXG4gICAgczIgPSBzZWFyY2hbUkVHRVhfREFUQV1bY2FjaGVLZXldIHx8IChzZWFyY2hbUkVHRVhfREFUQV1bY2FjaGVLZXldID0gY29weVJlZ2V4KHNlYXJjaCwge1xuICAgICAgYWRkRzogISFnbG9iYWwsXG4gICAgICByZW1vdmVHOiBzY29wZSA9PT0gJ29uZScsXG4gICAgICBpc0ludGVybmFsT25seTogdHJ1ZVxuICAgIH0pKTtcbiAgfSBlbHNlIGlmIChnbG9iYWwpIHtcbiAgICBzMiA9IG5ldyBSZWdFeHAoWFJlZ0V4cC5lc2NhcGUoU3RyaW5nKHNlYXJjaCkpLCAnZycpO1xuICB9IC8vIEZpeGVkIGByZXBsYWNlYCByZXF1aXJlZCBmb3IgbmFtZWQgYmFja3JlZmVyZW5jZXMsIGV0Yy5cblxuXG4gIHZhciByZXN1bHQgPSBmaXhlZC5yZXBsYWNlLmNhbGwodG9PYmplY3Qoc3RyKSwgczIsIHJlcGxhY2VtZW50KTtcblxuICBpZiAoaXNSZWdleCAmJiBzZWFyY2guZ2xvYmFsKSB7XG4gICAgLy8gRml4ZXMgSUUsIFNhZmFyaSBidWcgKGxhc3QgdGVzdGVkIElFIDksIFNhZmFyaSA1LjEpXG4gICAgc2VhcmNoLmxhc3RJbmRleCA9IDA7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbi8qKlxuICogUGVyZm9ybXMgYmF0Y2ggcHJvY2Vzc2luZyBvZiBzdHJpbmcgcmVwbGFjZW1lbnRzLiBVc2VkIGxpa2UgYFhSZWdFeHAucmVwbGFjZWAsIGJ1dCBhY2NlcHRzIGFuXG4gKiBhcnJheSBvZiByZXBsYWNlbWVudCBkZXRhaWxzLiBMYXRlciByZXBsYWNlbWVudHMgb3BlcmF0ZSBvbiB0aGUgb3V0cHV0IG9mIGVhcmxpZXIgcmVwbGFjZW1lbnRzLlxuICogUmVwbGFjZW1lbnQgZGV0YWlscyBhcmUgYWNjZXB0ZWQgYXMgYW4gYXJyYXkgd2l0aCBhIHJlZ2V4IG9yIHN0cmluZyB0byBzZWFyY2ggZm9yLCB0aGVcbiAqIHJlcGxhY2VtZW50IHN0cmluZyBvciBmdW5jdGlvbiwgYW5kIGFuIG9wdGlvbmFsIHNjb3BlIG9mICdvbmUnIG9yICdhbGwnLiBVc2VzIHRoZSBYUmVnRXhwXG4gKiByZXBsYWNlbWVudCB0ZXh0IHN5bnRheCwgd2hpY2ggc3VwcG9ydHMgbmFtZWQgYmFja3JlZmVyZW5jZSBwcm9wZXJ0aWVzIHZpYSBgJHtuYW1lfWAgb3JcbiAqIGAkPG5hbWU+YC5cbiAqXG4gKiBAbWVtYmVyT2YgWFJlZ0V4cFxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBTdHJpbmcgdG8gc2VhcmNoLlxuICogQHBhcmFtIHtBcnJheX0gcmVwbGFjZW1lbnRzIEFycmF5IG9mIHJlcGxhY2VtZW50IGRldGFpbCBhcnJheXMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBOZXcgc3RyaW5nIHdpdGggYWxsIHJlcGxhY2VtZW50cy5cbiAqIEBleGFtcGxlXG4gKlxuICogc3RyID0gWFJlZ0V4cC5yZXBsYWNlRWFjaChzdHIsIFtcbiAqICAgW1hSZWdFeHAoJyg/PG5hbWU+YSknKSwgJ3oke25hbWV9J10sXG4gKiAgIFsvYi9naSwgJ3knXSxcbiAqICAgWy9jL2csICd4JywgJ29uZSddLCAvLyBzY29wZSAnb25lJyBvdmVycmlkZXMgL2dcbiAqICAgWy9kLywgJ3cnLCAnYWxsJ10sICAvLyBzY29wZSAnYWxsJyBvdmVycmlkZXMgbGFjayBvZiAvZ1xuICogICBbJ2UnLCAndicsICdhbGwnXSwgIC8vIHNjb3BlICdhbGwnIGFsbG93cyByZXBsYWNlLWFsbCBmb3Igc3RyaW5nc1xuICogICBbL2YvZywgKCQwKSA9PiAkMC50b1VwcGVyQ2FzZSgpXVxuICogXSk7XG4gKi9cblxuXG5YUmVnRXhwLnJlcGxhY2VFYWNoID0gZnVuY3Rpb24gKHN0ciwgcmVwbGFjZW1lbnRzKSB7XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yNCA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjQgPSByZXBsYWNlbWVudHNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDQ7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSAoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWUpIHtcbiAgICAgIHZhciByID0gX3N0ZXA0LnZhbHVlO1xuICAgICAgc3RyID0gWFJlZ0V4cC5yZXBsYWNlKHN0ciwgclswXSwgclsxXSwgclsyXSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvcjQgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yNCA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCAmJiBfaXRlcmF0b3I0LnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjQpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuLyoqXG4gKiBTcGxpdHMgYSBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBzdHJpbmdzIHVzaW5nIGEgcmVnZXggb3Igc3RyaW5nIHNlcGFyYXRvci4gTWF0Y2hlcyBvZiB0aGVcbiAqIHNlcGFyYXRvciBhcmUgbm90IGluY2x1ZGVkIGluIHRoZSByZXN1bHQgYXJyYXkuIEhvd2V2ZXIsIGlmIGBzZXBhcmF0b3JgIGlzIGEgcmVnZXggdGhhdCBjb250YWluc1xuICogY2FwdHVyaW5nIGdyb3VwcywgYmFja3JlZmVyZW5jZXMgYXJlIHNwbGljZWQgaW50byB0aGUgcmVzdWx0IGVhY2ggdGltZSBgc2VwYXJhdG9yYCBpcyBtYXRjaGVkLlxuICogRml4ZXMgYnJvd3NlciBidWdzIGNvbXBhcmVkIHRvIHRoZSBuYXRpdmUgYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIGFuZCBjYW4gYmUgdXNlZCByZWxpYWJseVxuICogY3Jvc3MtYnJvd3Nlci5cbiAqXG4gKiBAbWVtYmVyT2YgWFJlZ0V4cFxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBTdHJpbmcgdG8gc3BsaXQuXG4gKiBAcGFyYW0ge1JlZ0V4cHxTdHJpbmd9IHNlcGFyYXRvciBSZWdleCBvciBzdHJpbmcgdG8gdXNlIGZvciBzZXBhcmF0aW5nIHRoZSBzdHJpbmcuXG4gKiBAcGFyYW0ge051bWJlcn0gW2xpbWl0XSBNYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0byBpbmNsdWRlIGluIHRoZSByZXN1bHQgYXJyYXkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IEFycmF5IG9mIHN1YnN0cmluZ3MuXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEJhc2ljIHVzZVxuICogWFJlZ0V4cC5zcGxpdCgnYSBiIGMnLCAnICcpO1xuICogLy8gLT4gWydhJywgJ2InLCAnYyddXG4gKlxuICogLy8gV2l0aCBsaW1pdFxuICogWFJlZ0V4cC5zcGxpdCgnYSBiIGMnLCAnICcsIDIpO1xuICogLy8gLT4gWydhJywgJ2InXVxuICpcbiAqIC8vIEJhY2tyZWZlcmVuY2VzIGluIHJlc3VsdCBhcnJheVxuICogWFJlZ0V4cC5zcGxpdCgnLi53b3JkMS4uJywgLyhbYS16XSspKFxcZCspL2kpO1xuICogLy8gLT4gWycuLicsICd3b3JkJywgJzEnLCAnLi4nXVxuICovXG5cblxuWFJlZ0V4cC5zcGxpdCA9IGZ1bmN0aW9uIChzdHIsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgcmV0dXJuIGZpeGVkLnNwbGl0LmNhbGwodG9PYmplY3Qoc3RyKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG59O1xuLyoqXG4gKiBFeGVjdXRlcyBhIHJlZ2V4IHNlYXJjaCBpbiBhIHNwZWNpZmllZCBzdHJpbmcuIFJldHVybnMgYHRydWVgIG9yIGBmYWxzZWAuIE9wdGlvbmFsIGBwb3NgIGFuZFxuICogYHN0aWNreWAgYXJndW1lbnRzIHNwZWNpZnkgdGhlIHNlYXJjaCBzdGFydCBwb3NpdGlvbiwgYW5kIHdoZXRoZXIgdGhlIG1hdGNoIG11c3Qgc3RhcnQgYXQgdGhlXG4gKiBzcGVjaWZpZWQgcG9zaXRpb24gb25seS4gVGhlIGBsYXN0SW5kZXhgIHByb3BlcnR5IG9mIHRoZSBwcm92aWRlZCByZWdleCBpcyBub3QgdXNlZCwgYnV0IGlzXG4gKiB1cGRhdGVkIGZvciBjb21wYXRpYmlsaXR5LiBBbHNvIGZpeGVzIGJyb3dzZXIgYnVncyBjb21wYXJlZCB0byB0aGUgbmF0aXZlXG4gKiBgUmVnRXhwLnByb3RvdHlwZS50ZXN0YCBhbmQgY2FuIGJlIHVzZWQgcmVsaWFibHkgY3Jvc3MtYnJvd3Nlci5cbiAqXG4gKiBAbWVtYmVyT2YgWFJlZ0V4cFxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBTdHJpbmcgdG8gc2VhcmNoLlxuICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4IFJlZ2V4IHRvIHNlYXJjaCB3aXRoLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtwb3M9MF0gWmVyby1iYXNlZCBpbmRleCBhdCB3aGljaCB0byBzdGFydCB0aGUgc2VhcmNoLlxuICogQHBhcmFtIHtCb29sZWFufFN0cmluZ30gW3N0aWNreT1mYWxzZV0gV2hldGhlciB0aGUgbWF0Y2ggbXVzdCBzdGFydCBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uXG4gKiAgIG9ubHkuIFRoZSBzdHJpbmcgYCdzdGlja3knYCBpcyBhY2NlcHRlZCBhcyBhbiBhbHRlcm5hdGl2ZSB0byBgdHJ1ZWAuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gV2hldGhlciB0aGUgcmVnZXggbWF0Y2hlZCB0aGUgcHJvdmlkZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEJhc2ljIHVzZVxuICogWFJlZ0V4cC50ZXN0KCdhYmMnLCAvYy8pOyAvLyAtPiB0cnVlXG4gKlxuICogLy8gV2l0aCBwb3MgYW5kIHN0aWNreVxuICogWFJlZ0V4cC50ZXN0KCdhYmMnLCAvYy8sIDAsICdzdGlja3knKTsgLy8gLT4gZmFsc2VcbiAqIFhSZWdFeHAudGVzdCgnYWJjJywgL2MvLCAyLCAnc3RpY2t5Jyk7IC8vIC0+IHRydWVcbiAqL1xuLy8gRG8gdGhpcyB0aGUgZWFzeSB3YXkgOi0pXG5cblxuWFJlZ0V4cC50ZXN0ID0gZnVuY3Rpb24gKHN0ciwgcmVnZXgsIHBvcywgc3RpY2t5KSB7XG4gIHJldHVybiAhIVhSZWdFeHAuZXhlYyhzdHIsIHJlZ2V4LCBwb3MsIHN0aWNreSk7XG59O1xuLyoqXG4gKiBVbmluc3RhbGxzIG9wdGlvbmFsIGZlYXR1cmVzIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIG9wdGlvbnMuIEFsbCBvcHRpb25hbCBmZWF0dXJlcyBzdGFydCBvdXRcbiAqIHVuaW5zdGFsbGVkLCBzbyB0aGlzIGlzIHVzZWQgdG8gdW5kbyB0aGUgYWN0aW9ucyBvZiBgWFJlZ0V4cC5pbnN0YWxsYC5cbiAqXG4gKiBAbWVtYmVyT2YgWFJlZ0V4cFxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IG9yIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gV2l0aCBhbiBvcHRpb25zIG9iamVjdFxuICogWFJlZ0V4cC51bmluc3RhbGwoe1xuICogICAvLyBEaXNhYmxlcyBzdXBwb3J0IGZvciBhc3RyYWwgY29kZSBwb2ludHMgaW4gVW5pY29kZSBhZGRvbnNcbiAqICAgYXN0cmFsOiB0cnVlLFxuICpcbiAqICAgLy8gRG9uJ3QgYWRkIG5hbWVkIGNhcHR1cmUgZ3JvdXBzIHRvIHRoZSBgZ3JvdXBzYCBwcm9wZXJ0eSBvZiBtYXRjaGVzXG4gKiAgIG5hbWVzcGFjaW5nOiB0cnVlXG4gKiB9KTtcbiAqXG4gKiAvLyBXaXRoIGFuIG9wdGlvbnMgc3RyaW5nXG4gKiBYUmVnRXhwLnVuaW5zdGFsbCgnYXN0cmFsIG5hbWVzcGFjaW5nJyk7XG4gKi9cblxuXG5YUmVnRXhwLnVuaW5zdGFsbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBwcmVwYXJlT3B0aW9ucyhvcHRpb25zKTtcblxuICBpZiAoZmVhdHVyZXMuYXN0cmFsICYmIG9wdGlvbnMuYXN0cmFsKSB7XG4gICAgc2V0QXN0cmFsKGZhbHNlKTtcbiAgfVxuXG4gIGlmIChmZWF0dXJlcy5uYW1lc3BhY2luZyAmJiBvcHRpb25zLm5hbWVzcGFjaW5nKSB7XG4gICAgc2V0TmFtZXNwYWNpbmcoZmFsc2UpO1xuICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIGFuIFhSZWdFeHAgb2JqZWN0IHRoYXQgaXMgdGhlIHVuaW9uIG9mIHRoZSBnaXZlbiBwYXR0ZXJucy4gUGF0dGVybnMgY2FuIGJlIHByb3ZpZGVkIGFzXG4gKiByZWdleCBvYmplY3RzIG9yIHN0cmluZ3MuIE1ldGFjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkIGluIHBhdHRlcm5zIHByb3ZpZGVkIGFzIHN0cmluZ3MuXG4gKiBCYWNrcmVmZXJlbmNlcyBpbiBwcm92aWRlZCByZWdleCBvYmplY3RzIGFyZSBhdXRvbWF0aWNhbGx5IHJlbnVtYmVyZWQgdG8gd29yayBjb3JyZWN0bHkgd2l0aGluXG4gKiB0aGUgbGFyZ2VyIGNvbWJpbmVkIHBhdHRlcm4uIE5hdGl2ZSBmbGFncyB1c2VkIGJ5IHByb3ZpZGVkIHJlZ2V4ZXMgYXJlIGlnbm9yZWQgaW4gZmF2b3Igb2YgdGhlXG4gKiBgZmxhZ3NgIGFyZ3VtZW50LlxuICpcbiAqIEBtZW1iZXJPZiBYUmVnRXhwXG4gKiBAcGFyYW0ge0FycmF5fSBwYXR0ZXJucyBSZWdleGVzIGFuZCBzdHJpbmdzIHRvIGNvbWJpbmUuXG4gKiBAcGFyYW0ge1N0cmluZ30gW2ZsYWdzXSBBbnkgY29tYmluYXRpb24gb2YgWFJlZ0V4cCBmbGFncy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3Qgd2l0aCBvcHRpb25hbCBwcm9wZXJ0aWVzOlxuICogICAtIGBjb25qdW5jdGlvbmAge1N0cmluZ30gVHlwZSBvZiBjb25qdW5jdGlvbiB0byB1c2U6ICdvcicgKGRlZmF1bHQpIG9yICdub25lJy5cbiAqIEByZXR1cm5zIHtSZWdFeHB9IFVuaW9uIG9mIHRoZSBwcm92aWRlZCByZWdleGVzIGFuZCBzdHJpbmdzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBYUmVnRXhwLnVuaW9uKFsnYStiKmMnLCAvKGRvZ3MpXFwxLywgLyhjYXRzKVxcMS9dLCAnaScpO1xuICogLy8gLT4gL2FcXCtiXFwqY3woZG9ncylcXDF8KGNhdHMpXFwyL2lcbiAqXG4gKiBYUmVnRXhwLnVuaW9uKFsvbWFuLywgL2JlYXIvLCAvcGlnL10sICdpJywge2Nvbmp1bmN0aW9uOiAnbm9uZSd9KTtcbiAqIC8vIC0+IC9tYW5iZWFycGlnL2lcbiAqL1xuXG5cblhSZWdFeHAudW5pb24gPSBmdW5jdGlvbiAocGF0dGVybnMsIGZsYWdzLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgY29uanVuY3Rpb24gPSBvcHRpb25zLmNvbmp1bmN0aW9uIHx8ICdvcic7XG4gIHZhciBudW1DYXB0dXJlcyA9IDA7XG4gIHZhciBudW1QcmlvckNhcHR1cmVzO1xuICB2YXIgY2FwdHVyZU5hbWVzO1xuXG4gIGZ1bmN0aW9uIHJld3JpdGUobWF0Y2gsIHBhcmVuLCBiYWNrcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBjYXB0dXJlTmFtZXNbbnVtQ2FwdHVyZXMgLSBudW1QcmlvckNhcHR1cmVzXTsgLy8gQ2FwdHVyaW5nIGdyb3VwXG5cbiAgICBpZiAocGFyZW4pIHtcbiAgICAgICsrbnVtQ2FwdHVyZXM7IC8vIElmIHRoZSBjdXJyZW50IGNhcHR1cmUgaGFzIGEgbmFtZSwgcHJlc2VydmUgdGhlIG5hbWVcblxuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiKD88XCIuY29uY2F0KG5hbWUsIFwiPlwiKTtcbiAgICAgIH0gLy8gQmFja3JlZmVyZW5jZVxuXG4gICAgfSBlbHNlIGlmIChiYWNrcmVmKSB7XG4gICAgICAvLyBSZXdyaXRlIHRoZSBiYWNrcmVmZXJlbmNlXG4gICAgICByZXR1cm4gXCJcXFxcXCIuY29uY2F0KCtiYWNrcmVmICsgbnVtUHJpb3JDYXB0dXJlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9XG5cbiAgaWYgKCEoaXNUeXBlKHBhdHRlcm5zLCAnQXJyYXknKSAmJiBwYXR0ZXJucy5sZW5ndGgpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTXVzdCBwcm92aWRlIGEgbm9uZW1wdHkgYXJyYXkgb2YgcGF0dGVybnMgdG8gbWVyZ2UnKTtcbiAgfVxuXG4gIHZhciBwYXJ0cyA9IC8oXFwoKSg/IVxcPyl8XFxcXChbMS05XVxcZCopfFxcXFxbXFxzXFxTXXxcXFsoPzpbXlxcXFxcXF1dfFxcXFxbXFxzXFxTXSkqXFxdL2c7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yNSA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3I1ID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yNSA9IHBhdHRlcm5zW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA1OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gKF9zdGVwNSA9IF9pdGVyYXRvcjUubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlKSB7XG4gICAgICB2YXIgcGF0dGVybiA9IF9zdGVwNS52YWx1ZTtcblxuICAgICAgaWYgKFhSZWdFeHAuaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICAgICAgbnVtUHJpb3JDYXB0dXJlcyA9IG51bUNhcHR1cmVzO1xuICAgICAgICBjYXB0dXJlTmFtZXMgPSBwYXR0ZXJuW1JFR0VYX0RBVEFdICYmIHBhdHRlcm5bUkVHRVhfREFUQV0uY2FwdHVyZU5hbWVzIHx8IFtdOyAvLyBSZXdyaXRlIGJhY2tyZWZlcmVuY2VzLiBQYXNzaW5nIHRvIFhSZWdFeHAgZGllcyBvbiBvY3RhbHMgYW5kIGVuc3VyZXMgcGF0dGVybnMgYXJlXG4gICAgICAgIC8vIGluZGVwZW5kZW50bHkgdmFsaWQ7IGhlbHBzIGtlZXAgdGhpcyBzaW1wbGUuIE5hbWVkIGNhcHR1cmVzIGFyZSBwdXQgYmFja1xuXG4gICAgICAgIG91dHB1dC5wdXNoKG5hdGl2LnJlcGxhY2UuY2FsbChYUmVnRXhwKHBhdHRlcm4uc291cmNlKS5zb3VyY2UsIHBhcnRzLCByZXdyaXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQucHVzaChYUmVnRXhwLmVzY2FwZShwYXR0ZXJuKSk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvcjUgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yNSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSAmJiBfaXRlcmF0b3I1LnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgIF9pdGVyYXRvcjUucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjUpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I1O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBzZXBhcmF0b3IgPSBjb25qdW5jdGlvbiA9PT0gJ25vbmUnID8gJycgOiAnfCc7XG4gIHJldHVybiBYUmVnRXhwKG91dHB1dC5qb2luKHNlcGFyYXRvciksIGZsYWdzKTtcbn07IC8vID09LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS09PVxuLy8gRml4ZWQvZXh0ZW5kZWQgbmF0aXZlIG1ldGhvZHNcbi8vID09LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS09PVxuXG4vKipcbiAqIEFkZHMgbmFtZWQgY2FwdHVyZSBzdXBwb3J0ICh3aXRoIGJhY2tyZWZlcmVuY2VzIHJldHVybmVkIGFzIGByZXN1bHQubmFtZWApLCBhbmQgZml4ZXMgYnJvd3NlclxuICogYnVncyBpbiB0aGUgbmF0aXZlIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgLiBVc2UgdmlhIGBYUmVnRXhwLmV4ZWNgLlxuICpcbiAqIEBtZW1iZXJPZiBSZWdFeHBcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNlYXJjaC5cbiAqIEByZXR1cm5zIHtBcnJheX0gTWF0Y2ggYXJyYXkgd2l0aCBuYW1lZCBiYWNrcmVmZXJlbmNlIHByb3BlcnRpZXMsIG9yIGBudWxsYC5cbiAqL1xuXG5cbmZpeGVkLmV4ZWMgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHZhciBvcmlnTGFzdEluZGV4ID0gdGhpcy5sYXN0SW5kZXg7XG4gIHZhciBtYXRjaCA9IG5hdGl2LmV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBpZiAobWF0Y2gpIHtcbiAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZ1xuICAgIC8vIGdyb3Vwcy4gVGhpcyBmaXhlcyBJRSA1LjUtOCwgYnV0IG5vdCBJRSA5J3MgcXVpcmtzIG1vZGUgb3IgZW11bGF0aW9uIG9mIG9sZGVyIElFcy4gSUUgOVxuICAgIC8vIGluIHN0YW5kYXJkcyBtb2RlIGZvbGxvd3MgdGhlIHNwZWMuXG4gICAgaWYgKCFjb3JyZWN0RXhlY05wY2cgJiYgbWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleE9mKCcnKSAhPT0gLTEpIHtcbiAgICAgIHZhciByMiA9IGNvcHlSZWdleCh0aGlzLCB7XG4gICAgICAgIHJlbW92ZUc6IHRydWUsXG4gICAgICAgIGlzSW50ZXJuYWxPbmx5OiB0cnVlXG4gICAgICB9KTsgLy8gVXNpbmcgYHN0ci5zbGljZShtYXRjaC5pbmRleClgIHJhdGhlciB0aGFuIGBtYXRjaFswXWAgaW4gY2FzZSBsb29rYWhlYWQgYWxsb3dlZFxuICAgICAgLy8gbWF0Y2hpbmcgZHVlIHRvIGNoYXJhY3RlcnMgb3V0c2lkZSB0aGUgbWF0Y2hcblxuICAgICAgbmF0aXYucmVwbGFjZS5jYWxsKFN0cmluZyhzdHIpLnNsaWNlKG1hdGNoLmluZGV4KSwgcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IC8vIFNraXAgaW5kZXggMCBhbmQgdGhlIGxhc3QgMlxuXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbGVuIC0gMjsgKytpKSB7XG4gICAgICAgICAgaWYgKChpIDwgMCB8fCBhcmd1bWVudHMubGVuZ3RoIDw9IGkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbaV0pID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSAvLyBBdHRhY2ggbmFtZWQgY2FwdHVyZSBwcm9wZXJ0aWVzXG5cblxuICAgIHZhciBncm91cHNPYmplY3QgPSBtYXRjaDtcblxuICAgIGlmIChYUmVnRXhwLmlzSW5zdGFsbGVkKCduYW1lc3BhY2luZycpKSB7XG4gICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXJlZ2V4cC1uYW1lZC1ncm91cHMvI3NlYy1yZWdleHBidWlsdGluZXhlY1xuICAgICAgbWF0Y2guZ3JvdXBzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGdyb3Vwc09iamVjdCA9IG1hdGNoLmdyb3VwcztcbiAgICB9XG5cbiAgICBpZiAodGhpc1tSRUdFWF9EQVRBXSAmJiB0aGlzW1JFR0VYX0RBVEFdLmNhcHR1cmVOYW1lcykge1xuICAgICAgLy8gU2tpcCBpbmRleCAwXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG1hdGNoLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBuYW1lID0gdGhpc1tSRUdFWF9EQVRBXS5jYXB0dXJlTmFtZXNbaSAtIDFdO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgZ3JvdXBzT2JqZWN0W25hbWVdID0gbWF0Y2hbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIEZpeCBicm93c2VycyB0aGF0IGluY3JlbWVudCBgbGFzdEluZGV4YCBhZnRlciB6ZXJvLWxlbmd0aCBtYXRjaGVzXG5cblxuICAgIGlmICh0aGlzLmdsb2JhbCAmJiAhbWF0Y2hbMF0ubGVuZ3RoICYmIHRoaXMubGFzdEluZGV4ID4gbWF0Y2guaW5kZXgpIHtcbiAgICAgIHRoaXMubGFzdEluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0aGlzLmdsb2JhbCkge1xuICAgIC8vIEZpeGVzIElFLCBPcGVyYSBidWcgKGxhc3QgdGVzdGVkIElFIDksIE9wZXJhIDExLjYpXG4gICAgdGhpcy5sYXN0SW5kZXggPSBvcmlnTGFzdEluZGV4O1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoO1xufTtcbi8qKlxuICogRml4ZXMgYnJvd3NlciBidWdzIGluIHRoZSBuYXRpdmUgYFJlZ0V4cC5wcm90b3R5cGUudGVzdGAuXG4gKlxuICogQG1lbWJlck9mIFJlZ0V4cFxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBTdHJpbmcgdG8gc2VhcmNoLlxuICogQHJldHVybnMge0Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlZ2V4IG1hdGNoZWQgdGhlIHByb3ZpZGVkIHZhbHVlLlxuICovXG5cblxuZml4ZWQudGVzdCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgLy8gRG8gdGhpcyB0aGUgZWFzeSB3YXkgOi0pXG4gIHJldHVybiAhIWZpeGVkLmV4ZWMuY2FsbCh0aGlzLCBzdHIpO1xufTtcbi8qKlxuICogQWRkcyBuYW1lZCBjYXB0dXJlIHN1cHBvcnQgKHdpdGggYmFja3JlZmVyZW5jZXMgcmV0dXJuZWQgYXMgYHJlc3VsdC5uYW1lYCksIGFuZCBmaXhlcyBicm93c2VyXG4gKiBidWdzIGluIHRoZSBuYXRpdmUgYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgLlxuICpcbiAqIEBtZW1iZXJPZiBTdHJpbmdcbiAqIEBwYXJhbSB7UmVnRXhwfCp9IHJlZ2V4IFJlZ2V4IHRvIHNlYXJjaCB3aXRoLiBJZiBub3QgYSByZWdleCBvYmplY3QsIGl0IGlzIHBhc3NlZCB0byBgUmVnRXhwYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gSWYgYHJlZ2V4YCB1c2VzIGZsYWcgZywgYW4gYXJyYXkgb2YgbWF0Y2ggc3RyaW5ncyBvciBgbnVsbGAuIFdpdGhvdXQgZmxhZyBnLFxuICogICB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYHJlZ2V4LmV4ZWModGhpcylgLlxuICovXG5cblxuZml4ZWQubWF0Y2ggPSBmdW5jdGlvbiAocmVnZXgpIHtcbiAgaWYgKCFYUmVnRXhwLmlzUmVnRXhwKHJlZ2V4KSkge1xuICAgIC8vIFVzZSB0aGUgbmF0aXZlIGBSZWdFeHBgIHJhdGhlciB0aGFuIGBYUmVnRXhwYFxuICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleCk7XG4gIH0gZWxzZSBpZiAocmVnZXguZ2xvYmFsKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5hdGl2Lm1hdGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIEZpeGVzIElFIGJ1Z1xuXG4gICAgcmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZpeGVkLmV4ZWMuY2FsbChyZWdleCwgdG9PYmplY3QodGhpcykpO1xufTtcbi8qKlxuICogQWRkcyBzdXBwb3J0IGZvciBgJHtufWAgKG9yIGAkPG4+YCkgdG9rZW5zIGZvciBuYW1lZCBhbmQgbnVtYmVyZWQgYmFja3JlZmVyZW5jZXMgaW4gcmVwbGFjZW1lbnRcbiAqIHRleHQsIGFuZCBwcm92aWRlcyBuYW1lZCBiYWNrcmVmZXJlbmNlcyB0byByZXBsYWNlbWVudCBmdW5jdGlvbnMgYXMgYGFyZ3VtZW50c1swXS5uYW1lYC4gQWxzb1xuICogZml4ZXMgYnJvd3NlciBidWdzIGluIHJlcGxhY2VtZW50IHRleHQgc3ludGF4IHdoZW4gcGVyZm9ybWluZyBhIHJlcGxhY2VtZW50IHVzaW5nIGEgbm9ucmVnZXhcbiAqIHNlYXJjaCB2YWx1ZSwgYW5kIHRoZSB2YWx1ZSBvZiBhIHJlcGxhY2VtZW50IHJlZ2V4J3MgYGxhc3RJbmRleGAgcHJvcGVydHkgZHVyaW5nIHJlcGxhY2VtZW50XG4gKiBpdGVyYXRpb25zIGFuZCB1cG9uIGNvbXBsZXRpb24uIE5vdGUgdGhhdCB0aGlzIGRvZXNuJ3Qgc3VwcG9ydCBTcGlkZXJNb25rZXkncyBwcm9wcmlldGFyeSB0aGlyZFxuICogKGBmbGFnc2ApIGFyZ3VtZW50LiBVc2UgdmlhIGBYUmVnRXhwLnJlcGxhY2VgLlxuICpcbiAqIEBtZW1iZXJPZiBTdHJpbmdcbiAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gc2VhcmNoIFNlYXJjaCBwYXR0ZXJuIHRvIGJlIHJlcGxhY2VkLlxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHJlcGxhY2VtZW50IFJlcGxhY2VtZW50IHN0cmluZyBvciBhIGZ1bmN0aW9uIGludm9rZWQgdG8gY3JlYXRlIGl0LlxuICogQHJldHVybnMge1N0cmluZ30gTmV3IHN0cmluZyB3aXRoIG9uZSBvciBhbGwgbWF0Y2hlcyByZXBsYWNlZC5cbiAqL1xuXG5cbmZpeGVkLnJlcGxhY2UgPSBmdW5jdGlvbiAoc2VhcmNoLCByZXBsYWNlbWVudCkge1xuICB2YXIgaXNSZWdleCA9IFhSZWdFeHAuaXNSZWdFeHAoc2VhcmNoKTtcbiAgdmFyIG9yaWdMYXN0SW5kZXg7XG4gIHZhciBjYXB0dXJlTmFtZXM7XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKGlzUmVnZXgpIHtcbiAgICBpZiAoc2VhcmNoW1JFR0VYX0RBVEFdKSB7XG4gICAgICBjYXB0dXJlTmFtZXMgPSBzZWFyY2hbUkVHRVhfREFUQV0uY2FwdHVyZU5hbWVzO1xuICAgIH0gLy8gT25seSBuZWVkZWQgaWYgYHNlYXJjaGAgaXMgbm9uZ2xvYmFsXG5cblxuICAgIG9yaWdMYXN0SW5kZXggPSBzZWFyY2gubGFzdEluZGV4O1xuICB9IGVsc2Uge1xuICAgIHNlYXJjaCArPSAnJzsgLy8gVHlwZS1jb252ZXJ0XG4gIH0gLy8gRG9uJ3QgdXNlIGB0eXBlb2ZgOyBzb21lIG9sZGVyIGJyb3dzZXJzIHJldHVybiAnZnVuY3Rpb24nIGZvciByZWdleCBvYmplY3RzXG5cblxuICBpZiAoaXNUeXBlKHJlcGxhY2VtZW50LCAnRnVuY3Rpb24nKSkge1xuICAgIC8vIFN0cmluZ2lmeWluZyBgdGhpc2AgZml4ZXMgYSBidWcgaW4gSUUgPCA5IHdoZXJlIHRoZSBsYXN0IGFyZ3VtZW50IGluIHJlcGxhY2VtZW50XG4gICAgLy8gZnVuY3Rpb25zIGlzbid0IHR5cGUtY29udmVydGVkIHRvIGEgc3RyaW5nXG4gICAgcmVzdWx0ID0gbmF0aXYucmVwbGFjZS5jYWxsKFN0cmluZyh0aGlzKSwgc2VhcmNoLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcHR1cmVOYW1lcykge1xuICAgICAgICB2YXIgZ3JvdXBzT2JqZWN0O1xuXG4gICAgICAgIGlmIChYUmVnRXhwLmlzSW5zdGFsbGVkKCduYW1lc3BhY2luZycpKSB7XG4gICAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1yZWdleHAtbmFtZWQtZ3JvdXBzLyNzZWMtcmVnZXhwYnVpbHRpbmV4ZWNcbiAgICAgICAgICBncm91cHNPYmplY3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGFyZ3MucHVzaChncm91cHNPYmplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIENoYW5nZSB0aGUgYGFyZ3NbMF1gIHN0cmluZyBwcmltaXRpdmUgdG8gYSBgU3RyaW5nYCBvYmplY3QgdGhhdCBjYW4gc3RvcmVcbiAgICAgICAgICAvLyBwcm9wZXJ0aWVzLiBUaGlzIHJlYWxseSBkb2VzIG5lZWQgdG8gdXNlIGBTdHJpbmdgIGFzIGEgY29uc3RydWN0b3JcbiAgICAgICAgICBhcmdzWzBdID0gbmV3IFN0cmluZyhhcmdzWzBdKTtcbiAgICAgICAgICBncm91cHNPYmplY3QgPSBhcmdzWzBdO1xuICAgICAgICB9IC8vIFN0b3JlIG5hbWVkIGJhY2tyZWZlcmVuY2VzXG5cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhcHR1cmVOYW1lcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGlmIChjYXB0dXJlTmFtZXNbaV0pIHtcbiAgICAgICAgICAgIGdyb3Vwc09iamVjdFtjYXB0dXJlTmFtZXNbaV1dID0gYXJnc1tpICsgMV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIFVwZGF0ZSBgbGFzdEluZGV4YCBiZWZvcmUgY2FsbGluZyBgcmVwbGFjZW1lbnRgLiBGaXhlcyBJRSwgQ2hyb21lLCBGaXJlZm94LCBTYWZhcmlcbiAgICAgIC8vIGJ1ZyAobGFzdCB0ZXN0ZWQgSUUgOSwgQ2hyb21lIDE3LCBGaXJlZm94IDExLCBTYWZhcmkgNS4xKVxuXG5cbiAgICAgIGlmIChpc1JlZ2V4ICYmIHNlYXJjaC5nbG9iYWwpIHtcbiAgICAgICAgc2VhcmNoLmxhc3RJbmRleCA9IGFyZ3NbYXJncy5sZW5ndGggLSAyXSArIGFyZ3NbMF0ubGVuZ3RoO1xuICAgICAgfSAvLyBFUzYgc3BlY3MgdGhlIGNvbnRleHQgZm9yIHJlcGxhY2VtZW50IGZ1bmN0aW9ucyBhcyBgdW5kZWZpbmVkYFxuXG5cbiAgICAgIHJldHVybiByZXBsYWNlbWVudC5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBsYXN0IHZhbHVlIG9mIGBhcmdzYCB3aWxsIGJlIGEgc3RyaW5nIHdoZW4gZ2l2ZW4gbm9uc3RyaW5nIGB0aGlzYCxcbiAgICAvLyB3aGlsZSBzdGlsbCB0aHJvd2luZyBvbiBudWxsIG9yIHVuZGVmaW5lZCBjb250ZXh0XG4gICAgcmVzdWx0ID0gbmF0aXYucmVwbGFjZS5jYWxsKHRoaXMgPT0gbnVsbCA/IHRoaXMgOiBTdHJpbmcodGhpcyksIHNlYXJjaCwgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5hdGl2LnJlcGxhY2UuY2FsbChTdHJpbmcocmVwbGFjZW1lbnQpLCByZXBsYWNlbWVudFRva2VuLCByZXBsYWNlcik7XG5cbiAgICAgIGZ1bmN0aW9uIHJlcGxhY2VyKCQwLCBicmFja2V0ZWQsIGFuZ2xlZCwgZG9sbGFyVG9rZW4pIHtcbiAgICAgICAgYnJhY2tldGVkID0gYnJhY2tldGVkIHx8IGFuZ2xlZDsgLy8gTmFtZWQgb3IgbnVtYmVyZWQgYmFja3JlZmVyZW5jZSB3aXRoIGN1cmx5IG9yIGFuZ2xlZCBicmFjZXNcblxuICAgICAgICBpZiAoYnJhY2tldGVkKSB7XG4gICAgICAgICAgLy8gWFJlZ0V4cCBiZWhhdmlvciBmb3IgYCR7bn1gIG9yIGAkPG4+YDpcbiAgICAgICAgICAvLyAxLiBCYWNrcmVmZXJlbmNlIHRvIG51bWJlcmVkIGNhcHR1cmUsIGlmIGBuYCBpcyBhbiBpbnRlZ2VyLiBVc2UgYDBgIGZvciB0aGVcbiAgICAgICAgICAvLyAgICBlbnRpcmUgbWF0Y2guIEFueSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcyBtYXkgYmUgdXNlZC5cbiAgICAgICAgICAvLyAyLiBCYWNrcmVmZXJlbmNlIHRvIG5hbWVkIGNhcHR1cmUgYG5gLCBpZiBpdCBleGlzdHMgYW5kIGlzIG5vdCBhbiBpbnRlZ2VyXG4gICAgICAgICAgLy8gICAgb3ZlcnJpZGRlbiBieSBudW1iZXJlZCBjYXB0dXJlLiBJbiBwcmFjdGljZSwgdGhpcyBkb2VzIG5vdCBvdmVybGFwIHdpdGhcbiAgICAgICAgICAvLyAgICBudW1iZXJlZCBjYXB0dXJlIHNpbmNlIFhSZWdFeHAgZG9lcyBub3QgYWxsb3cgbmFtZWQgY2FwdHVyZSB0byB1c2UgYSBiYXJlXG4gICAgICAgICAgLy8gICAgaW50ZWdlciBhcyB0aGUgbmFtZS5cbiAgICAgICAgICAvLyAzLiBJZiB0aGUgbmFtZSBvciBudW1iZXIgZG9lcyBub3QgcmVmZXIgdG8gYW4gZXhpc3RpbmcgY2FwdHVyaW5nIGdyb3VwLCBpdCdzXG4gICAgICAgICAgLy8gICAgYW4gZXJyb3IuXG4gICAgICAgICAgdmFyIG4gPSArYnJhY2tldGVkOyAvLyBUeXBlLWNvbnZlcnQ7IGRyb3AgbGVhZGluZyB6ZXJvc1xuXG4gICAgICAgICAgaWYgKG4gPD0gYXJncy5sZW5ndGggLSAzKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJnc1tuXSB8fCAnJztcbiAgICAgICAgICB9IC8vIEdyb3VwcyB3aXRoIHRoZSBzYW1lIG5hbWUgaXMgYW4gZXJyb3IsIGVsc2Ugd291bGQgbmVlZCBgbGFzdEluZGV4T2ZgXG5cblxuICAgICAgICAgIG4gPSBjYXB0dXJlTmFtZXMgPyBjYXB0dXJlTmFtZXMuaW5kZXhPZihicmFja2V0ZWQpIDogLTE7XG5cbiAgICAgICAgICBpZiAobiA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkJhY2tyZWZlcmVuY2UgdG8gdW5kZWZpbmVkIGdyb3VwIFwiLmNvbmNhdCgkMCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBhcmdzW24gKyAxXSB8fCAnJztcbiAgICAgICAgfSAvLyBFbHNlLCBzcGVjaWFsIHZhcmlhYmxlIG9yIG51bWJlcmVkIGJhY2tyZWZlcmVuY2Ugd2l0aG91dCBjdXJseSBicmFjZXNcblxuXG4gICAgICAgIGlmIChkb2xsYXJUb2tlbiA9PT0gJyQnKSB7XG4gICAgICAgICAgLy8gJCRcbiAgICAgICAgICByZXR1cm4gJyQnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbGxhclRva2VuID09PSAnJicgfHwgK2RvbGxhclRva2VuID09PSAwKSB7XG4gICAgICAgICAgLy8gJCYsICQwIChub3QgZm9sbG93ZWQgYnkgMS05KSwgJDAwXG4gICAgICAgICAgcmV0dXJuIGFyZ3NbMF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9sbGFyVG9rZW4gPT09ICdgJykge1xuICAgICAgICAgIC8vICRgIChsZWZ0IGNvbnRleHQpXG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJncy5sZW5ndGggLSAxXS5zbGljZSgwLCBhcmdzW2FyZ3MubGVuZ3RoIC0gMl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbGxhclRva2VuID09PSBcIidcIikge1xuICAgICAgICAgIC8vICQnIChyaWdodCBjb250ZXh0KVxuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0uc2xpY2UoYXJnc1thcmdzLmxlbmd0aCAtIDJdICsgYXJnc1swXS5sZW5ndGgpO1xuICAgICAgICB9IC8vIEVsc2UsIG51bWJlcmVkIGJhY2tyZWZlcmVuY2Ugd2l0aG91dCBicmFjZXNcblxuXG4gICAgICAgIGRvbGxhclRva2VuID0gK2RvbGxhclRva2VuOyAvLyBUeXBlLWNvbnZlcnQ7IGRyb3AgbGVhZGluZyB6ZXJvXG4gICAgICAgIC8vIFhSZWdFeHAgYmVoYXZpb3IgZm9yIGAkbmAgYW5kIGAkbm5gOlxuICAgICAgICAvLyAtIEJhY2tyZWZzIGVuZCBhZnRlciAxIG9yIDIgZGlnaXRzLiBVc2UgYCR7Li59YCBvciBgJDwuLj5gIGZvciBtb3JlIGRpZ2l0cy5cbiAgICAgICAgLy8gLSBgJDFgIGlzIGFuIGVycm9yIGlmIG5vIGNhcHR1cmluZyBncm91cHMuXG4gICAgICAgIC8vIC0gYCQxMGAgaXMgYW4gZXJyb3IgaWYgbGVzcyB0aGFuIDEwIGNhcHR1cmluZyBncm91cHMuIFVzZSBgJHsxfTBgIG9yIGAkPDE+MGBcbiAgICAgICAgLy8gICBpbnN0ZWFkLlxuICAgICAgICAvLyAtIGAkMDFgIGlzIGAkMWAgaWYgYXQgbGVhc3Qgb25lIGNhcHR1cmluZyBncm91cCwgZWxzZSBpdCdzIGFuIGVycm9yLlxuICAgICAgICAvLyAtIGAkMGAgKG5vdCBmb2xsb3dlZCBieSAxLTkpIGFuZCBgJDAwYCBhcmUgdGhlIGVudGlyZSBtYXRjaC5cbiAgICAgICAgLy8gTmF0aXZlIGJlaGF2aW9yLCBmb3IgY29tcGFyaXNvbjpcbiAgICAgICAgLy8gLSBCYWNrcmVmcyBlbmQgYWZ0ZXIgMSBvciAyIGRpZ2l0cy4gQ2Fubm90IHJlZmVyZW5jZSBjYXB0dXJpbmcgZ3JvdXAgMTAwKy5cbiAgICAgICAgLy8gLSBgJDFgIGlzIGEgbGl0ZXJhbCBgJDFgIGlmIG5vIGNhcHR1cmluZyBncm91cHMuXG4gICAgICAgIC8vIC0gYCQxMGAgaXMgYCQxYCBmb2xsb3dlZCBieSBhIGxpdGVyYWwgYDBgIGlmIGxlc3MgdGhhbiAxMCBjYXB0dXJpbmcgZ3JvdXBzLlxuICAgICAgICAvLyAtIGAkMDFgIGlzIGAkMWAgaWYgYXQgbGVhc3Qgb25lIGNhcHR1cmluZyBncm91cCwgZWxzZSBpdCdzIGEgbGl0ZXJhbCBgJDAxYC5cbiAgICAgICAgLy8gLSBgJDBgIGlzIGEgbGl0ZXJhbCBgJDBgLlxuXG4gICAgICAgIGlmICghaXNOYU4oZG9sbGFyVG9rZW4pKSB7XG4gICAgICAgICAgaWYgKGRvbGxhclRva2VuID4gYXJncy5sZW5ndGggLSAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJCYWNrcmVmZXJlbmNlIHRvIHVuZGVmaW5lZCBncm91cCBcIi5jb25jYXQoJDApKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXJnc1tkb2xsYXJUb2tlbl0gfHwgJyc7XG4gICAgICAgIH0gLy8gYCRgIGZvbGxvd2VkIGJ5IGFuIHVuc3VwcG9ydGVkIGNoYXIgaXMgYW4gZXJyb3IsIHVubGlrZSBuYXRpdmUgSlNcblxuXG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkludmFsaWQgdG9rZW4gXCIuY29uY2F0KCQwKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaXNSZWdleCkge1xuICAgIGlmIChzZWFyY2guZ2xvYmFsKSB7XG4gICAgICAvLyBGaXhlcyBJRSwgU2FmYXJpIGJ1ZyAobGFzdCB0ZXN0ZWQgSUUgOSwgU2FmYXJpIDUuMSlcbiAgICAgIHNlYXJjaC5sYXN0SW5kZXggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGaXhlcyBJRSwgT3BlcmEgYnVnIChsYXN0IHRlc3RlZCBJRSA5LCBPcGVyYSAxMS42KVxuICAgICAgc2VhcmNoLmxhc3RJbmRleCA9IG9yaWdMYXN0SW5kZXg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKipcbiAqIEZpeGVzIGJyb3dzZXIgYnVncyBpbiB0aGUgbmF0aXZlIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YC4gVXNlIHZpYSBgWFJlZ0V4cC5zcGxpdGAuXG4gKlxuICogQG1lbWJlck9mIFN0cmluZ1xuICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBzZXBhcmF0b3IgUmVnZXggb3Igc3RyaW5nIHRvIHVzZSBmb3Igc2VwYXJhdGluZyB0aGUgc3RyaW5nLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtsaW1pdF0gTWF4aW11bSBudW1iZXIgb2YgaXRlbXMgdG8gaW5jbHVkZSBpbiB0aGUgcmVzdWx0IGFycmF5LlxuICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiBzdWJzdHJpbmdzLlxuICovXG5cblxuZml4ZWQuc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICBpZiAoIVhSZWdFeHAuaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgIC8vIEJyb3dzZXJzIGhhbmRsZSBub25yZWdleCBzcGxpdCBjb3JyZWN0bHksIHNvIHVzZSB0aGUgZmFzdGVyIG5hdGl2ZSBtZXRob2RcbiAgICByZXR1cm4gbmF0aXYuc3BsaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHZhciBzdHIgPSBTdHJpbmcodGhpcyk7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgdmFyIG9yaWdMYXN0SW5kZXggPSBzZXBhcmF0b3IubGFzdEluZGV4O1xuICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gIHZhciBsYXN0TGVuZ3RoOyAvLyBWYWx1ZXMgZm9yIGBsaW1pdGAsIHBlciB0aGUgc3BlYzpcbiAgLy8gSWYgdW5kZWZpbmVkOiBwb3coMiwzMikgLSAxXG4gIC8vIElmIDAsIEluZmluaXR5LCBvciBOYU46IDBcbiAgLy8gSWYgcG9zaXRpdmUgbnVtYmVyOiBsaW1pdCA9IGZsb29yKGxpbWl0KTsgaWYgKGxpbWl0ID49IHBvdygyLDMyKSkgbGltaXQgLT0gcG93KDIsMzIpO1xuICAvLyBJZiBuZWdhdGl2ZSBudW1iZXI6IHBvdygyLDMyKSAtIGZsb29yKGFicyhsaW1pdCkpXG4gIC8vIElmIG90aGVyOiBUeXBlLWNvbnZlcnQsIHRoZW4gdXNlIHRoZSBhYm92ZSBydWxlc1xuICAvLyBUaGlzIGxpbmUgZmFpbHMgaW4gdmVyeSBzdHJhbmdlIHdheXMgZm9yIHNvbWUgdmFsdWVzIG9mIGBsaW1pdGAgaW4gT3BlcmEgMTAuNS0xMC42MywgdW5sZXNzXG4gIC8vIE9wZXJhIERyYWdvbmZseSBpcyBvcGVuIChnbyBmaWd1cmUpLiBJdCB3b3JrcyBpbiBhdCBsZWFzdCBPcGVyYSA5LjUtMTAuMSBhbmQgMTErXG5cbiAgbGltaXQgPSAobGltaXQgPT09IHVuZGVmaW5lZCA/IC0xIDogbGltaXQpID4+PiAwO1xuICBYUmVnRXhwLmZvckVhY2goc3RyLCBzZXBhcmF0b3IsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIC8vIFRoaXMgY29uZGl0aW9uIGlzIG5vdCB0aGUgc2FtZSBhcyBgaWYgKG1hdGNoWzBdLmxlbmd0aClgXG4gICAgaWYgKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgb3V0cHV0LnB1c2goc3RyLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG5cbiAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgIH1cblxuICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIGxhc3RMYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIGxhc3RMZW5ndGg7XG4gICAgfVxuICB9KTtcblxuICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyLmxlbmd0aCkge1xuICAgIGlmICghbmF0aXYudGVzdC5jYWxsKHNlcGFyYXRvciwgJycpIHx8IGxhc3RMZW5ndGgpIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0LnB1c2goc3RyLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgfVxuXG4gIHNlcGFyYXRvci5sYXN0SW5kZXggPSBvcmlnTGFzdEluZGV4O1xuICByZXR1cm4gb3V0cHV0Lmxlbmd0aCA+IGxpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIGxpbWl0KSA6IG91dHB1dDtcbn07IC8vID09LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS09PVxuLy8gQnVpbHQtaW4gc3ludGF4L2ZsYWcgdG9rZW5zXG4vLyA9PS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPT1cblxuLypcbiAqIExldHRlciBlc2NhcGVzIHRoYXQgbmF0aXZlbHkgbWF0Y2ggbGl0ZXJhbCBjaGFyYWN0ZXJzOiBgXFxhYCwgYFxcQWAsIGV0Yy4gVGhlc2Ugc2hvdWxkIGJlXG4gKiBTeW50YXhFcnJvcnMgYnV0IGFyZSBhbGxvd2VkIGluIHdlYiByZWFsaXR5LiBYUmVnRXhwIG1ha2VzIHRoZW0gZXJyb3JzIGZvciBjcm9zcy1icm93c2VyXG4gKiBjb25zaXN0ZW5jeSBhbmQgdG8gcmVzZXJ2ZSB0aGVpciBzeW50YXgsIGJ1dCBsZXRzIHRoZW0gYmUgc3VwZXJzZWRlZCBieSBhZGRvbnMuXG4gKi9cblxuXG5YUmVnRXhwLmFkZFRva2VuKC9cXFxcKFtBQkNFLVJUVVZYWVphZWctbW9wcXl6XXxjKD8hW0EtWmEtel0pfHUoPyFbXFxkQS1GYS1mXXs0fXx7W1xcZEEtRmEtZl0rfSl8eCg/IVtcXGRBLUZhLWZdezJ9KSkvLCBmdW5jdGlvbiAobWF0Y2gsIHNjb3BlKSB7XG4gIC8vIFxcQiBpcyBhbGxvd2VkIGluIGRlZmF1bHQgc2NvcGUgb25seVxuICBpZiAobWF0Y2hbMV0gPT09ICdCJyAmJiBzY29wZSA9PT0gZGVmYXVsdFNjb3BlKSB7XG4gICAgcmV0dXJuIG1hdGNoWzBdO1xuICB9XG5cbiAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiSW52YWxpZCBlc2NhcGUgXCIuY29uY2F0KG1hdGNoWzBdKSk7XG59LCB7XG4gIHNjb3BlOiAnYWxsJyxcbiAgbGVhZENoYXI6ICdcXFxcJ1xufSk7XG4vKlxuICogVW5pY29kZSBjb2RlIHBvaW50IGVzY2FwZSB3aXRoIGN1cmx5IGJyYWNlczogYFxcdXtOLi59YC4gYE4uLmAgaXMgYW55IG9uZSBvciBtb3JlIGRpZ2l0XG4gKiBoZXhhZGVjaW1hbCBudW1iZXIgZnJvbSAwLTEwRkZGRiwgYW5kIGNhbiBpbmNsdWRlIGxlYWRpbmcgemVyb3MuIFJlcXVpcmVzIHRoZSBuYXRpdmUgRVM2IGB1YCBmbGFnXG4gKiB0byBzdXBwb3J0IGNvZGUgcG9pbnRzIGdyZWF0ZXIgdGhhbiBVK0ZGRkYuIEF2b2lkcyBjb252ZXJ0aW5nIGNvZGUgcG9pbnRzIGFib3ZlIFUrRkZGRiB0b1xuICogc3Vycm9nYXRlIHBhaXJzICh3aGljaCBjb3VsZCBiZSBkb25lIHdpdGhvdXQgZmxhZyBgdWApLCBzaW5jZSB0aGF0IGNvdWxkIGxlYWQgdG8gYnJva2VuIGJlaGF2aW9yXG4gKiBpZiB5b3UgZm9sbG93IGEgYFxcdXtOLi59YCB0b2tlbiB0aGF0IHJlZmVyZW5jZXMgYSBjb2RlIHBvaW50IGFib3ZlIFUrRkZGRiB3aXRoIGEgcXVhbnRpZmllciwgb3JcbiAqIGlmIHlvdSB1c2UgdGhlIHNhbWUgaW4gYSBjaGFyYWN0ZXIgY2xhc3MuXG4gKi9cblxuWFJlZ0V4cC5hZGRUb2tlbigvXFxcXHV7KFtcXGRBLUZhLWZdKyl9LywgZnVuY3Rpb24gKG1hdGNoLCBzY29wZSwgZmxhZ3MpIHtcbiAgdmFyIGNvZGUgPSBkZWMobWF0Y2hbMV0pO1xuXG4gIGlmIChjb2RlID4gMHgxMEZGRkYpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJJbnZhbGlkIFVuaWNvZGUgY29kZSBwb2ludCBcIi5jb25jYXQobWF0Y2hbMF0pKTtcbiAgfVxuXG4gIGlmIChjb2RlIDw9IDB4RkZGRikge1xuICAgIC8vIENvbnZlcnRpbmcgdG8gXFx1Tk5OTiBhdm9pZHMgbmVlZGluZyB0byBlc2NhcGUgdGhlIGxpdGVyYWwgY2hhcmFjdGVyIGFuZCBrZWVwIGl0XG4gICAgLy8gc2VwYXJhdGUgZnJvbSBwcmVjZWRpbmcgdG9rZW5zXG4gICAgcmV0dXJuIFwiXFxcXHVcIi5jb25jYXQocGFkNChoZXgoY29kZSkpKTtcbiAgfSAvLyBJZiBgY29kZWAgaXMgYmV0d2VlbiAweEZGRkYgYW5kIDB4MTBGRkZGLCByZXF1aXJlIGFuZCBkZWZlciB0byBuYXRpdmUgaGFuZGxpbmdcblxuXG4gIGlmIChoYXNOYXRpdmVVICYmIGZsYWdzLmluZGV4T2YoJ3UnKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gbWF0Y2hbMF07XG4gIH1cblxuICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0Nhbm5vdCB1c2UgVW5pY29kZSBjb2RlIHBvaW50IGFib3ZlIFxcXFx1e0ZGRkZ9IHdpdGhvdXQgZmxhZyB1Jyk7XG59LCB7XG4gIHNjb3BlOiAnYWxsJyxcbiAgbGVhZENoYXI6ICdcXFxcJ1xufSk7XG4vKlxuICogRW1wdHkgY2hhcmFjdGVyIGNsYXNzOiBgW11gIG9yIGBbXl1gLiBUaGlzIGZpeGVzIGEgY3JpdGljYWwgY3Jvc3MtYnJvd3NlciBzeW50YXggaW5jb25zaXN0ZW5jeS5cbiAqIFVubGVzcyB0aGlzIGlzIHN0YW5kYXJkaXplZCAocGVyIHRoZSBFUyBzcGVjKSwgcmVnZXggc3ludGF4IGNhbid0IGJlIGFjY3VyYXRlbHkgcGFyc2VkIGJlY2F1c2VcbiAqIGNoYXJhY3RlciBjbGFzcyBlbmRpbmdzIGNhbid0IGJlIGRldGVybWluZWQuXG4gKi9cblxuWFJlZ0V4cC5hZGRUb2tlbigvXFxbKFxcXj8pXFxdLywgLy8gRm9yIGNyb3NzLWJyb3dzZXIgY29tcGF0aWJpbGl0eSB3aXRoIEVTMywgY29udmVydCBbXSB0byBcXGJcXEIgYW5kIFteXSB0byBbXFxzXFxTXS5cbi8vICg/ISkgc2hvdWxkIHdvcmsgbGlrZSBcXGJcXEIsIGJ1dCBpcyB1bnJlbGlhYmxlIGluIHNvbWUgdmVyc2lvbnMgb2YgRmlyZWZveFxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25mdXNpbmctYXJyb3cgKi9cbmZ1bmN0aW9uIChtYXRjaCkge1xuICByZXR1cm4gbWF0Y2hbMV0gPyAnW1xcXFxzXFxcXFNdJyA6ICdcXFxcYlxcXFxCJztcbn0sXG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmZ1c2luZy1hcnJvdyAqL1xue1xuICBsZWFkQ2hhcjogJ1snXG59KTtcbi8qXG4gKiBDb21tZW50IHBhdHRlcm46IGAoPyMgKWAuIElubGluZSBjb21tZW50cyBhcmUgYW4gYWx0ZXJuYXRpdmUgdG8gdGhlIGxpbmUgY29tbWVudHMgYWxsb3dlZCBpblxuICogZnJlZS1zcGFjaW5nIG1vZGUgKGZsYWcgeCkuXG4gKi9cblxuWFJlZ0V4cC5hZGRUb2tlbigvXFwoXFw/I1teKV0qXFwpLywgZ2V0Q29udGV4dHVhbFRva2VuU2VwYXJhdG9yLCB7XG4gIGxlYWRDaGFyOiAnKCdcbn0pO1xuLypcbiAqIFdoaXRlc3BhY2UgYW5kIGxpbmUgY29tbWVudHMsIGluIGZyZWUtc3BhY2luZyBtb2RlIChha2EgZXh0ZW5kZWQgbW9kZSwgZmxhZyB4KSBvbmx5LlxuICovXG5cblhSZWdFeHAuYWRkVG9rZW4oL1xccyt8I1teXFxuXSpcXG4/LywgZ2V0Q29udGV4dHVhbFRva2VuU2VwYXJhdG9yLCB7XG4gIGZsYWc6ICd4J1xufSk7XG4vKlxuICogRG90LCBpbiBkb3RhbGwgbW9kZSAoYWthIHNpbmdsZWxpbmUgbW9kZSwgZmxhZyBzKSBvbmx5LlxuICovXG5cblhSZWdFeHAuYWRkVG9rZW4oL1xcLi8sIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICdbXFxcXHNcXFxcU10nO1xufSwge1xuICBmbGFnOiAncycsXG4gIGxlYWRDaGFyOiAnLidcbn0pO1xuLypcbiAqIE5hbWVkIGJhY2tyZWZlcmVuY2U6IGBcXGs8bmFtZT5gLiBCYWNrcmVmZXJlbmNlIG5hbWVzIGNhbiB1c2UgdGhlIGNoYXJhY3RlcnMgQS1aLCBhLXosIDAtOSwgXyxcbiAqIGFuZCAkIG9ubHkuIEFsc28gYWxsb3dzIG51bWJlcmVkIGJhY2tyZWZlcmVuY2VzIGFzIGBcXGs8bj5gLlxuICovXG5cblhSZWdFeHAuYWRkVG9rZW4oL1xcXFxrPChbXFx3JF0rKT4vLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgLy8gR3JvdXBzIHdpdGggdGhlIHNhbWUgbmFtZSBpcyBhbiBlcnJvciwgZWxzZSB3b3VsZCBuZWVkIGBsYXN0SW5kZXhPZmBcbiAgdmFyIGluZGV4ID0gaXNOYU4obWF0Y2hbMV0pID8gdGhpcy5jYXB0dXJlTmFtZXMuaW5kZXhPZihtYXRjaFsxXSkgKyAxIDogK21hdGNoWzFdO1xuICB2YXIgZW5kSW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcblxuICBpZiAoIWluZGV4IHx8IGluZGV4ID4gdGhpcy5jYXB0dXJlTmFtZXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQmFja3JlZmVyZW5jZSB0byB1bmRlZmluZWQgZ3JvdXAgXCIuY29uY2F0KG1hdGNoWzBdKSk7XG4gIH0gLy8gS2VlcCBiYWNrcmVmZXJlbmNlcyBzZXBhcmF0ZSBmcm9tIHN1YnNlcXVlbnQgbGl0ZXJhbCBudW1iZXJzLiBUaGlzIGF2b2lkcyBlLmcuXG4gIC8vIGluYWR2ZXJ0ZWRseSBjaGFuZ2luZyBgKD88bj4pXFxrPG4+MWAgdG8gYCgpXFwxMWAuXG5cblxuICByZXR1cm4gXCJcXFxcXCIuY29uY2F0KGluZGV4KS5jb25jYXQoZW5kSW5kZXggPT09IG1hdGNoLmlucHV0Lmxlbmd0aCB8fCBpc05hTihtYXRjaC5pbnB1dFtlbmRJbmRleF0pID8gJycgOiAnKD86KScpO1xufSwge1xuICBsZWFkQ2hhcjogJ1xcXFwnXG59KTtcbi8qXG4gKiBOdW1iZXJlZCBiYWNrcmVmZXJlbmNlIG9yIG9jdGFsLCBwbHVzIGFueSBmb2xsb3dpbmcgZGlnaXRzOiBgXFwwYCwgYFxcMTFgLCBldGMuIE9jdGFscyBleGNlcHQgYFxcMGBcbiAqIG5vdCBmb2xsb3dlZCBieSAwLTkgYW5kIGJhY2tyZWZlcmVuY2VzIHRvIHVub3BlbmVkIGNhcHR1cmUgZ3JvdXBzIHRocm93IGFuIGVycm9yLiBPdGhlciBtYXRjaGVzXG4gKiBhcmUgcmV0dXJuZWQgdW5hbHRlcmVkLiBJRSA8IDkgZG9lc24ndCBzdXBwb3J0IGJhY2tyZWZlcmVuY2VzIGFib3ZlIGBcXDk5YCBpbiByZWdleCBzeW50YXguXG4gKi9cblxuWFJlZ0V4cC5hZGRUb2tlbigvXFxcXChcXGQrKS8sIGZ1bmN0aW9uIChtYXRjaCwgc2NvcGUpIHtcbiAgaWYgKCEoc2NvcGUgPT09IGRlZmF1bHRTY29wZSAmJiAvXlsxLTldLy50ZXN0KG1hdGNoWzFdKSAmJiArbWF0Y2hbMV0gPD0gdGhpcy5jYXB0dXJlTmFtZXMubGVuZ3RoKSAmJiBtYXRjaFsxXSAhPT0gJzAnKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQ2Fubm90IHVzZSBvY3RhbCBlc2NhcGUgb3IgYmFja3JlZmVyZW5jZSB0byB1bmRlZmluZWQgZ3JvdXAgXCIuY29uY2F0KG1hdGNoWzBdKSk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hbMF07XG59LCB7XG4gIHNjb3BlOiAnYWxsJyxcbiAgbGVhZENoYXI6ICdcXFxcJ1xufSk7XG4vKlxuICogTmFtZWQgY2FwdHVyaW5nIGdyb3VwOyBtYXRjaCB0aGUgb3BlbmluZyBkZWxpbWl0ZXIgb25seTogYCg/PG5hbWU+YC4gQ2FwdHVyZSBuYW1lcyBjYW4gdXNlIHRoZVxuICogY2hhcmFjdGVycyBBLVosIGEteiwgMC05LCBfLCBhbmQgJCBvbmx5LiBOYW1lcyBjYW4ndCBiZSBpbnRlZ2Vycy4gU3VwcG9ydHMgUHl0aG9uLXN0eWxlXG4gKiBgKD9QPG5hbWU+YCBhcyBhbiBhbHRlcm5hdGUgc3ludGF4IHRvIGF2b2lkIGlzc3VlcyBpbiBzb21lIG9sZGVyIHZlcnNpb25zIG9mIE9wZXJhIHdoaWNoIG5hdGl2ZWx5XG4gKiBzdXBwb3J0ZWQgdGhlIFB5dGhvbi1zdHlsZSBzeW50YXguIE90aGVyd2lzZSwgWFJlZ0V4cCBtaWdodCB0cmVhdCBudW1iZXJlZCBiYWNrcmVmZXJlbmNlcyB0b1xuICogUHl0aG9uLXN0eWxlIG5hbWVkIGNhcHR1cmUgYXMgb2N0YWxzLlxuICovXG5cblhSZWdFeHAuYWRkVG9rZW4oL1xcKFxcP1A/PChbXFx3JF0rKT4vLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgLy8gRGlzYWxsb3cgYmFyZSBpbnRlZ2VycyBhcyBuYW1lcyBiZWNhdXNlIG5hbWVkIGJhY2tyZWZlcmVuY2VzIGFyZSBhZGRlZCB0byBtYXRjaCBhcnJheXNcbiAgLy8gYW5kIHRoZXJlZm9yZSBudW1lcmljIHByb3BlcnRpZXMgbWF5IGxlYWQgdG8gaW5jb3JyZWN0IGxvb2t1cHNcbiAgaWYgKCFpc05hTihtYXRjaFsxXSkpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJDYW5ub3QgdXNlIGludGVnZXIgYXMgY2FwdHVyZSBuYW1lIFwiLmNvbmNhdChtYXRjaFswXSkpO1xuICB9XG5cbiAgaWYgKCFYUmVnRXhwLmlzSW5zdGFsbGVkKCduYW1lc3BhY2luZycpICYmIChtYXRjaFsxXSA9PT0gJ2xlbmd0aCcgfHwgbWF0Y2hbMV0gPT09ICdfX3Byb3RvX18nKSkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkNhbm5vdCB1c2UgcmVzZXJ2ZWQgd29yZCBhcyBjYXB0dXJlIG5hbWUgXCIuY29uY2F0KG1hdGNoWzBdKSk7XG4gIH1cblxuICBpZiAodGhpcy5jYXB0dXJlTmFtZXMuaW5kZXhPZihtYXRjaFsxXSkgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQ2Fubm90IHVzZSBzYW1lIG5hbWUgZm9yIG11bHRpcGxlIGdyb3VwcyBcIi5jb25jYXQobWF0Y2hbMF0pKTtcbiAgfVxuXG4gIHRoaXMuY2FwdHVyZU5hbWVzLnB1c2gobWF0Y2hbMV0pO1xuICB0aGlzLmhhc05hbWVkQ2FwdHVyZSA9IHRydWU7XG4gIHJldHVybiAnKCc7XG59LCB7XG4gIGxlYWRDaGFyOiAnKCdcbn0pO1xuLypcbiAqIENhcHR1cmluZyBncm91cDsgbWF0Y2ggdGhlIG9wZW5pbmcgcGFyZW50aGVzaXMgb25seS4gUmVxdWlyZWQgZm9yIHN1cHBvcnQgb2YgbmFtZWQgY2FwdHVyaW5nXG4gKiBncm91cHMuIEFsc28gYWRkcyBleHBsaWNpdCBjYXB0dXJlIG1vZGUgKGZsYWcgbikuXG4gKi9cblxuWFJlZ0V4cC5hZGRUb2tlbigvXFwoKD8hXFw/KS8sIGZ1bmN0aW9uIChtYXRjaCwgc2NvcGUsIGZsYWdzKSB7XG4gIGlmIChmbGFncy5pbmRleE9mKCduJykgIT09IC0xKSB7XG4gICAgcmV0dXJuICcoPzonO1xuICB9XG5cbiAgdGhpcy5jYXB0dXJlTmFtZXMucHVzaChudWxsKTtcbiAgcmV0dXJuICcoJztcbn0sIHtcbiAgb3B0aW9uYWxGbGFnczogJ24nLFxuICBsZWFkQ2hhcjogJygnXG59KTtcbnZhciBfZGVmYXVsdCA9IFhSZWdFeHA7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwibW9kdWxlLmV4cG9ydHMgPSBbXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkFkbGFtJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODNBW1xcdUREMDAtXFx1REQ1Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQWVnZWFuX051bWJlcnMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REQwMC1cXHVERDNGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5BaG9tJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA1W1xcdURGMDAtXFx1REYzRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQWxjaGVtaWNhbF9TeW1ib2xzJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODNEW1xcdURGMDAtXFx1REY3Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQWxwaGFiZXRpY19QcmVzZW50YXRpb25fRm9ybXMnLFxuICAgICAgICAnYm1wJzogJ1xcdUZCMDAtXFx1RkI0RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5BbmF0b2xpYW5fSGllcm9nbHlwaHMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MTFbXFx1REMwMC1cXHVERTdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5BbmNpZW50X0dyZWVrX011c2ljYWxfTm90YXRpb24nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MzRbXFx1REUwMC1cXHVERTRGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5BbmNpZW50X0dyZWVrX051bWJlcnMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REQ0MC1cXHVERDhGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5BbmNpZW50X1N5bWJvbHMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REQ5MC1cXHVERENGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5BcmFiaWMnLFxuICAgICAgICAnYm1wJzogJ1xcdTA2MDAtXFx1MDZGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5BcmFiaWNfRXh0ZW5kZWRfQScsXG4gICAgICAgICdibXAnOiAnXFx1MDhBMC1cXHUwOEZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkFyYWJpY19NYXRoZW1hdGljYWxfQWxwaGFiZXRpY19TeW1ib2xzJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODNCW1xcdURFMDAtXFx1REVGRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQXJhYmljX1ByZXNlbnRhdGlvbl9Gb3Jtc19BJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVGQjUwLVxcdUZERkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQXJhYmljX1ByZXNlbnRhdGlvbl9Gb3Jtc19CJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVGRTcwLVxcdUZFRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQXJhYmljX1N1cHBsZW1lbnQnLFxuICAgICAgICAnYm1wJzogJ1xcdTA3NTAtXFx1MDc3RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Bcm1lbmlhbicsXG4gICAgICAgICdibXAnOiAnXFx1MDUzMC1cXHUwNThGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkFycm93cycsXG4gICAgICAgICdibXAnOiAnXFx1MjE5MC1cXHUyMUZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkF2ZXN0YW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REYwMC1cXHVERjNGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5CYWxpbmVzZScsXG4gICAgICAgICdibXAnOiAnXFx1MUIwMC1cXHUxQjdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkJhbXVtJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBNkEwLVxcdUE2RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQmFtdW1fU3VwcGxlbWVudCcsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgxQVtcXHVEQzAwLVxcdURFM0ZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkJhc2ljX0xhdGluJyxcbiAgICAgICAgJ2JtcCc6ICdcXDAtXFx4N0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQmFzc2FfVmFoJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODFBW1xcdURFRDAtXFx1REVGRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQmF0YWsnLFxuICAgICAgICAnYm1wJzogJ1xcdTFCQzAtXFx1MUJGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5CZW5nYWxpJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwOTgwLVxcdTA5RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQmhhaWtzdWtpJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA3W1xcdURDMDAtXFx1REM2Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQmxvY2tfRWxlbWVudHMnLFxuICAgICAgICAnYm1wJzogJ1xcdTI1ODAtXFx1MjU5RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Cb3BvbW9mbycsXG4gICAgICAgICdibXAnOiAnXFx1MzEwMC1cXHUzMTJGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkJvcG9tb2ZvX0V4dGVuZGVkJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUzMUEwLVxcdTMxQkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQm94X0RyYXdpbmcnLFxuICAgICAgICAnYm1wJzogJ1xcdTI1MDAtXFx1MjU3RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5CcmFobWknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1REMwMC1cXHVEQzdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5CcmFpbGxlX1BhdHRlcm5zJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyODAwLVxcdTI4RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQnVnaW5lc2UnLFxuICAgICAgICAnYm1wJzogJ1xcdTFBMDAtXFx1MUExRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5CdWhpZCcsXG4gICAgICAgICdibXAnOiAnXFx1MTc0MC1cXHUxNzVGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkJ5emFudGluZV9NdXNpY2FsX1N5bWJvbHMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MzRbXFx1REMwMC1cXHVEQ0ZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5DSktfQ29tcGF0aWJpbGl0eScsXG4gICAgICAgICdibXAnOiAnXFx1MzMwMC1cXHUzM0ZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNKS19Db21wYXRpYmlsaXR5X0Zvcm1zJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVGRTMwLVxcdUZFNEYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ0pLX0NvbXBhdGliaWxpdHlfSWRlb2dyYXBocycsXG4gICAgICAgICdibXAnOiAnXFx1RjkwMC1cXHVGQUZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNKS19Db21wYXRpYmlsaXR5X0lkZW9ncmFwaHNfU3VwcGxlbWVudCcsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDg3RVtcXHVEQzAwLVxcdURFMUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNKS19SYWRpY2Fsc19TdXBwbGVtZW50JyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyRTgwLVxcdTJFRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ0pLX1N0cm9rZXMnLFxuICAgICAgICAnYm1wJzogJ1xcdTMxQzAtXFx1MzFFRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5DSktfU3ltYm9sc19BbmRfUHVuY3R1YXRpb24nLFxuICAgICAgICAnYm1wJzogJ1xcdTMwMDAtXFx1MzAzRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5DSktfVW5pZmllZF9JZGVvZ3JhcGhzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHU0RTAwLVxcdTlGRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ0pLX1VuaWZpZWRfSWRlb2dyYXBoc19FeHRlbnNpb25fQScsXG4gICAgICAgICdibXAnOiAnXFx1MzQwMC1cXHU0REJGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNKS19VbmlmaWVkX0lkZW9ncmFwaHNfRXh0ZW5zaW9uX0InLFxuICAgICAgICAnYXN0cmFsJzogJ1tcXHVEODQwLVxcdUQ4NjhdW1xcdURDMDAtXFx1REZGRl18XFx1RDg2OVtcXHVEQzAwLVxcdURFREZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNKS19VbmlmaWVkX0lkZW9ncmFwaHNfRXh0ZW5zaW9uX0MnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4NjlbXFx1REYwMC1cXHVERkZGXXxbXFx1RDg2QS1cXHVEODZDXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjNGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5DSktfVW5pZmllZF9JZGVvZ3JhcGhzX0V4dGVuc2lvbl9EJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODZEW1xcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNKS19VbmlmaWVkX0lkZW9ncmFwaHNfRXh0ZW5zaW9uX0UnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4NkVbXFx1REMyMC1cXHVERkZGXXxbXFx1RDg2Ri1cXHVEODcyXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUFGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5DSktfVW5pZmllZF9JZGVvZ3JhcGhzX0V4dGVuc2lvbl9GJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODczW1xcdURFQjAtXFx1REZGRl18W1xcdUQ4NzQtXFx1RDg3OV1bXFx1REMwMC1cXHVERkZGXXxcXHVEODdBW1xcdURDMDAtXFx1REZFRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ2FyaWFuJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAwW1xcdURFQTAtXFx1REVERl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ2F1Y2FzaWFuX0FsYmFuaWFuJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAxW1xcdUREMzAtXFx1REQ2Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ2hha21hJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA0W1xcdUREMDAtXFx1REQ0Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ2hhbScsXG4gICAgICAgICdibXAnOiAnXFx1QUEwMC1cXHVBQTVGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNoZXJva2VlJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxM0EwLVxcdTEzRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ2hlcm9rZWVfU3VwcGxlbWVudCcsXG4gICAgICAgICdibXAnOiAnXFx1QUI3MC1cXHVBQkJGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNoZXNzX1N5bWJvbHMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4M0VbXFx1REUwMC1cXHVERTZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MnLFxuICAgICAgICAnYm1wJzogJ1xcdTAzMDAtXFx1MDM2RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfRXh0ZW5kZWQnLFxuICAgICAgICAnYm1wJzogJ1xcdTFBQjAtXFx1MUFGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfRm9yX1N5bWJvbHMnLFxuICAgICAgICAnYm1wJzogJ1xcdTIwRDAtXFx1MjBGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfU3VwcGxlbWVudCcsXG4gICAgICAgICdibXAnOiAnXFx1MURDMC1cXHUxREZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNvbWJpbmluZ19IYWxmX01hcmtzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVGRTIwLVxcdUZFMkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ29tbW9uX0luZGljX051bWJlcl9Gb3JtcycsXG4gICAgICAgICdibXAnOiAnXFx1QTgzMC1cXHVBODNGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNvbnRyb2xfUGljdHVyZXMnLFxuICAgICAgICAnYm1wJzogJ1xcdTI0MDAtXFx1MjQzRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Db3B0aWMnLFxuICAgICAgICAnYm1wJzogJ1xcdTJDODAtXFx1MkNGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Db3B0aWNfRXBhY3RfTnVtYmVycycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERUUwLVxcdURFRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkNvdW50aW5nX1JvZF9OdW1lcmFscycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzNFtcXHVERjYwLVxcdURGN0ZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkN1bmVpZm9ybScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwOFtcXHVEQzAwLVxcdURGRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkN1bmVpZm9ybV9OdW1iZXJzX0FuZF9QdW5jdHVhdGlvbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwOVtcXHVEQzAwLVxcdURDN0ZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkN1cnJlbmN5X1N5bWJvbHMnLFxuICAgICAgICAnYm1wJzogJ1xcdTIwQTAtXFx1MjBDRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5DeXByaW90X1N5bGxhYmFyeScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVEQzAwLVxcdURDM0ZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkN5cmlsbGljJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwNDAwLVxcdTA0RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ3lyaWxsaWNfRXh0ZW5kZWRfQScsXG4gICAgICAgICdibXAnOiAnXFx1MkRFMC1cXHUyREZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkN5cmlsbGljX0V4dGVuZGVkX0InLFxuICAgICAgICAnYm1wJzogJ1xcdUE2NDAtXFx1QTY5RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5DeXJpbGxpY19FeHRlbmRlZF9DJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxQzgwLVxcdTFDOEYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luQ3lyaWxsaWNfU3VwcGxlbWVudCcsXG4gICAgICAgICdibXAnOiAnXFx1MDUwMC1cXHUwNTJGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkRlc2VyZXQnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDFbXFx1REMwMC1cXHVEQzRGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5EZXZhbmFnYXJpJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwOTAwLVxcdTA5N0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luRGV2YW5hZ2FyaV9FeHRlbmRlZCcsXG4gICAgICAgICdibXAnOiAnXFx1QThFMC1cXHVBOEZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkRpbmdiYXRzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyNzAwLVxcdTI3QkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luRG9ncmEnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDZbXFx1REMwMC1cXHVEQzRGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Eb21pbm9fVGlsZXMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4M0NbXFx1REMzMC1cXHVEQzlGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5EdXBsb3lhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgyRltcXHVEQzAwLVxcdURDOUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkVhcmx5X0R5bmFzdGljX0N1bmVpZm9ybScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwOVtcXHVEQzgwLVxcdURENEZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkVneXB0aWFuX0hpZXJvZ2x5cGhzJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODBDW1xcdURDMDAtXFx1REZGRl18XFx1RDgwRFtcXHVEQzAwLVxcdURDMkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkVsYmFzYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDFbXFx1REQwMC1cXHVERDJGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5FbW90aWNvbnMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4M0RbXFx1REUwMC1cXHVERTRGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5FbmNsb3NlZF9BbHBoYW51bWVyaWNfU3VwcGxlbWVudCcsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzQ1tcXHVERDAwLVxcdURERkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkVuY2xvc2VkX0FscGhhbnVtZXJpY3MnLFxuICAgICAgICAnYm1wJzogJ1xcdTI0NjAtXFx1MjRGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5FbmNsb3NlZF9DSktfTGV0dGVyc19BbmRfTW9udGhzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUzMjAwLVxcdTMyRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luRW5jbG9zZWRfSWRlb2dyYXBoaWNfU3VwcGxlbWVudCcsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzQ1tcXHVERTAwLVxcdURFRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkV0aGlvcGljJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxMjAwLVxcdTEzN0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luRXRoaW9waWNfRXh0ZW5kZWQnLFxuICAgICAgICAnYm1wJzogJ1xcdTJEODAtXFx1MkRERidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5FdGhpb3BpY19FeHRlbmRlZF9BJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBQjAwLVxcdUFCMkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luRXRoaW9waWNfU3VwcGxlbWVudCcsXG4gICAgICAgICdibXAnOiAnXFx1MTM4MC1cXHUxMzlGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkdlbmVyYWxfUHVuY3R1YXRpb24nLFxuICAgICAgICAnYm1wJzogJ1xcdTIwMDAtXFx1MjA2RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5HZW9tZXRyaWNfU2hhcGVzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyNUEwLVxcdTI1RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luR2VvbWV0cmljX1NoYXBlc19FeHRlbmRlZCcsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzRFtcXHVERjgwLVxcdURGRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkdlb3JnaWFuJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxMEEwLVxcdTEwRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luR2VvcmdpYW5fRXh0ZW5kZWQnLFxuICAgICAgICAnYm1wJzogJ1xcdTFDOTAtXFx1MUNCRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5HZW9yZ2lhbl9TdXBwbGVtZW50JyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyRDAwLVxcdTJEMkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luR2xhZ29saXRpYycsXG4gICAgICAgICdibXAnOiAnXFx1MkMwMC1cXHUyQzVGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkdsYWdvbGl0aWNfU3VwcGxlbWVudCcsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzOFtcXHVEQzAwLVxcdURDMkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkdvdGhpYycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERjMwLVxcdURGNEZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkdyYW50aGEnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1REYwMC1cXHVERjdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5HcmVla19BbmRfQ29wdGljJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwMzcwLVxcdTAzRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luR3JlZWtfRXh0ZW5kZWQnLFxuICAgICAgICAnYm1wJzogJ1xcdTFGMDAtXFx1MUZGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5HdWphcmF0aScsXG4gICAgICAgICdibXAnOiAnXFx1MEE4MC1cXHUwQUZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkd1bmphbGFfR29uZGknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDdbXFx1REQ2MC1cXHVEREFGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5HdXJtdWtoaScsXG4gICAgICAgICdibXAnOiAnXFx1MEEwMC1cXHUwQTdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkhhbGZ3aWR0aF9BbmRfRnVsbHdpZHRoX0Zvcm1zJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVGRjAwLVxcdUZGRUYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luSGFuZ3VsX0NvbXBhdGliaWxpdHlfSmFtbycsXG4gICAgICAgICdibXAnOiAnXFx1MzEzMC1cXHUzMThGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkhhbmd1bF9KYW1vJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxMTAwLVxcdTExRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luSGFuZ3VsX0phbW9fRXh0ZW5kZWRfQScsXG4gICAgICAgICdibXAnOiAnXFx1QTk2MC1cXHVBOTdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkhhbmd1bF9KYW1vX0V4dGVuZGVkX0InLFxuICAgICAgICAnYm1wJzogJ1xcdUQ3QjAtXFx1RDdGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5IYW5ndWxfU3lsbGFibGVzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBQzAwLVxcdUQ3QUYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luSGFuaWZpX1JvaGluZ3lhJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAzW1xcdUREMDAtXFx1REQzRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luSGFudW5vbycsXG4gICAgICAgICdibXAnOiAnXFx1MTcyMC1cXHUxNzNGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkhhdHJhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVEQ0UwLVxcdURDRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkhlYnJldycsXG4gICAgICAgICdibXAnOiAnXFx1MDU5MC1cXHUwNUZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkhpZ2hfUHJpdmF0ZV9Vc2VfU3Vycm9nYXRlcycsXG4gICAgICAgICdibXAnOiAnXFx1REI4MC1cXHVEQkZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkhpZ2hfU3Vycm9nYXRlcycsXG4gICAgICAgICdibXAnOiAnXFx1RDgwMC1cXHVEQjdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkhpcmFnYW5hJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUzMDQwLVxcdTMwOUYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luSVBBX0V4dGVuc2lvbnMnLFxuICAgICAgICAnYm1wJzogJ1xcdTAyNTAtXFx1MDJBRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5JZGVvZ3JhcGhpY19EZXNjcmlwdGlvbl9DaGFyYWN0ZXJzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyRkYwLVxcdTJGRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luSWRlb2dyYXBoaWNfU3ltYm9sc19BbmRfUHVuY3R1YXRpb24nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MUJbXFx1REZFMC1cXHVERkZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5JbXBlcmlhbF9BcmFtYWljJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAyW1xcdURDNDAtXFx1REM1Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luSW5kaWNfU2l5YXFfTnVtYmVycycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzQltcXHVEQzcwLVxcdURDQkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkluc2NyaXB0aW9uYWxfUGFobGF2aScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVERjYwLVxcdURGN0ZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkluc2NyaXB0aW9uYWxfUGFydGhpYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REY0MC1cXHVERjVGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5KYXZhbmVzZScsXG4gICAgICAgICdibXAnOiAnXFx1QTk4MC1cXHVBOURGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkthaXRoaScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNFtcXHVEQzgwLVxcdURDQ0ZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkthbmFfRXh0ZW5kZWRfQScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgyQ1tcXHVERDAwLVxcdUREMkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkthbmFfU3VwcGxlbWVudCcsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgyQ1tcXHVEQzAwLVxcdURDRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkthbmJ1bicsXG4gICAgICAgICdibXAnOiAnXFx1MzE5MC1cXHUzMTlGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkthbmd4aV9SYWRpY2FscycsXG4gICAgICAgICdibXAnOiAnXFx1MkYwMC1cXHUyRkRGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkthbm5hZGEnLFxuICAgICAgICAnYm1wJzogJ1xcdTBDODAtXFx1MENGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5LYXRha2FuYScsXG4gICAgICAgICdibXAnOiAnXFx1MzBBMC1cXHUzMEZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkthdGFrYW5hX1Bob25ldGljX0V4dGVuc2lvbnMnLFxuICAgICAgICAnYm1wJzogJ1xcdTMxRjAtXFx1MzFGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5LYXlhaF9MaScsXG4gICAgICAgICdibXAnOiAnXFx1QTkwMC1cXHVBOTJGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbktoYXJvc2h0aGknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REUwMC1cXHVERTVGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5LaG1lcicsXG4gICAgICAgICdibXAnOiAnXFx1MTc4MC1cXHUxN0ZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbktobWVyX1N5bWJvbHMnLFxuICAgICAgICAnYm1wJzogJ1xcdTE5RTAtXFx1MTlGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5LaG9qa2knLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1REUwMC1cXHVERTRGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5LaHVkYXdhZGknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1REVCMC1cXHVERUZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5MYW8nLFxuICAgICAgICAnYm1wJzogJ1xcdTBFODAtXFx1MEVGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5MYXRpbl8xX1N1cHBsZW1lbnQnLFxuICAgICAgICAnYm1wJzogJ1xceDgwLVxceEZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkxhdGluX0V4dGVuZGVkX0EnLFxuICAgICAgICAnYm1wJzogJ1xcdTAxMDAtXFx1MDE3RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5MYXRpbl9FeHRlbmRlZF9BZGRpdGlvbmFsJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxRTAwLVxcdTFFRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTGF0aW5fRXh0ZW5kZWRfQicsXG4gICAgICAgICdibXAnOiAnXFx1MDE4MC1cXHUwMjRGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkxhdGluX0V4dGVuZGVkX0MnLFxuICAgICAgICAnYm1wJzogJ1xcdTJDNjAtXFx1MkM3RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5MYXRpbl9FeHRlbmRlZF9EJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBNzIwLVxcdUE3RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTGF0aW5fRXh0ZW5kZWRfRScsXG4gICAgICAgICdibXAnOiAnXFx1QUIzMC1cXHVBQjZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkxlcGNoYScsXG4gICAgICAgICdibXAnOiAnXFx1MUMwMC1cXHUxQzRGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkxldHRlcmxpa2VfU3ltYm9scycsXG4gICAgICAgICdibXAnOiAnXFx1MjEwMC1cXHUyMTRGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbkxpbWJ1JyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxOTAwLVxcdTE5NEYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTGluZWFyX0EnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDFbXFx1REUwMC1cXHVERjdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5MaW5lYXJfQl9JZGVvZ3JhbXMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REM4MC1cXHVEQ0ZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5MaW5lYXJfQl9TeWxsYWJhcnknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REMwMC1cXHVEQzdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5MaXN1JyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBNEQwLVxcdUE0RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTG93X1N1cnJvZ2F0ZXMnLFxuICAgICAgICAnYm1wJzogJ1xcdURDMDAtXFx1REZGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5MeWNpYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REU4MC1cXHVERTlGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5MeWRpYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REQyMC1cXHVERDNGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5NYWhhamFuaScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNFtcXHVERDUwLVxcdUREN0ZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1haGpvbmdfVGlsZXMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4M0NbXFx1REMwMC1cXHVEQzJGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5NYWthc2FyJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA3W1xcdURFRTAtXFx1REVGRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTWFsYXlhbGFtJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwRDAwLVxcdTBEN0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTWFuZGFpYycsXG4gICAgICAgICdibXAnOiAnXFx1MDg0MC1cXHUwODVGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1hbmljaGFlYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REVDMC1cXHVERUZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5NYXJjaGVuJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA3W1xcdURDNzAtXFx1RENCRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTWFzYXJhbV9Hb25kaScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwN1tcXHVERDAwLVxcdURENUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1hdGhlbWF0aWNhbF9BbHBoYW51bWVyaWNfU3ltYm9scycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzNVtcXHVEQzAwLVxcdURGRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1hdGhlbWF0aWNhbF9PcGVyYXRvcnMnLFxuICAgICAgICAnYm1wJzogJ1xcdTIyMDAtXFx1MjJGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5NYXlhbl9OdW1lcmFscycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzNFtcXHVERUUwLVxcdURFRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1lZGVmYWlkcmluJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODFCW1xcdURFNDAtXFx1REU5Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTWVldGVpX01heWVrJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBQkMwLVxcdUFCRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTWVldGVpX01heWVrX0V4dGVuc2lvbnMnLFxuICAgICAgICAnYm1wJzogJ1xcdUFBRTAtXFx1QUFGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5NZW5kZV9LaWtha3VpJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODNBW1xcdURDMDAtXFx1RENERl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTWVyb2l0aWNfQ3Vyc2l2ZScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVEREEwLVxcdURERkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1lcm9pdGljX0hpZXJvZ2x5cGhzJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAyW1xcdUREODAtXFx1REQ5Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTWlhbycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgxQltcXHVERjAwLVxcdURGOUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1pc2NlbGxhbmVvdXNfTWF0aGVtYXRpY2FsX1N5bWJvbHNfQScsXG4gICAgICAgICdibXAnOiAnXFx1MjdDMC1cXHUyN0VGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1pc2NlbGxhbmVvdXNfTWF0aGVtYXRpY2FsX1N5bWJvbHNfQicsXG4gICAgICAgICdibXAnOiAnXFx1Mjk4MC1cXHUyOUZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1pc2NlbGxhbmVvdXNfU3ltYm9scycsXG4gICAgICAgICdibXAnOiAnXFx1MjYwMC1cXHUyNkZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1pc2NlbGxhbmVvdXNfU3ltYm9sc19BbmRfQXJyb3dzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyQjAwLVxcdTJCRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTWlzY2VsbGFuZW91c19TeW1ib2xzX0FuZF9QaWN0b2dyYXBocycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzQ1tcXHVERjAwLVxcdURGRkZdfFxcdUQ4M0RbXFx1REMwMC1cXHVEREZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5NaXNjZWxsYW5lb3VzX1RlY2huaWNhbCcsXG4gICAgICAgICdibXAnOiAnXFx1MjMwMC1cXHUyM0ZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1vZGknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDVbXFx1REUwMC1cXHVERTVGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Nb2RpZmllcl9Ub25lX0xldHRlcnMnLFxuICAgICAgICAnYm1wJzogJ1xcdUE3MDAtXFx1QTcxRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Nb25nb2xpYW4nLFxuICAgICAgICAnYm1wJzogJ1xcdTE4MDAtXFx1MThBRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Nb25nb2xpYW5fU3VwcGxlbWVudCcsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNVtcXHVERTYwLVxcdURFN0ZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk1ybycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgxQVtcXHVERTQwLVxcdURFNkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk11bHRhbmknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1REU4MC1cXHVERUFGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5NdXNpY2FsX1N5bWJvbHMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MzRbXFx1REQwMC1cXHVEREZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5NeWFubWFyJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxMDAwLVxcdTEwOUYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTXlhbm1hcl9FeHRlbmRlZF9BJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBQTYwLVxcdUFBN0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTXlhbm1hcl9FeHRlbmRlZF9CJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBOUUwLVxcdUE5RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTktvJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwN0MwLVxcdTA3RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTmFiYXRhZWFuJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAyW1xcdURDODAtXFx1RENBRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTmV3X1RhaV9MdWUnLFxuICAgICAgICAnYm1wJzogJ1xcdTE5ODAtXFx1MTlERidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5OZXdhJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA1W1xcdURDMDAtXFx1REM3Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTnVtYmVyX0Zvcm1zJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyMTUwLVxcdTIxOEYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luTnVzaHUnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MkNbXFx1REQ3MC1cXHVERUZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5PZ2hhbScsXG4gICAgICAgICdibXAnOiAnXFx1MTY4MC1cXHUxNjlGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk9sX0NoaWtpJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxQzUwLVxcdTFDN0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luT2xkX0h1bmdhcmlhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwM1tcXHVEQzgwLVxcdURDRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk9sZF9JdGFsaWMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REYwMC1cXHVERjJGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5PbGRfTm9ydGhfQXJhYmlhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVERTgwLVxcdURFOUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk9sZF9QZXJtaWMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REY1MC1cXHVERjdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5PbGRfUGVyc2lhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERkEwLVxcdURGREZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk9sZF9Tb2dkaWFuJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAzW1xcdURGMDAtXFx1REYyRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luT2xkX1NvdXRoX0FyYWJpYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REU2MC1cXHVERTdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5PbGRfVHVya2ljJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAzW1xcdURDMDAtXFx1REM0Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luT3B0aWNhbF9DaGFyYWN0ZXJfUmVjb2duaXRpb24nLFxuICAgICAgICAnYm1wJzogJ1xcdTI0NDAtXFx1MjQ1RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Pcml5YScsXG4gICAgICAgICdibXAnOiAnXFx1MEIwMC1cXHUwQjdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk9ybmFtZW50YWxfRGluZ2JhdHMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4M0RbXFx1REU1MC1cXHVERTdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Pc2FnZScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMVtcXHVEQ0IwLVxcdURDRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbk9zbWFueWEnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDFbXFx1REM4MC1cXHVEQ0FGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5QYWhhd2hfSG1vbmcnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MUFbXFx1REYwMC1cXHVERjhGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5QYWxteXJlbmUnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REM2MC1cXHVEQzdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5QYXVfQ2luX0hhdScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNltcXHVERUMwLVxcdURFRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblBoYWdzX1BhJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBODQwLVxcdUE4N0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luUGhhaXN0b3NfRGlzYycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVEREQwLVxcdURERkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblBob2VuaWNpYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REQwMC1cXHVERDFGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5QaG9uZXRpY19FeHRlbnNpb25zJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxRDAwLVxcdTFEN0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luUGhvbmV0aWNfRXh0ZW5zaW9uc19TdXBwbGVtZW50JyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxRDgwLVxcdTFEQkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luUGxheWluZ19DYXJkcycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzQ1tcXHVEQ0EwLVxcdURDRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblByaXZhdGVfVXNlX0FyZWEnLFxuICAgICAgICAnYm1wJzogJ1xcdUUwMDAtXFx1RjhGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5Qc2FsdGVyX1BhaGxhdmknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REY4MC1cXHVERkFGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5SZWphbmcnLFxuICAgICAgICAnYm1wJzogJ1xcdUE5MzAtXFx1QTk1RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5SdW1pX051bWVyYWxfU3ltYm9scycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwM1tcXHVERTYwLVxcdURFN0ZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblJ1bmljJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxNkEwLVxcdTE2RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luU2FtYXJpdGFuJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwODAwLVxcdTA4M0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luU2F1cmFzaHRyYScsXG4gICAgICAgICdibXAnOiAnXFx1QTg4MC1cXHVBOERGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblNoYXJhZGEnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1REQ4MC1cXHVERERGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TaGF2aWFuJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAxW1xcdURDNTAtXFx1REM3Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luU2hvcnRoYW5kX0Zvcm1hdF9Db250cm9scycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgyRltcXHVEQ0EwLVxcdURDQUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblNpZGRoYW0nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDVbXFx1REQ4MC1cXHVEREZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TaW5oYWxhJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwRDgwLVxcdTBERkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luU2luaGFsYV9BcmNoYWljX051bWJlcnMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1RERFMC1cXHVEREZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TbWFsbF9Gb3JtX1ZhcmlhbnRzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVGRTUwLVxcdUZFNkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luU29nZGlhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwM1tcXHVERjMwLVxcdURGNkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblNvcmFfU29tcGVuZycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNFtcXHVEQ0QwLVxcdURDRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblNveW9tYm8nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDZbXFx1REU1MC1cXHVERUFGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TcGFjaW5nX01vZGlmaWVyX0xldHRlcnMnLFxuICAgICAgICAnYm1wJzogJ1xcdTAyQjAtXFx1MDJGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TcGVjaWFscycsXG4gICAgICAgICdibXAnOiAnXFx1RkZGMC1cXHVGRkZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblN1bmRhbmVzZScsXG4gICAgICAgICdibXAnOiAnXFx1MUI4MC1cXHUxQkJGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblN1bmRhbmVzZV9TdXBwbGVtZW50JyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxQ0MwLVxcdTFDQ0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luU3VwZXJzY3JpcHRzX0FuZF9TdWJzY3JpcHRzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyMDcwLVxcdTIwOUYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luU3VwcGxlbWVudGFsX0Fycm93c19BJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyN0YwLVxcdTI3RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luU3VwcGxlbWVudGFsX0Fycm93c19CJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUyOTAwLVxcdTI5N0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luU3VwcGxlbWVudGFsX0Fycm93c19DJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODNFW1xcdURDMDAtXFx1RENGRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luU3VwcGxlbWVudGFsX01hdGhlbWF0aWNhbF9PcGVyYXRvcnMnLFxuICAgICAgICAnYm1wJzogJ1xcdTJBMDAtXFx1MkFGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TdXBwbGVtZW50YWxfUHVuY3R1YXRpb24nLFxuICAgICAgICAnYm1wJzogJ1xcdTJFMDAtXFx1MkU3RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TdXBwbGVtZW50YWxfU3ltYm9sc19BbmRfUGljdG9ncmFwaHMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4M0VbXFx1REQwMC1cXHVEREZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TdXBwbGVtZW50YXJ5X1ByaXZhdGVfVXNlX0FyZWFfQScsXG4gICAgICAgICdhc3RyYWwnOiAnW1xcdURCODAtXFx1REJCRl1bXFx1REMwMC1cXHVERkZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TdXBwbGVtZW50YXJ5X1ByaXZhdGVfVXNlX0FyZWFfQicsXG4gICAgICAgICdhc3RyYWwnOiAnW1xcdURCQzAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TdXR0b25fU2lnbldyaXRpbmcnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MzZbXFx1REMwMC1cXHVERUFGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TeWxvdGlfTmFncmknLFxuICAgICAgICAnYm1wJzogJ1xcdUE4MDAtXFx1QTgyRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TeXJpYWMnLFxuICAgICAgICAnYm1wJzogJ1xcdTA3MDAtXFx1MDc0RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5TeXJpYWNfU3VwcGxlbWVudCcsXG4gICAgICAgICdibXAnOiAnXFx1MDg2MC1cXHUwODZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblRhZ2Fsb2cnLFxuICAgICAgICAnYm1wJzogJ1xcdTE3MDAtXFx1MTcxRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5UYWdiYW53YScsXG4gICAgICAgICdibXAnOiAnXFx1MTc2MC1cXHUxNzdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblRhZ3MnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdURCNDBbXFx1REMwMC1cXHVEQzdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5UYWlfTGUnLFxuICAgICAgICAnYm1wJzogJ1xcdTE5NTAtXFx1MTk3RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5UYWlfVGhhbScsXG4gICAgICAgICdibXAnOiAnXFx1MUEyMC1cXHUxQUFGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblRhaV9WaWV0JyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBQTgwLVxcdUFBREYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luVGFpX1h1YW5fSmluZ19TeW1ib2xzJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODM0W1xcdURGMDAtXFx1REY1Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luVGFrcmknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDVbXFx1REU4MC1cXHVERUNGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5UYW1pbCcsXG4gICAgICAgICdibXAnOiAnXFx1MEI4MC1cXHUwQkZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblRhbmd1dCcsXG4gICAgICAgICdhc3RyYWwnOiAnW1xcdUQ4MUMtXFx1RDgyMV1bXFx1REMwMC1cXHVERkZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5UYW5ndXRfQ29tcG9uZW50cycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgyMltcXHVEQzAwLVxcdURFRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblRlbHVndScsXG4gICAgICAgICdibXAnOiAnXFx1MEMwMC1cXHUwQzdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblRoYWFuYScsXG4gICAgICAgICdibXAnOiAnXFx1MDc4MC1cXHUwN0JGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblRoYWknLFxuICAgICAgICAnYm1wJzogJ1xcdTBFMDAtXFx1MEU3RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5UaWJldGFuJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwRjAwLVxcdTBGRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luVGlmaW5hZ2gnLFxuICAgICAgICAnYm1wJzogJ1xcdTJEMzAtXFx1MkQ3RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5UaXJodXRhJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA1W1xcdURDODAtXFx1RENERl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luVHJhbnNwb3J0X0FuZF9NYXBfU3ltYm9scycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzRFtcXHVERTgwLVxcdURFRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblVnYXJpdGljJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAwW1xcdURGODAtXFx1REY5Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luVW5pZmllZF9DYW5hZGlhbl9BYm9yaWdpbmFsX1N5bGxhYmljcycsXG4gICAgICAgICdibXAnOiAnXFx1MTQwMC1cXHUxNjdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblVuaWZpZWRfQ2FuYWRpYW5fQWJvcmlnaW5hbF9TeWxsYWJpY3NfRXh0ZW5kZWQnLFxuICAgICAgICAnYm1wJzogJ1xcdTE4QjAtXFx1MThGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5WYWknLFxuICAgICAgICAnYm1wJzogJ1xcdUE1MDAtXFx1QTYzRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5WYXJpYXRpb25fU2VsZWN0b3JzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVGRTAwLVxcdUZFMEYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luVmFyaWF0aW9uX1NlbGVjdG9yc19TdXBwbGVtZW50JyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEQjQwW1xcdUREMDAtXFx1RERFRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luVmVkaWNfRXh0ZW5zaW9ucycsXG4gICAgICAgICdibXAnOiAnXFx1MUNEMC1cXHUxQ0ZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJblZlcnRpY2FsX0Zvcm1zJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVGRTEwLVxcdUZFMUYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luV2FyYW5nX0NpdGknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDZbXFx1RENBMC1cXHVEQ0ZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5ZaV9SYWRpY2FscycsXG4gICAgICAgICdibXAnOiAnXFx1QTQ5MC1cXHVBNENGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbllpX1N5bGxhYmxlcycsXG4gICAgICAgICdibXAnOiAnXFx1QTAwMC1cXHVBNDhGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbllpamluZ19IZXhhZ3JhbV9TeW1ib2xzJyxcbiAgICAgICAgJ2JtcCc6ICdcXHU0REMwLVxcdTRERkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0luWmFuYWJhemFyX1NxdWFyZScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNltcXHVERTAwLVxcdURFNEZdJ1xuICAgIH1cbl07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFtcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0MnLFxuICAgICAgICAnYWxpYXMnOiAnT3RoZXInLFxuICAgICAgICAnaXNCbXBMYXN0JzogdHJ1ZSxcbiAgICAgICAgJ2JtcCc6ICdcXDAtXFx4MUZcXHg3Ri1cXHg5RlxceEFEXFx1MDM3OFxcdTAzNzlcXHUwMzgwLVxcdTAzODNcXHUwMzhCXFx1MDM4RFxcdTAzQTJcXHUwNTMwXFx1MDU1N1xcdTA1NThcXHUwNThCXFx1MDU4Q1xcdTA1OTBcXHUwNUM4LVxcdTA1Q0ZcXHUwNUVCLVxcdTA1RUVcXHUwNUY1LVxcdTA2MDVcXHUwNjFDXFx1MDYxRFxcdTA2RERcXHUwNzBFXFx1MDcwRlxcdTA3NEJcXHUwNzRDXFx1MDdCMi1cXHUwN0JGXFx1MDdGQlxcdTA3RkNcXHUwODJFXFx1MDgyRlxcdTA4M0ZcXHUwODVDXFx1MDg1RFxcdTA4NUZcXHUwODZCLVxcdTA4OUZcXHUwOEI1XFx1MDhCRS1cXHUwOEQyXFx1MDhFMlxcdTA5ODRcXHUwOThEXFx1MDk4RVxcdTA5OTFcXHUwOTkyXFx1MDlBOVxcdTA5QjFcXHUwOUIzLVxcdTA5QjVcXHUwOUJBXFx1MDlCQlxcdTA5QzVcXHUwOUM2XFx1MDlDOVxcdTA5Q0FcXHUwOUNGLVxcdTA5RDZcXHUwOUQ4LVxcdTA5REJcXHUwOURFXFx1MDlFNFxcdTA5RTVcXHUwOUZGXFx1MEEwMFxcdTBBMDRcXHUwQTBCLVxcdTBBMEVcXHUwQTExXFx1MEExMlxcdTBBMjlcXHUwQTMxXFx1MEEzNFxcdTBBMzdcXHUwQTNBXFx1MEEzQlxcdTBBM0RcXHUwQTQzLVxcdTBBNDZcXHUwQTQ5XFx1MEE0QVxcdTBBNEUtXFx1MEE1MFxcdTBBNTItXFx1MEE1OFxcdTBBNURcXHUwQTVGLVxcdTBBNjVcXHUwQTc3LVxcdTBBODBcXHUwQTg0XFx1MEE4RVxcdTBBOTJcXHUwQUE5XFx1MEFCMVxcdTBBQjRcXHUwQUJBXFx1MEFCQlxcdTBBQzZcXHUwQUNBXFx1MEFDRVxcdTBBQ0ZcXHUwQUQxLVxcdTBBREZcXHUwQUU0XFx1MEFFNVxcdTBBRjItXFx1MEFGOFxcdTBCMDBcXHUwQjA0XFx1MEIwRFxcdTBCMEVcXHUwQjExXFx1MEIxMlxcdTBCMjlcXHUwQjMxXFx1MEIzNFxcdTBCM0FcXHUwQjNCXFx1MEI0NVxcdTBCNDZcXHUwQjQ5XFx1MEI0QVxcdTBCNEUtXFx1MEI1NVxcdTBCNTgtXFx1MEI1QlxcdTBCNUVcXHUwQjY0XFx1MEI2NVxcdTBCNzgtXFx1MEI4MVxcdTBCODRcXHUwQjhCLVxcdTBCOERcXHUwQjkxXFx1MEI5Ni1cXHUwQjk4XFx1MEI5QlxcdTBCOURcXHUwQkEwLVxcdTBCQTJcXHUwQkE1LVxcdTBCQTdcXHUwQkFCLVxcdTBCQURcXHUwQkJBLVxcdTBCQkRcXHUwQkMzLVxcdTBCQzVcXHUwQkM5XFx1MEJDRVxcdTBCQ0ZcXHUwQkQxLVxcdTBCRDZcXHUwQkQ4LVxcdTBCRTVcXHUwQkZCLVxcdTBCRkZcXHUwQzBEXFx1MEMxMVxcdTBDMjlcXHUwQzNBLVxcdTBDM0NcXHUwQzQ1XFx1MEM0OVxcdTBDNEUtXFx1MEM1NFxcdTBDNTdcXHUwQzVCLVxcdTBDNUZcXHUwQzY0XFx1MEM2NVxcdTBDNzAtXFx1MEM3N1xcdTBDOERcXHUwQzkxXFx1MENBOVxcdTBDQjRcXHUwQ0JBXFx1MENCQlxcdTBDQzVcXHUwQ0M5XFx1MENDRS1cXHUwQ0Q0XFx1MENENy1cXHUwQ0REXFx1MENERlxcdTBDRTRcXHUwQ0U1XFx1MENGMFxcdTBDRjMtXFx1MENGRlxcdTBEMDRcXHUwRDBEXFx1MEQxMVxcdTBENDVcXHUwRDQ5XFx1MEQ1MC1cXHUwRDUzXFx1MEQ2NFxcdTBENjVcXHUwRDgwXFx1MEQ4MVxcdTBEODRcXHUwRDk3LVxcdTBEOTlcXHUwREIyXFx1MERCQ1xcdTBEQkVcXHUwREJGXFx1MERDNy1cXHUwREM5XFx1MERDQi1cXHUwRENFXFx1MERENVxcdTBERDdcXHUwREUwLVxcdTBERTVcXHUwREYwXFx1MERGMVxcdTBERjUtXFx1MEUwMFxcdTBFM0ItXFx1MEUzRVxcdTBFNUMtXFx1MEU4MFxcdTBFODNcXHUwRTg1XFx1MEU4NlxcdTBFODlcXHUwRThCXFx1MEU4Q1xcdTBFOEUtXFx1MEU5M1xcdTBFOThcXHUwRUEwXFx1MEVBNFxcdTBFQTZcXHUwRUE4XFx1MEVBOVxcdTBFQUNcXHUwRUJBXFx1MEVCRVxcdTBFQkZcXHUwRUM1XFx1MEVDN1xcdTBFQ0VcXHUwRUNGXFx1MEVEQVxcdTBFREJcXHUwRUUwLVxcdTBFRkZcXHUwRjQ4XFx1MEY2RC1cXHUwRjcwXFx1MEY5OFxcdTBGQkRcXHUwRkNEXFx1MEZEQi1cXHUwRkZGXFx1MTBDNlxcdTEwQzgtXFx1MTBDQ1xcdTEwQ0VcXHUxMENGXFx1MTI0OVxcdTEyNEVcXHUxMjRGXFx1MTI1N1xcdTEyNTlcXHUxMjVFXFx1MTI1RlxcdTEyODlcXHUxMjhFXFx1MTI4RlxcdTEyQjFcXHUxMkI2XFx1MTJCN1xcdTEyQkZcXHUxMkMxXFx1MTJDNlxcdTEyQzdcXHUxMkQ3XFx1MTMxMVxcdTEzMTZcXHUxMzE3XFx1MTM1QlxcdTEzNUNcXHUxMzdELVxcdTEzN0ZcXHUxMzlBLVxcdTEzOUZcXHUxM0Y2XFx1MTNGN1xcdTEzRkVcXHUxM0ZGXFx1MTY5RC1cXHUxNjlGXFx1MTZGOS1cXHUxNkZGXFx1MTcwRFxcdTE3MTUtXFx1MTcxRlxcdTE3MzctXFx1MTczRlxcdTE3NTQtXFx1MTc1RlxcdTE3NkRcXHUxNzcxXFx1MTc3NC1cXHUxNzdGXFx1MTdERVxcdTE3REZcXHUxN0VBLVxcdTE3RUZcXHUxN0ZBLVxcdTE3RkZcXHUxODBFXFx1MTgwRlxcdTE4MUEtXFx1MTgxRlxcdTE4NzktXFx1MTg3RlxcdTE4QUItXFx1MThBRlxcdTE4RjYtXFx1MThGRlxcdTE5MUZcXHUxOTJDLVxcdTE5MkZcXHUxOTNDLVxcdTE5M0ZcXHUxOTQxLVxcdTE5NDNcXHUxOTZFXFx1MTk2RlxcdTE5NzUtXFx1MTk3RlxcdTE5QUMtXFx1MTlBRlxcdTE5Q0EtXFx1MTlDRlxcdTE5REItXFx1MTlERFxcdTFBMUNcXHUxQTFEXFx1MUE1RlxcdTFBN0RcXHUxQTdFXFx1MUE4QS1cXHUxQThGXFx1MUE5QS1cXHUxQTlGXFx1MUFBRVxcdTFBQUZcXHUxQUJGLVxcdTFBRkZcXHUxQjRDLVxcdTFCNEZcXHUxQjdELVxcdTFCN0ZcXHUxQkY0LVxcdTFCRkJcXHUxQzM4LVxcdTFDM0FcXHUxQzRBLVxcdTFDNENcXHUxQzg5LVxcdTFDOEZcXHUxQ0JCXFx1MUNCQ1xcdTFDQzgtXFx1MUNDRlxcdTFDRkEtXFx1MUNGRlxcdTFERkFcXHUxRjE2XFx1MUYxN1xcdTFGMUVcXHUxRjFGXFx1MUY0NlxcdTFGNDdcXHUxRjRFXFx1MUY0RlxcdTFGNThcXHUxRjVBXFx1MUY1Q1xcdTFGNUVcXHUxRjdFXFx1MUY3RlxcdTFGQjVcXHUxRkM1XFx1MUZENFxcdTFGRDVcXHUxRkRDXFx1MUZGMFxcdTFGRjFcXHUxRkY1XFx1MUZGRlxcdTIwMEItXFx1MjAwRlxcdTIwMkEtXFx1MjAyRVxcdTIwNjAtXFx1MjA2RlxcdTIwNzJcXHUyMDczXFx1MjA4RlxcdTIwOUQtXFx1MjA5RlxcdTIwQzAtXFx1MjBDRlxcdTIwRjEtXFx1MjBGRlxcdTIxOEMtXFx1MjE4RlxcdTI0MjctXFx1MjQzRlxcdTI0NEItXFx1MjQ1RlxcdTJCNzRcXHUyQjc1XFx1MkI5NlxcdTJCOTdcXHUyQkM5XFx1MkJGRlxcdTJDMkZcXHUyQzVGXFx1MkNGNC1cXHUyQ0Y4XFx1MkQyNlxcdTJEMjgtXFx1MkQyQ1xcdTJEMkVcXHUyRDJGXFx1MkQ2OC1cXHUyRDZFXFx1MkQ3MS1cXHUyRDdFXFx1MkQ5Ny1cXHUyRDlGXFx1MkRBN1xcdTJEQUZcXHUyREI3XFx1MkRCRlxcdTJEQzdcXHUyRENGXFx1MkREN1xcdTJEREZcXHUyRTRGLVxcdTJFN0ZcXHUyRTlBXFx1MkVGNC1cXHUyRUZGXFx1MkZENi1cXHUyRkVGXFx1MkZGQy1cXHUyRkZGXFx1MzA0MFxcdTMwOTdcXHUzMDk4XFx1MzEwMC1cXHUzMTA0XFx1MzEzMFxcdTMxOEZcXHUzMUJCLVxcdTMxQkZcXHUzMUU0LVxcdTMxRUZcXHUzMjFGXFx1MzJGRlxcdTREQjYtXFx1NERCRlxcdTlGRjAtXFx1OUZGRlxcdUE0OEQtXFx1QTQ4RlxcdUE0QzctXFx1QTRDRlxcdUE2MkMtXFx1QTYzRlxcdUE2RjgtXFx1QTZGRlxcdUE3QkEtXFx1QTdGNlxcdUE4MkMtXFx1QTgyRlxcdUE4M0EtXFx1QTgzRlxcdUE4NzgtXFx1QTg3RlxcdUE4QzYtXFx1QThDRFxcdUE4REEtXFx1QThERlxcdUE5NTQtXFx1QTk1RVxcdUE5N0QtXFx1QTk3RlxcdUE5Q0VcXHVBOURBLVxcdUE5RERcXHVBOUZGXFx1QUEzNy1cXHVBQTNGXFx1QUE0RVxcdUFBNEZcXHVBQTVBXFx1QUE1QlxcdUFBQzMtXFx1QUFEQVxcdUFBRjctXFx1QUIwMFxcdUFCMDdcXHVBQjA4XFx1QUIwRlxcdUFCMTBcXHVBQjE3LVxcdUFCMUZcXHVBQjI3XFx1QUIyRlxcdUFCNjYtXFx1QUI2RlxcdUFCRUVcXHVBQkVGXFx1QUJGQS1cXHVBQkZGXFx1RDdBNC1cXHVEN0FGXFx1RDdDNy1cXHVEN0NBXFx1RDdGQy1cXHVGOEZGXFx1RkE2RVxcdUZBNkZcXHVGQURBLVxcdUZBRkZcXHVGQjA3LVxcdUZCMTJcXHVGQjE4LVxcdUZCMUNcXHVGQjM3XFx1RkIzRFxcdUZCM0ZcXHVGQjQyXFx1RkI0NVxcdUZCQzItXFx1RkJEMlxcdUZENDAtXFx1RkQ0RlxcdUZEOTBcXHVGRDkxXFx1RkRDOC1cXHVGREVGXFx1RkRGRVxcdUZERkZcXHVGRTFBLVxcdUZFMUZcXHVGRTUzXFx1RkU2N1xcdUZFNkMtXFx1RkU2RlxcdUZFNzVcXHVGRUZELVxcdUZGMDBcXHVGRkJGLVxcdUZGQzFcXHVGRkM4XFx1RkZDOVxcdUZGRDBcXHVGRkQxXFx1RkZEOFxcdUZGRDlcXHVGRkRELVxcdUZGREZcXHVGRkU3XFx1RkZFRi1cXHVGRkZCXFx1RkZGRVxcdUZGRkYnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REMwQ1xcdURDMjdcXHVEQzNCXFx1REMzRVxcdURDNEVcXHVEQzRGXFx1REM1RS1cXHVEQzdGXFx1RENGQi1cXHVEQ0ZGXFx1REQwMy1cXHVERDA2XFx1REQzNC1cXHVERDM2XFx1REQ4RlxcdUREOUMtXFx1REQ5RlxcdUREQTEtXFx1RERDRlxcdURERkUtXFx1REU3RlxcdURFOUQtXFx1REU5RlxcdURFRDEtXFx1REVERlxcdURFRkMtXFx1REVGRlxcdURGMjQtXFx1REYyQ1xcdURGNEItXFx1REY0RlxcdURGN0ItXFx1REY3RlxcdURGOUVcXHVERkM0LVxcdURGQzdcXHVERkQ2LVxcdURGRkZdfFxcdUQ4MDFbXFx1REM5RVxcdURDOUZcXHVEQ0FBLVxcdURDQUZcXHVEQ0Q0LVxcdURDRDdcXHVEQ0ZDLVxcdURDRkZcXHVERDI4LVxcdUREMkZcXHVERDY0LVxcdURENkVcXHVERDcwLVxcdURERkZcXHVERjM3LVxcdURGM0ZcXHVERjU2LVxcdURGNUZcXHVERjY4LVxcdURGRkZdfFxcdUQ4MDJbXFx1REMwNlxcdURDMDdcXHVEQzA5XFx1REMzNlxcdURDMzktXFx1REMzQlxcdURDM0RcXHVEQzNFXFx1REM1NlxcdURDOUYtXFx1RENBNlxcdURDQjAtXFx1RENERlxcdURDRjNcXHVEQ0Y2LVxcdURDRkFcXHVERDFDLVxcdUREMUVcXHVERDNBLVxcdUREM0VcXHVERDQwLVxcdUREN0ZcXHVEREI4LVxcdUREQkJcXHVEREQwXFx1REREMVxcdURFMDRcXHVERTA3LVxcdURFMEJcXHVERTE0XFx1REUxOFxcdURFMzZcXHVERTM3XFx1REUzQi1cXHVERTNFXFx1REU0OS1cXHVERTRGXFx1REU1OS1cXHVERTVGXFx1REVBMC1cXHVERUJGXFx1REVFNy1cXHVERUVBXFx1REVGNy1cXHVERUZGXFx1REYzNi1cXHVERjM4XFx1REY1NlxcdURGNTdcXHVERjczLVxcdURGNzdcXHVERjkyLVxcdURGOThcXHVERjlELVxcdURGQThcXHVERkIwLVxcdURGRkZdfFxcdUQ4MDNbXFx1REM0OS1cXHVEQzdGXFx1RENCMy1cXHVEQ0JGXFx1RENGMy1cXHVEQ0Y5XFx1REQyOC1cXHVERDJGXFx1REQzQS1cXHVERTVGXFx1REU3Ri1cXHVERUZGXFx1REYyOC1cXHVERjJGXFx1REY1QS1cXHVERkZGXXxcXHVEODA0W1xcdURDNEUtXFx1REM1MVxcdURDNzAtXFx1REM3RVxcdURDQkRcXHVEQ0MyLVxcdURDQ0ZcXHVEQ0U5LVxcdURDRUZcXHVEQ0ZBLVxcdURDRkZcXHVERDM1XFx1REQ0Ny1cXHVERDRGXFx1REQ3Ny1cXHVERDdGXFx1RERDRVxcdUREQ0ZcXHVEREUwXFx1RERGNS1cXHVEREZGXFx1REUxMlxcdURFM0YtXFx1REU3RlxcdURFODdcXHVERTg5XFx1REU4RVxcdURFOUVcXHVERUFBLVxcdURFQUZcXHVERUVCLVxcdURFRUZcXHVERUZBLVxcdURFRkZcXHVERjA0XFx1REYwRFxcdURGMEVcXHVERjExXFx1REYxMlxcdURGMjlcXHVERjMxXFx1REYzNFxcdURGM0FcXHVERjQ1XFx1REY0NlxcdURGNDlcXHVERjRBXFx1REY0RVxcdURGNEZcXHVERjUxLVxcdURGNTZcXHVERjU4LVxcdURGNUNcXHVERjY0XFx1REY2NVxcdURGNkQtXFx1REY2RlxcdURGNzUtXFx1REZGRl18XFx1RDgwNVtcXHVEQzVBXFx1REM1Q1xcdURDNUYtXFx1REM3RlxcdURDQzgtXFx1RENDRlxcdURDREEtXFx1REQ3RlxcdUREQjZcXHVEREI3XFx1RERERS1cXHVEREZGXFx1REU0NS1cXHVERTRGXFx1REU1QS1cXHVERTVGXFx1REU2RC1cXHVERTdGXFx1REVCOC1cXHVERUJGXFx1REVDQS1cXHVERUZGXFx1REYxQlxcdURGMUNcXHVERjJDLVxcdURGMkZcXHVERjQwLVxcdURGRkZdfFxcdUQ4MDZbXFx1REMzQy1cXHVEQzlGXFx1RENGMy1cXHVEQ0ZFXFx1REQwMC1cXHVEREZGXFx1REU0OC1cXHVERTRGXFx1REU4NFxcdURFODVcXHVERUEzLVxcdURFQkZcXHVERUY5LVxcdURGRkZdfFxcdUQ4MDdbXFx1REMwOVxcdURDMzdcXHVEQzQ2LVxcdURDNEZcXHVEQzZELVxcdURDNkZcXHVEQzkwXFx1REM5MVxcdURDQThcXHVEQ0I3LVxcdURDRkZcXHVERDA3XFx1REQwQVxcdUREMzctXFx1REQzOVxcdUREM0JcXHVERDNFXFx1REQ0OC1cXHVERDRGXFx1REQ1QS1cXHVERDVGXFx1REQ2NlxcdURENjlcXHVERDhGXFx1REQ5MlxcdUREOTktXFx1REQ5RlxcdUREQUEtXFx1REVERlxcdURFRjktXFx1REZGRl18XFx1RDgwOFtcXHVERjlBLVxcdURGRkZdfFxcdUQ4MDlbXFx1REM2RlxcdURDNzUtXFx1REM3RlxcdURENDQtXFx1REZGRl18W1xcdUQ4MEFcXHVEODBCXFx1RDgwRS1cXHVEODEwXFx1RDgxMi1cXHVEODE5XFx1RDgyMy1cXHVEODJCXFx1RDgyRFxcdUQ4MkVcXHVEODMwLVxcdUQ4MzNcXHVEODM3XFx1RDgzOVxcdUQ4M0ZcXHVEODdCLVxcdUQ4N0RcXHVEODdGLVxcdURCM0ZcXHVEQjQxLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18XFx1RDgwRFtcXHVEQzJGLVxcdURGRkZdfFxcdUQ4MTFbXFx1REU0Ny1cXHVERkZGXXxcXHVEODFBW1xcdURFMzktXFx1REUzRlxcdURFNUZcXHVERTZBLVxcdURFNkRcXHVERTcwLVxcdURFQ0ZcXHVERUVFXFx1REVFRlxcdURFRjYtXFx1REVGRlxcdURGNDYtXFx1REY0RlxcdURGNUFcXHVERjYyXFx1REY3OC1cXHVERjdDXFx1REY5MC1cXHVERkZGXXxcXHVEODFCW1xcdURDMDAtXFx1REUzRlxcdURFOUItXFx1REVGRlxcdURGNDUtXFx1REY0RlxcdURGN0YtXFx1REY4RVxcdURGQTAtXFx1REZERlxcdURGRTItXFx1REZGRl18XFx1RDgyMVtcXHVERkYyLVxcdURGRkZdfFxcdUQ4MjJbXFx1REVGMy1cXHVERkZGXXxcXHVEODJDW1xcdUREMUYtXFx1REQ2RlxcdURFRkMtXFx1REZGRl18XFx1RDgyRltcXHVEQzZCLVxcdURDNkZcXHVEQzdELVxcdURDN0ZcXHVEQzg5LVxcdURDOEZcXHVEQzlBXFx1REM5QlxcdURDQTAtXFx1REZGRl18XFx1RDgzNFtcXHVEQ0Y2LVxcdURDRkZcXHVERDI3XFx1REQyOFxcdURENzMtXFx1REQ3QVxcdURERTktXFx1RERGRlxcdURFNDYtXFx1REVERlxcdURFRjQtXFx1REVGRlxcdURGNTctXFx1REY1RlxcdURGNzktXFx1REZGRl18XFx1RDgzNVtcXHVEQzU1XFx1REM5RFxcdURDQTBcXHVEQ0ExXFx1RENBM1xcdURDQTRcXHVEQ0E3XFx1RENBOFxcdURDQURcXHVEQ0JBXFx1RENCQ1xcdURDQzRcXHVERDA2XFx1REQwQlxcdUREMENcXHVERDE1XFx1REQxRFxcdUREM0FcXHVERDNGXFx1REQ0NVxcdURENDctXFx1REQ0OVxcdURENTFcXHVERUE2XFx1REVBN1xcdURGQ0NcXHVERkNEXXxcXHVEODM2W1xcdURFOEMtXFx1REU5QVxcdURFQTBcXHVERUIwLVxcdURGRkZdfFxcdUQ4MzhbXFx1REMwN1xcdURDMTlcXHVEQzFBXFx1REMyMlxcdURDMjVcXHVEQzJCLVxcdURGRkZdfFxcdUQ4M0FbXFx1RENDNVxcdURDQzZcXHVEQ0Q3LVxcdURDRkZcXHVERDRCLVxcdURENEZcXHVERDVBLVxcdURENURcXHVERDYwLVxcdURGRkZdfFxcdUQ4M0JbXFx1REMwMC1cXHVEQzcwXFx1RENCNS1cXHVEREZGXFx1REUwNFxcdURFMjBcXHVERTIzXFx1REUyNVxcdURFMjZcXHVERTI4XFx1REUzM1xcdURFMzhcXHVERTNBXFx1REUzQy1cXHVERTQxXFx1REU0My1cXHVERTQ2XFx1REU0OFxcdURFNEFcXHVERTRDXFx1REU1MFxcdURFNTNcXHVERTU1XFx1REU1NlxcdURFNThcXHVERTVBXFx1REU1Q1xcdURFNUVcXHVERTYwXFx1REU2M1xcdURFNjVcXHVERTY2XFx1REU2QlxcdURFNzNcXHVERTc4XFx1REU3RFxcdURFN0ZcXHVERThBXFx1REU5Qy1cXHVERUEwXFx1REVBNFxcdURFQUFcXHVERUJDLVxcdURFRUZcXHVERUYyLVxcdURGRkZdfFxcdUQ4M0NbXFx1REMyQy1cXHVEQzJGXFx1REM5NC1cXHVEQzlGXFx1RENBRlxcdURDQjBcXHVEQ0MwXFx1RENEMFxcdURDRjYtXFx1RENGRlxcdUREMEQtXFx1REQwRlxcdURENkMtXFx1REQ2RlxcdUREQUQtXFx1RERFNVxcdURFMDMtXFx1REUwRlxcdURFM0MtXFx1REUzRlxcdURFNDktXFx1REU0RlxcdURFNTItXFx1REU1RlxcdURFNjYtXFx1REVGRl18XFx1RDgzRFtcXHVERUQ1LVxcdURFREZcXHVERUVELVxcdURFRUZcXHVERUZBLVxcdURFRkZcXHVERjc0LVxcdURGN0ZcXHVERkQ5LVxcdURGRkZdfFxcdUQ4M0VbXFx1REMwQy1cXHVEQzBGXFx1REM0OC1cXHVEQzRGXFx1REM1QS1cXHVEQzVGXFx1REM4OC1cXHVEQzhGXFx1RENBRS1cXHVEQ0ZGXFx1REQwQy1cXHVERDBGXFx1REQzRlxcdURENzFcXHVERDcyXFx1REQ3Ny1cXHVERDc5XFx1REQ3QlxcdUREQTMtXFx1RERBRlxcdUREQkEtXFx1RERCRlxcdUREQzMtXFx1RERDRlxcdURFMDAtXFx1REU1RlxcdURFNkUtXFx1REZGRl18XFx1RDg2OVtcXHVERUQ3LVxcdURFRkZdfFxcdUQ4NkRbXFx1REYzNS1cXHVERjNGXXxcXHVEODZFW1xcdURDMUVcXHVEQzFGXXxcXHVEODczW1xcdURFQTItXFx1REVBRl18XFx1RDg3QVtcXHVERkUxLVxcdURGRkZdfFxcdUQ4N0VbXFx1REUxRS1cXHVERkZGXXxcXHVEQjQwW1xcdURDMDAtXFx1RENGRlxcdURERjAtXFx1REZGRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0NjJyxcbiAgICAgICAgJ2FsaWFzJzogJ0NvbnRyb2wnLFxuICAgICAgICAnYm1wJzogJ1xcMC1cXHgxRlxceDdGLVxceDlGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdDZicsXG4gICAgICAgICdhbGlhcyc6ICdGb3JtYXQnLFxuICAgICAgICAnYm1wJzogJ1xceEFEXFx1MDYwMC1cXHUwNjA1XFx1MDYxQ1xcdTA2RERcXHUwNzBGXFx1MDhFMlxcdTE4MEVcXHUyMDBCLVxcdTIwMEZcXHUyMDJBLVxcdTIwMkVcXHUyMDYwLVxcdTIwNjRcXHUyMDY2LVxcdTIwNkZcXHVGRUZGXFx1RkZGOS1cXHVGRkZCJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA0W1xcdURDQkRcXHVEQ0NEXXxcXHVEODJGW1xcdURDQTAtXFx1RENBM118XFx1RDgzNFtcXHVERDczLVxcdUREN0FdfFxcdURCNDBbXFx1REMwMVxcdURDMjAtXFx1REM3Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0NuJyxcbiAgICAgICAgJ2FsaWFzJzogJ1VuYXNzaWduZWQnLFxuICAgICAgICAnYm1wJzogJ1xcdTAzNzhcXHUwMzc5XFx1MDM4MC1cXHUwMzgzXFx1MDM4QlxcdTAzOERcXHUwM0EyXFx1MDUzMFxcdTA1NTdcXHUwNTU4XFx1MDU4QlxcdTA1OENcXHUwNTkwXFx1MDVDOC1cXHUwNUNGXFx1MDVFQi1cXHUwNUVFXFx1MDVGNS1cXHUwNUZGXFx1MDYxRFxcdTA3MEVcXHUwNzRCXFx1MDc0Q1xcdTA3QjItXFx1MDdCRlxcdTA3RkJcXHUwN0ZDXFx1MDgyRVxcdTA4MkZcXHUwODNGXFx1MDg1Q1xcdTA4NURcXHUwODVGXFx1MDg2Qi1cXHUwODlGXFx1MDhCNVxcdTA4QkUtXFx1MDhEMlxcdTA5ODRcXHUwOThEXFx1MDk4RVxcdTA5OTFcXHUwOTkyXFx1MDlBOVxcdTA5QjFcXHUwOUIzLVxcdTA5QjVcXHUwOUJBXFx1MDlCQlxcdTA5QzVcXHUwOUM2XFx1MDlDOVxcdTA5Q0FcXHUwOUNGLVxcdTA5RDZcXHUwOUQ4LVxcdTA5REJcXHUwOURFXFx1MDlFNFxcdTA5RTVcXHUwOUZGXFx1MEEwMFxcdTBBMDRcXHUwQTBCLVxcdTBBMEVcXHUwQTExXFx1MEExMlxcdTBBMjlcXHUwQTMxXFx1MEEzNFxcdTBBMzdcXHUwQTNBXFx1MEEzQlxcdTBBM0RcXHUwQTQzLVxcdTBBNDZcXHUwQTQ5XFx1MEE0QVxcdTBBNEUtXFx1MEE1MFxcdTBBNTItXFx1MEE1OFxcdTBBNURcXHUwQTVGLVxcdTBBNjVcXHUwQTc3LVxcdTBBODBcXHUwQTg0XFx1MEE4RVxcdTBBOTJcXHUwQUE5XFx1MEFCMVxcdTBBQjRcXHUwQUJBXFx1MEFCQlxcdTBBQzZcXHUwQUNBXFx1MEFDRVxcdTBBQ0ZcXHUwQUQxLVxcdTBBREZcXHUwQUU0XFx1MEFFNVxcdTBBRjItXFx1MEFGOFxcdTBCMDBcXHUwQjA0XFx1MEIwRFxcdTBCMEVcXHUwQjExXFx1MEIxMlxcdTBCMjlcXHUwQjMxXFx1MEIzNFxcdTBCM0FcXHUwQjNCXFx1MEI0NVxcdTBCNDZcXHUwQjQ5XFx1MEI0QVxcdTBCNEUtXFx1MEI1NVxcdTBCNTgtXFx1MEI1QlxcdTBCNUVcXHUwQjY0XFx1MEI2NVxcdTBCNzgtXFx1MEI4MVxcdTBCODRcXHUwQjhCLVxcdTBCOERcXHUwQjkxXFx1MEI5Ni1cXHUwQjk4XFx1MEI5QlxcdTBCOURcXHUwQkEwLVxcdTBCQTJcXHUwQkE1LVxcdTBCQTdcXHUwQkFCLVxcdTBCQURcXHUwQkJBLVxcdTBCQkRcXHUwQkMzLVxcdTBCQzVcXHUwQkM5XFx1MEJDRVxcdTBCQ0ZcXHUwQkQxLVxcdTBCRDZcXHUwQkQ4LVxcdTBCRTVcXHUwQkZCLVxcdTBCRkZcXHUwQzBEXFx1MEMxMVxcdTBDMjlcXHUwQzNBLVxcdTBDM0NcXHUwQzQ1XFx1MEM0OVxcdTBDNEUtXFx1MEM1NFxcdTBDNTdcXHUwQzVCLVxcdTBDNUZcXHUwQzY0XFx1MEM2NVxcdTBDNzAtXFx1MEM3N1xcdTBDOERcXHUwQzkxXFx1MENBOVxcdTBDQjRcXHUwQ0JBXFx1MENCQlxcdTBDQzVcXHUwQ0M5XFx1MENDRS1cXHUwQ0Q0XFx1MENENy1cXHUwQ0REXFx1MENERlxcdTBDRTRcXHUwQ0U1XFx1MENGMFxcdTBDRjMtXFx1MENGRlxcdTBEMDRcXHUwRDBEXFx1MEQxMVxcdTBENDVcXHUwRDQ5XFx1MEQ1MC1cXHUwRDUzXFx1MEQ2NFxcdTBENjVcXHUwRDgwXFx1MEQ4MVxcdTBEODRcXHUwRDk3LVxcdTBEOTlcXHUwREIyXFx1MERCQ1xcdTBEQkVcXHUwREJGXFx1MERDNy1cXHUwREM5XFx1MERDQi1cXHUwRENFXFx1MERENVxcdTBERDdcXHUwREUwLVxcdTBERTVcXHUwREYwXFx1MERGMVxcdTBERjUtXFx1MEUwMFxcdTBFM0ItXFx1MEUzRVxcdTBFNUMtXFx1MEU4MFxcdTBFODNcXHUwRTg1XFx1MEU4NlxcdTBFODlcXHUwRThCXFx1MEU4Q1xcdTBFOEUtXFx1MEU5M1xcdTBFOThcXHUwRUEwXFx1MEVBNFxcdTBFQTZcXHUwRUE4XFx1MEVBOVxcdTBFQUNcXHUwRUJBXFx1MEVCRVxcdTBFQkZcXHUwRUM1XFx1MEVDN1xcdTBFQ0VcXHUwRUNGXFx1MEVEQVxcdTBFREJcXHUwRUUwLVxcdTBFRkZcXHUwRjQ4XFx1MEY2RC1cXHUwRjcwXFx1MEY5OFxcdTBGQkRcXHUwRkNEXFx1MEZEQi1cXHUwRkZGXFx1MTBDNlxcdTEwQzgtXFx1MTBDQ1xcdTEwQ0VcXHUxMENGXFx1MTI0OVxcdTEyNEVcXHUxMjRGXFx1MTI1N1xcdTEyNTlcXHUxMjVFXFx1MTI1RlxcdTEyODlcXHUxMjhFXFx1MTI4RlxcdTEyQjFcXHUxMkI2XFx1MTJCN1xcdTEyQkZcXHUxMkMxXFx1MTJDNlxcdTEyQzdcXHUxMkQ3XFx1MTMxMVxcdTEzMTZcXHUxMzE3XFx1MTM1QlxcdTEzNUNcXHUxMzdELVxcdTEzN0ZcXHUxMzlBLVxcdTEzOUZcXHUxM0Y2XFx1MTNGN1xcdTEzRkVcXHUxM0ZGXFx1MTY5RC1cXHUxNjlGXFx1MTZGOS1cXHUxNkZGXFx1MTcwRFxcdTE3MTUtXFx1MTcxRlxcdTE3MzctXFx1MTczRlxcdTE3NTQtXFx1MTc1RlxcdTE3NkRcXHUxNzcxXFx1MTc3NC1cXHUxNzdGXFx1MTdERVxcdTE3REZcXHUxN0VBLVxcdTE3RUZcXHUxN0ZBLVxcdTE3RkZcXHUxODBGXFx1MTgxQS1cXHUxODFGXFx1MTg3OS1cXHUxODdGXFx1MThBQi1cXHUxOEFGXFx1MThGNi1cXHUxOEZGXFx1MTkxRlxcdTE5MkMtXFx1MTkyRlxcdTE5M0MtXFx1MTkzRlxcdTE5NDEtXFx1MTk0M1xcdTE5NkVcXHUxOTZGXFx1MTk3NS1cXHUxOTdGXFx1MTlBQy1cXHUxOUFGXFx1MTlDQS1cXHUxOUNGXFx1MTlEQi1cXHUxOUREXFx1MUExQ1xcdTFBMURcXHUxQTVGXFx1MUE3RFxcdTFBN0VcXHUxQThBLVxcdTFBOEZcXHUxQTlBLVxcdTFBOUZcXHUxQUFFXFx1MUFBRlxcdTFBQkYtXFx1MUFGRlxcdTFCNEMtXFx1MUI0RlxcdTFCN0QtXFx1MUI3RlxcdTFCRjQtXFx1MUJGQlxcdTFDMzgtXFx1MUMzQVxcdTFDNEEtXFx1MUM0Q1xcdTFDODktXFx1MUM4RlxcdTFDQkJcXHUxQ0JDXFx1MUNDOC1cXHUxQ0NGXFx1MUNGQS1cXHUxQ0ZGXFx1MURGQVxcdTFGMTZcXHUxRjE3XFx1MUYxRVxcdTFGMUZcXHUxRjQ2XFx1MUY0N1xcdTFGNEVcXHUxRjRGXFx1MUY1OFxcdTFGNUFcXHUxRjVDXFx1MUY1RVxcdTFGN0VcXHUxRjdGXFx1MUZCNVxcdTFGQzVcXHUxRkQ0XFx1MUZENVxcdTFGRENcXHUxRkYwXFx1MUZGMVxcdTFGRjVcXHUxRkZGXFx1MjA2NVxcdTIwNzJcXHUyMDczXFx1MjA4RlxcdTIwOUQtXFx1MjA5RlxcdTIwQzAtXFx1MjBDRlxcdTIwRjEtXFx1MjBGRlxcdTIxOEMtXFx1MjE4RlxcdTI0MjctXFx1MjQzRlxcdTI0NEItXFx1MjQ1RlxcdTJCNzRcXHUyQjc1XFx1MkI5NlxcdTJCOTdcXHUyQkM5XFx1MkJGRlxcdTJDMkZcXHUyQzVGXFx1MkNGNC1cXHUyQ0Y4XFx1MkQyNlxcdTJEMjgtXFx1MkQyQ1xcdTJEMkVcXHUyRDJGXFx1MkQ2OC1cXHUyRDZFXFx1MkQ3MS1cXHUyRDdFXFx1MkQ5Ny1cXHUyRDlGXFx1MkRBN1xcdTJEQUZcXHUyREI3XFx1MkRCRlxcdTJEQzdcXHUyRENGXFx1MkREN1xcdTJEREZcXHUyRTRGLVxcdTJFN0ZcXHUyRTlBXFx1MkVGNC1cXHUyRUZGXFx1MkZENi1cXHUyRkVGXFx1MkZGQy1cXHUyRkZGXFx1MzA0MFxcdTMwOTdcXHUzMDk4XFx1MzEwMC1cXHUzMTA0XFx1MzEzMFxcdTMxOEZcXHUzMUJCLVxcdTMxQkZcXHUzMUU0LVxcdTMxRUZcXHUzMjFGXFx1MzJGRlxcdTREQjYtXFx1NERCRlxcdTlGRjAtXFx1OUZGRlxcdUE0OEQtXFx1QTQ4RlxcdUE0QzctXFx1QTRDRlxcdUE2MkMtXFx1QTYzRlxcdUE2RjgtXFx1QTZGRlxcdUE3QkEtXFx1QTdGNlxcdUE4MkMtXFx1QTgyRlxcdUE4M0EtXFx1QTgzRlxcdUE4NzgtXFx1QTg3RlxcdUE4QzYtXFx1QThDRFxcdUE4REEtXFx1QThERlxcdUE5NTQtXFx1QTk1RVxcdUE5N0QtXFx1QTk3RlxcdUE5Q0VcXHVBOURBLVxcdUE5RERcXHVBOUZGXFx1QUEzNy1cXHVBQTNGXFx1QUE0RVxcdUFBNEZcXHVBQTVBXFx1QUE1QlxcdUFBQzMtXFx1QUFEQVxcdUFBRjctXFx1QUIwMFxcdUFCMDdcXHVBQjA4XFx1QUIwRlxcdUFCMTBcXHVBQjE3LVxcdUFCMUZcXHVBQjI3XFx1QUIyRlxcdUFCNjYtXFx1QUI2RlxcdUFCRUVcXHVBQkVGXFx1QUJGQS1cXHVBQkZGXFx1RDdBNC1cXHVEN0FGXFx1RDdDNy1cXHVEN0NBXFx1RDdGQy1cXHVEN0ZGXFx1RkE2RVxcdUZBNkZcXHVGQURBLVxcdUZBRkZcXHVGQjA3LVxcdUZCMTJcXHVGQjE4LVxcdUZCMUNcXHVGQjM3XFx1RkIzRFxcdUZCM0ZcXHVGQjQyXFx1RkI0NVxcdUZCQzItXFx1RkJEMlxcdUZENDAtXFx1RkQ0RlxcdUZEOTBcXHVGRDkxXFx1RkRDOC1cXHVGREVGXFx1RkRGRVxcdUZERkZcXHVGRTFBLVxcdUZFMUZcXHVGRTUzXFx1RkU2N1xcdUZFNkMtXFx1RkU2RlxcdUZFNzVcXHVGRUZEXFx1RkVGRVxcdUZGMDBcXHVGRkJGLVxcdUZGQzFcXHVGRkM4XFx1RkZDOVxcdUZGRDBcXHVGRkQxXFx1RkZEOFxcdUZGRDlcXHVGRkRELVxcdUZGREZcXHVGRkU3XFx1RkZFRi1cXHVGRkY4XFx1RkZGRVxcdUZGRkYnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REMwQ1xcdURDMjdcXHVEQzNCXFx1REMzRVxcdURDNEVcXHVEQzRGXFx1REM1RS1cXHVEQzdGXFx1RENGQi1cXHVEQ0ZGXFx1REQwMy1cXHVERDA2XFx1REQzNC1cXHVERDM2XFx1REQ4RlxcdUREOUMtXFx1REQ5RlxcdUREQTEtXFx1RERDRlxcdURERkUtXFx1REU3RlxcdURFOUQtXFx1REU5RlxcdURFRDEtXFx1REVERlxcdURFRkMtXFx1REVGRlxcdURGMjQtXFx1REYyQ1xcdURGNEItXFx1REY0RlxcdURGN0ItXFx1REY3RlxcdURGOUVcXHVERkM0LVxcdURGQzdcXHVERkQ2LVxcdURGRkZdfFxcdUQ4MDFbXFx1REM5RVxcdURDOUZcXHVEQ0FBLVxcdURDQUZcXHVEQ0Q0LVxcdURDRDdcXHVEQ0ZDLVxcdURDRkZcXHVERDI4LVxcdUREMkZcXHVERDY0LVxcdURENkVcXHVERDcwLVxcdURERkZcXHVERjM3LVxcdURGM0ZcXHVERjU2LVxcdURGNUZcXHVERjY4LVxcdURGRkZdfFxcdUQ4MDJbXFx1REMwNlxcdURDMDdcXHVEQzA5XFx1REMzNlxcdURDMzktXFx1REMzQlxcdURDM0RcXHVEQzNFXFx1REM1NlxcdURDOUYtXFx1RENBNlxcdURDQjAtXFx1RENERlxcdURDRjNcXHVEQ0Y2LVxcdURDRkFcXHVERDFDLVxcdUREMUVcXHVERDNBLVxcdUREM0VcXHVERDQwLVxcdUREN0ZcXHVEREI4LVxcdUREQkJcXHVEREQwXFx1REREMVxcdURFMDRcXHVERTA3LVxcdURFMEJcXHVERTE0XFx1REUxOFxcdURFMzZcXHVERTM3XFx1REUzQi1cXHVERTNFXFx1REU0OS1cXHVERTRGXFx1REU1OS1cXHVERTVGXFx1REVBMC1cXHVERUJGXFx1REVFNy1cXHVERUVBXFx1REVGNy1cXHVERUZGXFx1REYzNi1cXHVERjM4XFx1REY1NlxcdURGNTdcXHVERjczLVxcdURGNzdcXHVERjkyLVxcdURGOThcXHVERjlELVxcdURGQThcXHVERkIwLVxcdURGRkZdfFxcdUQ4MDNbXFx1REM0OS1cXHVEQzdGXFx1RENCMy1cXHVEQ0JGXFx1RENGMy1cXHVEQ0Y5XFx1REQyOC1cXHVERDJGXFx1REQzQS1cXHVERTVGXFx1REU3Ri1cXHVERUZGXFx1REYyOC1cXHVERjJGXFx1REY1QS1cXHVERkZGXXxcXHVEODA0W1xcdURDNEUtXFx1REM1MVxcdURDNzAtXFx1REM3RVxcdURDQzItXFx1RENDQ1xcdURDQ0VcXHVEQ0NGXFx1RENFOS1cXHVEQ0VGXFx1RENGQS1cXHVEQ0ZGXFx1REQzNVxcdURENDctXFx1REQ0RlxcdURENzctXFx1REQ3RlxcdUREQ0VcXHVERENGXFx1RERFMFxcdURERjUtXFx1RERGRlxcdURFMTJcXHVERTNGLVxcdURFN0ZcXHVERTg3XFx1REU4OVxcdURFOEVcXHVERTlFXFx1REVBQS1cXHVERUFGXFx1REVFQi1cXHVERUVGXFx1REVGQS1cXHVERUZGXFx1REYwNFxcdURGMERcXHVERjBFXFx1REYxMVxcdURGMTJcXHVERjI5XFx1REYzMVxcdURGMzRcXHVERjNBXFx1REY0NVxcdURGNDZcXHVERjQ5XFx1REY0QVxcdURGNEVcXHVERjRGXFx1REY1MS1cXHVERjU2XFx1REY1OC1cXHVERjVDXFx1REY2NFxcdURGNjVcXHVERjZELVxcdURGNkZcXHVERjc1LVxcdURGRkZdfFxcdUQ4MDVbXFx1REM1QVxcdURDNUNcXHVEQzVGLVxcdURDN0ZcXHVEQ0M4LVxcdURDQ0ZcXHVEQ0RBLVxcdUREN0ZcXHVEREI2XFx1RERCN1xcdUREREUtXFx1RERGRlxcdURFNDUtXFx1REU0RlxcdURFNUEtXFx1REU1RlxcdURFNkQtXFx1REU3RlxcdURFQjgtXFx1REVCRlxcdURFQ0EtXFx1REVGRlxcdURGMUJcXHVERjFDXFx1REYyQy1cXHVERjJGXFx1REY0MC1cXHVERkZGXXxcXHVEODA2W1xcdURDM0MtXFx1REM5RlxcdURDRjMtXFx1RENGRVxcdUREMDAtXFx1RERGRlxcdURFNDgtXFx1REU0RlxcdURFODRcXHVERTg1XFx1REVBMy1cXHVERUJGXFx1REVGOS1cXHVERkZGXXxcXHVEODA3W1xcdURDMDlcXHVEQzM3XFx1REM0Ni1cXHVEQzRGXFx1REM2RC1cXHVEQzZGXFx1REM5MFxcdURDOTFcXHVEQ0E4XFx1RENCNy1cXHVEQ0ZGXFx1REQwN1xcdUREMEFcXHVERDM3LVxcdUREMzlcXHVERDNCXFx1REQzRVxcdURENDgtXFx1REQ0RlxcdURENUEtXFx1REQ1RlxcdURENjZcXHVERDY5XFx1REQ4RlxcdUREOTJcXHVERDk5LVxcdUREOUZcXHVEREFBLVxcdURFREZcXHVERUY5LVxcdURGRkZdfFxcdUQ4MDhbXFx1REY5QS1cXHVERkZGXXxcXHVEODA5W1xcdURDNkZcXHVEQzc1LVxcdURDN0ZcXHVERDQ0LVxcdURGRkZdfFtcXHVEODBBXFx1RDgwQlxcdUQ4MEUtXFx1RDgxMFxcdUQ4MTItXFx1RDgxOVxcdUQ4MjMtXFx1RDgyQlxcdUQ4MkRcXHVEODJFXFx1RDgzMC1cXHVEODMzXFx1RDgzN1xcdUQ4MzlcXHVEODNGXFx1RDg3Qi1cXHVEODdEXFx1RDg3Ri1cXHVEQjNGXFx1REI0MS1cXHVEQjdGXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMyRi1cXHVERkZGXXxcXHVEODExW1xcdURFNDctXFx1REZGRl18XFx1RDgxQVtcXHVERTM5LVxcdURFM0ZcXHVERTVGXFx1REU2QS1cXHVERTZEXFx1REU3MC1cXHVERUNGXFx1REVFRVxcdURFRUZcXHVERUY2LVxcdURFRkZcXHVERjQ2LVxcdURGNEZcXHVERjVBXFx1REY2MlxcdURGNzgtXFx1REY3Q1xcdURGOTAtXFx1REZGRl18XFx1RDgxQltcXHVEQzAwLVxcdURFM0ZcXHVERTlCLVxcdURFRkZcXHVERjQ1LVxcdURGNEZcXHVERjdGLVxcdURGOEVcXHVERkEwLVxcdURGREZcXHVERkUyLVxcdURGRkZdfFxcdUQ4MjFbXFx1REZGMi1cXHVERkZGXXxcXHVEODIyW1xcdURFRjMtXFx1REZGRl18XFx1RDgyQ1tcXHVERDFGLVxcdURENkZcXHVERUZDLVxcdURGRkZdfFxcdUQ4MkZbXFx1REM2Qi1cXHVEQzZGXFx1REM3RC1cXHVEQzdGXFx1REM4OS1cXHVEQzhGXFx1REM5QVxcdURDOUJcXHVEQ0E0LVxcdURGRkZdfFxcdUQ4MzRbXFx1RENGNi1cXHVEQ0ZGXFx1REQyN1xcdUREMjhcXHVEREU5LVxcdURERkZcXHVERTQ2LVxcdURFREZcXHVERUY0LVxcdURFRkZcXHVERjU3LVxcdURGNUZcXHVERjc5LVxcdURGRkZdfFxcdUQ4MzVbXFx1REM1NVxcdURDOURcXHVEQ0EwXFx1RENBMVxcdURDQTNcXHVEQ0E0XFx1RENBN1xcdURDQThcXHVEQ0FEXFx1RENCQVxcdURDQkNcXHVEQ0M0XFx1REQwNlxcdUREMEJcXHVERDBDXFx1REQxNVxcdUREMURcXHVERDNBXFx1REQzRlxcdURENDVcXHVERDQ3LVxcdURENDlcXHVERDUxXFx1REVBNlxcdURFQTdcXHVERkNDXFx1REZDRF18XFx1RDgzNltcXHVERThDLVxcdURFOUFcXHVERUEwXFx1REVCMC1cXHVERkZGXXxcXHVEODM4W1xcdURDMDdcXHVEQzE5XFx1REMxQVxcdURDMjJcXHVEQzI1XFx1REMyQi1cXHVERkZGXXxcXHVEODNBW1xcdURDQzVcXHVEQ0M2XFx1RENENy1cXHVEQ0ZGXFx1REQ0Qi1cXHVERDRGXFx1REQ1QS1cXHVERDVEXFx1REQ2MC1cXHVERkZGXXxcXHVEODNCW1xcdURDMDAtXFx1REM3MFxcdURDQjUtXFx1RERGRlxcdURFMDRcXHVERTIwXFx1REUyM1xcdURFMjVcXHVERTI2XFx1REUyOFxcdURFMzNcXHVERTM4XFx1REUzQVxcdURFM0MtXFx1REU0MVxcdURFNDMtXFx1REU0NlxcdURFNDhcXHVERTRBXFx1REU0Q1xcdURFNTBcXHVERTUzXFx1REU1NVxcdURFNTZcXHVERTU4XFx1REU1QVxcdURFNUNcXHVERTVFXFx1REU2MFxcdURFNjNcXHVERTY1XFx1REU2NlxcdURFNkJcXHVERTczXFx1REU3OFxcdURFN0RcXHVERTdGXFx1REU4QVxcdURFOUMtXFx1REVBMFxcdURFQTRcXHVERUFBXFx1REVCQy1cXHVERUVGXFx1REVGMi1cXHVERkZGXXxcXHVEODNDW1xcdURDMkMtXFx1REMyRlxcdURDOTQtXFx1REM5RlxcdURDQUZcXHVEQ0IwXFx1RENDMFxcdURDRDBcXHVEQ0Y2LVxcdURDRkZcXHVERDBELVxcdUREMEZcXHVERDZDLVxcdURENkZcXHVEREFELVxcdURERTVcXHVERTAzLVxcdURFMEZcXHVERTNDLVxcdURFM0ZcXHVERTQ5LVxcdURFNEZcXHVERTUyLVxcdURFNUZcXHVERTY2LVxcdURFRkZdfFxcdUQ4M0RbXFx1REVENS1cXHVERURGXFx1REVFRC1cXHVERUVGXFx1REVGQS1cXHVERUZGXFx1REY3NC1cXHVERjdGXFx1REZEOS1cXHVERkZGXXxcXHVEODNFW1xcdURDMEMtXFx1REMwRlxcdURDNDgtXFx1REM0RlxcdURDNUEtXFx1REM1RlxcdURDODgtXFx1REM4RlxcdURDQUUtXFx1RENGRlxcdUREMEMtXFx1REQwRlxcdUREM0ZcXHVERDcxXFx1REQ3MlxcdURENzctXFx1REQ3OVxcdUREN0JcXHVEREEzLVxcdUREQUZcXHVEREJBLVxcdUREQkZcXHVEREMzLVxcdUREQ0ZcXHVERTAwLVxcdURFNUZcXHVERTZFLVxcdURGRkZdfFxcdUQ4NjlbXFx1REVENy1cXHVERUZGXXxcXHVEODZEW1xcdURGMzUtXFx1REYzRl18XFx1RDg2RVtcXHVEQzFFXFx1REMxRl18XFx1RDg3M1tcXHVERUEyLVxcdURFQUZdfFxcdUQ4N0FbXFx1REZFMS1cXHVERkZGXXxcXHVEODdFW1xcdURFMUUtXFx1REZGRl18XFx1REI0MFtcXHVEQzAwXFx1REMwMi1cXHVEQzFGXFx1REM4MC1cXHVEQ0ZGXFx1RERGMC1cXHVERkZGXXxbXFx1REJCRlxcdURCRkZdW1xcdURGRkVcXHVERkZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnQ28nLFxuICAgICAgICAnYWxpYXMnOiAnUHJpdmF0ZV9Vc2UnLFxuICAgICAgICAnYm1wJzogJ1xcdUUwMDAtXFx1RjhGRicsXG4gICAgICAgICdhc3RyYWwnOiAnW1xcdURCODAtXFx1REJCRVxcdURCQzAtXFx1REJGRV1bXFx1REMwMC1cXHVERkZGXXxbXFx1REJCRlxcdURCRkZdW1xcdURDMDAtXFx1REZGRF0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0NzJyxcbiAgICAgICAgJ2FsaWFzJzogJ1N1cnJvZ2F0ZScsXG4gICAgICAgICdibXAnOiAnXFx1RDgwMC1cXHVERkZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdMJyxcbiAgICAgICAgJ2FsaWFzJzogJ0xldHRlcicsXG4gICAgICAgICdibXAnOiAnQS1aYS16XFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjAtXFx1MDU4OFxcdTA1RDAtXFx1MDVFQVxcdTA1RUYtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwODYwLVxcdTA4NkFcXHUwOEEwLVxcdTA4QjRcXHUwOEI2LVxcdTA4QkRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTA5RkNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzgwXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDU0LVxcdTBENTZcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZGMS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzhcXHUxODgwLVxcdTE4ODRcXHUxODg3LVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUM4MC1cXHUxQzg4XFx1MUM5MC1cXHUxQ0JBXFx1MUNCRC1cXHUxQ0JGXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJGXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkVGXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OURcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QjlcXHVBN0Y3LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE4RkVcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QTlFMC1cXHVBOUU0XFx1QTlFNi1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAwW1xcdURDMDAtXFx1REMwQlxcdURDMEQtXFx1REMyNlxcdURDMjgtXFx1REMzQVxcdURDM0NcXHVEQzNEXFx1REMzRi1cXHVEQzREXFx1REM1MC1cXHVEQzVEXFx1REM4MC1cXHVEQ0ZBXFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REYwMC1cXHVERjFGXFx1REYyRC1cXHVERjQwXFx1REY0Mi1cXHVERjQ5XFx1REY1MC1cXHVERjc1XFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXXxcXHVEODAxW1xcdURDMDAtXFx1REM5RFxcdURDQjAtXFx1RENEM1xcdURDRDgtXFx1RENGQlxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDBcXHVERTEwLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzVcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTRcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XFx1REM4MC1cXHVEQ0IyXFx1RENDMC1cXHVEQ0YyXFx1REQwMC1cXHVERDIzXFx1REYwMC1cXHVERjFDXFx1REYyN1xcdURGMzAtXFx1REY0NV18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDQ0XFx1REQ1MC1cXHVERDcyXFx1REQ3NlxcdUREODMtXFx1RERCMlxcdUREQzEtXFx1RERDNFxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTJCXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVERVxcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNEXFx1REY1MFxcdURGNUQtXFx1REY2MV18XFx1RDgwNVtcXHVEQzAwLVxcdURDMzRcXHVEQzQ3LVxcdURDNEFcXHVEQzgwLVxcdURDQUZcXHVEQ0M0XFx1RENDNVxcdURDQzdcXHVERDgwLVxcdUREQUVcXHVEREQ4LVxcdUREREJcXHVERTAwLVxcdURFMkZcXHVERTQ0XFx1REU4MC1cXHVERUFBXFx1REYwMC1cXHVERjFBXXxcXHVEODA2W1xcdURDMDAtXFx1REMyQlxcdURDQTAtXFx1RENERlxcdURDRkZcXHVERTAwXFx1REUwQi1cXHVERTMyXFx1REUzQVxcdURFNTBcXHVERTVDLVxcdURFODNcXHVERTg2LVxcdURFODlcXHVERTlEXFx1REVDMC1cXHVERUY4XXxcXHVEODA3W1xcdURDMDAtXFx1REMwOFxcdURDMEEtXFx1REMyRVxcdURDNDBcXHVEQzcyLVxcdURDOEZcXHVERDAwLVxcdUREMDZcXHVERDA4XFx1REQwOVxcdUREMEItXFx1REQzMFxcdURENDZcXHVERDYwLVxcdURENjVcXHVERDY3XFx1REQ2OFxcdURENkEtXFx1REQ4OVxcdUREOThcXHVERUUwLVxcdURFRjJdfFxcdUQ4MDhbXFx1REMwMC1cXHVERjk5XXxcXHVEODA5W1xcdURDODAtXFx1REQ0M118W1xcdUQ4MENcXHVEODFDLVxcdUQ4MjBcXHVEODQwLVxcdUQ4NjhcXHVEODZBLVxcdUQ4NkNcXHVEODZGLVxcdUQ4NzJcXHVEODc0LVxcdUQ4NzldW1xcdURDMDAtXFx1REZGRl18XFx1RDgwRFtcXHVEQzAwLVxcdURDMkVdfFxcdUQ4MTFbXFx1REMwMC1cXHVERTQ2XXxcXHVEODFBW1xcdURDMDAtXFx1REUzOFxcdURFNDAtXFx1REU1RVxcdURFRDAtXFx1REVFRFxcdURGMDAtXFx1REYyRlxcdURGNDAtXFx1REY0M1xcdURGNjMtXFx1REY3N1xcdURGN0QtXFx1REY4Rl18XFx1RDgxQltcXHVERTQwLVxcdURFN0ZcXHVERjAwLVxcdURGNDRcXHVERjUwXFx1REY5My1cXHVERjlGXFx1REZFMFxcdURGRTFdfFxcdUQ4MjFbXFx1REMwMC1cXHVERkYxXXxcXHVEODIyW1xcdURDMDAtXFx1REVGMl18XFx1RDgyQ1tcXHVEQzAwLVxcdUREMUVcXHVERDcwLVxcdURFRkJdfFxcdUQ4MkZbXFx1REMwMC1cXHVEQzZBXFx1REM3MC1cXHVEQzdDXFx1REM4MC1cXHVEQzg4XFx1REM5MC1cXHVEQzk5XXxcXHVEODM1W1xcdURDMDAtXFx1REM1NFxcdURDNTYtXFx1REM5Q1xcdURDOUVcXHVEQzlGXFx1RENBMlxcdURDQTVcXHVEQ0E2XFx1RENBOS1cXHVEQ0FDXFx1RENBRS1cXHVEQ0I5XFx1RENCQlxcdURDQkQtXFx1RENDM1xcdURDQzUtXFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMUUtXFx1REQzOVxcdUREM0ItXFx1REQzRVxcdURENDAtXFx1REQ0NFxcdURENDZcXHVERDRBLVxcdURENTBcXHVERDUyLVxcdURFQTVcXHVERUE4LVxcdURFQzBcXHVERUMyLVxcdURFREFcXHVERURDLVxcdURFRkFcXHVERUZDLVxcdURGMTRcXHVERjE2LVxcdURGMzRcXHVERjM2LVxcdURGNEVcXHVERjUwLVxcdURGNkVcXHVERjcwLVxcdURGODhcXHVERjhBLVxcdURGQThcXHVERkFBLVxcdURGQzJcXHVERkM0LVxcdURGQ0JdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XFx1REQwMC1cXHVERDQzXXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXFx1REVCMC1cXHVERkZGXXxcXHVEODdBW1xcdURDMDAtXFx1REZFMF18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdMQycsXG4gICAgICAgICdhbGlhcyc6ICdDYXNlZF9MZXR0ZXInLFxuICAgICAgICAnYm1wJzogJ0EtWmEtelxceEI1XFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAxQkFcXHUwMUJDLVxcdTAxQkZcXHUwMUM0LVxcdTAyOTNcXHUwMjk1LVxcdTAyQUZcXHUwMzcwLVxcdTAzNzNcXHUwMzc2XFx1MDM3N1xcdTAzN0ItXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NjAtXFx1MDU4OFxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGRC1cXHUxMEZGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MUM4MC1cXHUxQzg4XFx1MUM5MC1cXHUxQ0JBXFx1MUNCRC1cXHUxQ0JGXFx1MUQwMC1cXHUxRDJCXFx1MUQ2Qi1cXHUxRDc3XFx1MUQ3OS1cXHUxRDlBXFx1MUUwMC1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzNFxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDN0JcXHUyQzdFLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1QTY0MC1cXHVBNjZEXFx1QTY4MC1cXHVBNjlCXFx1QTcyMi1cXHVBNzZGXFx1QTc3MS1cXHVBNzg3XFx1QTc4Qi1cXHVBNzhFXFx1QTc5MC1cXHVBN0I5XFx1QTdGQVxcdUFCMzAtXFx1QUI1QVxcdUFCNjAtXFx1QUI2NVxcdUFCNzAtXFx1QUJCRlxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMVtcXHVEQzAwLVxcdURDNEZcXHVEQ0IwLVxcdURDRDNcXHVEQ0Q4LVxcdURDRkJdfFxcdUQ4MDNbXFx1REM4MC1cXHVEQ0IyXFx1RENDMC1cXHVEQ0YyXXxcXHVEODA2W1xcdURDQTAtXFx1RENERl18XFx1RDgxQltcXHVERTQwLVxcdURFN0ZdfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQl18XFx1RDgzQVtcXHVERDAwLVxcdURENDNdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdMbCcsXG4gICAgICAgICdhbGlhcyc6ICdMb3dlcmNhc2VfTGV0dGVyJyxcbiAgICAgICAgJ2JtcCc6ICdhLXpcXHhCNVxceERGLVxceEY2XFx4RjgtXFx4RkZcXHUwMTAxXFx1MDEwM1xcdTAxMDVcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDEwRlxcdTAxMTFcXHUwMTEzXFx1MDExNVxcdTAxMTdcXHUwMTE5XFx1MDExQlxcdTAxMURcXHUwMTFGXFx1MDEyMVxcdTAxMjNcXHUwMTI1XFx1MDEyN1xcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAxMkZcXHUwMTMxXFx1MDEzM1xcdTAxMzVcXHUwMTM3XFx1MDEzOFxcdTAxM0FcXHUwMTNDXFx1MDEzRVxcdTAxNDBcXHUwMTQyXFx1MDE0NFxcdTAxNDZcXHUwMTQ4XFx1MDE0OVxcdTAxNEJcXHUwMTREXFx1MDE0RlxcdTAxNTFcXHUwMTUzXFx1MDE1NVxcdTAxNTdcXHUwMTU5XFx1MDE1QlxcdTAxNURcXHUwMTVGXFx1MDE2MVxcdTAxNjNcXHUwMTY1XFx1MDE2N1xcdTAxNjlcXHUwMTZCXFx1MDE2RFxcdTAxNkZcXHUwMTcxXFx1MDE3M1xcdTAxNzVcXHUwMTc3XFx1MDE3QVxcdTAxN0NcXHUwMTdFLVxcdTAxODBcXHUwMTgzXFx1MDE4NVxcdTAxODhcXHUwMThDXFx1MDE4RFxcdTAxOTJcXHUwMTk1XFx1MDE5OS1cXHUwMTlCXFx1MDE5RVxcdTAxQTFcXHUwMUEzXFx1MDFBNVxcdTAxQThcXHUwMUFBXFx1MDFBQlxcdTAxQURcXHUwMUIwXFx1MDFCNFxcdTAxQjZcXHUwMUI5XFx1MDFCQVxcdTAxQkQtXFx1MDFCRlxcdTAxQzZcXHUwMUM5XFx1MDFDQ1xcdTAxQ0VcXHUwMUQwXFx1MDFEMlxcdTAxRDRcXHUwMUQ2XFx1MDFEOFxcdTAxREFcXHUwMURDXFx1MDFERFxcdTAxREZcXHUwMUUxXFx1MDFFM1xcdTAxRTVcXHUwMUU3XFx1MDFFOVxcdTAxRUJcXHUwMUVEXFx1MDFFRlxcdTAxRjBcXHUwMUYzXFx1MDFGNVxcdTAxRjlcXHUwMUZCXFx1MDFGRFxcdTAxRkZcXHUwMjAxXFx1MDIwM1xcdTAyMDVcXHUwMjA3XFx1MDIwOVxcdTAyMEJcXHUwMjBEXFx1MDIwRlxcdTAyMTFcXHUwMjEzXFx1MDIxNVxcdTAyMTdcXHUwMjE5XFx1MDIxQlxcdTAyMURcXHUwMjFGXFx1MDIyMVxcdTAyMjNcXHUwMjI1XFx1MDIyN1xcdTAyMjlcXHUwMjJCXFx1MDIyRFxcdTAyMkZcXHUwMjMxXFx1MDIzMy1cXHUwMjM5XFx1MDIzQ1xcdTAyM0ZcXHUwMjQwXFx1MDI0MlxcdTAyNDdcXHUwMjQ5XFx1MDI0QlxcdTAyNERcXHUwMjRGLVxcdTAyOTNcXHUwMjk1LVxcdTAyQUZcXHUwMzcxXFx1MDM3M1xcdTAzNzdcXHUwMzdCLVxcdTAzN0RcXHUwMzkwXFx1MDNBQy1cXHUwM0NFXFx1MDNEMFxcdTAzRDFcXHUwM0Q1LVxcdTAzRDdcXHUwM0Q5XFx1MDNEQlxcdTAzRERcXHUwM0RGXFx1MDNFMVxcdTAzRTNcXHUwM0U1XFx1MDNFN1xcdTAzRTlcXHUwM0VCXFx1MDNFRFxcdTAzRUYtXFx1MDNGM1xcdTAzRjVcXHUwM0Y4XFx1MDNGQlxcdTAzRkNcXHUwNDMwLVxcdTA0NUZcXHUwNDYxXFx1MDQ2M1xcdTA0NjVcXHUwNDY3XFx1MDQ2OVxcdTA0NkJcXHUwNDZEXFx1MDQ2RlxcdTA0NzFcXHUwNDczXFx1MDQ3NVxcdTA0NzdcXHUwNDc5XFx1MDQ3QlxcdTA0N0RcXHUwNDdGXFx1MDQ4MVxcdTA0OEJcXHUwNDhEXFx1MDQ4RlxcdTA0OTFcXHUwNDkzXFx1MDQ5NVxcdTA0OTdcXHUwNDk5XFx1MDQ5QlxcdTA0OURcXHUwNDlGXFx1MDRBMVxcdTA0QTNcXHUwNEE1XFx1MDRBN1xcdTA0QTlcXHUwNEFCXFx1MDRBRFxcdTA0QUZcXHUwNEIxXFx1MDRCM1xcdTA0QjVcXHUwNEI3XFx1MDRCOVxcdTA0QkJcXHUwNEJEXFx1MDRCRlxcdTA0QzJcXHUwNEM0XFx1MDRDNlxcdTA0QzhcXHUwNENBXFx1MDRDQ1xcdTA0Q0VcXHUwNENGXFx1MDREMVxcdTA0RDNcXHUwNEQ1XFx1MDREN1xcdTA0RDlcXHUwNERCXFx1MDRERFxcdTA0REZcXHUwNEUxXFx1MDRFM1xcdTA0RTVcXHUwNEU3XFx1MDRFOVxcdTA0RUJcXHUwNEVEXFx1MDRFRlxcdTA0RjFcXHUwNEYzXFx1MDRGNVxcdTA0RjdcXHUwNEY5XFx1MDRGQlxcdTA0RkRcXHUwNEZGXFx1MDUwMVxcdTA1MDNcXHUwNTA1XFx1MDUwN1xcdTA1MDlcXHUwNTBCXFx1MDUwRFxcdTA1MEZcXHUwNTExXFx1MDUxM1xcdTA1MTVcXHUwNTE3XFx1MDUxOVxcdTA1MUJcXHUwNTFEXFx1MDUxRlxcdTA1MjFcXHUwNTIzXFx1MDUyNVxcdTA1MjdcXHUwNTI5XFx1MDUyQlxcdTA1MkRcXHUwNTJGXFx1MDU2MC1cXHUwNTg4XFx1MTBEMC1cXHUxMEZBXFx1MTBGRC1cXHUxMEZGXFx1MTNGOC1cXHUxM0ZEXFx1MUM4MC1cXHUxQzg4XFx1MUQwMC1cXHUxRDJCXFx1MUQ2Qi1cXHUxRDc3XFx1MUQ3OS1cXHUxRDlBXFx1MUUwMVxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTFFMDlcXHUxRTBCXFx1MUUwRFxcdTFFMEZcXHUxRTExXFx1MUUxM1xcdTFFMTVcXHUxRTE3XFx1MUUxOVxcdTFFMUJcXHUxRTFEXFx1MUUxRlxcdTFFMjFcXHUxRTIzXFx1MUUyNVxcdTFFMjdcXHUxRTI5XFx1MUUyQlxcdTFFMkRcXHUxRTJGXFx1MUUzMVxcdTFFMzNcXHUxRTM1XFx1MUUzN1xcdTFFMzlcXHUxRTNCXFx1MUUzRFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTFFNDVcXHUxRTQ3XFx1MUU0OVxcdTFFNEJcXHUxRTREXFx1MUU0RlxcdTFFNTFcXHUxRTUzXFx1MUU1NVxcdTFFNTdcXHUxRTU5XFx1MUU1QlxcdTFFNURcXHUxRTVGXFx1MUU2MVxcdTFFNjNcXHUxRTY1XFx1MUU2N1xcdTFFNjlcXHUxRTZCXFx1MUU2RFxcdTFFNkZcXHUxRTcxXFx1MUU3M1xcdTFFNzVcXHUxRTc3XFx1MUU3OVxcdTFFN0JcXHUxRTdEXFx1MUU3RlxcdTFFODFcXHUxRTgzXFx1MUU4NVxcdTFFODdcXHUxRTg5XFx1MUU4QlxcdTFFOERcXHUxRThGXFx1MUU5MVxcdTFFOTNcXHUxRTk1LVxcdTFFOURcXHUxRTlGXFx1MUVBMVxcdTFFQTNcXHUxRUE1XFx1MUVBN1xcdTFFQTlcXHUxRUFCXFx1MUVBRFxcdTFFQUZcXHUxRUIxXFx1MUVCM1xcdTFFQjVcXHUxRUI3XFx1MUVCOVxcdTFFQkJcXHUxRUJEXFx1MUVCRlxcdTFFQzFcXHUxRUMzXFx1MUVDNVxcdTFFQzdcXHUxRUM5XFx1MUVDQlxcdTFFQ0RcXHUxRUNGXFx1MUVEMVxcdTFFRDNcXHUxRUQ1XFx1MUVEN1xcdTFFRDlcXHUxRURCXFx1MUVERFxcdTFFREZcXHUxRUUxXFx1MUVFM1xcdTFFRTVcXHUxRUU3XFx1MUVFOVxcdTFFRUJcXHUxRUVEXFx1MUVFRlxcdTFFRjFcXHUxRUYzXFx1MUVGNVxcdTFFRjdcXHUxRUY5XFx1MUVGQlxcdTFFRkRcXHUxRUZGLVxcdTFGMDdcXHUxRjEwLVxcdTFGMTVcXHUxRjIwLVxcdTFGMjdcXHUxRjMwLVxcdTFGMzdcXHUxRjQwLVxcdTFGNDVcXHUxRjUwLVxcdTFGNTdcXHUxRjYwLVxcdTFGNjdcXHUxRjcwLVxcdTFGN0RcXHUxRjgwLVxcdTFGODdcXHUxRjkwLVxcdTFGOTdcXHUxRkEwLVxcdTFGQTdcXHUxRkIwLVxcdTFGQjRcXHUxRkI2XFx1MUZCN1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2XFx1MUZDN1xcdTFGRDAtXFx1MUZEM1xcdTFGRDZcXHUxRkQ3XFx1MUZFMC1cXHUxRkU3XFx1MUZGMi1cXHUxRkY0XFx1MUZGNlxcdTFGRjdcXHUyMTBBXFx1MjEwRVxcdTIxMEZcXHUyMTEzXFx1MjEyRlxcdTIxMzRcXHUyMTM5XFx1MjEzQ1xcdTIxM0RcXHUyMTQ2LVxcdTIxNDlcXHUyMTRFXFx1MjE4NFxcdTJDMzAtXFx1MkM1RVxcdTJDNjFcXHUyQzY1XFx1MkM2NlxcdTJDNjhcXHUyQzZBXFx1MkM2Q1xcdTJDNzFcXHUyQzczXFx1MkM3NFxcdTJDNzYtXFx1MkM3QlxcdTJDODFcXHUyQzgzXFx1MkM4NVxcdTJDODdcXHUyQzg5XFx1MkM4QlxcdTJDOERcXHUyQzhGXFx1MkM5MVxcdTJDOTNcXHUyQzk1XFx1MkM5N1xcdTJDOTlcXHUyQzlCXFx1MkM5RFxcdTJDOUZcXHUyQ0ExXFx1MkNBM1xcdTJDQTVcXHUyQ0E3XFx1MkNBOVxcdTJDQUJcXHUyQ0FEXFx1MkNBRlxcdTJDQjFcXHUyQ0IzXFx1MkNCNVxcdTJDQjdcXHUyQ0I5XFx1MkNCQlxcdTJDQkRcXHUyQ0JGXFx1MkNDMVxcdTJDQzNcXHUyQ0M1XFx1MkNDN1xcdTJDQzlcXHUyQ0NCXFx1MkNDRFxcdTJDQ0ZcXHUyQ0QxXFx1MkNEM1xcdTJDRDVcXHUyQ0Q3XFx1MkNEOVxcdTJDREJcXHUyQ0REXFx1MkNERlxcdTJDRTFcXHUyQ0UzXFx1MkNFNFxcdTJDRUNcXHUyQ0VFXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1QTY0MVxcdUE2NDNcXHVBNjQ1XFx1QTY0N1xcdUE2NDlcXHVBNjRCXFx1QTY0RFxcdUE2NEZcXHVBNjUxXFx1QTY1M1xcdUE2NTVcXHVBNjU3XFx1QTY1OVxcdUE2NUJcXHVBNjVEXFx1QTY1RlxcdUE2NjFcXHVBNjYzXFx1QTY2NVxcdUE2NjdcXHVBNjY5XFx1QTY2QlxcdUE2NkRcXHVBNjgxXFx1QTY4M1xcdUE2ODVcXHVBNjg3XFx1QTY4OVxcdUE2OEJcXHVBNjhEXFx1QTY4RlxcdUE2OTFcXHVBNjkzXFx1QTY5NVxcdUE2OTdcXHVBNjk5XFx1QTY5QlxcdUE3MjNcXHVBNzI1XFx1QTcyN1xcdUE3MjlcXHVBNzJCXFx1QTcyRFxcdUE3MkYtXFx1QTczMVxcdUE3MzNcXHVBNzM1XFx1QTczN1xcdUE3MzlcXHVBNzNCXFx1QTczRFxcdUE3M0ZcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBNzQ3XFx1QTc0OVxcdUE3NEJcXHVBNzREXFx1QTc0RlxcdUE3NTFcXHVBNzUzXFx1QTc1NVxcdUE3NTdcXHVBNzU5XFx1QTc1QlxcdUE3NURcXHVBNzVGXFx1QTc2MVxcdUE3NjNcXHVBNzY1XFx1QTc2N1xcdUE3NjlcXHVBNzZCXFx1QTc2RFxcdUE3NkZcXHVBNzcxLVxcdUE3NzhcXHVBNzdBXFx1QTc3Q1xcdUE3N0ZcXHVBNzgxXFx1QTc4M1xcdUE3ODVcXHVBNzg3XFx1QTc4Q1xcdUE3OEVcXHVBNzkxXFx1QTc5My1cXHVBNzk1XFx1QTc5N1xcdUE3OTlcXHVBNzlCXFx1QTc5RFxcdUE3OUZcXHVBN0ExXFx1QTdBM1xcdUE3QTVcXHVBN0E3XFx1QTdBOVxcdUE3QUZcXHVBN0I1XFx1QTdCN1xcdUE3QjlcXHVBN0ZBXFx1QUIzMC1cXHVBQjVBXFx1QUI2MC1cXHVBQjY1XFx1QUI3MC1cXHVBQkJGXFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkY0MS1cXHVGRjVBJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAxW1xcdURDMjgtXFx1REM0RlxcdURDRDgtXFx1RENGQl18XFx1RDgwM1tcXHVEQ0MwLVxcdURDRjJdfFxcdUQ4MDZbXFx1RENDMC1cXHVEQ0RGXXxcXHVEODFCW1xcdURFNjAtXFx1REU3Rl18XFx1RDgzNVtcXHVEQzFBLVxcdURDMzNcXHVEQzRFLVxcdURDNTRcXHVEQzU2LVxcdURDNjdcXHVEQzgyLVxcdURDOUJcXHVEQ0I2LVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVEQ0NGXFx1RENFQS1cXHVERDAzXFx1REQxRS1cXHVERDM3XFx1REQ1Mi1cXHVERDZCXFx1REQ4Ni1cXHVERDlGXFx1RERCQS1cXHVEREQzXFx1RERFRS1cXHVERTA3XFx1REUyMi1cXHVERTNCXFx1REU1Ni1cXHVERTZGXFx1REU4QS1cXHVERUE1XFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUUxXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjFCXFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjU1XFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERjhGXFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkM5XFx1REZDQl18XFx1RDgzQVtcXHVERDIyLVxcdURENDNdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdMbScsXG4gICAgICAgICdhbGlhcyc6ICdNb2RpZmllcl9MZXR0ZXInLFxuICAgICAgICAnYm1wJzogJ1xcdTAyQjAtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3NFxcdTAzN0FcXHUwNTU5XFx1MDY0MFxcdTA2RTVcXHUwNkU2XFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDk3MVxcdTBFNDZcXHUwRUM2XFx1MTBGQ1xcdTE3RDdcXHUxODQzXFx1MUFBN1xcdTFDNzgtXFx1MUM3RFxcdTFEMkMtXFx1MUQ2QVxcdTFENzhcXHUxRDlCLVxcdTFEQkZcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTJDN0NcXHUyQzdEXFx1MkQ2RlxcdTJFMkZcXHUzMDA1XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwOURcXHUzMDlFXFx1MzBGQy1cXHUzMEZFXFx1QTAxNVxcdUE0RjgtXFx1QTRGRFxcdUE2MENcXHVBNjdGXFx1QTY5Q1xcdUE2OURcXHVBNzE3LVxcdUE3MUZcXHVBNzcwXFx1QTc4OFxcdUE3RjhcXHVBN0Y5XFx1QTlDRlxcdUE5RTZcXHVBQTcwXFx1QUFERFxcdUFBRjNcXHVBQUY0XFx1QUI1Qy1cXHVBQjVGXFx1RkY3MFxcdUZGOUVcXHVGRjlGJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODFBW1xcdURGNDAtXFx1REY0M118XFx1RDgxQltcXHVERjkzLVxcdURGOUZcXHVERkUwXFx1REZFMV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0xvJyxcbiAgICAgICAgJ2FsaWFzJzogJ090aGVyX0xldHRlcicsXG4gICAgICAgICdibXAnOiAnXFx4QUFcXHhCQVxcdTAxQkJcXHUwMUMwLVxcdTAxQzNcXHUwMjk0XFx1MDVEMC1cXHUwNUVBXFx1MDVFRi1cXHUwNUYyXFx1MDYyMC1cXHUwNjNGXFx1MDY0MS1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwODAwLVxcdTA4MTVcXHUwODQwLVxcdTA4NThcXHUwODYwLVxcdTA4NkFcXHUwOEEwLVxcdTA4QjRcXHUwOEI2LVxcdTA4QkRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzItXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTA5RkNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzgwXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDU0LVxcdTBENTZcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDVcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTExMDAtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZGMS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEQ1xcdTE4MjAtXFx1MTg0MlxcdTE4NDQtXFx1MTg3OFxcdTE4ODAtXFx1MTg4NFxcdTE4ODctXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQjA1LVxcdTFCMzNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgzLVxcdTFCQTBcXHUxQkFFXFx1MUJBRlxcdTFCQkEtXFx1MUJFNVxcdTFDMDAtXFx1MUMyM1xcdTFDNEQtXFx1MUM0RlxcdTFDNUEtXFx1MUM3N1xcdTFDRTktXFx1MUNFQ1xcdTFDRUUtXFx1MUNGMVxcdTFDRjVcXHUxQ0Y2XFx1MjEzNS1cXHUyMTM4XFx1MkQzMC1cXHUyRDY3XFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MzAwNlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGRlxcdTMxMDUtXFx1MzEyRlxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZFRlxcdUEwMDAtXFx1QTAxNFxcdUEwMTYtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGN1xcdUE1MDAtXFx1QTYwQlxcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY2RVxcdUE2QTAtXFx1QTZFNVxcdUE3OEZcXHVBN0Y3XFx1QTdGQi1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOEZFXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlFMC1cXHVBOUU0XFx1QTlFNy1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTZGXFx1QUE3MS1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQlxcdUFBRENcXHVBQUUwLVxcdUFBRUFcXHVBQUYyXFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUJDMC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkY2Ni1cXHVGRjZGXFx1RkY3MS1cXHVGRjlEXFx1RkZBMC1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAwW1xcdURDMDAtXFx1REMwQlxcdURDMEQtXFx1REMyNlxcdURDMjgtXFx1REMzQVxcdURDM0NcXHVEQzNEXFx1REMzRi1cXHVEQzREXFx1REM1MC1cXHVEQzVEXFx1REM4MC1cXHVEQ0ZBXFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REYwMC1cXHVERjFGXFx1REYyRC1cXHVERjQwXFx1REY0Mi1cXHVERjQ5XFx1REY1MC1cXHVERjc1XFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXXxcXHVEODAxW1xcdURDNTAtXFx1REM5RFxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDBcXHVERTEwLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzVcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTRcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XFx1REQwMC1cXHVERDIzXFx1REYwMC1cXHVERjFDXFx1REYyN1xcdURGMzAtXFx1REY0NV18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDQ0XFx1REQ1MC1cXHVERDcyXFx1REQ3NlxcdUREODMtXFx1RERCMlxcdUREQzEtXFx1RERDNFxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTJCXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVERVxcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNEXFx1REY1MFxcdURGNUQtXFx1REY2MV18XFx1RDgwNVtcXHVEQzAwLVxcdURDMzRcXHVEQzQ3LVxcdURDNEFcXHVEQzgwLVxcdURDQUZcXHVEQ0M0XFx1RENDNVxcdURDQzdcXHVERDgwLVxcdUREQUVcXHVEREQ4LVxcdUREREJcXHVERTAwLVxcdURFMkZcXHVERTQ0XFx1REU4MC1cXHVERUFBXFx1REYwMC1cXHVERjFBXXxcXHVEODA2W1xcdURDMDAtXFx1REMyQlxcdURDRkZcXHVERTAwXFx1REUwQi1cXHVERTMyXFx1REUzQVxcdURFNTBcXHVERTVDLVxcdURFODNcXHVERTg2LVxcdURFODlcXHVERTlEXFx1REVDMC1cXHVERUY4XXxcXHVEODA3W1xcdURDMDAtXFx1REMwOFxcdURDMEEtXFx1REMyRVxcdURDNDBcXHVEQzcyLVxcdURDOEZcXHVERDAwLVxcdUREMDZcXHVERDA4XFx1REQwOVxcdUREMEItXFx1REQzMFxcdURENDZcXHVERDYwLVxcdURENjVcXHVERDY3XFx1REQ2OFxcdURENkEtXFx1REQ4OVxcdUREOThcXHVERUUwLVxcdURFRjJdfFxcdUQ4MDhbXFx1REMwMC1cXHVERjk5XXxcXHVEODA5W1xcdURDODAtXFx1REQ0M118W1xcdUQ4MENcXHVEODFDLVxcdUQ4MjBcXHVEODQwLVxcdUQ4NjhcXHVEODZBLVxcdUQ4NkNcXHVEODZGLVxcdUQ4NzJcXHVEODc0LVxcdUQ4NzldW1xcdURDMDAtXFx1REZGRl18XFx1RDgwRFtcXHVEQzAwLVxcdURDMkVdfFxcdUQ4MTFbXFx1REMwMC1cXHVERTQ2XXxcXHVEODFBW1xcdURDMDAtXFx1REUzOFxcdURFNDAtXFx1REU1RVxcdURFRDAtXFx1REVFRFxcdURGMDAtXFx1REYyRlxcdURGNjMtXFx1REY3N1xcdURGN0QtXFx1REY4Rl18XFx1RDgxQltcXHVERjAwLVxcdURGNDRcXHVERjUwXXxcXHVEODIxW1xcdURDMDAtXFx1REZGMV18XFx1RDgyMltcXHVEQzAwLVxcdURFRjJdfFxcdUQ4MkNbXFx1REMwMC1cXHVERDFFXFx1REQ3MC1cXHVERUZCXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OV18XFx1RDgzQVtcXHVEQzAwLVxcdURDQzRdfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRDZcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFcXHVERUIwLVxcdURGRkZdfFxcdUQ4N0FbXFx1REMwMC1cXHVERkUwXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0x0JyxcbiAgICAgICAgJ2FsaWFzJzogJ1RpdGxlY2FzZV9MZXR0ZXInLFxuICAgICAgICAnYm1wJzogJ1xcdTAxQzVcXHUwMUM4XFx1MDFDQlxcdTAxRjJcXHUxRjg4LVxcdTFGOEZcXHUxRjk4LVxcdTFGOUZcXHUxRkE4LVxcdTFGQUZcXHUxRkJDXFx1MUZDQ1xcdTFGRkMnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0x1JyxcbiAgICAgICAgJ2FsaWFzJzogJ1VwcGVyY2FzZV9MZXR0ZXInLFxuICAgICAgICAnYm1wJzogJ0EtWlxceEMwLVxceEQ2XFx4RDgtXFx4REVcXHUwMTAwXFx1MDEwMlxcdTAxMDRcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDEwRVxcdTAxMTBcXHUwMTEyXFx1MDExNFxcdTAxMTZcXHUwMTE4XFx1MDExQVxcdTAxMUNcXHUwMTFFXFx1MDEyMFxcdTAxMjJcXHUwMTI0XFx1MDEyNlxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMkVcXHUwMTMwXFx1MDEzMlxcdTAxMzRcXHUwMTM2XFx1MDEzOVxcdTAxM0JcXHUwMTNEXFx1MDEzRlxcdTAxNDFcXHUwMTQzXFx1MDE0NVxcdTAxNDdcXHUwMTRBXFx1MDE0Q1xcdTAxNEVcXHUwMTUwXFx1MDE1MlxcdTAxNTRcXHUwMTU2XFx1MDE1OFxcdTAxNUFcXHUwMTVDXFx1MDE1RVxcdTAxNjBcXHUwMTYyXFx1MDE2NFxcdTAxNjZcXHUwMTY4XFx1MDE2QVxcdTAxNkNcXHUwMTZFXFx1MDE3MFxcdTAxNzJcXHUwMTc0XFx1MDE3NlxcdTAxNzhcXHUwMTc5XFx1MDE3QlxcdTAxN0RcXHUwMTgxXFx1MDE4MlxcdTAxODRcXHUwMTg2XFx1MDE4N1xcdTAxODktXFx1MDE4QlxcdTAxOEUtXFx1MDE5MVxcdTAxOTNcXHUwMTk0XFx1MDE5Ni1cXHUwMTk4XFx1MDE5Q1xcdTAxOURcXHUwMTlGXFx1MDFBMFxcdTAxQTJcXHUwMUE0XFx1MDFBNlxcdTAxQTdcXHUwMUE5XFx1MDFBQ1xcdTAxQUVcXHUwMUFGXFx1MDFCMS1cXHUwMUIzXFx1MDFCNVxcdTAxQjdcXHUwMUI4XFx1MDFCQ1xcdTAxQzRcXHUwMUM3XFx1MDFDQVxcdTAxQ0RcXHUwMUNGXFx1MDFEMVxcdTAxRDNcXHUwMUQ1XFx1MDFEN1xcdTAxRDlcXHUwMURCXFx1MDFERVxcdTAxRTBcXHUwMUUyXFx1MDFFNFxcdTAxRTZcXHUwMUU4XFx1MDFFQVxcdTAxRUNcXHUwMUVFXFx1MDFGMVxcdTAxRjRcXHUwMUY2LVxcdTAxRjhcXHUwMUZBXFx1MDFGQ1xcdTAxRkVcXHUwMjAwXFx1MDIwMlxcdTAyMDRcXHUwMjA2XFx1MDIwOFxcdTAyMEFcXHUwMjBDXFx1MDIwRVxcdTAyMTBcXHUwMjEyXFx1MDIxNFxcdTAyMTZcXHUwMjE4XFx1MDIxQVxcdTAyMUNcXHUwMjFFXFx1MDIyMFxcdTAyMjJcXHUwMjI0XFx1MDIyNlxcdTAyMjhcXHUwMjJBXFx1MDIyQ1xcdTAyMkVcXHUwMjMwXFx1MDIzMlxcdTAyM0FcXHUwMjNCXFx1MDIzRFxcdTAyM0VcXHUwMjQxXFx1MDI0My1cXHUwMjQ2XFx1MDI0OFxcdTAyNEFcXHUwMjRDXFx1MDI0RVxcdTAzNzBcXHUwMzcyXFx1MDM3NlxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEVcXHUwMzhGXFx1MDM5MS1cXHUwM0ExXFx1MDNBMy1cXHUwM0FCXFx1MDNDRlxcdTAzRDItXFx1MDNENFxcdTAzRDhcXHUwM0RBXFx1MDNEQ1xcdTAzREVcXHUwM0UwXFx1MDNFMlxcdTAzRTRcXHUwM0U2XFx1MDNFOFxcdTAzRUFcXHUwM0VDXFx1MDNFRVxcdTAzRjRcXHUwM0Y3XFx1MDNGOVxcdTAzRkFcXHUwM0ZELVxcdTA0MkZcXHUwNDYwXFx1MDQ2MlxcdTA0NjRcXHUwNDY2XFx1MDQ2OFxcdTA0NkFcXHUwNDZDXFx1MDQ2RVxcdTA0NzBcXHUwNDcyXFx1MDQ3NFxcdTA0NzZcXHUwNDc4XFx1MDQ3QVxcdTA0N0NcXHUwNDdFXFx1MDQ4MFxcdTA0OEFcXHUwNDhDXFx1MDQ4RVxcdTA0OTBcXHUwNDkyXFx1MDQ5NFxcdTA0OTZcXHUwNDk4XFx1MDQ5QVxcdTA0OUNcXHUwNDlFXFx1MDRBMFxcdTA0QTJcXHUwNEE0XFx1MDRBNlxcdTA0QThcXHUwNEFBXFx1MDRBQ1xcdTA0QUVcXHUwNEIwXFx1MDRCMlxcdTA0QjRcXHUwNEI2XFx1MDRCOFxcdTA0QkFcXHUwNEJDXFx1MDRCRVxcdTA0QzBcXHUwNEMxXFx1MDRDM1xcdTA0QzVcXHUwNEM3XFx1MDRDOVxcdTA0Q0JcXHUwNENEXFx1MDREMFxcdTA0RDJcXHUwNEQ0XFx1MDRENlxcdTA0RDhcXHUwNERBXFx1MDREQ1xcdTA0REVcXHUwNEUwXFx1MDRFMlxcdTA0RTRcXHUwNEU2XFx1MDRFOFxcdTA0RUFcXHUwNEVDXFx1MDRFRVxcdTA0RjBcXHUwNEYyXFx1MDRGNFxcdTA0RjZcXHUwNEY4XFx1MDRGQVxcdTA0RkNcXHUwNEZFXFx1MDUwMFxcdTA1MDJcXHUwNTA0XFx1MDUwNlxcdTA1MDhcXHUwNTBBXFx1MDUwQ1xcdTA1MEVcXHUwNTEwXFx1MDUxMlxcdTA1MTRcXHUwNTE2XFx1MDUxOFxcdTA1MUFcXHUwNTFDXFx1MDUxRVxcdTA1MjBcXHUwNTIyXFx1MDUyNFxcdTA1MjZcXHUwNTI4XFx1MDUyQVxcdTA1MkNcXHUwNTJFXFx1MDUzMS1cXHUwNTU2XFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxM0EwLVxcdTEzRjVcXHUxQzkwLVxcdTFDQkFcXHUxQ0JELVxcdTFDQkZcXHUxRTAwXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MUUwOFxcdTFFMEFcXHUxRTBDXFx1MUUwRVxcdTFFMTBcXHUxRTEyXFx1MUUxNFxcdTFFMTZcXHUxRTE4XFx1MUUxQVxcdTFFMUNcXHUxRTFFXFx1MUUyMFxcdTFFMjJcXHUxRTI0XFx1MUUyNlxcdTFFMjhcXHUxRTJBXFx1MUUyQ1xcdTFFMkVcXHUxRTMwXFx1MUUzMlxcdTFFMzRcXHUxRTM2XFx1MUUzOFxcdTFFM0FcXHUxRTNDXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MUU0NFxcdTFFNDZcXHUxRTQ4XFx1MUU0QVxcdTFFNENcXHUxRTRFXFx1MUU1MFxcdTFFNTJcXHUxRTU0XFx1MUU1NlxcdTFFNThcXHUxRTVBXFx1MUU1Q1xcdTFFNUVcXHUxRTYwXFx1MUU2MlxcdTFFNjRcXHUxRTY2XFx1MUU2OFxcdTFFNkFcXHUxRTZDXFx1MUU2RVxcdTFFNzBcXHUxRTcyXFx1MUU3NFxcdTFFNzZcXHUxRTc4XFx1MUU3QVxcdTFFN0NcXHUxRTdFXFx1MUU4MFxcdTFFODJcXHUxRTg0XFx1MUU4NlxcdTFFODhcXHUxRThBXFx1MUU4Q1xcdTFFOEVcXHUxRTkwXFx1MUU5MlxcdTFFOTRcXHUxRTlFXFx1MUVBMFxcdTFFQTJcXHUxRUE0XFx1MUVBNlxcdTFFQThcXHUxRUFBXFx1MUVBQ1xcdTFFQUVcXHUxRUIwXFx1MUVCMlxcdTFFQjRcXHUxRUI2XFx1MUVCOFxcdTFFQkFcXHUxRUJDXFx1MUVCRVxcdTFFQzBcXHUxRUMyXFx1MUVDNFxcdTFFQzZcXHUxRUM4XFx1MUVDQVxcdTFFQ0NcXHUxRUNFXFx1MUVEMFxcdTFFRDJcXHUxRUQ0XFx1MUVENlxcdTFFRDhcXHUxRURBXFx1MUVEQ1xcdTFFREVcXHUxRUUwXFx1MUVFMlxcdTFFRTRcXHUxRUU2XFx1MUVFOFxcdTFFRUFcXHUxRUVDXFx1MUVFRVxcdTFFRjBcXHUxRUYyXFx1MUVGNFxcdTFFRjZcXHUxRUY4XFx1MUVGQVxcdTFFRkNcXHUxRUZFXFx1MUYwOC1cXHUxRjBGXFx1MUYxOC1cXHUxRjFEXFx1MUYyOC1cXHUxRjJGXFx1MUYzOC1cXHUxRjNGXFx1MUY0OC1cXHUxRjREXFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1RlxcdTFGNjgtXFx1MUY2RlxcdTFGQjgtXFx1MUZCQlxcdTFGQzgtXFx1MUZDQlxcdTFGRDgtXFx1MUZEQlxcdTFGRTgtXFx1MUZFQ1xcdTFGRjgtXFx1MUZGQlxcdTIxMDJcXHUyMTA3XFx1MjEwQi1cXHUyMTBEXFx1MjExMC1cXHUyMTEyXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMzAtXFx1MjEzM1xcdTIxM0VcXHUyMTNGXFx1MjE0NVxcdTIxODNcXHUyQzAwLVxcdTJDMkVcXHUyQzYwXFx1MkM2Mi1cXHUyQzY0XFx1MkM2N1xcdTJDNjlcXHUyQzZCXFx1MkM2RC1cXHUyQzcwXFx1MkM3MlxcdTJDNzVcXHUyQzdFLVxcdTJDODBcXHUyQzgyXFx1MkM4NFxcdTJDODZcXHUyQzg4XFx1MkM4QVxcdTJDOENcXHUyQzhFXFx1MkM5MFxcdTJDOTJcXHUyQzk0XFx1MkM5NlxcdTJDOThcXHUyQzlBXFx1MkM5Q1xcdTJDOUVcXHUyQ0EwXFx1MkNBMlxcdTJDQTRcXHUyQ0E2XFx1MkNBOFxcdTJDQUFcXHUyQ0FDXFx1MkNBRVxcdTJDQjBcXHUyQ0IyXFx1MkNCNFxcdTJDQjZcXHUyQ0I4XFx1MkNCQVxcdTJDQkNcXHUyQ0JFXFx1MkNDMFxcdTJDQzJcXHUyQ0M0XFx1MkNDNlxcdTJDQzhcXHUyQ0NBXFx1MkNDQ1xcdTJDQ0VcXHUyQ0QwXFx1MkNEMlxcdTJDRDRcXHUyQ0Q2XFx1MkNEOFxcdTJDREFcXHUyQ0RDXFx1MkNERVxcdTJDRTBcXHUyQ0UyXFx1MkNFQlxcdTJDRURcXHUyQ0YyXFx1QTY0MFxcdUE2NDJcXHVBNjQ0XFx1QTY0NlxcdUE2NDhcXHVBNjRBXFx1QTY0Q1xcdUE2NEVcXHVBNjUwXFx1QTY1MlxcdUE2NTRcXHVBNjU2XFx1QTY1OFxcdUE2NUFcXHVBNjVDXFx1QTY1RVxcdUE2NjBcXHVBNjYyXFx1QTY2NFxcdUE2NjZcXHVBNjY4XFx1QTY2QVxcdUE2NkNcXHVBNjgwXFx1QTY4MlxcdUE2ODRcXHVBNjg2XFx1QTY4OFxcdUE2OEFcXHVBNjhDXFx1QTY4RVxcdUE2OTBcXHVBNjkyXFx1QTY5NFxcdUE2OTZcXHVBNjk4XFx1QTY5QVxcdUE3MjJcXHVBNzI0XFx1QTcyNlxcdUE3MjhcXHVBNzJBXFx1QTcyQ1xcdUE3MkVcXHVBNzMyXFx1QTczNFxcdUE3MzZcXHVBNzM4XFx1QTczQVxcdUE3M0NcXHVBNzNFXFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTc0NlxcdUE3NDhcXHVBNzRBXFx1QTc0Q1xcdUE3NEVcXHVBNzUwXFx1QTc1MlxcdUE3NTRcXHVBNzU2XFx1QTc1OFxcdUE3NUFcXHVBNzVDXFx1QTc1RVxcdUE3NjBcXHVBNzYyXFx1QTc2NFxcdUE3NjZcXHVBNzY4XFx1QTc2QVxcdUE3NkNcXHVBNzZFXFx1QTc3OVxcdUE3N0JcXHVBNzdEXFx1QTc3RVxcdUE3ODBcXHVBNzgyXFx1QTc4NFxcdUE3ODZcXHVBNzhCXFx1QTc4RFxcdUE3OTBcXHVBNzkyXFx1QTc5NlxcdUE3OThcXHVBNzlBXFx1QTc5Q1xcdUE3OUVcXHVBN0EwXFx1QTdBMlxcdUE3QTRcXHVBN0E2XFx1QTdBOFxcdUE3QUEtXFx1QTdBRVxcdUE3QjAtXFx1QTdCNFxcdUE3QjZcXHVBN0I4XFx1RkYyMS1cXHVGRjNBJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAxW1xcdURDMDAtXFx1REMyN1xcdURDQjAtXFx1RENEM118XFx1RDgwM1tcXHVEQzgwLVxcdURDQjJdfFxcdUQ4MDZbXFx1RENBMC1cXHVEQ0JGXXxcXHVEODFCW1xcdURFNDAtXFx1REU1Rl18XFx1RDgzNVtcXHVEQzAwLVxcdURDMTlcXHVEQzM0LVxcdURDNERcXHVEQzY4LVxcdURDODFcXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjVcXHVEQ0QwLVxcdURDRTlcXHVERDA0XFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMzhcXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENkMtXFx1REQ4NVxcdUREQTAtXFx1RERCOVxcdURERDQtXFx1RERFRFxcdURFMDgtXFx1REUyMVxcdURFM0MtXFx1REU1NVxcdURFNzAtXFx1REU4OVxcdURFQTgtXFx1REVDMFxcdURFRTItXFx1REVGQVxcdURGMUMtXFx1REYzNFxcdURGNTYtXFx1REY2RVxcdURGOTAtXFx1REZBOFxcdURGQ0FdfFxcdUQ4M0FbXFx1REQwMC1cXHVERDIxXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTScsXG4gICAgICAgICdhbGlhcyc6ICdNYXJrJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwMzAwLVxcdTAzNkZcXHUwNDgzLVxcdTA0ODlcXHUwNTkxLVxcdTA1QkRcXHUwNUJGXFx1MDVDMVxcdTA1QzJcXHUwNUM0XFx1MDVDNVxcdTA1QzdcXHUwNjEwLVxcdTA2MUFcXHUwNjRCLVxcdTA2NUZcXHUwNjcwXFx1MDZENi1cXHUwNkRDXFx1MDZERi1cXHUwNkU0XFx1MDZFN1xcdTA2RThcXHUwNkVBLVxcdTA2RURcXHUwNzExXFx1MDczMC1cXHUwNzRBXFx1MDdBNi1cXHUwN0IwXFx1MDdFQi1cXHUwN0YzXFx1MDdGRFxcdTA4MTYtXFx1MDgxOVxcdTA4MUItXFx1MDgyM1xcdTA4MjUtXFx1MDgyN1xcdTA4MjktXFx1MDgyRFxcdTA4NTktXFx1MDg1QlxcdTA4RDMtXFx1MDhFMVxcdTA4RTMtXFx1MDkwM1xcdTA5M0EtXFx1MDkzQ1xcdTA5M0UtXFx1MDk0RlxcdTA5NTEtXFx1MDk1N1xcdTA5NjJcXHUwOTYzXFx1MDk4MS1cXHUwOTgzXFx1MDlCQ1xcdTA5QkUtXFx1MDlDNFxcdTA5QzdcXHUwOUM4XFx1MDlDQi1cXHUwOUNEXFx1MDlEN1xcdTA5RTJcXHUwOUUzXFx1MDlGRVxcdTBBMDEtXFx1MEEwM1xcdTBBM0NcXHUwQTNFLVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEItXFx1MEE0RFxcdTBBNTFcXHUwQTcwXFx1MEE3MVxcdTBBNzVcXHUwQTgxLVxcdTBBODNcXHUwQUJDXFx1MEFCRS1cXHUwQUM1XFx1MEFDNy1cXHUwQUM5XFx1MEFDQi1cXHUwQUNEXFx1MEFFMlxcdTBBRTNcXHUwQUZBLVxcdTBBRkZcXHUwQjAxLVxcdTBCMDNcXHUwQjNDXFx1MEIzRS1cXHUwQjQ0XFx1MEI0N1xcdTBCNDhcXHUwQjRCLVxcdTBCNERcXHUwQjU2XFx1MEI1N1xcdTBCNjJcXHUwQjYzXFx1MEI4MlxcdTBCQkUtXFx1MEJDMlxcdTBCQzYtXFx1MEJDOFxcdTBCQ0EtXFx1MEJDRFxcdTBCRDdcXHUwQzAwLVxcdTBDMDRcXHUwQzNFLVxcdTBDNDRcXHUwQzQ2LVxcdTBDNDhcXHUwQzRBLVxcdTBDNERcXHUwQzU1XFx1MEM1NlxcdTBDNjJcXHUwQzYzXFx1MEM4MS1cXHUwQzgzXFx1MENCQ1xcdTBDQkUtXFx1MENDNFxcdTBDQzYtXFx1MENDOFxcdTBDQ0EtXFx1MENDRFxcdTBDRDVcXHUwQ0Q2XFx1MENFMlxcdTBDRTNcXHUwRDAwLVxcdTBEMDNcXHUwRDNCXFx1MEQzQ1xcdTBEM0UtXFx1MEQ0NFxcdTBENDYtXFx1MEQ0OFxcdTBENEEtXFx1MEQ0RFxcdTBENTdcXHUwRDYyXFx1MEQ2M1xcdTBEODJcXHUwRDgzXFx1MERDQVxcdTBEQ0YtXFx1MERENFxcdTBERDZcXHUwREQ4LVxcdTBEREZcXHUwREYyXFx1MERGM1xcdTBFMzFcXHUwRTM0LVxcdTBFM0FcXHUwRTQ3LVxcdTBFNEVcXHUwRUIxXFx1MEVCNC1cXHUwRUI5XFx1MEVCQlxcdTBFQkNcXHUwRUM4LVxcdTBFQ0RcXHUwRjE4XFx1MEYxOVxcdTBGMzVcXHUwRjM3XFx1MEYzOVxcdTBGM0VcXHUwRjNGXFx1MEY3MS1cXHUwRjg0XFx1MEY4NlxcdTBGODdcXHUwRjhELVxcdTBGOTdcXHUwRjk5LVxcdTBGQkNcXHUwRkM2XFx1MTAyQi1cXHUxMDNFXFx1MTA1Ni1cXHUxMDU5XFx1MTA1RS1cXHUxMDYwXFx1MTA2Mi1cXHUxMDY0XFx1MTA2Ny1cXHUxMDZEXFx1MTA3MS1cXHUxMDc0XFx1MTA4Mi1cXHUxMDhEXFx1MTA4RlxcdTEwOUEtXFx1MTA5RFxcdTEzNUQtXFx1MTM1RlxcdTE3MTItXFx1MTcxNFxcdTE3MzItXFx1MTczNFxcdTE3NTJcXHUxNzUzXFx1MTc3MlxcdTE3NzNcXHUxN0I0LVxcdTE3RDNcXHUxN0REXFx1MTgwQi1cXHUxODBEXFx1MTg4NVxcdTE4ODZcXHUxOEE5XFx1MTkyMC1cXHUxOTJCXFx1MTkzMC1cXHUxOTNCXFx1MUExNy1cXHUxQTFCXFx1MUE1NS1cXHUxQTVFXFx1MUE2MC1cXHUxQTdDXFx1MUE3RlxcdTFBQjAtXFx1MUFCRVxcdTFCMDAtXFx1MUIwNFxcdTFCMzQtXFx1MUI0NFxcdTFCNkItXFx1MUI3M1xcdTFCODAtXFx1MUI4MlxcdTFCQTEtXFx1MUJBRFxcdTFCRTYtXFx1MUJGM1xcdTFDMjQtXFx1MUMzN1xcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNFOFxcdTFDRURcXHUxQ0YyLVxcdTFDRjRcXHUxQ0Y3LVxcdTFDRjlcXHUxREMwLVxcdTFERjlcXHUxREZCLVxcdTFERkZcXHUyMEQwLVxcdTIwRjBcXHUyQ0VGLVxcdTJDRjFcXHUyRDdGXFx1MkRFMC1cXHUyREZGXFx1MzAyQS1cXHUzMDJGXFx1MzA5OVxcdTMwOUFcXHVBNjZGLVxcdUE2NzJcXHVBNjc0LVxcdUE2N0RcXHVBNjlFXFx1QTY5RlxcdUE2RjBcXHVBNkYxXFx1QTgwMlxcdUE4MDZcXHVBODBCXFx1QTgyMy1cXHVBODI3XFx1QTg4MFxcdUE4ODFcXHVBOEI0LVxcdUE4QzVcXHVBOEUwLVxcdUE4RjFcXHVBOEZGXFx1QTkyNi1cXHVBOTJEXFx1QTk0Ny1cXHVBOTUzXFx1QTk4MC1cXHVBOTgzXFx1QTlCMy1cXHVBOUMwXFx1QTlFNVxcdUFBMjktXFx1QUEzNlxcdUFBNDNcXHVBQTRDXFx1QUE0RFxcdUFBN0ItXFx1QUE3RFxcdUFBQjBcXHVBQUIyLVxcdUFBQjRcXHVBQUI3XFx1QUFCOFxcdUFBQkVcXHVBQUJGXFx1QUFDMVxcdUFBRUItXFx1QUFFRlxcdUFBRjVcXHVBQUY2XFx1QUJFMy1cXHVBQkVBXFx1QUJFQ1xcdUFCRURcXHVGQjFFXFx1RkUwMC1cXHVGRTBGXFx1RkUyMC1cXHVGRTJGJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAwW1xcdURERkRcXHVERUUwXFx1REY3Ni1cXHVERjdBXXxcXHVEODAyW1xcdURFMDEtXFx1REUwM1xcdURFMDVcXHVERTA2XFx1REUwQy1cXHVERTBGXFx1REUzOC1cXHVERTNBXFx1REUzRlxcdURFRTVcXHVERUU2XXxcXHVEODAzW1xcdUREMjQtXFx1REQyN1xcdURGNDYtXFx1REY1MF18XFx1RDgwNFtcXHVEQzAwLVxcdURDMDJcXHVEQzM4LVxcdURDNDZcXHVEQzdGLVxcdURDODJcXHVEQ0IwLVxcdURDQkFcXHVERDAwLVxcdUREMDJcXHVERDI3LVxcdUREMzRcXHVERDQ1XFx1REQ0NlxcdURENzNcXHVERDgwLVxcdUREODJcXHVEREIzLVxcdUREQzBcXHVEREM5LVxcdUREQ0NcXHVERTJDLVxcdURFMzdcXHVERTNFXFx1REVERi1cXHVERUVBXFx1REYwMC1cXHVERjAzXFx1REYzQlxcdURGM0NcXHVERjNFLVxcdURGNDRcXHVERjQ3XFx1REY0OFxcdURGNEItXFx1REY0RFxcdURGNTdcXHVERjYyXFx1REY2M1xcdURGNjYtXFx1REY2Q1xcdURGNzAtXFx1REY3NF18XFx1RDgwNVtcXHVEQzM1LVxcdURDNDZcXHVEQzVFXFx1RENCMC1cXHVEQ0MzXFx1RERBRi1cXHVEREI1XFx1RERCOC1cXHVEREMwXFx1REREQ1xcdURERERcXHVERTMwLVxcdURFNDBcXHVERUFCLVxcdURFQjdcXHVERjFELVxcdURGMkJdfFxcdUQ4MDZbXFx1REMyQy1cXHVEQzNBXFx1REUwMS1cXHVERTBBXFx1REUzMy1cXHVERTM5XFx1REUzQi1cXHVERTNFXFx1REU0N1xcdURFNTEtXFx1REU1QlxcdURFOEEtXFx1REU5OV18XFx1RDgwN1tcXHVEQzJGLVxcdURDMzZcXHVEQzM4LVxcdURDM0ZcXHVEQzkyLVxcdURDQTdcXHVEQ0E5LVxcdURDQjZcXHVERDMxLVxcdUREMzZcXHVERDNBXFx1REQzQ1xcdUREM0RcXHVERDNGLVxcdURENDVcXHVERDQ3XFx1REQ4QS1cXHVERDhFXFx1REQ5MFxcdUREOTFcXHVERDkzLVxcdUREOTdcXHVERUYzLVxcdURFRjZdfFxcdUQ4MUFbXFx1REVGMC1cXHVERUY0XFx1REYzMC1cXHVERjM2XXxcXHVEODFCW1xcdURGNTEtXFx1REY3RVxcdURGOEYtXFx1REY5Ml18XFx1RDgyRltcXHVEQzlEXFx1REM5RV18XFx1RDgzNFtcXHVERDY1LVxcdURENjlcXHVERDZELVxcdURENzJcXHVERDdCLVxcdUREODJcXHVERDg1LVxcdUREOEJcXHVEREFBLVxcdUREQURcXHVERTQyLVxcdURFNDRdfFxcdUQ4MzZbXFx1REUwMC1cXHVERTM2XFx1REUzQi1cXHVERTZDXFx1REU3NVxcdURFODRcXHVERTlCLVxcdURFOUZcXHVERUExLVxcdURFQUZdfFxcdUQ4MzhbXFx1REMwMC1cXHVEQzA2XFx1REMwOC1cXHVEQzE4XFx1REMxQi1cXHVEQzIxXFx1REMyM1xcdURDMjRcXHVEQzI2LVxcdURDMkFdfFxcdUQ4M0FbXFx1RENEMC1cXHVEQ0Q2XFx1REQ0NC1cXHVERDRBXXxcXHVEQjQwW1xcdUREMDAtXFx1RERFRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ01jJyxcbiAgICAgICAgJ2FsaWFzJzogJ1NwYWNpbmdfTWFyaycsXG4gICAgICAgICdibXAnOiAnXFx1MDkwM1xcdTA5M0JcXHUwOTNFLVxcdTA5NDBcXHUwOTQ5LVxcdTA5NENcXHUwOTRFXFx1MDk0RlxcdTA5ODJcXHUwOTgzXFx1MDlCRS1cXHUwOUMwXFx1MDlDN1xcdTA5QzhcXHUwOUNCXFx1MDlDQ1xcdTA5RDdcXHUwQTAzXFx1MEEzRS1cXHUwQTQwXFx1MEE4M1xcdTBBQkUtXFx1MEFDMFxcdTBBQzlcXHUwQUNCXFx1MEFDQ1xcdTBCMDJcXHUwQjAzXFx1MEIzRVxcdTBCNDBcXHUwQjQ3XFx1MEI0OFxcdTBCNEJcXHUwQjRDXFx1MEI1N1xcdTBCQkVcXHUwQkJGXFx1MEJDMVxcdTBCQzJcXHUwQkM2LVxcdTBCQzhcXHUwQkNBLVxcdTBCQ0NcXHUwQkQ3XFx1MEMwMS1cXHUwQzAzXFx1MEM0MS1cXHUwQzQ0XFx1MEM4MlxcdTBDODNcXHUwQ0JFXFx1MENDMC1cXHUwQ0M0XFx1MENDN1xcdTBDQzhcXHUwQ0NBXFx1MENDQlxcdTBDRDVcXHUwQ0Q2XFx1MEQwMlxcdTBEMDNcXHUwRDNFLVxcdTBENDBcXHUwRDQ2LVxcdTBENDhcXHUwRDRBLVxcdTBENENcXHUwRDU3XFx1MEQ4MlxcdTBEODNcXHUwRENGLVxcdTBERDFcXHUwREQ4LVxcdTBEREZcXHUwREYyXFx1MERGM1xcdTBGM0VcXHUwRjNGXFx1MEY3RlxcdTEwMkJcXHUxMDJDXFx1MTAzMVxcdTEwMzhcXHUxMDNCXFx1MTAzQ1xcdTEwNTZcXHUxMDU3XFx1MTA2Mi1cXHUxMDY0XFx1MTA2Ny1cXHUxMDZEXFx1MTA4M1xcdTEwODRcXHUxMDg3LVxcdTEwOENcXHUxMDhGXFx1MTA5QS1cXHUxMDlDXFx1MTdCNlxcdTE3QkUtXFx1MTdDNVxcdTE3QzdcXHUxN0M4XFx1MTkyMy1cXHUxOTI2XFx1MTkyOS1cXHUxOTJCXFx1MTkzMFxcdTE5MzFcXHUxOTMzLVxcdTE5MzhcXHUxQTE5XFx1MUExQVxcdTFBNTVcXHUxQTU3XFx1MUE2MVxcdTFBNjNcXHUxQTY0XFx1MUE2RC1cXHUxQTcyXFx1MUIwNFxcdTFCMzVcXHUxQjNCXFx1MUIzRC1cXHUxQjQxXFx1MUI0M1xcdTFCNDRcXHUxQjgyXFx1MUJBMVxcdTFCQTZcXHUxQkE3XFx1MUJBQVxcdTFCRTdcXHUxQkVBLVxcdTFCRUNcXHUxQkVFXFx1MUJGMlxcdTFCRjNcXHUxQzI0LVxcdTFDMkJcXHUxQzM0XFx1MUMzNVxcdTFDRTFcXHUxQ0YyXFx1MUNGM1xcdTFDRjdcXHUzMDJFXFx1MzAyRlxcdUE4MjNcXHVBODI0XFx1QTgyN1xcdUE4ODBcXHVBODgxXFx1QThCNC1cXHVBOEMzXFx1QTk1MlxcdUE5NTNcXHVBOTgzXFx1QTlCNFxcdUE5QjVcXHVBOUJBXFx1QTlCQlxcdUE5QkQtXFx1QTlDMFxcdUFBMkZcXHVBQTMwXFx1QUEzM1xcdUFBMzRcXHVBQTREXFx1QUE3QlxcdUFBN0RcXHVBQUVCXFx1QUFFRVxcdUFBRUZcXHVBQUY1XFx1QUJFM1xcdUFCRTRcXHVBQkU2XFx1QUJFN1xcdUFCRTlcXHVBQkVBXFx1QUJFQycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNFtcXHVEQzAwXFx1REMwMlxcdURDODJcXHVEQ0IwLVxcdURDQjJcXHVEQ0I3XFx1RENCOFxcdUREMkNcXHVERDQ1XFx1REQ0NlxcdUREODJcXHVEREIzLVxcdUREQjVcXHVEREJGXFx1RERDMFxcdURFMkMtXFx1REUyRVxcdURFMzJcXHVERTMzXFx1REUzNVxcdURFRTAtXFx1REVFMlxcdURGMDJcXHVERjAzXFx1REYzRVxcdURGM0ZcXHVERjQxLVxcdURGNDRcXHVERjQ3XFx1REY0OFxcdURGNEItXFx1REY0RFxcdURGNTdcXHVERjYyXFx1REY2M118XFx1RDgwNVtcXHVEQzM1LVxcdURDMzdcXHVEQzQwXFx1REM0MVxcdURDNDVcXHVEQ0IwLVxcdURDQjJcXHVEQ0I5XFx1RENCQi1cXHVEQ0JFXFx1RENDMVxcdUREQUYtXFx1RERCMVxcdUREQjgtXFx1RERCQlxcdUREQkVcXHVERTMwLVxcdURFMzJcXHVERTNCXFx1REUzQ1xcdURFM0VcXHVERUFDXFx1REVBRVxcdURFQUZcXHVERUI2XFx1REYyMFxcdURGMjFcXHVERjI2XXxcXHVEODA2W1xcdURDMkMtXFx1REMyRVxcdURDMzhcXHVERTM5XFx1REU1N1xcdURFNThcXHVERTk3XXxcXHVEODA3W1xcdURDMkZcXHVEQzNFXFx1RENBOVxcdURDQjFcXHVEQ0I0XFx1REQ4QS1cXHVERDhFXFx1REQ5M1xcdUREOTRcXHVERDk2XFx1REVGNVxcdURFRjZdfFxcdUQ4MUJbXFx1REY1MS1cXHVERjdFXXxcXHVEODM0W1xcdURENjVcXHVERDY2XFx1REQ2RC1cXHVERDcyXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTWUnLFxuICAgICAgICAnYWxpYXMnOiAnRW5jbG9zaW5nX01hcmsnLFxuICAgICAgICAnYm1wJzogJ1xcdTA0ODhcXHUwNDg5XFx1MUFCRVxcdTIwREQtXFx1MjBFMFxcdTIwRTItXFx1MjBFNFxcdUE2NzAtXFx1QTY3MidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTW4nLFxuICAgICAgICAnYWxpYXMnOiAnTm9uc3BhY2luZ19NYXJrJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwMzAwLVxcdTAzNkZcXHUwNDgzLVxcdTA0ODdcXHUwNTkxLVxcdTA1QkRcXHUwNUJGXFx1MDVDMVxcdTA1QzJcXHUwNUM0XFx1MDVDNVxcdTA1QzdcXHUwNjEwLVxcdTA2MUFcXHUwNjRCLVxcdTA2NUZcXHUwNjcwXFx1MDZENi1cXHUwNkRDXFx1MDZERi1cXHUwNkU0XFx1MDZFN1xcdTA2RThcXHUwNkVBLVxcdTA2RURcXHUwNzExXFx1MDczMC1cXHUwNzRBXFx1MDdBNi1cXHUwN0IwXFx1MDdFQi1cXHUwN0YzXFx1MDdGRFxcdTA4MTYtXFx1MDgxOVxcdTA4MUItXFx1MDgyM1xcdTA4MjUtXFx1MDgyN1xcdTA4MjktXFx1MDgyRFxcdTA4NTktXFx1MDg1QlxcdTA4RDMtXFx1MDhFMVxcdTA4RTMtXFx1MDkwMlxcdTA5M0FcXHUwOTNDXFx1MDk0MS1cXHUwOTQ4XFx1MDk0RFxcdTA5NTEtXFx1MDk1N1xcdTA5NjJcXHUwOTYzXFx1MDk4MVxcdTA5QkNcXHUwOUMxLVxcdTA5QzRcXHUwOUNEXFx1MDlFMlxcdTA5RTNcXHUwOUZFXFx1MEEwMVxcdTBBMDJcXHUwQTNDXFx1MEE0MVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEItXFx1MEE0RFxcdTBBNTFcXHUwQTcwXFx1MEE3MVxcdTBBNzVcXHUwQTgxXFx1MEE4MlxcdTBBQkNcXHUwQUMxLVxcdTBBQzVcXHUwQUM3XFx1MEFDOFxcdTBBQ0RcXHUwQUUyXFx1MEFFM1xcdTBBRkEtXFx1MEFGRlxcdTBCMDFcXHUwQjNDXFx1MEIzRlxcdTBCNDEtXFx1MEI0NFxcdTBCNERcXHUwQjU2XFx1MEI2MlxcdTBCNjNcXHUwQjgyXFx1MEJDMFxcdTBCQ0RcXHUwQzAwXFx1MEMwNFxcdTBDM0UtXFx1MEM0MFxcdTBDNDYtXFx1MEM0OFxcdTBDNEEtXFx1MEM0RFxcdTBDNTVcXHUwQzU2XFx1MEM2MlxcdTBDNjNcXHUwQzgxXFx1MENCQ1xcdTBDQkZcXHUwQ0M2XFx1MENDQ1xcdTBDQ0RcXHUwQ0UyXFx1MENFM1xcdTBEMDBcXHUwRDAxXFx1MEQzQlxcdTBEM0NcXHUwRDQxLVxcdTBENDRcXHUwRDREXFx1MEQ2MlxcdTBENjNcXHUwRENBXFx1MEREMi1cXHUwREQ0XFx1MERENlxcdTBFMzFcXHUwRTM0LVxcdTBFM0FcXHUwRTQ3LVxcdTBFNEVcXHUwRUIxXFx1MEVCNC1cXHUwRUI5XFx1MEVCQlxcdTBFQkNcXHUwRUM4LVxcdTBFQ0RcXHUwRjE4XFx1MEYxOVxcdTBGMzVcXHUwRjM3XFx1MEYzOVxcdTBGNzEtXFx1MEY3RVxcdTBGODAtXFx1MEY4NFxcdTBGODZcXHUwRjg3XFx1MEY4RC1cXHUwRjk3XFx1MEY5OS1cXHUwRkJDXFx1MEZDNlxcdTEwMkQtXFx1MTAzMFxcdTEwMzItXFx1MTAzN1xcdTEwMzlcXHUxMDNBXFx1MTAzRFxcdTEwM0VcXHUxMDU4XFx1MTA1OVxcdTEwNUUtXFx1MTA2MFxcdTEwNzEtXFx1MTA3NFxcdTEwODJcXHUxMDg1XFx1MTA4NlxcdTEwOERcXHUxMDlEXFx1MTM1RC1cXHUxMzVGXFx1MTcxMi1cXHUxNzE0XFx1MTczMi1cXHUxNzM0XFx1MTc1MlxcdTE3NTNcXHUxNzcyXFx1MTc3M1xcdTE3QjRcXHUxN0I1XFx1MTdCNy1cXHUxN0JEXFx1MTdDNlxcdTE3QzktXFx1MTdEM1xcdTE3RERcXHUxODBCLVxcdTE4MERcXHUxODg1XFx1MTg4NlxcdTE4QTlcXHUxOTIwLVxcdTE5MjJcXHUxOTI3XFx1MTkyOFxcdTE5MzJcXHUxOTM5LVxcdTE5M0JcXHUxQTE3XFx1MUExOFxcdTFBMUJcXHUxQTU2XFx1MUE1OC1cXHUxQTVFXFx1MUE2MFxcdTFBNjJcXHUxQTY1LVxcdTFBNkNcXHUxQTczLVxcdTFBN0NcXHUxQTdGXFx1MUFCMC1cXHUxQUJEXFx1MUIwMC1cXHUxQjAzXFx1MUIzNFxcdTFCMzYtXFx1MUIzQVxcdTFCM0NcXHUxQjQyXFx1MUI2Qi1cXHUxQjczXFx1MUI4MFxcdTFCODFcXHUxQkEyLVxcdTFCQTVcXHUxQkE4XFx1MUJBOVxcdTFCQUItXFx1MUJBRFxcdTFCRTZcXHUxQkU4XFx1MUJFOVxcdTFCRURcXHUxQkVGLVxcdTFCRjFcXHUxQzJDLVxcdTFDMzNcXHUxQzM2XFx1MUMzN1xcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNFMFxcdTFDRTItXFx1MUNFOFxcdTFDRURcXHUxQ0Y0XFx1MUNGOFxcdTFDRjlcXHUxREMwLVxcdTFERjlcXHUxREZCLVxcdTFERkZcXHUyMEQwLVxcdTIwRENcXHUyMEUxXFx1MjBFNS1cXHUyMEYwXFx1MkNFRi1cXHUyQ0YxXFx1MkQ3RlxcdTJERTAtXFx1MkRGRlxcdTMwMkEtXFx1MzAyRFxcdTMwOTlcXHUzMDlBXFx1QTY2RlxcdUE2NzQtXFx1QTY3RFxcdUE2OUVcXHVBNjlGXFx1QTZGMFxcdUE2RjFcXHVBODAyXFx1QTgwNlxcdUE4MEJcXHVBODI1XFx1QTgyNlxcdUE4QzRcXHVBOEM1XFx1QThFMC1cXHVBOEYxXFx1QThGRlxcdUE5MjYtXFx1QTkyRFxcdUE5NDctXFx1QTk1MVxcdUE5ODAtXFx1QTk4MlxcdUE5QjNcXHVBOUI2LVxcdUE5QjlcXHVBOUJDXFx1QTlFNVxcdUFBMjktXFx1QUEyRVxcdUFBMzFcXHVBQTMyXFx1QUEzNVxcdUFBMzZcXHVBQTQzXFx1QUE0Q1xcdUFBN0NcXHVBQUIwXFx1QUFCMi1cXHVBQUI0XFx1QUFCN1xcdUFBQjhcXHVBQUJFXFx1QUFCRlxcdUFBQzFcXHVBQUVDXFx1QUFFRFxcdUFBRjZcXHVBQkU1XFx1QUJFOFxcdUFCRURcXHVGQjFFXFx1RkUwMC1cXHVGRTBGXFx1RkUyMC1cXHVGRTJGJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAwW1xcdURERkRcXHVERUUwXFx1REY3Ni1cXHVERjdBXXxcXHVEODAyW1xcdURFMDEtXFx1REUwM1xcdURFMDVcXHVERTA2XFx1REUwQy1cXHVERTBGXFx1REUzOC1cXHVERTNBXFx1REUzRlxcdURFRTVcXHVERUU2XXxcXHVEODAzW1xcdUREMjQtXFx1REQyN1xcdURGNDYtXFx1REY1MF18XFx1RDgwNFtcXHVEQzAxXFx1REMzOC1cXHVEQzQ2XFx1REM3Ri1cXHVEQzgxXFx1RENCMy1cXHVEQ0I2XFx1RENCOVxcdURDQkFcXHVERDAwLVxcdUREMDJcXHVERDI3LVxcdUREMkJcXHVERDJELVxcdUREMzRcXHVERDczXFx1REQ4MFxcdUREODFcXHVEREI2LVxcdUREQkVcXHVEREM5LVxcdUREQ0NcXHVERTJGLVxcdURFMzFcXHVERTM0XFx1REUzNlxcdURFMzdcXHVERTNFXFx1REVERlxcdURFRTMtXFx1REVFQVxcdURGMDBcXHVERjAxXFx1REYzQlxcdURGM0NcXHVERjQwXFx1REY2Ni1cXHVERjZDXFx1REY3MC1cXHVERjc0XXxcXHVEODA1W1xcdURDMzgtXFx1REMzRlxcdURDNDItXFx1REM0NFxcdURDNDZcXHVEQzVFXFx1RENCMy1cXHVEQ0I4XFx1RENCQVxcdURDQkZcXHVEQ0MwXFx1RENDMlxcdURDQzNcXHVEREIyLVxcdUREQjVcXHVEREJDXFx1RERCRFxcdUREQkZcXHVEREMwXFx1REREQ1xcdURERERcXHVERTMzLVxcdURFM0FcXHVERTNEXFx1REUzRlxcdURFNDBcXHVERUFCXFx1REVBRFxcdURFQjAtXFx1REVCNVxcdURFQjdcXHVERjFELVxcdURGMUZcXHVERjIyLVxcdURGMjVcXHVERjI3LVxcdURGMkJdfFxcdUQ4MDZbXFx1REMyRi1cXHVEQzM3XFx1REMzOVxcdURDM0FcXHVERTAxLVxcdURFMEFcXHVERTMzLVxcdURFMzhcXHVERTNCLVxcdURFM0VcXHVERTQ3XFx1REU1MS1cXHVERTU2XFx1REU1OS1cXHVERTVCXFx1REU4QS1cXHVERTk2XFx1REU5OFxcdURFOTldfFxcdUQ4MDdbXFx1REMzMC1cXHVEQzM2XFx1REMzOC1cXHVEQzNEXFx1REMzRlxcdURDOTItXFx1RENBN1xcdURDQUEtXFx1RENCMFxcdURDQjJcXHVEQ0IzXFx1RENCNVxcdURDQjZcXHVERDMxLVxcdUREMzZcXHVERDNBXFx1REQzQ1xcdUREM0RcXHVERDNGLVxcdURENDVcXHVERDQ3XFx1REQ5MFxcdUREOTFcXHVERDk1XFx1REQ5N1xcdURFRjNcXHVERUY0XXxcXHVEODFBW1xcdURFRjAtXFx1REVGNFxcdURGMzAtXFx1REYzNl18XFx1RDgxQltcXHVERjhGLVxcdURGOTJdfFxcdUQ4MkZbXFx1REM5RFxcdURDOUVdfFxcdUQ4MzRbXFx1REQ2Ny1cXHVERDY5XFx1REQ3Qi1cXHVERDgyXFx1REQ4NS1cXHVERDhCXFx1RERBQS1cXHVEREFEXFx1REU0Mi1cXHVERTQ0XXxcXHVEODM2W1xcdURFMDAtXFx1REUzNlxcdURFM0ItXFx1REU2Q1xcdURFNzVcXHVERTg0XFx1REU5Qi1cXHVERTlGXFx1REVBMS1cXHVERUFGXXxcXHVEODM4W1xcdURDMDAtXFx1REMwNlxcdURDMDgtXFx1REMxOFxcdURDMUItXFx1REMyMVxcdURDMjNcXHVEQzI0XFx1REMyNi1cXHVEQzJBXXxcXHVEODNBW1xcdURDRDAtXFx1RENENlxcdURENDQtXFx1REQ0QV18XFx1REI0MFtcXHVERDAwLVxcdURERUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdOJyxcbiAgICAgICAgJ2FsaWFzJzogJ051bWJlcicsXG4gICAgICAgICdibXAnOiAnMC05XFx4QjJcXHhCM1xceEI5XFx4QkMtXFx4QkVcXHUwNjYwLVxcdTA2NjlcXHUwNkYwLVxcdTA2RjlcXHUwN0MwLVxcdTA3QzlcXHUwOTY2LVxcdTA5NkZcXHUwOUU2LVxcdTA5RUZcXHUwOUY0LVxcdTA5RjlcXHUwQTY2LVxcdTBBNkZcXHUwQUU2LVxcdTBBRUZcXHUwQjY2LVxcdTBCNkZcXHUwQjcyLVxcdTBCNzdcXHUwQkU2LVxcdTBCRjJcXHUwQzY2LVxcdTBDNkZcXHUwQzc4LVxcdTBDN0VcXHUwQ0U2LVxcdTBDRUZcXHUwRDU4LVxcdTBENUVcXHUwRDY2LVxcdTBENzhcXHUwREU2LVxcdTBERUZcXHUwRTUwLVxcdTBFNTlcXHUwRUQwLVxcdTBFRDlcXHUwRjIwLVxcdTBGMzNcXHUxMDQwLVxcdTEwNDlcXHUxMDkwLVxcdTEwOTlcXHUxMzY5LVxcdTEzN0NcXHUxNkVFLVxcdTE2RjBcXHUxN0UwLVxcdTE3RTlcXHUxN0YwLVxcdTE3RjlcXHUxODEwLVxcdTE4MTlcXHUxOTQ2LVxcdTE5NEZcXHUxOUQwLVxcdTE5REFcXHUxQTgwLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQjUwLVxcdTFCNTlcXHUxQkIwLVxcdTFCQjlcXHUxQzQwLVxcdTFDNDlcXHUxQzUwLVxcdTFDNTlcXHUyMDcwXFx1MjA3NC1cXHUyMDc5XFx1MjA4MC1cXHUyMDg5XFx1MjE1MC1cXHUyMTgyXFx1MjE4NS1cXHUyMTg5XFx1MjQ2MC1cXHUyNDlCXFx1MjRFQS1cXHUyNEZGXFx1Mjc3Ni1cXHUyNzkzXFx1MkNGRFxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDM4LVxcdTMwM0FcXHUzMTkyLVxcdTMxOTVcXHUzMjIwLVxcdTMyMjlcXHUzMjQ4LVxcdTMyNEZcXHUzMjUxLVxcdTMyNUZcXHUzMjgwLVxcdTMyODlcXHUzMkIxLVxcdTMyQkZcXHVBNjIwLVxcdUE2MjlcXHVBNkU2LVxcdUE2RUZcXHVBODMwLVxcdUE4MzVcXHVBOEQwLVxcdUE4RDlcXHVBOTAwLVxcdUE5MDlcXHVBOUQwLVxcdUE5RDlcXHVBOUYwLVxcdUE5RjlcXHVBQTUwLVxcdUFBNTlcXHVBQkYwLVxcdUFCRjlcXHVGRjEwLVxcdUZGMTknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REQwNy1cXHVERDMzXFx1REQ0MC1cXHVERDc4XFx1REQ4QVxcdUREOEJcXHVERUUxLVxcdURFRkJcXHVERjIwLVxcdURGMjNcXHVERjQxXFx1REY0QVxcdURGRDEtXFx1REZENV18XFx1RDgwMVtcXHVEQ0EwLVxcdURDQTldfFxcdUQ4MDJbXFx1REM1OC1cXHVEQzVGXFx1REM3OS1cXHVEQzdGXFx1RENBNy1cXHVEQ0FGXFx1RENGQi1cXHVEQ0ZGXFx1REQxNi1cXHVERDFCXFx1RERCQ1xcdUREQkRcXHVEREMwLVxcdUREQ0ZcXHVEREQyLVxcdURERkZcXHVERTQwLVxcdURFNDhcXHVERTdEXFx1REU3RVxcdURFOUQtXFx1REU5RlxcdURFRUItXFx1REVFRlxcdURGNTgtXFx1REY1RlxcdURGNzgtXFx1REY3RlxcdURGQTktXFx1REZBRl18XFx1RDgwM1tcXHVEQ0ZBLVxcdURDRkZcXHVERDMwLVxcdUREMzlcXHVERTYwLVxcdURFN0VcXHVERjFELVxcdURGMjZcXHVERjUxLVxcdURGNTRdfFxcdUQ4MDRbXFx1REM1Mi1cXHVEQzZGXFx1RENGMC1cXHVEQ0Y5XFx1REQzNi1cXHVERDNGXFx1REREMC1cXHVEREQ5XFx1RERFMS1cXHVEREY0XFx1REVGMC1cXHVERUY5XXxcXHVEODA1W1xcdURDNTAtXFx1REM1OVxcdURDRDAtXFx1RENEOVxcdURFNTAtXFx1REU1OVxcdURFQzAtXFx1REVDOVxcdURGMzAtXFx1REYzQl18XFx1RDgwNltcXHVEQ0UwLVxcdURDRjJdfFxcdUQ4MDdbXFx1REM1MC1cXHVEQzZDXFx1REQ1MC1cXHVERDU5XFx1RERBMC1cXHVEREE5XXxcXHVEODA5W1xcdURDMDAtXFx1REM2RV18XFx1RDgxQVtcXHVERTYwLVxcdURFNjlcXHVERjUwLVxcdURGNTlcXHVERjVCLVxcdURGNjFdfFxcdUQ4MUJbXFx1REU4MC1cXHVERTk2XXxcXHVEODM0W1xcdURFRTAtXFx1REVGM1xcdURGNjAtXFx1REY3OF18XFx1RDgzNVtcXHVERkNFLVxcdURGRkZdfFxcdUQ4M0FbXFx1RENDNy1cXHVEQ0NGXFx1REQ1MC1cXHVERDU5XXxcXHVEODNCW1xcdURDNzEtXFx1RENBQlxcdURDQUQtXFx1RENBRlxcdURDQjEtXFx1RENCNF18XFx1RDgzQ1tcXHVERDAwLVxcdUREMENdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdOZCcsXG4gICAgICAgICdhbGlhcyc6ICdEZWNpbWFsX051bWJlcicsXG4gICAgICAgICdibXAnOiAnMC05XFx1MDY2MC1cXHUwNjY5XFx1MDZGMC1cXHUwNkY5XFx1MDdDMC1cXHUwN0M5XFx1MDk2Ni1cXHUwOTZGXFx1MDlFNi1cXHUwOUVGXFx1MEE2Ni1cXHUwQTZGXFx1MEFFNi1cXHUwQUVGXFx1MEI2Ni1cXHUwQjZGXFx1MEJFNi1cXHUwQkVGXFx1MEM2Ni1cXHUwQzZGXFx1MENFNi1cXHUwQ0VGXFx1MEQ2Ni1cXHUwRDZGXFx1MERFNi1cXHUwREVGXFx1MEU1MC1cXHUwRTU5XFx1MEVEMC1cXHUwRUQ5XFx1MEYyMC1cXHUwRjI5XFx1MTA0MC1cXHUxMDQ5XFx1MTA5MC1cXHUxMDk5XFx1MTdFMC1cXHUxN0U5XFx1MTgxMC1cXHUxODE5XFx1MTk0Ni1cXHUxOTRGXFx1MTlEMC1cXHUxOUQ5XFx1MUE4MC1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUI1MC1cXHUxQjU5XFx1MUJCMC1cXHUxQkI5XFx1MUM0MC1cXHUxQzQ5XFx1MUM1MC1cXHUxQzU5XFx1QTYyMC1cXHVBNjI5XFx1QThEMC1cXHVBOEQ5XFx1QTkwMC1cXHVBOTA5XFx1QTlEMC1cXHVBOUQ5XFx1QTlGMC1cXHVBOUY5XFx1QUE1MC1cXHVBQTU5XFx1QUJGMC1cXHVBQkY5XFx1RkYxMC1cXHVGRjE5JyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAxW1xcdURDQTAtXFx1RENBOV18XFx1RDgwM1tcXHVERDMwLVxcdUREMzldfFxcdUQ4MDRbXFx1REM2Ni1cXHVEQzZGXFx1RENGMC1cXHVEQ0Y5XFx1REQzNi1cXHVERDNGXFx1REREMC1cXHVEREQ5XFx1REVGMC1cXHVERUY5XXxcXHVEODA1W1xcdURDNTAtXFx1REM1OVxcdURDRDAtXFx1RENEOVxcdURFNTAtXFx1REU1OVxcdURFQzAtXFx1REVDOVxcdURGMzAtXFx1REYzOV18XFx1RDgwNltcXHVEQ0UwLVxcdURDRTldfFxcdUQ4MDdbXFx1REM1MC1cXHVEQzU5XFx1REQ1MC1cXHVERDU5XFx1RERBMC1cXHVEREE5XXxcXHVEODFBW1xcdURFNjAtXFx1REU2OVxcdURGNTAtXFx1REY1OV18XFx1RDgzNVtcXHVERkNFLVxcdURGRkZdfFxcdUQ4M0FbXFx1REQ1MC1cXHVERDU5XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTmwnLFxuICAgICAgICAnYWxpYXMnOiAnTGV0dGVyX051bWJlcicsXG4gICAgICAgICdibXAnOiAnXFx1MTZFRS1cXHUxNkYwXFx1MjE2MC1cXHUyMTgyXFx1MjE4NS1cXHUyMTg4XFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzgtXFx1MzAzQVxcdUE2RTYtXFx1QTZFRicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERDQwLVxcdURENzRcXHVERjQxXFx1REY0QVxcdURGRDEtXFx1REZENV18XFx1RDgwOVtcXHVEQzAwLVxcdURDNkVdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdObycsXG4gICAgICAgICdhbGlhcyc6ICdPdGhlcl9OdW1iZXInLFxuICAgICAgICAnYm1wJzogJ1xceEIyXFx4QjNcXHhCOVxceEJDLVxceEJFXFx1MDlGNC1cXHUwOUY5XFx1MEI3Mi1cXHUwQjc3XFx1MEJGMC1cXHUwQkYyXFx1MEM3OC1cXHUwQzdFXFx1MEQ1OC1cXHUwRDVFXFx1MEQ3MC1cXHUwRDc4XFx1MEYyQS1cXHUwRjMzXFx1MTM2OS1cXHUxMzdDXFx1MTdGMC1cXHUxN0Y5XFx1MTlEQVxcdTIwNzBcXHUyMDc0LVxcdTIwNzlcXHUyMDgwLVxcdTIwODlcXHUyMTUwLVxcdTIxNUZcXHUyMTg5XFx1MjQ2MC1cXHUyNDlCXFx1MjRFQS1cXHUyNEZGXFx1Mjc3Ni1cXHUyNzkzXFx1MkNGRFxcdTMxOTItXFx1MzE5NVxcdTMyMjAtXFx1MzIyOVxcdTMyNDgtXFx1MzI0RlxcdTMyNTEtXFx1MzI1RlxcdTMyODAtXFx1MzI4OVxcdTMyQjEtXFx1MzJCRlxcdUE4MzAtXFx1QTgzNScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERDA3LVxcdUREMzNcXHVERDc1LVxcdURENzhcXHVERDhBXFx1REQ4QlxcdURFRTEtXFx1REVGQlxcdURGMjAtXFx1REYyM118XFx1RDgwMltcXHVEQzU4LVxcdURDNUZcXHVEQzc5LVxcdURDN0ZcXHVEQ0E3LVxcdURDQUZcXHVEQ0ZCLVxcdURDRkZcXHVERDE2LVxcdUREMUJcXHVEREJDXFx1RERCRFxcdUREQzAtXFx1RERDRlxcdURERDItXFx1RERGRlxcdURFNDAtXFx1REU0OFxcdURFN0RcXHVERTdFXFx1REU5RC1cXHVERTlGXFx1REVFQi1cXHVERUVGXFx1REY1OC1cXHVERjVGXFx1REY3OC1cXHVERjdGXFx1REZBOS1cXHVERkFGXXxcXHVEODAzW1xcdURDRkEtXFx1RENGRlxcdURFNjAtXFx1REU3RVxcdURGMUQtXFx1REYyNlxcdURGNTEtXFx1REY1NF18XFx1RDgwNFtcXHVEQzUyLVxcdURDNjVcXHVEREUxLVxcdURERjRdfFxcdUQ4MDVbXFx1REYzQVxcdURGM0JdfFxcdUQ4MDZbXFx1RENFQS1cXHVEQ0YyXXxcXHVEODA3W1xcdURDNUEtXFx1REM2Q118XFx1RDgxQVtcXHVERjVCLVxcdURGNjFdfFxcdUQ4MUJbXFx1REU4MC1cXHVERTk2XXxcXHVEODM0W1xcdURFRTAtXFx1REVGM1xcdURGNjAtXFx1REY3OF18XFx1RDgzQVtcXHVEQ0M3LVxcdURDQ0ZdfFxcdUQ4M0JbXFx1REM3MS1cXHVEQ0FCXFx1RENBRC1cXHVEQ0FGXFx1RENCMS1cXHVEQ0I0XXxcXHVEODNDW1xcdUREMDAtXFx1REQwQ10nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1AnLFxuICAgICAgICAnYWxpYXMnOiAnUHVuY3R1YXRpb24nLFxuICAgICAgICAnYm1wJzogJyEtIyUtXFxcXCosLVxcXFwvOjtcXFxcP0BcXFxcWy1cXFxcXV9cXFxce1xcXFx9XFx4QTFcXHhBN1xceEFCXFx4QjZcXHhCN1xceEJCXFx4QkZcXHUwMzdFXFx1MDM4N1xcdTA1NUEtXFx1MDU1RlxcdTA1ODlcXHUwNThBXFx1MDVCRVxcdTA1QzBcXHUwNUMzXFx1MDVDNlxcdTA1RjNcXHUwNUY0XFx1MDYwOVxcdTA2MEFcXHUwNjBDXFx1MDYwRFxcdTA2MUJcXHUwNjFFXFx1MDYxRlxcdTA2NkEtXFx1MDY2RFxcdTA2RDRcXHUwNzAwLVxcdTA3MERcXHUwN0Y3LVxcdTA3RjlcXHUwODMwLVxcdTA4M0VcXHUwODVFXFx1MDk2NFxcdTA5NjVcXHUwOTcwXFx1MDlGRFxcdTBBNzZcXHUwQUYwXFx1MEM4NFxcdTBERjRcXHUwRTRGXFx1MEU1QVxcdTBFNUJcXHUwRjA0LVxcdTBGMTJcXHUwRjE0XFx1MEYzQS1cXHUwRjNEXFx1MEY4NVxcdTBGRDAtXFx1MEZENFxcdTBGRDlcXHUwRkRBXFx1MTA0QS1cXHUxMDRGXFx1MTBGQlxcdTEzNjAtXFx1MTM2OFxcdTE0MDBcXHUxNjZEXFx1MTY2RVxcdTE2OUJcXHUxNjlDXFx1MTZFQi1cXHUxNkVEXFx1MTczNVxcdTE3MzZcXHUxN0Q0LVxcdTE3RDZcXHUxN0Q4LVxcdTE3REFcXHUxODAwLVxcdTE4MEFcXHUxOTQ0XFx1MTk0NVxcdTFBMUVcXHUxQTFGXFx1MUFBMC1cXHUxQUE2XFx1MUFBOC1cXHUxQUFEXFx1MUI1QS1cXHUxQjYwXFx1MUJGQy1cXHUxQkZGXFx1MUMzQi1cXHUxQzNGXFx1MUM3RVxcdTFDN0ZcXHUxQ0MwLVxcdTFDQzdcXHUxQ0QzXFx1MjAxMC1cXHUyMDI3XFx1MjAzMC1cXHUyMDQzXFx1MjA0NS1cXHUyMDUxXFx1MjA1My1cXHUyMDVFXFx1MjA3RFxcdTIwN0VcXHUyMDhEXFx1MjA4RVxcdTIzMDgtXFx1MjMwQlxcdTIzMjlcXHUyMzJBXFx1Mjc2OC1cXHUyNzc1XFx1MjdDNVxcdTI3QzZcXHUyN0U2LVxcdTI3RUZcXHUyOTgzLVxcdTI5OThcXHUyOUQ4LVxcdTI5REJcXHUyOUZDXFx1MjlGRFxcdTJDRjktXFx1MkNGQ1xcdTJDRkVcXHUyQ0ZGXFx1MkQ3MFxcdTJFMDAtXFx1MkUyRVxcdTJFMzAtXFx1MkU0RVxcdTMwMDEtXFx1MzAwM1xcdTMwMDgtXFx1MzAxMVxcdTMwMTQtXFx1MzAxRlxcdTMwMzBcXHUzMDNEXFx1MzBBMFxcdTMwRkJcXHVBNEZFXFx1QTRGRlxcdUE2MEQtXFx1QTYwRlxcdUE2NzNcXHVBNjdFXFx1QTZGMi1cXHVBNkY3XFx1QTg3NC1cXHVBODc3XFx1QThDRVxcdUE4Q0ZcXHVBOEY4LVxcdUE4RkFcXHVBOEZDXFx1QTkyRVxcdUE5MkZcXHVBOTVGXFx1QTlDMS1cXHVBOUNEXFx1QTlERVxcdUE5REZcXHVBQTVDLVxcdUFBNUZcXHVBQURFXFx1QUFERlxcdUFBRjBcXHVBQUYxXFx1QUJFQlxcdUZEM0VcXHVGRDNGXFx1RkUxMC1cXHVGRTE5XFx1RkUzMC1cXHVGRTUyXFx1RkU1NC1cXHVGRTYxXFx1RkU2M1xcdUZFNjhcXHVGRTZBXFx1RkU2QlxcdUZGMDEtXFx1RkYwM1xcdUZGMDUtXFx1RkYwQVxcdUZGMEMtXFx1RkYwRlxcdUZGMUFcXHVGRjFCXFx1RkYxRlxcdUZGMjBcXHVGRjNCLVxcdUZGM0RcXHVGRjNGXFx1RkY1QlxcdUZGNURcXHVGRjVGLVxcdUZGNjUnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REQwMC1cXHVERDAyXFx1REY5RlxcdURGRDBdfFxcdUQ4MDFcXHVERDZGfFxcdUQ4MDJbXFx1REM1N1xcdUREMUZcXHVERDNGXFx1REU1MC1cXHVERTU4XFx1REU3RlxcdURFRjAtXFx1REVGNlxcdURGMzktXFx1REYzRlxcdURGOTktXFx1REY5Q118XFx1RDgwM1tcXHVERjU1LVxcdURGNTldfFxcdUQ4MDRbXFx1REM0Ny1cXHVEQzREXFx1RENCQlxcdURDQkNcXHVEQ0JFLVxcdURDQzFcXHVERDQwLVxcdURENDNcXHVERDc0XFx1REQ3NVxcdUREQzUtXFx1RERDOFxcdUREQ0RcXHVERERCXFx1RERERC1cXHVERERGXFx1REUzOC1cXHVERTNEXFx1REVBOV18XFx1RDgwNVtcXHVEQzRCLVxcdURDNEZcXHVEQzVCXFx1REM1RFxcdURDQzZcXHVEREMxLVxcdURERDdcXHVERTQxLVxcdURFNDNcXHVERTYwLVxcdURFNkNcXHVERjNDLVxcdURGM0VdfFxcdUQ4MDZbXFx1REMzQlxcdURFM0YtXFx1REU0NlxcdURFOUEtXFx1REU5Q1xcdURFOUUtXFx1REVBMl18XFx1RDgwN1tcXHVEQzQxLVxcdURDNDVcXHVEQzcwXFx1REM3MVxcdURFRjdcXHVERUY4XXxcXHVEODA5W1xcdURDNzAtXFx1REM3NF18XFx1RDgxQVtcXHVERTZFXFx1REU2RlxcdURFRjVcXHVERjM3LVxcdURGM0JcXHVERjQ0XXxcXHVEODFCW1xcdURFOTctXFx1REU5QV18XFx1RDgyRlxcdURDOUZ8XFx1RDgzNltcXHVERTg3LVxcdURFOEJdfFxcdUQ4M0FbXFx1REQ1RVxcdURENUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdQYycsXG4gICAgICAgICdhbGlhcyc6ICdDb25uZWN0b3JfUHVuY3R1YXRpb24nLFxuICAgICAgICAnYm1wJzogJ19cXHUyMDNGXFx1MjA0MFxcdTIwNTRcXHVGRTMzXFx1RkUzNFxcdUZFNEQtXFx1RkU0RlxcdUZGM0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1BkJyxcbiAgICAgICAgJ2FsaWFzJzogJ0Rhc2hfUHVuY3R1YXRpb24nLFxuICAgICAgICAnYm1wJzogJ1xcXFwtXFx1MDU4QVxcdTA1QkVcXHUxNDAwXFx1MTgwNlxcdTIwMTAtXFx1MjAxNVxcdTJFMTdcXHUyRTFBXFx1MkUzQVxcdTJFM0JcXHUyRTQwXFx1MzAxQ1xcdTMwMzBcXHUzMEEwXFx1RkUzMVxcdUZFMzJcXHVGRTU4XFx1RkU2M1xcdUZGMEQnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1BlJyxcbiAgICAgICAgJ2FsaWFzJzogJ0Nsb3NlX1B1bmN0dWF0aW9uJyxcbiAgICAgICAgJ2JtcCc6ICdcXFxcKVxcXFxdXFxcXH1cXHUwRjNCXFx1MEYzRFxcdTE2OUNcXHUyMDQ2XFx1MjA3RVxcdTIwOEVcXHUyMzA5XFx1MjMwQlxcdTIzMkFcXHUyNzY5XFx1Mjc2QlxcdTI3NkRcXHUyNzZGXFx1Mjc3MVxcdTI3NzNcXHUyNzc1XFx1MjdDNlxcdTI3RTdcXHUyN0U5XFx1MjdFQlxcdTI3RURcXHUyN0VGXFx1Mjk4NFxcdTI5ODZcXHUyOTg4XFx1Mjk4QVxcdTI5OENcXHUyOThFXFx1Mjk5MFxcdTI5OTJcXHUyOTk0XFx1Mjk5NlxcdTI5OThcXHUyOUQ5XFx1MjlEQlxcdTI5RkRcXHUyRTIzXFx1MkUyNVxcdTJFMjdcXHUyRTI5XFx1MzAwOVxcdTMwMEJcXHUzMDBEXFx1MzAwRlxcdTMwMTFcXHUzMDE1XFx1MzAxN1xcdTMwMTlcXHUzMDFCXFx1MzAxRVxcdTMwMUZcXHVGRDNFXFx1RkUxOFxcdUZFMzZcXHVGRTM4XFx1RkUzQVxcdUZFM0NcXHVGRTNFXFx1RkU0MFxcdUZFNDJcXHVGRTQ0XFx1RkU0OFxcdUZFNUFcXHVGRTVDXFx1RkU1RVxcdUZGMDlcXHVGRjNEXFx1RkY1RFxcdUZGNjBcXHVGRjYzJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdQZicsXG4gICAgICAgICdhbGlhcyc6ICdGaW5hbF9QdW5jdHVhdGlvbicsXG4gICAgICAgICdibXAnOiAnXFx4QkJcXHUyMDE5XFx1MjAxRFxcdTIwM0FcXHUyRTAzXFx1MkUwNVxcdTJFMEFcXHUyRTBEXFx1MkUxRFxcdTJFMjEnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1BpJyxcbiAgICAgICAgJ2FsaWFzJzogJ0luaXRpYWxfUHVuY3R1YXRpb24nLFxuICAgICAgICAnYm1wJzogJ1xceEFCXFx1MjAxOFxcdTIwMUJcXHUyMDFDXFx1MjAxRlxcdTIwMzlcXHUyRTAyXFx1MkUwNFxcdTJFMDlcXHUyRTBDXFx1MkUxQ1xcdTJFMjAnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1BvJyxcbiAgICAgICAgJ2FsaWFzJzogJ090aGVyX1B1bmN0dWF0aW9uJyxcbiAgICAgICAgJ2JtcCc6ICchLSMlLVxcJ1xcXFwqLFxcXFwuXFxcXC86O1xcXFw/QFxcXFxcXHhBMVxceEE3XFx4QjZcXHhCN1xceEJGXFx1MDM3RVxcdTAzODdcXHUwNTVBLVxcdTA1NUZcXHUwNTg5XFx1MDVDMFxcdTA1QzNcXHUwNUM2XFx1MDVGM1xcdTA1RjRcXHUwNjA5XFx1MDYwQVxcdTA2MENcXHUwNjBEXFx1MDYxQlxcdTA2MUVcXHUwNjFGXFx1MDY2QS1cXHUwNjZEXFx1MDZENFxcdTA3MDAtXFx1MDcwRFxcdTA3RjctXFx1MDdGOVxcdTA4MzAtXFx1MDgzRVxcdTA4NUVcXHUwOTY0XFx1MDk2NVxcdTA5NzBcXHUwOUZEXFx1MEE3NlxcdTBBRjBcXHUwQzg0XFx1MERGNFxcdTBFNEZcXHUwRTVBXFx1MEU1QlxcdTBGMDQtXFx1MEYxMlxcdTBGMTRcXHUwRjg1XFx1MEZEMC1cXHUwRkQ0XFx1MEZEOVxcdTBGREFcXHUxMDRBLVxcdTEwNEZcXHUxMEZCXFx1MTM2MC1cXHUxMzY4XFx1MTY2RFxcdTE2NkVcXHUxNkVCLVxcdTE2RURcXHUxNzM1XFx1MTczNlxcdTE3RDQtXFx1MTdENlxcdTE3RDgtXFx1MTdEQVxcdTE4MDAtXFx1MTgwNVxcdTE4MDctXFx1MTgwQVxcdTE5NDRcXHUxOTQ1XFx1MUExRVxcdTFBMUZcXHUxQUEwLVxcdTFBQTZcXHUxQUE4LVxcdTFBQURcXHUxQjVBLVxcdTFCNjBcXHUxQkZDLVxcdTFCRkZcXHUxQzNCLVxcdTFDM0ZcXHUxQzdFXFx1MUM3RlxcdTFDQzAtXFx1MUNDN1xcdTFDRDNcXHUyMDE2XFx1MjAxN1xcdTIwMjAtXFx1MjAyN1xcdTIwMzAtXFx1MjAzOFxcdTIwM0ItXFx1MjAzRVxcdTIwNDEtXFx1MjA0M1xcdTIwNDctXFx1MjA1MVxcdTIwNTNcXHUyMDU1LVxcdTIwNUVcXHUyQ0Y5LVxcdTJDRkNcXHUyQ0ZFXFx1MkNGRlxcdTJENzBcXHUyRTAwXFx1MkUwMVxcdTJFMDYtXFx1MkUwOFxcdTJFMEJcXHUyRTBFLVxcdTJFMTZcXHUyRTE4XFx1MkUxOVxcdTJFMUJcXHUyRTFFXFx1MkUxRlxcdTJFMkEtXFx1MkUyRVxcdTJFMzAtXFx1MkUzOVxcdTJFM0MtXFx1MkUzRlxcdTJFNDFcXHUyRTQzLVxcdTJFNEVcXHUzMDAxLVxcdTMwMDNcXHUzMDNEXFx1MzBGQlxcdUE0RkVcXHVBNEZGXFx1QTYwRC1cXHVBNjBGXFx1QTY3M1xcdUE2N0VcXHVBNkYyLVxcdUE2RjdcXHVBODc0LVxcdUE4NzdcXHVBOENFXFx1QThDRlxcdUE4RjgtXFx1QThGQVxcdUE4RkNcXHVBOTJFXFx1QTkyRlxcdUE5NUZcXHVBOUMxLVxcdUE5Q0RcXHVBOURFXFx1QTlERlxcdUFBNUMtXFx1QUE1RlxcdUFBREVcXHVBQURGXFx1QUFGMFxcdUFBRjFcXHVBQkVCXFx1RkUxMC1cXHVGRTE2XFx1RkUxOVxcdUZFMzBcXHVGRTQ1XFx1RkU0NlxcdUZFNDktXFx1RkU0Q1xcdUZFNTAtXFx1RkU1MlxcdUZFNTQtXFx1RkU1N1xcdUZFNUYtXFx1RkU2MVxcdUZFNjhcXHVGRTZBXFx1RkU2QlxcdUZGMDEtXFx1RkYwM1xcdUZGMDUtXFx1RkYwN1xcdUZGMEFcXHVGRjBDXFx1RkYwRVxcdUZGMEZcXHVGRjFBXFx1RkYxQlxcdUZGMUZcXHVGRjIwXFx1RkYzQ1xcdUZGNjFcXHVGRjY0XFx1RkY2NScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERDAwLVxcdUREMDJcXHVERjlGXFx1REZEMF18XFx1RDgwMVxcdURENkZ8XFx1RDgwMltcXHVEQzU3XFx1REQxRlxcdUREM0ZcXHVERTUwLVxcdURFNThcXHVERTdGXFx1REVGMC1cXHVERUY2XFx1REYzOS1cXHVERjNGXFx1REY5OS1cXHVERjlDXXxcXHVEODAzW1xcdURGNTUtXFx1REY1OV18XFx1RDgwNFtcXHVEQzQ3LVxcdURDNERcXHVEQ0JCXFx1RENCQ1xcdURDQkUtXFx1RENDMVxcdURENDAtXFx1REQ0M1xcdURENzRcXHVERDc1XFx1RERDNS1cXHVEREM4XFx1RERDRFxcdUREREJcXHVERERELVxcdUREREZcXHVERTM4LVxcdURFM0RcXHVERUE5XXxcXHVEODA1W1xcdURDNEItXFx1REM0RlxcdURDNUJcXHVEQzVEXFx1RENDNlxcdUREQzEtXFx1REREN1xcdURFNDEtXFx1REU0M1xcdURFNjAtXFx1REU2Q1xcdURGM0MtXFx1REYzRV18XFx1RDgwNltcXHVEQzNCXFx1REUzRi1cXHVERTQ2XFx1REU5QS1cXHVERTlDXFx1REU5RS1cXHVERUEyXXxcXHVEODA3W1xcdURDNDEtXFx1REM0NVxcdURDNzBcXHVEQzcxXFx1REVGN1xcdURFRjhdfFxcdUQ4MDlbXFx1REM3MC1cXHVEQzc0XXxcXHVEODFBW1xcdURFNkVcXHVERTZGXFx1REVGNVxcdURGMzctXFx1REYzQlxcdURGNDRdfFxcdUQ4MUJbXFx1REU5Ny1cXHVERTlBXXxcXHVEODJGXFx1REM5RnxcXHVEODM2W1xcdURFODctXFx1REU4Ql18XFx1RDgzQVtcXHVERDVFXFx1REQ1Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1BzJyxcbiAgICAgICAgJ2FsaWFzJzogJ09wZW5fUHVuY3R1YXRpb24nLFxuICAgICAgICAnYm1wJzogJ1xcXFwoXFxcXFtcXFxce1xcdTBGM0FcXHUwRjNDXFx1MTY5QlxcdTIwMUFcXHUyMDFFXFx1MjA0NVxcdTIwN0RcXHUyMDhEXFx1MjMwOFxcdTIzMEFcXHUyMzI5XFx1Mjc2OFxcdTI3NkFcXHUyNzZDXFx1Mjc2RVxcdTI3NzBcXHUyNzcyXFx1Mjc3NFxcdTI3QzVcXHUyN0U2XFx1MjdFOFxcdTI3RUFcXHUyN0VDXFx1MjdFRVxcdTI5ODNcXHUyOTg1XFx1Mjk4N1xcdTI5ODlcXHUyOThCXFx1Mjk4RFxcdTI5OEZcXHUyOTkxXFx1Mjk5M1xcdTI5OTVcXHUyOTk3XFx1MjlEOFxcdTI5REFcXHUyOUZDXFx1MkUyMlxcdTJFMjRcXHUyRTI2XFx1MkUyOFxcdTJFNDJcXHUzMDA4XFx1MzAwQVxcdTMwMENcXHUzMDBFXFx1MzAxMFxcdTMwMTRcXHUzMDE2XFx1MzAxOFxcdTMwMUFcXHUzMDFEXFx1RkQzRlxcdUZFMTdcXHVGRTM1XFx1RkUzN1xcdUZFMzlcXHVGRTNCXFx1RkUzRFxcdUZFM0ZcXHVGRTQxXFx1RkU0M1xcdUZFNDdcXHVGRTU5XFx1RkU1QlxcdUZFNURcXHVGRjA4XFx1RkYzQlxcdUZGNUJcXHVGRjVGXFx1RkY2MidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnUycsXG4gICAgICAgICdhbGlhcyc6ICdTeW1ib2wnLFxuICAgICAgICAnYm1wJzogJ1xcXFwkXFxcXCs8LT5cXFxcXmBcXFxcfH5cXHhBMi1cXHhBNlxceEE4XFx4QTlcXHhBQ1xceEFFLVxceEIxXFx4QjRcXHhCOFxceEQ3XFx4RjdcXHUwMkMyLVxcdTAyQzVcXHUwMkQyLVxcdTAyREZcXHUwMkU1LVxcdTAyRUJcXHUwMkVEXFx1MDJFRi1cXHUwMkZGXFx1MDM3NVxcdTAzODRcXHUwMzg1XFx1MDNGNlxcdTA0ODJcXHUwNThELVxcdTA1OEZcXHUwNjA2LVxcdTA2MDhcXHUwNjBCXFx1MDYwRVxcdTA2MEZcXHUwNkRFXFx1MDZFOVxcdTA2RkRcXHUwNkZFXFx1MDdGNlxcdTA3RkVcXHUwN0ZGXFx1MDlGMlxcdTA5RjNcXHUwOUZBXFx1MDlGQlxcdTBBRjFcXHUwQjcwXFx1MEJGMy1cXHUwQkZBXFx1MEM3RlxcdTBENEZcXHUwRDc5XFx1MEUzRlxcdTBGMDEtXFx1MEYwM1xcdTBGMTNcXHUwRjE1LVxcdTBGMTdcXHUwRjFBLVxcdTBGMUZcXHUwRjM0XFx1MEYzNlxcdTBGMzhcXHUwRkJFLVxcdTBGQzVcXHUwRkM3LVxcdTBGQ0NcXHUwRkNFXFx1MEZDRlxcdTBGRDUtXFx1MEZEOFxcdTEwOUVcXHUxMDlGXFx1MTM5MC1cXHUxMzk5XFx1MTdEQlxcdTE5NDBcXHUxOURFLVxcdTE5RkZcXHUxQjYxLVxcdTFCNkFcXHUxQjc0LVxcdTFCN0NcXHUxRkJEXFx1MUZCRi1cXHUxRkMxXFx1MUZDRC1cXHUxRkNGXFx1MUZERC1cXHUxRkRGXFx1MUZFRC1cXHUxRkVGXFx1MUZGRFxcdTFGRkVcXHUyMDQ0XFx1MjA1MlxcdTIwN0EtXFx1MjA3Q1xcdTIwOEEtXFx1MjA4Q1xcdTIwQTAtXFx1MjBCRlxcdTIxMDBcXHUyMTAxXFx1MjEwMy1cXHUyMTA2XFx1MjEwOFxcdTIxMDlcXHUyMTE0XFx1MjExNi1cXHUyMTE4XFx1MjExRS1cXHUyMTIzXFx1MjEyNVxcdTIxMjdcXHUyMTI5XFx1MjEyRVxcdTIxM0FcXHUyMTNCXFx1MjE0MC1cXHUyMTQ0XFx1MjE0QS1cXHUyMTREXFx1MjE0RlxcdTIxOEFcXHUyMThCXFx1MjE5MC1cXHUyMzA3XFx1MjMwQy1cXHUyMzI4XFx1MjMyQi1cXHUyNDI2XFx1MjQ0MC1cXHUyNDRBXFx1MjQ5Qy1cXHUyNEU5XFx1MjUwMC1cXHUyNzY3XFx1Mjc5NC1cXHUyN0M0XFx1MjdDNy1cXHUyN0U1XFx1MjdGMC1cXHUyOTgyXFx1Mjk5OS1cXHUyOUQ3XFx1MjlEQy1cXHUyOUZCXFx1MjlGRS1cXHUyQjczXFx1MkI3Ni1cXHUyQjk1XFx1MkI5OC1cXHUyQkM4XFx1MkJDQS1cXHUyQkZFXFx1MkNFNS1cXHUyQ0VBXFx1MkU4MC1cXHUyRTk5XFx1MkU5Qi1cXHUyRUYzXFx1MkYwMC1cXHUyRkQ1XFx1MkZGMC1cXHUyRkZCXFx1MzAwNFxcdTMwMTJcXHUzMDEzXFx1MzAyMFxcdTMwMzZcXHUzMDM3XFx1MzAzRVxcdTMwM0ZcXHUzMDlCXFx1MzA5Q1xcdTMxOTBcXHUzMTkxXFx1MzE5Ni1cXHUzMTlGXFx1MzFDMC1cXHUzMUUzXFx1MzIwMC1cXHUzMjFFXFx1MzIyQS1cXHUzMjQ3XFx1MzI1MFxcdTMyNjAtXFx1MzI3RlxcdTMyOEEtXFx1MzJCMFxcdTMyQzAtXFx1MzJGRVxcdTMzMDAtXFx1MzNGRlxcdTREQzAtXFx1NERGRlxcdUE0OTAtXFx1QTRDNlxcdUE3MDAtXFx1QTcxNlxcdUE3MjBcXHVBNzIxXFx1QTc4OVxcdUE3OEFcXHVBODI4LVxcdUE4MkJcXHVBODM2LVxcdUE4MzlcXHVBQTc3LVxcdUFBNzlcXHVBQjVCXFx1RkIyOVxcdUZCQjItXFx1RkJDMVxcdUZERkNcXHVGREZEXFx1RkU2MlxcdUZFNjQtXFx1RkU2NlxcdUZFNjlcXHVGRjA0XFx1RkYwQlxcdUZGMUMtXFx1RkYxRVxcdUZGM0VcXHVGRjQwXFx1RkY1Q1xcdUZGNUVcXHVGRkUwLVxcdUZGRTZcXHVGRkU4LVxcdUZGRUVcXHVGRkZDXFx1RkZGRCcsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERDM3LVxcdUREM0ZcXHVERDc5LVxcdUREODlcXHVERDhDLVxcdUREOEVcXHVERDkwLVxcdUREOUJcXHVEREEwXFx1REREMC1cXHVEREZDXXxcXHVEODAyW1xcdURDNzdcXHVEQzc4XFx1REVDOF18XFx1RDgwNVxcdURGM0Z8XFx1RDgxQVtcXHVERjNDLVxcdURGM0ZcXHVERjQ1XXxcXHVEODJGXFx1REM5Q3xcXHVEODM0W1xcdURDMDAtXFx1RENGNVxcdUREMDAtXFx1REQyNlxcdUREMjktXFx1REQ2NFxcdURENkEtXFx1REQ2Q1xcdUREODNcXHVERDg0XFx1REQ4Qy1cXHVEREE5XFx1RERBRS1cXHVEREU4XFx1REUwMC1cXHVERTQxXFx1REU0NVxcdURGMDAtXFx1REY1Nl18XFx1RDgzNVtcXHVERUMxXFx1REVEQlxcdURFRkJcXHVERjE1XFx1REYzNVxcdURGNEZcXHVERjZGXFx1REY4OVxcdURGQTlcXHVERkMzXXxcXHVEODM2W1xcdURDMDAtXFx1RERGRlxcdURFMzctXFx1REUzQVxcdURFNkQtXFx1REU3NFxcdURFNzYtXFx1REU4M1xcdURFODVcXHVERTg2XXxcXHVEODNCW1xcdURDQUNcXHVEQ0IwXFx1REVGMFxcdURFRjFdfFxcdUQ4M0NbXFx1REMwMC1cXHVEQzJCXFx1REMzMC1cXHVEQzkzXFx1RENBMC1cXHVEQ0FFXFx1RENCMS1cXHVEQ0JGXFx1RENDMS1cXHVEQ0NGXFx1RENEMS1cXHVEQ0Y1XFx1REQxMC1cXHVERDZCXFx1REQ3MC1cXHVEREFDXFx1RERFNi1cXHVERTAyXFx1REUxMC1cXHVERTNCXFx1REU0MC1cXHVERTQ4XFx1REU1MFxcdURFNTFcXHVERTYwLVxcdURFNjVcXHVERjAwLVxcdURGRkZdfFxcdUQ4M0RbXFx1REMwMC1cXHVERUQ0XFx1REVFMC1cXHVERUVDXFx1REVGMC1cXHVERUY5XFx1REYwMC1cXHVERjczXFx1REY4MC1cXHVERkQ4XXxcXHVEODNFW1xcdURDMDAtXFx1REMwQlxcdURDMTAtXFx1REM0N1xcdURDNTAtXFx1REM1OVxcdURDNjAtXFx1REM4N1xcdURDOTAtXFx1RENBRFxcdUREMDAtXFx1REQwQlxcdUREMTAtXFx1REQzRVxcdURENDAtXFx1REQ3MFxcdURENzMtXFx1REQ3NlxcdUREN0FcXHVERDdDLVxcdUREQTJcXHVEREIwLVxcdUREQjlcXHVEREMwLVxcdUREQzJcXHVEREQwLVxcdURERkZcXHVERTYwLVxcdURFNkRdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdTYycsXG4gICAgICAgICdhbGlhcyc6ICdDdXJyZW5jeV9TeW1ib2wnLFxuICAgICAgICAnYm1wJzogJ1xcXFwkXFx4QTItXFx4QTVcXHUwNThGXFx1MDYwQlxcdTA3RkVcXHUwN0ZGXFx1MDlGMlxcdTA5RjNcXHUwOUZCXFx1MEFGMVxcdTBCRjlcXHUwRTNGXFx1MTdEQlxcdTIwQTAtXFx1MjBCRlxcdUE4MzhcXHVGREZDXFx1RkU2OVxcdUZGMDRcXHVGRkUwXFx1RkZFMVxcdUZGRTVcXHVGRkU2JyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODNCXFx1RENCMCdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnU2snLFxuICAgICAgICAnYWxpYXMnOiAnTW9kaWZpZXJfU3ltYm9sJyxcbiAgICAgICAgJ2JtcCc6ICdcXFxcXmBcXHhBOFxceEFGXFx4QjRcXHhCOFxcdTAyQzItXFx1MDJDNVxcdTAyRDItXFx1MDJERlxcdTAyRTUtXFx1MDJFQlxcdTAyRURcXHUwMkVGLVxcdTAyRkZcXHUwMzc1XFx1MDM4NFxcdTAzODVcXHUxRkJEXFx1MUZCRi1cXHUxRkMxXFx1MUZDRC1cXHUxRkNGXFx1MUZERC1cXHUxRkRGXFx1MUZFRC1cXHUxRkVGXFx1MUZGRFxcdTFGRkVcXHUzMDlCXFx1MzA5Q1xcdUE3MDAtXFx1QTcxNlxcdUE3MjBcXHVBNzIxXFx1QTc4OVxcdUE3OEFcXHVBQjVCXFx1RkJCMi1cXHVGQkMxXFx1RkYzRVxcdUZGNDBcXHVGRkUzJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODNDW1xcdURGRkItXFx1REZGRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1NtJyxcbiAgICAgICAgJ2FsaWFzJzogJ01hdGhfU3ltYm9sJyxcbiAgICAgICAgJ2JtcCc6ICdcXFxcKzwtPlxcXFx8flxceEFDXFx4QjFcXHhEN1xceEY3XFx1MDNGNlxcdTA2MDYtXFx1MDYwOFxcdTIwNDRcXHUyMDUyXFx1MjA3QS1cXHUyMDdDXFx1MjA4QS1cXHUyMDhDXFx1MjExOFxcdTIxNDAtXFx1MjE0NFxcdTIxNEJcXHUyMTkwLVxcdTIxOTRcXHUyMTlBXFx1MjE5QlxcdTIxQTBcXHUyMUEzXFx1MjFBNlxcdTIxQUVcXHUyMUNFXFx1MjFDRlxcdTIxRDJcXHUyMUQ0XFx1MjFGNC1cXHUyMkZGXFx1MjMyMFxcdTIzMjFcXHUyMzdDXFx1MjM5Qi1cXHUyM0IzXFx1MjNEQy1cXHUyM0UxXFx1MjVCN1xcdTI1QzFcXHUyNUY4LVxcdTI1RkZcXHUyNjZGXFx1MjdDMC1cXHUyN0M0XFx1MjdDNy1cXHUyN0U1XFx1MjdGMC1cXHUyN0ZGXFx1MjkwMC1cXHUyOTgyXFx1Mjk5OS1cXHUyOUQ3XFx1MjlEQy1cXHUyOUZCXFx1MjlGRS1cXHUyQUZGXFx1MkIzMC1cXHUyQjQ0XFx1MkI0Ny1cXHUyQjRDXFx1RkIyOVxcdUZFNjJcXHVGRTY0LVxcdUZFNjZcXHVGRjBCXFx1RkYxQy1cXHVGRjFFXFx1RkY1Q1xcdUZGNUVcXHVGRkUyXFx1RkZFOS1cXHVGRkVDJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODM1W1xcdURFQzFcXHVERURCXFx1REVGQlxcdURGMTVcXHVERjM1XFx1REY0RlxcdURGNkZcXHVERjg5XFx1REZBOVxcdURGQzNdfFxcdUQ4M0JbXFx1REVGMFxcdURFRjFdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdTbycsXG4gICAgICAgICdhbGlhcyc6ICdPdGhlcl9TeW1ib2wnLFxuICAgICAgICAnYm1wJzogJ1xceEE2XFx4QTlcXHhBRVxceEIwXFx1MDQ4MlxcdTA1OERcXHUwNThFXFx1MDYwRVxcdTA2MEZcXHUwNkRFXFx1MDZFOVxcdTA2RkRcXHUwNkZFXFx1MDdGNlxcdTA5RkFcXHUwQjcwXFx1MEJGMy1cXHUwQkY4XFx1MEJGQVxcdTBDN0ZcXHUwRDRGXFx1MEQ3OVxcdTBGMDEtXFx1MEYwM1xcdTBGMTNcXHUwRjE1LVxcdTBGMTdcXHUwRjFBLVxcdTBGMUZcXHUwRjM0XFx1MEYzNlxcdTBGMzhcXHUwRkJFLVxcdTBGQzVcXHUwRkM3LVxcdTBGQ0NcXHUwRkNFXFx1MEZDRlxcdTBGRDUtXFx1MEZEOFxcdTEwOUVcXHUxMDlGXFx1MTM5MC1cXHUxMzk5XFx1MTk0MFxcdTE5REUtXFx1MTlGRlxcdTFCNjEtXFx1MUI2QVxcdTFCNzQtXFx1MUI3Q1xcdTIxMDBcXHUyMTAxXFx1MjEwMy1cXHUyMTA2XFx1MjEwOFxcdTIxMDlcXHUyMTE0XFx1MjExNlxcdTIxMTdcXHUyMTFFLVxcdTIxMjNcXHUyMTI1XFx1MjEyN1xcdTIxMjlcXHUyMTJFXFx1MjEzQVxcdTIxM0JcXHUyMTRBXFx1MjE0Q1xcdTIxNERcXHUyMTRGXFx1MjE4QVxcdTIxOEJcXHUyMTk1LVxcdTIxOTlcXHUyMTlDLVxcdTIxOUZcXHUyMUExXFx1MjFBMlxcdTIxQTRcXHUyMUE1XFx1MjFBNy1cXHUyMUFEXFx1MjFBRi1cXHUyMUNEXFx1MjFEMFxcdTIxRDFcXHUyMUQzXFx1MjFENS1cXHUyMUYzXFx1MjMwMC1cXHUyMzA3XFx1MjMwQy1cXHUyMzFGXFx1MjMyMi1cXHUyMzI4XFx1MjMyQi1cXHUyMzdCXFx1MjM3RC1cXHUyMzlBXFx1MjNCNC1cXHUyM0RCXFx1MjNFMi1cXHUyNDI2XFx1MjQ0MC1cXHUyNDRBXFx1MjQ5Qy1cXHUyNEU5XFx1MjUwMC1cXHUyNUI2XFx1MjVCOC1cXHUyNUMwXFx1MjVDMi1cXHUyNUY3XFx1MjYwMC1cXHUyNjZFXFx1MjY3MC1cXHUyNzY3XFx1Mjc5NC1cXHUyN0JGXFx1MjgwMC1cXHUyOEZGXFx1MkIwMC1cXHUyQjJGXFx1MkI0NVxcdTJCNDZcXHUyQjRELVxcdTJCNzNcXHUyQjc2LVxcdTJCOTVcXHUyQjk4LVxcdTJCQzhcXHUyQkNBLVxcdTJCRkVcXHUyQ0U1LVxcdTJDRUFcXHUyRTgwLVxcdTJFOTlcXHUyRTlCLVxcdTJFRjNcXHUyRjAwLVxcdTJGRDVcXHUyRkYwLVxcdTJGRkJcXHUzMDA0XFx1MzAxMlxcdTMwMTNcXHUzMDIwXFx1MzAzNlxcdTMwMzdcXHUzMDNFXFx1MzAzRlxcdTMxOTBcXHUzMTkxXFx1MzE5Ni1cXHUzMTlGXFx1MzFDMC1cXHUzMUUzXFx1MzIwMC1cXHUzMjFFXFx1MzIyQS1cXHUzMjQ3XFx1MzI1MFxcdTMyNjAtXFx1MzI3RlxcdTMyOEEtXFx1MzJCMFxcdTMyQzAtXFx1MzJGRVxcdTMzMDAtXFx1MzNGRlxcdTREQzAtXFx1NERGRlxcdUE0OTAtXFx1QTRDNlxcdUE4MjgtXFx1QTgyQlxcdUE4MzZcXHVBODM3XFx1QTgzOVxcdUFBNzctXFx1QUE3OVxcdUZERkRcXHVGRkU0XFx1RkZFOFxcdUZGRURcXHVGRkVFXFx1RkZGQ1xcdUZGRkQnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REQzNy1cXHVERDNGXFx1REQ3OS1cXHVERDg5XFx1REQ4Qy1cXHVERDhFXFx1REQ5MC1cXHVERDlCXFx1RERBMFxcdURERDAtXFx1RERGQ118XFx1RDgwMltcXHVEQzc3XFx1REM3OFxcdURFQzhdfFxcdUQ4MDVcXHVERjNGfFxcdUQ4MUFbXFx1REYzQy1cXHVERjNGXFx1REY0NV18XFx1RDgyRlxcdURDOUN8XFx1RDgzNFtcXHVEQzAwLVxcdURDRjVcXHVERDAwLVxcdUREMjZcXHVERDI5LVxcdURENjRcXHVERDZBLVxcdURENkNcXHVERDgzXFx1REQ4NFxcdUREOEMtXFx1RERBOVxcdUREQUUtXFx1RERFOFxcdURFMDAtXFx1REU0MVxcdURFNDVcXHVERjAwLVxcdURGNTZdfFxcdUQ4MzZbXFx1REMwMC1cXHVEREZGXFx1REUzNy1cXHVERTNBXFx1REU2RC1cXHVERTc0XFx1REU3Ni1cXHVERTgzXFx1REU4NVxcdURFODZdfFxcdUQ4M0JcXHVEQ0FDfFxcdUQ4M0NbXFx1REMwMC1cXHVEQzJCXFx1REMzMC1cXHVEQzkzXFx1RENBMC1cXHVEQ0FFXFx1RENCMS1cXHVEQ0JGXFx1RENDMS1cXHVEQ0NGXFx1RENEMS1cXHVEQ0Y1XFx1REQxMC1cXHVERDZCXFx1REQ3MC1cXHVEREFDXFx1RERFNi1cXHVERTAyXFx1REUxMC1cXHVERTNCXFx1REU0MC1cXHVERTQ4XFx1REU1MFxcdURFNTFcXHVERTYwLVxcdURFNjVcXHVERjAwLVxcdURGRkFdfFxcdUQ4M0RbXFx1REMwMC1cXHVERUQ0XFx1REVFMC1cXHVERUVDXFx1REVGMC1cXHVERUY5XFx1REYwMC1cXHVERjczXFx1REY4MC1cXHVERkQ4XXxcXHVEODNFW1xcdURDMDAtXFx1REMwQlxcdURDMTAtXFx1REM0N1xcdURDNTAtXFx1REM1OVxcdURDNjAtXFx1REM4N1xcdURDOTAtXFx1RENBRFxcdUREMDAtXFx1REQwQlxcdUREMTAtXFx1REQzRVxcdURENDAtXFx1REQ3MFxcdURENzMtXFx1REQ3NlxcdUREN0FcXHVERDdDLVxcdUREQTJcXHVEREIwLVxcdUREQjlcXHVEREMwLVxcdUREQzJcXHVEREQwLVxcdURERkZcXHVERTYwLVxcdURFNkRdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdaJyxcbiAgICAgICAgJ2FsaWFzJzogJ1NlcGFyYXRvcicsXG4gICAgICAgICdibXAnOiAnIFxceEEwXFx1MTY4MFxcdTIwMDAtXFx1MjAwQVxcdTIwMjhcXHUyMDI5XFx1MjAyRlxcdTIwNUZcXHUzMDAwJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdabCcsXG4gICAgICAgICdhbGlhcyc6ICdMaW5lX1NlcGFyYXRvcicsXG4gICAgICAgICdibXAnOiAnXFx1MjAyOCdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnWnAnLFxuICAgICAgICAnYWxpYXMnOiAnUGFyYWdyYXBoX1NlcGFyYXRvcicsXG4gICAgICAgICdibXAnOiAnXFx1MjAyOSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnWnMnLFxuICAgICAgICAnYWxpYXMnOiAnU3BhY2VfU2VwYXJhdG9yJyxcbiAgICAgICAgJ2JtcCc6ICcgXFx4QTBcXHUxNjgwXFx1MjAwMC1cXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwJ1xuICAgIH1cbl07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFtcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0FTQ0lJJyxcbiAgICAgICAgJ2JtcCc6ICdcXDAtXFx4N0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0FscGhhYmV0aWMnLFxuICAgICAgICAnYm1wJzogJ0EtWmEtelxceEFBXFx4QjVcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzQ1XFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDhBLVxcdTA1MkZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MC1cXHUwNTg4XFx1MDVCMC1cXHUwNUJEXFx1MDVCRlxcdTA1QzFcXHUwNUMyXFx1MDVDNFxcdTA1QzVcXHUwNUM3XFx1MDVEMC1cXHUwNUVBXFx1MDVFRi1cXHUwNUYyXFx1MDYxMC1cXHUwNjFBXFx1MDYyMC1cXHUwNjU3XFx1MDY1OS1cXHUwNjVGXFx1MDY2RS1cXHUwNkQzXFx1MDZENS1cXHUwNkRDXFx1MDZFMS1cXHUwNkU4XFx1MDZFRC1cXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTAtXFx1MDczRlxcdTA3NEQtXFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxN1xcdTA4MUEtXFx1MDgyQ1xcdTA4NDAtXFx1MDg1OFxcdTA4NjAtXFx1MDg2QVxcdTA4QTAtXFx1MDhCNFxcdTA4QjYtXFx1MDhCRFxcdTA4RDQtXFx1MDhERlxcdTA4RTMtXFx1MDhFOVxcdTA4RjAtXFx1MDkzQlxcdTA5M0QtXFx1MDk0Q1xcdTA5NEUtXFx1MDk1MFxcdTA5NTUtXFx1MDk2M1xcdTA5NzEtXFx1MDk4M1xcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkQtXFx1MDlDNFxcdTA5QzdcXHUwOUM4XFx1MDlDQlxcdTA5Q0NcXHUwOUNFXFx1MDlEN1xcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUzXFx1MDlGMFxcdTA5RjFcXHUwOUZDXFx1MEEwMS1cXHUwQTAzXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTNFLVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEJcXHUwQTRDXFx1MEE1MVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcwLVxcdTBBNzVcXHUwQTgxLVxcdTBBODNcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkQtXFx1MEFDNVxcdTBBQzctXFx1MEFDOVxcdTBBQ0JcXHUwQUNDXFx1MEFEMFxcdTBBRTAtXFx1MEFFM1xcdTBBRjktXFx1MEFGQ1xcdTBCMDEtXFx1MEIwM1xcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNELVxcdTBCNDRcXHUwQjQ3XFx1MEI0OFxcdTBCNEJcXHUwQjRDXFx1MEI1NlxcdTBCNTdcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2M1xcdTBCNzFcXHUwQjgyXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkJFLVxcdTBCQzJcXHUwQkM2LVxcdTBCQzhcXHUwQkNBLVxcdTBCQ0NcXHUwQkQwXFx1MEJEN1xcdTBDMDAtXFx1MEMwM1xcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0QtXFx1MEM0NFxcdTBDNDYtXFx1MEM0OFxcdTBDNEEtXFx1MEM0Q1xcdTBDNTVcXHUwQzU2XFx1MEM1OC1cXHUwQzVBXFx1MEM2MC1cXHUwQzYzXFx1MEM4MC1cXHUwQzgzXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRC1cXHUwQ0M0XFx1MENDNi1cXHUwQ0M4XFx1MENDQS1cXHUwQ0NDXFx1MENENVxcdTBDRDZcXHUwQ0RFXFx1MENFMC1cXHUwQ0UzXFx1MENGMVxcdTBDRjJcXHUwRDAwLVxcdTBEMDNcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNELVxcdTBENDRcXHUwRDQ2LVxcdTBENDhcXHUwRDRBLVxcdTBENENcXHUwRDRFXFx1MEQ1NC1cXHUwRDU3XFx1MEQ1Ri1cXHUwRDYzXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4MlxcdTBEODNcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MERDRi1cXHUwREQ0XFx1MERENlxcdTBERDgtXFx1MERERlxcdTBERjJcXHUwREYzXFx1MEUwMS1cXHUwRTNBXFx1MEU0MC1cXHUwRTQ2XFx1MEU0RFxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUI5XFx1MEVCQi1cXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFQ0RcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY3MS1cXHUwRjgxXFx1MEY4OC1cXHUwRjk3XFx1MEY5OS1cXHUwRkJDXFx1MTAwMC1cXHUxMDM2XFx1MTAzOFxcdTEwM0ItXFx1MTAzRlxcdTEwNTAtXFx1MTA2MlxcdTEwNjUtXFx1MTA2OFxcdTEwNkUtXFx1MTA4NlxcdTEwOEVcXHUxMDlDXFx1MTA5RFxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzVGXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZFRS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzEzXFx1MTcyMC1cXHUxNzMzXFx1MTc0MC1cXHUxNzUzXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc3MlxcdTE3NzNcXHUxNzgwLVxcdTE3QjNcXHUxN0I2LVxcdTE3QzhcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3OFxcdTE4ODAtXFx1MThBQVxcdTE4QjAtXFx1MThGNVxcdTE5MDAtXFx1MTkxRVxcdTE5MjAtXFx1MTkyQlxcdTE5MzAtXFx1MTkzOFxcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQlxcdTE5QjAtXFx1MTlDOVxcdTFBMDAtXFx1MUExQlxcdTFBMjAtXFx1MUE1RVxcdTFBNjEtXFx1MUE3NFxcdTFBQTdcXHUxQjAwLVxcdTFCMzNcXHUxQjM1LVxcdTFCNDNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgwLVxcdTFCQTlcXHUxQkFDLVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQkU3LVxcdTFCRjFcXHUxQzAwLVxcdTFDMzVcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQzgwLVxcdTFDODhcXHUxQzkwLVxcdTFDQkFcXHUxQ0JELVxcdTFDQkZcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjNcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFERTctXFx1MURGNFxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyNEI2LVxcdTI0RTlcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJERTAtXFx1MkRGRlxcdTJFMkZcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkZcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRUZcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2NzQtXFx1QTY3QlxcdUE2N0YtXFx1QTZFRlxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdCOVxcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyN1xcdUE4NDAtXFx1QTg3M1xcdUE4ODAtXFx1QThDM1xcdUE4QzVcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE4RkVcXHVBOTBBLVxcdUE5MkFcXHVBOTMwLVxcdUE5NTJcXHVBOTYwLVxcdUE5N0NcXHVBOTgwLVxcdUE5QjJcXHVBOUI0LVxcdUE5QkZcXHVBOUNGXFx1QTlFMC1cXHVBOUU0XFx1QTlFNi1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTM2XFx1QUE0MC1cXHVBQTREXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFCRVxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVGXFx1QUFGMi1cXHVBQUY1XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkVBXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRC1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjIxLVxcdUZGM0FcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGREMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERDQwLVxcdURENzRcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERjAwLVxcdURGMUZcXHVERjJELVxcdURGNEFcXHVERjUwLVxcdURGN0FcXHVERjgwLVxcdURGOURcXHVERkEwLVxcdURGQzNcXHVERkM4LVxcdURGQ0ZcXHVERkQxLVxcdURGRDVdfFxcdUQ4MDFbXFx1REMwMC1cXHVEQzlEXFx1RENCMC1cXHVEQ0QzXFx1RENEOC1cXHVEQ0ZCXFx1REQwMC1cXHVERDI3XFx1REQzMC1cXHVERDYzXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XXxcXHVEODAyW1xcdURDMDAtXFx1REMwNVxcdURDMDhcXHVEQzBBLVxcdURDMzVcXHVEQzM3XFx1REMzOFxcdURDM0NcXHVEQzNGLVxcdURDNTVcXHVEQzYwLVxcdURDNzZcXHVEQzgwLVxcdURDOUVcXHVEQ0UwLVxcdURDRjJcXHVEQ0Y0XFx1RENGNVxcdUREMDAtXFx1REQxNVxcdUREMjAtXFx1REQzOVxcdUREODAtXFx1RERCN1xcdUREQkVcXHVEREJGXFx1REUwMC1cXHVERTAzXFx1REUwNVxcdURFMDZcXHVERTBDLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzVcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTRcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XFx1REM4MC1cXHVEQ0IyXFx1RENDMC1cXHVEQ0YyXFx1REQwMC1cXHVERDI3XFx1REYwMC1cXHVERjFDXFx1REYyN1xcdURGMzAtXFx1REY0NV18XFx1RDgwNFtcXHVEQzAwLVxcdURDNDVcXHVEQzgyLVxcdURDQjhcXHVEQ0QwLVxcdURDRThcXHVERDAwLVxcdUREMzJcXHVERDQ0LVxcdURENDZcXHVERDUwLVxcdURENzJcXHVERDc2XFx1REQ4MC1cXHVEREJGXFx1RERDMS1cXHVEREM0XFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMzRcXHVERTM3XFx1REUzRVxcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFRThcXHVERjAwLVxcdURGMDNcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzRC1cXHVERjQ0XFx1REY0N1xcdURGNDhcXHVERjRCXFx1REY0Q1xcdURGNTBcXHVERjU3XFx1REY1RC1cXHVERjYzXXxcXHVEODA1W1xcdURDMDAtXFx1REM0MVxcdURDNDMtXFx1REM0NVxcdURDNDctXFx1REM0QVxcdURDODAtXFx1RENDMVxcdURDQzRcXHVEQ0M1XFx1RENDN1xcdUREODAtXFx1RERCNVxcdUREQjgtXFx1RERCRVxcdURERDgtXFx1RERERFxcdURFMDAtXFx1REUzRVxcdURFNDBcXHVERTQ0XFx1REU4MC1cXHVERUI1XFx1REYwMC1cXHVERjFBXFx1REYxRC1cXHVERjJBXXxcXHVEODA2W1xcdURDMDAtXFx1REMzOFxcdURDQTAtXFx1RENERlxcdURDRkZcXHVERTAwLVxcdURFMzJcXHVERTM1LVxcdURFM0VcXHVERTUwLVxcdURFODNcXHVERTg2LVxcdURFOTdcXHVERTlEXFx1REVDMC1cXHVERUY4XXxcXHVEODA3W1xcdURDMDAtXFx1REMwOFxcdURDMEEtXFx1REMzNlxcdURDMzgtXFx1REMzRVxcdURDNDBcXHVEQzcyLVxcdURDOEZcXHVEQzkyLVxcdURDQTdcXHVEQ0E5LVxcdURDQjZcXHVERDAwLVxcdUREMDZcXHVERDA4XFx1REQwOVxcdUREMEItXFx1REQzNlxcdUREM0FcXHVERDNDXFx1REQzRFxcdUREM0YtXFx1REQ0MVxcdURENDNcXHVERDQ2XFx1REQ0N1xcdURENjAtXFx1REQ2NVxcdURENjdcXHVERDY4XFx1REQ2QS1cXHVERDhFXFx1REQ5MFxcdUREOTFcXHVERDkzLVxcdUREOTZcXHVERDk4XFx1REVFMC1cXHVERUY2XXxcXHVEODA4W1xcdURDMDAtXFx1REY5OV18XFx1RDgwOVtcXHVEQzAwLVxcdURDNkVcXHVEQzgwLVxcdURENDNdfFtcXHVEODBDXFx1RDgxQy1cXHVEODIwXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXFx1RDg3NC1cXHVEODc5XVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERUQwLVxcdURFRURcXHVERjAwLVxcdURGMzZcXHVERjQwLVxcdURGNDNcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REU0MC1cXHVERTdGXFx1REYwMC1cXHVERjQ0XFx1REY1MC1cXHVERjdFXFx1REY5My1cXHVERjlGXFx1REZFMFxcdURGRTFdfFxcdUQ4MjFbXFx1REMwMC1cXHVERkYxXXxcXHVEODIyW1xcdURDMDAtXFx1REVGMl18XFx1RDgyQ1tcXHVEQzAwLVxcdUREMUVcXHVERDcwLVxcdURFRkJdfFxcdUQ4MkZbXFx1REMwMC1cXHVEQzZBXFx1REM3MC1cXHVEQzdDXFx1REM4MC1cXHVEQzg4XFx1REM5MC1cXHVEQzk5XFx1REM5RV18XFx1RDgzNVtcXHVEQzAwLVxcdURDNTRcXHVEQzU2LVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERUE1XFx1REVBOC1cXHVERUMwXFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUZBXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjM0XFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjZFXFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERkE4XFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkNCXXxcXHVEODM4W1xcdURDMDAtXFx1REMwNlxcdURDMDgtXFx1REMxOFxcdURDMUItXFx1REMyMVxcdURDMjNcXHVEQzI0XFx1REMyNi1cXHVEQzJBXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdUREMDAtXFx1REQ0M1xcdURENDddfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDgzQ1tcXHVERDMwLVxcdURENDlcXHVERDUwLVxcdURENjlcXHVERDcwLVxcdUREODldfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXFx1REVCMC1cXHVERkZGXXxcXHVEODdBW1xcdURDMDAtXFx1REZFMF18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdBbnknLFxuICAgICAgICAnaXNCbXBMYXN0JzogdHJ1ZSxcbiAgICAgICAgJ2JtcCc6ICdcXDAtXFx1RkZGRicsXG4gICAgICAgICdhc3RyYWwnOiAnW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnRGVmYXVsdF9JZ25vcmFibGVfQ29kZV9Qb2ludCcsXG4gICAgICAgICdibXAnOiAnXFx4QURcXHUwMzRGXFx1MDYxQ1xcdTExNUZcXHUxMTYwXFx1MTdCNFxcdTE3QjVcXHUxODBCLVxcdTE4MEVcXHUyMDBCLVxcdTIwMEZcXHUyMDJBLVxcdTIwMkVcXHUyMDYwLVxcdTIwNkZcXHUzMTY0XFx1RkUwMC1cXHVGRTBGXFx1RkVGRlxcdUZGQTBcXHVGRkYwLVxcdUZGRjgnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MkZbXFx1RENBMC1cXHVEQ0EzXXxcXHVEODM0W1xcdURENzMtXFx1REQ3QV18W1xcdURCNDAtXFx1REI0M11bXFx1REMwMC1cXHVERkZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTG93ZXJjYXNlJyxcbiAgICAgICAgJ2JtcCc6ICdhLXpcXHhBQVxceEI1XFx4QkFcXHhERi1cXHhGNlxceEY4LVxceEZGXFx1MDEwMVxcdTAxMDNcXHUwMTA1XFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAxMEZcXHUwMTExXFx1MDExM1xcdTAxMTVcXHUwMTE3XFx1MDExOVxcdTAxMUJcXHUwMTFEXFx1MDExRlxcdTAxMjFcXHUwMTIzXFx1MDEyNVxcdTAxMjdcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMTJGXFx1MDEzMVxcdTAxMzNcXHUwMTM1XFx1MDEzN1xcdTAxMzhcXHUwMTNBXFx1MDEzQ1xcdTAxM0VcXHUwMTQwXFx1MDE0MlxcdTAxNDRcXHUwMTQ2XFx1MDE0OFxcdTAxNDlcXHUwMTRCXFx1MDE0RFxcdTAxNEZcXHUwMTUxXFx1MDE1M1xcdTAxNTVcXHUwMTU3XFx1MDE1OVxcdTAxNUJcXHUwMTVEXFx1MDE1RlxcdTAxNjFcXHUwMTYzXFx1MDE2NVxcdTAxNjdcXHUwMTY5XFx1MDE2QlxcdTAxNkRcXHUwMTZGXFx1MDE3MVxcdTAxNzNcXHUwMTc1XFx1MDE3N1xcdTAxN0FcXHUwMTdDXFx1MDE3RS1cXHUwMTgwXFx1MDE4M1xcdTAxODVcXHUwMTg4XFx1MDE4Q1xcdTAxOERcXHUwMTkyXFx1MDE5NVxcdTAxOTktXFx1MDE5QlxcdTAxOUVcXHUwMUExXFx1MDFBM1xcdTAxQTVcXHUwMUE4XFx1MDFBQVxcdTAxQUJcXHUwMUFEXFx1MDFCMFxcdTAxQjRcXHUwMUI2XFx1MDFCOVxcdTAxQkFcXHUwMUJELVxcdTAxQkZcXHUwMUM2XFx1MDFDOVxcdTAxQ0NcXHUwMUNFXFx1MDFEMFxcdTAxRDJcXHUwMUQ0XFx1MDFENlxcdTAxRDhcXHUwMURBXFx1MDFEQ1xcdTAxRERcXHUwMURGXFx1MDFFMVxcdTAxRTNcXHUwMUU1XFx1MDFFN1xcdTAxRTlcXHUwMUVCXFx1MDFFRFxcdTAxRUZcXHUwMUYwXFx1MDFGM1xcdTAxRjVcXHUwMUY5XFx1MDFGQlxcdTAxRkRcXHUwMUZGXFx1MDIwMVxcdTAyMDNcXHUwMjA1XFx1MDIwN1xcdTAyMDlcXHUwMjBCXFx1MDIwRFxcdTAyMEZcXHUwMjExXFx1MDIxM1xcdTAyMTVcXHUwMjE3XFx1MDIxOVxcdTAyMUJcXHUwMjFEXFx1MDIxRlxcdTAyMjFcXHUwMjIzXFx1MDIyNVxcdTAyMjdcXHUwMjI5XFx1MDIyQlxcdTAyMkRcXHUwMjJGXFx1MDIzMVxcdTAyMzMtXFx1MDIzOVxcdTAyM0NcXHUwMjNGXFx1MDI0MFxcdTAyNDJcXHUwMjQ3XFx1MDI0OVxcdTAyNEJcXHUwMjREXFx1MDI0Ri1cXHUwMjkzXFx1MDI5NS1cXHUwMkI4XFx1MDJDMFxcdTAyQzFcXHUwMkUwLVxcdTAyRTRcXHUwMzQ1XFx1MDM3MVxcdTAzNzNcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM5MFxcdTAzQUMtXFx1MDNDRVxcdTAzRDBcXHUwM0QxXFx1MDNENS1cXHUwM0Q3XFx1MDNEOVxcdTAzREJcXHUwM0REXFx1MDNERlxcdTAzRTFcXHUwM0UzXFx1MDNFNVxcdTAzRTdcXHUwM0U5XFx1MDNFQlxcdTAzRURcXHUwM0VGLVxcdTAzRjNcXHUwM0Y1XFx1MDNGOFxcdTAzRkJcXHUwM0ZDXFx1MDQzMC1cXHUwNDVGXFx1MDQ2MVxcdTA0NjNcXHUwNDY1XFx1MDQ2N1xcdTA0NjlcXHUwNDZCXFx1MDQ2RFxcdTA0NkZcXHUwNDcxXFx1MDQ3M1xcdTA0NzVcXHUwNDc3XFx1MDQ3OVxcdTA0N0JcXHUwNDdEXFx1MDQ3RlxcdTA0ODFcXHUwNDhCXFx1MDQ4RFxcdTA0OEZcXHUwNDkxXFx1MDQ5M1xcdTA0OTVcXHUwNDk3XFx1MDQ5OVxcdTA0OUJcXHUwNDlEXFx1MDQ5RlxcdTA0QTFcXHUwNEEzXFx1MDRBNVxcdTA0QTdcXHUwNEE5XFx1MDRBQlxcdTA0QURcXHUwNEFGXFx1MDRCMVxcdTA0QjNcXHUwNEI1XFx1MDRCN1xcdTA0QjlcXHUwNEJCXFx1MDRCRFxcdTA0QkZcXHUwNEMyXFx1MDRDNFxcdTA0QzZcXHUwNEM4XFx1MDRDQVxcdTA0Q0NcXHUwNENFXFx1MDRDRlxcdTA0RDFcXHUwNEQzXFx1MDRENVxcdTA0RDdcXHUwNEQ5XFx1MDREQlxcdTA0RERcXHUwNERGXFx1MDRFMVxcdTA0RTNcXHUwNEU1XFx1MDRFN1xcdTA0RTlcXHUwNEVCXFx1MDRFRFxcdTA0RUZcXHUwNEYxXFx1MDRGM1xcdTA0RjVcXHUwNEY3XFx1MDRGOVxcdTA0RkJcXHUwNEZEXFx1MDRGRlxcdTA1MDFcXHUwNTAzXFx1MDUwNVxcdTA1MDdcXHUwNTA5XFx1MDUwQlxcdTA1MERcXHUwNTBGXFx1MDUxMVxcdTA1MTNcXHUwNTE1XFx1MDUxN1xcdTA1MTlcXHUwNTFCXFx1MDUxRFxcdTA1MUZcXHUwNTIxXFx1MDUyM1xcdTA1MjVcXHUwNTI3XFx1MDUyOVxcdTA1MkJcXHUwNTJEXFx1MDUyRlxcdTA1NjAtXFx1MDU4OFxcdTEwRDAtXFx1MTBGQVxcdTEwRkQtXFx1MTBGRlxcdTEzRjgtXFx1MTNGRFxcdTFDODAtXFx1MUM4OFxcdTFEMDAtXFx1MURCRlxcdTFFMDFcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUxRTA5XFx1MUUwQlxcdTFFMERcXHUxRTBGXFx1MUUxMVxcdTFFMTNcXHUxRTE1XFx1MUUxN1xcdTFFMTlcXHUxRTFCXFx1MUUxRFxcdTFFMUZcXHUxRTIxXFx1MUUyM1xcdTFFMjVcXHUxRTI3XFx1MUUyOVxcdTFFMkJcXHUxRTJEXFx1MUUyRlxcdTFFMzFcXHUxRTMzXFx1MUUzNVxcdTFFMzdcXHUxRTM5XFx1MUUzQlxcdTFFM0RcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUxRTQ1XFx1MUU0N1xcdTFFNDlcXHUxRTRCXFx1MUU0RFxcdTFFNEZcXHUxRTUxXFx1MUU1M1xcdTFFNTVcXHUxRTU3XFx1MUU1OVxcdTFFNUJcXHUxRTVEXFx1MUU1RlxcdTFFNjFcXHUxRTYzXFx1MUU2NVxcdTFFNjdcXHUxRTY5XFx1MUU2QlxcdTFFNkRcXHUxRTZGXFx1MUU3MVxcdTFFNzNcXHUxRTc1XFx1MUU3N1xcdTFFNzlcXHUxRTdCXFx1MUU3RFxcdTFFN0ZcXHUxRTgxXFx1MUU4M1xcdTFFODVcXHUxRTg3XFx1MUU4OVxcdTFFOEJcXHUxRThEXFx1MUU4RlxcdTFFOTFcXHUxRTkzXFx1MUU5NS1cXHUxRTlEXFx1MUU5RlxcdTFFQTFcXHUxRUEzXFx1MUVBNVxcdTFFQTdcXHUxRUE5XFx1MUVBQlxcdTFFQURcXHUxRUFGXFx1MUVCMVxcdTFFQjNcXHUxRUI1XFx1MUVCN1xcdTFFQjlcXHUxRUJCXFx1MUVCRFxcdTFFQkZcXHUxRUMxXFx1MUVDM1xcdTFFQzVcXHUxRUM3XFx1MUVDOVxcdTFFQ0JcXHUxRUNEXFx1MUVDRlxcdTFFRDFcXHUxRUQzXFx1MUVENVxcdTFFRDdcXHUxRUQ5XFx1MUVEQlxcdTFFRERcXHUxRURGXFx1MUVFMVxcdTFFRTNcXHUxRUU1XFx1MUVFN1xcdTFFRTlcXHUxRUVCXFx1MUVFRFxcdTFFRUZcXHUxRUYxXFx1MUVGM1xcdTFFRjVcXHUxRUY3XFx1MUVGOVxcdTFFRkJcXHUxRUZEXFx1MUVGRi1cXHUxRjA3XFx1MUYxMC1cXHUxRjE1XFx1MUYyMC1cXHUxRjI3XFx1MUYzMC1cXHUxRjM3XFx1MUY0MC1cXHUxRjQ1XFx1MUY1MC1cXHUxRjU3XFx1MUY2MC1cXHUxRjY3XFx1MUY3MC1cXHUxRjdEXFx1MUY4MC1cXHUxRjg3XFx1MUY5MC1cXHUxRjk3XFx1MUZBMC1cXHUxRkE3XFx1MUZCMC1cXHUxRkI0XFx1MUZCNlxcdTFGQjdcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNlxcdTFGQzdcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2XFx1MUZEN1xcdTFGRTAtXFx1MUZFN1xcdTFGRjItXFx1MUZGNFxcdTFGRjZcXHUxRkY3XFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTBBXFx1MjEwRVxcdTIxMEZcXHUyMTEzXFx1MjEyRlxcdTIxMzRcXHUyMTM5XFx1MjEzQ1xcdTIxM0RcXHUyMTQ2LVxcdTIxNDlcXHUyMTRFXFx1MjE3MC1cXHUyMTdGXFx1MjE4NFxcdTI0RDAtXFx1MjRFOVxcdTJDMzAtXFx1MkM1RVxcdTJDNjFcXHUyQzY1XFx1MkM2NlxcdTJDNjhcXHUyQzZBXFx1MkM2Q1xcdTJDNzFcXHUyQzczXFx1MkM3NFxcdTJDNzYtXFx1MkM3RFxcdTJDODFcXHUyQzgzXFx1MkM4NVxcdTJDODdcXHUyQzg5XFx1MkM4QlxcdTJDOERcXHUyQzhGXFx1MkM5MVxcdTJDOTNcXHUyQzk1XFx1MkM5N1xcdTJDOTlcXHUyQzlCXFx1MkM5RFxcdTJDOUZcXHUyQ0ExXFx1MkNBM1xcdTJDQTVcXHUyQ0E3XFx1MkNBOVxcdTJDQUJcXHUyQ0FEXFx1MkNBRlxcdTJDQjFcXHUyQ0IzXFx1MkNCNVxcdTJDQjdcXHUyQ0I5XFx1MkNCQlxcdTJDQkRcXHUyQ0JGXFx1MkNDMVxcdTJDQzNcXHUyQ0M1XFx1MkNDN1xcdTJDQzlcXHUyQ0NCXFx1MkNDRFxcdTJDQ0ZcXHUyQ0QxXFx1MkNEM1xcdTJDRDVcXHUyQ0Q3XFx1MkNEOVxcdTJDREJcXHUyQ0REXFx1MkNERlxcdTJDRTFcXHUyQ0UzXFx1MkNFNFxcdTJDRUNcXHUyQ0VFXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1QTY0MVxcdUE2NDNcXHVBNjQ1XFx1QTY0N1xcdUE2NDlcXHVBNjRCXFx1QTY0RFxcdUE2NEZcXHVBNjUxXFx1QTY1M1xcdUE2NTVcXHVBNjU3XFx1QTY1OVxcdUE2NUJcXHVBNjVEXFx1QTY1RlxcdUE2NjFcXHVBNjYzXFx1QTY2NVxcdUE2NjdcXHVBNjY5XFx1QTY2QlxcdUE2NkRcXHVBNjgxXFx1QTY4M1xcdUE2ODVcXHVBNjg3XFx1QTY4OVxcdUE2OEJcXHVBNjhEXFx1QTY4RlxcdUE2OTFcXHVBNjkzXFx1QTY5NVxcdUE2OTdcXHVBNjk5XFx1QTY5Qi1cXHVBNjlEXFx1QTcyM1xcdUE3MjVcXHVBNzI3XFx1QTcyOVxcdUE3MkJcXHVBNzJEXFx1QTcyRi1cXHVBNzMxXFx1QTczM1xcdUE3MzVcXHVBNzM3XFx1QTczOVxcdUE3M0JcXHVBNzNEXFx1QTczRlxcdUE3NDFcXHVBNzQzXFx1QTc0NVxcdUE3NDdcXHVBNzQ5XFx1QTc0QlxcdUE3NERcXHVBNzRGXFx1QTc1MVxcdUE3NTNcXHVBNzU1XFx1QTc1N1xcdUE3NTlcXHVBNzVCXFx1QTc1RFxcdUE3NUZcXHVBNzYxXFx1QTc2M1xcdUE3NjVcXHVBNzY3XFx1QTc2OVxcdUE3NkJcXHVBNzZEXFx1QTc2Ri1cXHVBNzc4XFx1QTc3QVxcdUE3N0NcXHVBNzdGXFx1QTc4MVxcdUE3ODNcXHVBNzg1XFx1QTc4N1xcdUE3OENcXHVBNzhFXFx1QTc5MVxcdUE3OTMtXFx1QTc5NVxcdUE3OTdcXHVBNzk5XFx1QTc5QlxcdUE3OURcXHVBNzlGXFx1QTdBMVxcdUE3QTNcXHVBN0E1XFx1QTdBN1xcdUE3QTlcXHVBN0FGXFx1QTdCNVxcdUE3QjdcXHVBN0I5XFx1QTdGOC1cXHVBN0ZBXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkJGXFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkY0MS1cXHVGRjVBJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAxW1xcdURDMjgtXFx1REM0RlxcdURDRDgtXFx1RENGQl18XFx1RDgwM1tcXHVEQ0MwLVxcdURDRjJdfFxcdUQ4MDZbXFx1RENDMC1cXHVEQ0RGXXxcXHVEODFCW1xcdURFNjAtXFx1REU3Rl18XFx1RDgzNVtcXHVEQzFBLVxcdURDMzNcXHVEQzRFLVxcdURDNTRcXHVEQzU2LVxcdURDNjdcXHVEQzgyLVxcdURDOUJcXHVEQ0I2LVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVEQ0NGXFx1RENFQS1cXHVERDAzXFx1REQxRS1cXHVERDM3XFx1REQ1Mi1cXHVERDZCXFx1REQ4Ni1cXHVERDlGXFx1RERCQS1cXHVEREQzXFx1RERFRS1cXHVERTA3XFx1REUyMi1cXHVERTNCXFx1REU1Ni1cXHVERTZGXFx1REU4QS1cXHVERUE1XFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUUxXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjFCXFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjU1XFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERjhGXFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkM5XFx1REZDQl18XFx1RDgzQVtcXHVERDIyLVxcdURENDNdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdOb25jaGFyYWN0ZXJfQ29kZV9Qb2ludCcsXG4gICAgICAgICdibXAnOiAnXFx1RkREMC1cXHVGREVGXFx1RkZGRVxcdUZGRkYnLFxuICAgICAgICAnYXN0cmFsJzogJ1tcXHVEODNGXFx1RDg3RlxcdUQ4QkZcXHVEOEZGXFx1RDkzRlxcdUQ5N0ZcXHVEOUJGXFx1RDlGRlxcdURBM0ZcXHVEQTdGXFx1REFCRlxcdURBRkZcXHVEQjNGXFx1REI3RlxcdURCQkZcXHVEQkZGXVtcXHVERkZFXFx1REZGRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1VwcGVyY2FzZScsXG4gICAgICAgICdibXAnOiAnQS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhERVxcdTAxMDBcXHUwMTAyXFx1MDEwNFxcdTAxMDZcXHUwMTA4XFx1MDEwQVxcdTAxMENcXHUwMTBFXFx1MDExMFxcdTAxMTJcXHUwMTE0XFx1MDExNlxcdTAxMThcXHUwMTFBXFx1MDExQ1xcdTAxMUVcXHUwMTIwXFx1MDEyMlxcdTAxMjRcXHUwMTI2XFx1MDEyOFxcdTAxMkFcXHUwMTJDXFx1MDEyRVxcdTAxMzBcXHUwMTMyXFx1MDEzNFxcdTAxMzZcXHUwMTM5XFx1MDEzQlxcdTAxM0RcXHUwMTNGXFx1MDE0MVxcdTAxNDNcXHUwMTQ1XFx1MDE0N1xcdTAxNEFcXHUwMTRDXFx1MDE0RVxcdTAxNTBcXHUwMTUyXFx1MDE1NFxcdTAxNTZcXHUwMTU4XFx1MDE1QVxcdTAxNUNcXHUwMTVFXFx1MDE2MFxcdTAxNjJcXHUwMTY0XFx1MDE2NlxcdTAxNjhcXHUwMTZBXFx1MDE2Q1xcdTAxNkVcXHUwMTcwXFx1MDE3MlxcdTAxNzRcXHUwMTc2XFx1MDE3OFxcdTAxNzlcXHUwMTdCXFx1MDE3RFxcdTAxODFcXHUwMTgyXFx1MDE4NFxcdTAxODZcXHUwMTg3XFx1MDE4OS1cXHUwMThCXFx1MDE4RS1cXHUwMTkxXFx1MDE5M1xcdTAxOTRcXHUwMTk2LVxcdTAxOThcXHUwMTlDXFx1MDE5RFxcdTAxOUZcXHUwMUEwXFx1MDFBMlxcdTAxQTRcXHUwMUE2XFx1MDFBN1xcdTAxQTlcXHUwMUFDXFx1MDFBRVxcdTAxQUZcXHUwMUIxLVxcdTAxQjNcXHUwMUI1XFx1MDFCN1xcdTAxQjhcXHUwMUJDXFx1MDFDNFxcdTAxQzdcXHUwMUNBXFx1MDFDRFxcdTAxQ0ZcXHUwMUQxXFx1MDFEM1xcdTAxRDVcXHUwMUQ3XFx1MDFEOVxcdTAxREJcXHUwMURFXFx1MDFFMFxcdTAxRTJcXHUwMUU0XFx1MDFFNlxcdTAxRThcXHUwMUVBXFx1MDFFQ1xcdTAxRUVcXHUwMUYxXFx1MDFGNFxcdTAxRjYtXFx1MDFGOFxcdTAxRkFcXHUwMUZDXFx1MDFGRVxcdTAyMDBcXHUwMjAyXFx1MDIwNFxcdTAyMDZcXHUwMjA4XFx1MDIwQVxcdTAyMENcXHUwMjBFXFx1MDIxMFxcdTAyMTJcXHUwMjE0XFx1MDIxNlxcdTAyMThcXHUwMjFBXFx1MDIxQ1xcdTAyMUVcXHUwMjIwXFx1MDIyMlxcdTAyMjRcXHUwMjI2XFx1MDIyOFxcdTAyMkFcXHUwMjJDXFx1MDIyRVxcdTAyMzBcXHUwMjMyXFx1MDIzQVxcdTAyM0JcXHUwMjNEXFx1MDIzRVxcdTAyNDFcXHUwMjQzLVxcdTAyNDZcXHUwMjQ4XFx1MDI0QVxcdTAyNENcXHUwMjRFXFx1MDM3MFxcdTAzNzJcXHUwMzc2XFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RVxcdTAzOEZcXHUwMzkxLVxcdTAzQTFcXHUwM0EzLVxcdTAzQUJcXHUwM0NGXFx1MDNEMi1cXHUwM0Q0XFx1MDNEOFxcdTAzREFcXHUwM0RDXFx1MDNERVxcdTAzRTBcXHUwM0UyXFx1MDNFNFxcdTAzRTZcXHUwM0U4XFx1MDNFQVxcdTAzRUNcXHUwM0VFXFx1MDNGNFxcdTAzRjdcXHUwM0Y5XFx1MDNGQVxcdTAzRkQtXFx1MDQyRlxcdTA0NjBcXHUwNDYyXFx1MDQ2NFxcdTA0NjZcXHUwNDY4XFx1MDQ2QVxcdTA0NkNcXHUwNDZFXFx1MDQ3MFxcdTA0NzJcXHUwNDc0XFx1MDQ3NlxcdTA0NzhcXHUwNDdBXFx1MDQ3Q1xcdTA0N0VcXHUwNDgwXFx1MDQ4QVxcdTA0OENcXHUwNDhFXFx1MDQ5MFxcdTA0OTJcXHUwNDk0XFx1MDQ5NlxcdTA0OThcXHUwNDlBXFx1MDQ5Q1xcdTA0OUVcXHUwNEEwXFx1MDRBMlxcdTA0QTRcXHUwNEE2XFx1MDRBOFxcdTA0QUFcXHUwNEFDXFx1MDRBRVxcdTA0QjBcXHUwNEIyXFx1MDRCNFxcdTA0QjZcXHUwNEI4XFx1MDRCQVxcdTA0QkNcXHUwNEJFXFx1MDRDMFxcdTA0QzFcXHUwNEMzXFx1MDRDNVxcdTA0QzdcXHUwNEM5XFx1MDRDQlxcdTA0Q0RcXHUwNEQwXFx1MDREMlxcdTA0RDRcXHUwNEQ2XFx1MDREOFxcdTA0REFcXHUwNERDXFx1MDRERVxcdTA0RTBcXHUwNEUyXFx1MDRFNFxcdTA0RTZcXHUwNEU4XFx1MDRFQVxcdTA0RUNcXHUwNEVFXFx1MDRGMFxcdTA0RjJcXHUwNEY0XFx1MDRGNlxcdTA0RjhcXHUwNEZBXFx1MDRGQ1xcdTA0RkVcXHUwNTAwXFx1MDUwMlxcdTA1MDRcXHUwNTA2XFx1MDUwOFxcdTA1MEFcXHUwNTBDXFx1MDUwRVxcdTA1MTBcXHUwNTEyXFx1MDUxNFxcdTA1MTZcXHUwNTE4XFx1MDUxQVxcdTA1MUNcXHUwNTFFXFx1MDUyMFxcdTA1MjJcXHUwNTI0XFx1MDUyNlxcdTA1MjhcXHUwNTJBXFx1MDUyQ1xcdTA1MkVcXHUwNTMxLVxcdTA1NTZcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEzQTAtXFx1MTNGNVxcdTFDOTAtXFx1MUNCQVxcdTFDQkQtXFx1MUNCRlxcdTFFMDBcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUxRTA4XFx1MUUwQVxcdTFFMENcXHUxRTBFXFx1MUUxMFxcdTFFMTJcXHUxRTE0XFx1MUUxNlxcdTFFMThcXHUxRTFBXFx1MUUxQ1xcdTFFMUVcXHUxRTIwXFx1MUUyMlxcdTFFMjRcXHUxRTI2XFx1MUUyOFxcdTFFMkFcXHUxRTJDXFx1MUUyRVxcdTFFMzBcXHUxRTMyXFx1MUUzNFxcdTFFMzZcXHUxRTM4XFx1MUUzQVxcdTFFM0NcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUxRTQ0XFx1MUU0NlxcdTFFNDhcXHUxRTRBXFx1MUU0Q1xcdTFFNEVcXHUxRTUwXFx1MUU1MlxcdTFFNTRcXHUxRTU2XFx1MUU1OFxcdTFFNUFcXHUxRTVDXFx1MUU1RVxcdTFFNjBcXHUxRTYyXFx1MUU2NFxcdTFFNjZcXHUxRTY4XFx1MUU2QVxcdTFFNkNcXHUxRTZFXFx1MUU3MFxcdTFFNzJcXHUxRTc0XFx1MUU3NlxcdTFFNzhcXHUxRTdBXFx1MUU3Q1xcdTFFN0VcXHUxRTgwXFx1MUU4MlxcdTFFODRcXHUxRTg2XFx1MUU4OFxcdTFFOEFcXHUxRThDXFx1MUU4RVxcdTFFOTBcXHUxRTkyXFx1MUU5NFxcdTFFOUVcXHUxRUEwXFx1MUVBMlxcdTFFQTRcXHUxRUE2XFx1MUVBOFxcdTFFQUFcXHUxRUFDXFx1MUVBRVxcdTFFQjBcXHUxRUIyXFx1MUVCNFxcdTFFQjZcXHUxRUI4XFx1MUVCQVxcdTFFQkNcXHUxRUJFXFx1MUVDMFxcdTFFQzJcXHUxRUM0XFx1MUVDNlxcdTFFQzhcXHUxRUNBXFx1MUVDQ1xcdTFFQ0VcXHUxRUQwXFx1MUVEMlxcdTFFRDRcXHUxRUQ2XFx1MUVEOFxcdTFFREFcXHUxRURDXFx1MUVERVxcdTFFRTBcXHUxRUUyXFx1MUVFNFxcdTFFRTZcXHUxRUU4XFx1MUVFQVxcdTFFRUNcXHUxRUVFXFx1MUVGMFxcdTFFRjJcXHUxRUY0XFx1MUVGNlxcdTFFRjhcXHUxRUZBXFx1MUVGQ1xcdTFFRkVcXHUxRjA4LVxcdTFGMEZcXHUxRjE4LVxcdTFGMURcXHUxRjI4LVxcdTFGMkZcXHUxRjM4LVxcdTFGM0ZcXHUxRjQ4LVxcdTFGNERcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGXFx1MUY2OC1cXHUxRjZGXFx1MUZCOC1cXHUxRkJCXFx1MUZDOC1cXHUxRkNCXFx1MUZEOC1cXHUxRkRCXFx1MUZFOC1cXHUxRkVDXFx1MUZGOC1cXHUxRkZCXFx1MjEwMlxcdTIxMDdcXHUyMTBCLVxcdTIxMERcXHUyMTEwLVxcdTIxMTJcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEzMC1cXHUyMTMzXFx1MjEzRVxcdTIxM0ZcXHUyMTQ1XFx1MjE2MC1cXHUyMTZGXFx1MjE4M1xcdTI0QjYtXFx1MjRDRlxcdTJDMDAtXFx1MkMyRVxcdTJDNjBcXHUyQzYyLVxcdTJDNjRcXHUyQzY3XFx1MkM2OVxcdTJDNkJcXHUyQzZELVxcdTJDNzBcXHUyQzcyXFx1MkM3NVxcdTJDN0UtXFx1MkM4MFxcdTJDODJcXHUyQzg0XFx1MkM4NlxcdTJDODhcXHUyQzhBXFx1MkM4Q1xcdTJDOEVcXHUyQzkwXFx1MkM5MlxcdTJDOTRcXHUyQzk2XFx1MkM5OFxcdTJDOUFcXHUyQzlDXFx1MkM5RVxcdTJDQTBcXHUyQ0EyXFx1MkNBNFxcdTJDQTZcXHUyQ0E4XFx1MkNBQVxcdTJDQUNcXHUyQ0FFXFx1MkNCMFxcdTJDQjJcXHUyQ0I0XFx1MkNCNlxcdTJDQjhcXHUyQ0JBXFx1MkNCQ1xcdTJDQkVcXHUyQ0MwXFx1MkNDMlxcdTJDQzRcXHUyQ0M2XFx1MkNDOFxcdTJDQ0FcXHUyQ0NDXFx1MkNDRVxcdTJDRDBcXHUyQ0QyXFx1MkNENFxcdTJDRDZcXHUyQ0Q4XFx1MkNEQVxcdTJDRENcXHUyQ0RFXFx1MkNFMFxcdTJDRTJcXHUyQ0VCXFx1MkNFRFxcdTJDRjJcXHVBNjQwXFx1QTY0MlxcdUE2NDRcXHVBNjQ2XFx1QTY0OFxcdUE2NEFcXHVBNjRDXFx1QTY0RVxcdUE2NTBcXHVBNjUyXFx1QTY1NFxcdUE2NTZcXHVBNjU4XFx1QTY1QVxcdUE2NUNcXHVBNjVFXFx1QTY2MFxcdUE2NjJcXHVBNjY0XFx1QTY2NlxcdUE2NjhcXHVBNjZBXFx1QTY2Q1xcdUE2ODBcXHVBNjgyXFx1QTY4NFxcdUE2ODZcXHVBNjg4XFx1QTY4QVxcdUE2OENcXHVBNjhFXFx1QTY5MFxcdUE2OTJcXHVBNjk0XFx1QTY5NlxcdUE2OThcXHVBNjlBXFx1QTcyMlxcdUE3MjRcXHVBNzI2XFx1QTcyOFxcdUE3MkFcXHVBNzJDXFx1QTcyRVxcdUE3MzJcXHVBNzM0XFx1QTczNlxcdUE3MzhcXHVBNzNBXFx1QTczQ1xcdUE3M0VcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBNzQ2XFx1QTc0OFxcdUE3NEFcXHVBNzRDXFx1QTc0RVxcdUE3NTBcXHVBNzUyXFx1QTc1NFxcdUE3NTZcXHVBNzU4XFx1QTc1QVxcdUE3NUNcXHVBNzVFXFx1QTc2MFxcdUE3NjJcXHVBNzY0XFx1QTc2NlxcdUE3NjhcXHVBNzZBXFx1QTc2Q1xcdUE3NkVcXHVBNzc5XFx1QTc3QlxcdUE3N0RcXHVBNzdFXFx1QTc4MFxcdUE3ODJcXHVBNzg0XFx1QTc4NlxcdUE3OEJcXHVBNzhEXFx1QTc5MFxcdUE3OTJcXHVBNzk2XFx1QTc5OFxcdUE3OUFcXHVBNzlDXFx1QTc5RVxcdUE3QTBcXHVBN0EyXFx1QTdBNFxcdUE3QTZcXHVBN0E4XFx1QTdBQS1cXHVBN0FFXFx1QTdCMC1cXHVBN0I0XFx1QTdCNlxcdUE3QjhcXHVGRjIxLVxcdUZGM0EnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDFbXFx1REMwMC1cXHVEQzI3XFx1RENCMC1cXHVEQ0QzXXxcXHVEODAzW1xcdURDODAtXFx1RENCMl18XFx1RDgwNltcXHVEQ0EwLVxcdURDQkZdfFxcdUQ4MUJbXFx1REU0MC1cXHVERTVGXXxcXHVEODM1W1xcdURDMDAtXFx1REMxOVxcdURDMzQtXFx1REM0RFxcdURDNjgtXFx1REM4MVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCNVxcdURDRDAtXFx1RENFOVxcdUREMDRcXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQzOFxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ2Qy1cXHVERDg1XFx1RERBMC1cXHVEREI5XFx1RERENC1cXHVEREVEXFx1REUwOC1cXHVERTIxXFx1REUzQy1cXHVERTU1XFx1REU3MC1cXHVERTg5XFx1REVBOC1cXHVERUMwXFx1REVFMi1cXHVERUZBXFx1REYxQy1cXHVERjM0XFx1REY1Ni1cXHVERjZFXFx1REY5MC1cXHVERkE4XFx1REZDQV18XFx1RDgzQVtcXHVERDAwLVxcdUREMjFdfFxcdUQ4M0NbXFx1REQzMC1cXHVERDQ5XFx1REQ1MC1cXHVERDY5XFx1REQ3MC1cXHVERDg5XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnV2hpdGVfU3BhY2UnLFxuICAgICAgICAnYm1wJzogJ1xcdC1cXHIgXFx4ODVcXHhBMFxcdTE2ODBcXHUyMDAwLVxcdTIwMEFcXHUyMDI4XFx1MjAyOVxcdTIwMkZcXHUyMDVGXFx1MzAwMCdcbiAgICB9XG5dO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBbXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdBZGxhbScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgzQVtcXHVERDAwLVxcdURENEFcXHVERDUwLVxcdURENTlcXHVERDVFXFx1REQ1Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0Fob20nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDVbXFx1REYwMC1cXHVERjFBXFx1REYxRC1cXHVERjJCXFx1REYzMC1cXHVERjNGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnQW5hdG9saWFuX0hpZXJvZ2x5cGhzJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODExW1xcdURDMDAtXFx1REU0Nl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0FyYWJpYycsXG4gICAgICAgICdibXAnOiAnXFx1MDYwMC1cXHUwNjA0XFx1MDYwNi1cXHUwNjBCXFx1MDYwRC1cXHUwNjFBXFx1MDYxQ1xcdTA2MUVcXHUwNjIwLVxcdTA2M0ZcXHUwNjQxLVxcdTA2NEFcXHUwNjU2LVxcdTA2NkZcXHUwNjcxLVxcdTA2RENcXHUwNkRFLVxcdTA2RkZcXHUwNzUwLVxcdTA3N0ZcXHUwOEEwLVxcdTA4QjRcXHUwOEI2LVxcdTA4QkRcXHUwOEQzLVxcdTA4RTFcXHUwOEUzLVxcdTA4RkZcXHVGQjUwLVxcdUZCQzFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkRcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDNbXFx1REU2MC1cXHVERTdFXXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJcXHVERUYwXFx1REVGMV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0FybWVuaWFuJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwNTMxLVxcdTA1NTZcXHUwNTU5LVxcdTA1ODhcXHUwNThBXFx1MDU4RC1cXHUwNThGXFx1RkIxMy1cXHVGQjE3J1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdBdmVzdGFuJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAyW1xcdURGMDAtXFx1REYzNVxcdURGMzktXFx1REYzRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0JhbGluZXNlJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxQjAwLVxcdTFCNEJcXHUxQjUwLVxcdTFCN0MnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0JhbXVtJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBNkEwLVxcdUE2RjcnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MUFbXFx1REMwMC1cXHVERTM4XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnQmFzc2FfVmFoJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODFBW1xcdURFRDAtXFx1REVFRFxcdURFRjAtXFx1REVGNV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0JhdGFrJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxQkMwLVxcdTFCRjNcXHUxQkZDLVxcdTFCRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0JlbmdhbGknLFxuICAgICAgICAnYm1wJzogJ1xcdTA5ODAtXFx1MDk4M1xcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkMtXFx1MDlDNFxcdTA5QzdcXHUwOUM4XFx1MDlDQi1cXHUwOUNFXFx1MDlEN1xcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUzXFx1MDlFNi1cXHUwOUZFJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdCaGFpa3N1a2knLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDdbXFx1REMwMC1cXHVEQzA4XFx1REMwQS1cXHVEQzM2XFx1REMzOC1cXHVEQzQ1XFx1REM1MC1cXHVEQzZDXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnQm9wb21vZm8nLFxuICAgICAgICAnYm1wJzogJ1xcdTAyRUFcXHUwMkVCXFx1MzEwNS1cXHUzMTJGXFx1MzFBMC1cXHUzMUJBJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdCcmFobWknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1REMwMC1cXHVEQzREXFx1REM1Mi1cXHVEQzZGXFx1REM3Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0JyYWlsbGUnLFxuICAgICAgICAnYm1wJzogJ1xcdTI4MDAtXFx1MjhGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnQnVnaW5lc2UnLFxuICAgICAgICAnYm1wJzogJ1xcdTFBMDAtXFx1MUExQlxcdTFBMUVcXHUxQTFGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdCdWhpZCcsXG4gICAgICAgICdibXAnOiAnXFx1MTc0MC1cXHUxNzUzJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdDYW5hZGlhbl9BYm9yaWdpbmFsJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxNDAwLVxcdTE2N0ZcXHUxOEIwLVxcdTE4RjUnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0NhcmlhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERUEwLVxcdURFRDBdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdDYXVjYXNpYW5fQWxiYW5pYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDFbXFx1REQzMC1cXHVERDYzXFx1REQ2Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0NoYWttYScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNFtcXHVERDAwLVxcdUREMzRcXHVERDM2LVxcdURENDZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdDaGFtJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBQTAwLVxcdUFBMzZcXHVBQTQwLVxcdUFBNERcXHVBQTUwLVxcdUFBNTlcXHVBQTVDLVxcdUFBNUYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0NoZXJva2VlJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHVBQjcwLVxcdUFCQkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0NvbW1vbicsXG4gICAgICAgICdibXAnOiAnXFwwLUBcXFxcWy1gXFxcXHstXFx4QTlcXHhBQi1cXHhCOVxceEJCLVxceEJGXFx4RDdcXHhGN1xcdTAyQjktXFx1MDJERlxcdTAyRTUtXFx1MDJFOVxcdTAyRUMtXFx1MDJGRlxcdTAzNzRcXHUwMzdFXFx1MDM4NVxcdTAzODdcXHUwNTg5XFx1MDYwNVxcdTA2MENcXHUwNjFCXFx1MDYxRlxcdTA2NDBcXHUwNkREXFx1MDhFMlxcdTA5NjRcXHUwOTY1XFx1MEUzRlxcdTBGRDUtXFx1MEZEOFxcdTEwRkJcXHUxNkVCLVxcdTE2RURcXHUxNzM1XFx1MTczNlxcdTE4MDJcXHUxODAzXFx1MTgwNVxcdTFDRDNcXHUxQ0UxXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YzXFx1MUNGNS1cXHUxQ0Y3XFx1MjAwMC1cXHUyMDBCXFx1MjAwRS1cXHUyMDY0XFx1MjA2Ni1cXHUyMDcwXFx1MjA3NC1cXHUyMDdFXFx1MjA4MC1cXHUyMDhFXFx1MjBBMC1cXHUyMEJGXFx1MjEwMC1cXHUyMTI1XFx1MjEyNy1cXHUyMTI5XFx1MjEyQy1cXHUyMTMxXFx1MjEzMy1cXHUyMTREXFx1MjE0Ri1cXHUyMTVGXFx1MjE4OS1cXHUyMThCXFx1MjE5MC1cXHUyNDI2XFx1MjQ0MC1cXHUyNDRBXFx1MjQ2MC1cXHUyN0ZGXFx1MjkwMC1cXHUyQjczXFx1MkI3Ni1cXHUyQjk1XFx1MkI5OC1cXHUyQkM4XFx1MkJDQS1cXHUyQkZFXFx1MkUwMC1cXHUyRTRFXFx1MkZGMC1cXHUyRkZCXFx1MzAwMC1cXHUzMDA0XFx1MzAwNlxcdTMwMDgtXFx1MzAyMFxcdTMwMzAtXFx1MzAzN1xcdTMwM0MtXFx1MzAzRlxcdTMwOUJcXHUzMDlDXFx1MzBBMFxcdTMwRkJcXHUzMEZDXFx1MzE5MC1cXHUzMTlGXFx1MzFDMC1cXHUzMUUzXFx1MzIyMC1cXHUzMjVGXFx1MzI3Ri1cXHUzMkNGXFx1MzM1OC1cXHUzM0ZGXFx1NERDMC1cXHU0REZGXFx1QTcwMC1cXHVBNzIxXFx1QTc4OC1cXHVBNzhBXFx1QTgzMC1cXHVBODM5XFx1QTkyRVxcdUE5Q0ZcXHVBQjVCXFx1RkQzRVxcdUZEM0ZcXHVGRTEwLVxcdUZFMTlcXHVGRTMwLVxcdUZFNTJcXHVGRTU0LVxcdUZFNjZcXHVGRTY4LVxcdUZFNkJcXHVGRUZGXFx1RkYwMS1cXHVGRjIwXFx1RkYzQi1cXHVGRjQwXFx1RkY1Qi1cXHVGRjY1XFx1RkY3MFxcdUZGOUVcXHVGRjlGXFx1RkZFMC1cXHVGRkU2XFx1RkZFOC1cXHVGRkVFXFx1RkZGOS1cXHVGRkZEJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAwW1xcdUREMDAtXFx1REQwMlxcdUREMDctXFx1REQzM1xcdUREMzctXFx1REQzRlxcdUREOTAtXFx1REQ5QlxcdURERDAtXFx1RERGQ1xcdURFRTEtXFx1REVGQl18XFx1RDgyRltcXHVEQ0EwLVxcdURDQTNdfFxcdUQ4MzRbXFx1REMwMC1cXHVEQ0Y1XFx1REQwMC1cXHVERDI2XFx1REQyOS1cXHVERDY2XFx1REQ2QS1cXHVERDdBXFx1REQ4M1xcdUREODRcXHVERDhDLVxcdUREQTlcXHVEREFFLVxcdURERThcXHVERUUwLVxcdURFRjNcXHVERjAwLVxcdURGNTZcXHVERjYwLVxcdURGNzhdfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REZDQlxcdURGQ0UtXFx1REZGRl18XFx1RDgzQltcXHVEQzcxLVxcdURDQjRdfFxcdUQ4M0NbXFx1REMwMC1cXHVEQzJCXFx1REMzMC1cXHVEQzkzXFx1RENBMC1cXHVEQ0FFXFx1RENCMS1cXHVEQ0JGXFx1RENDMS1cXHVEQ0NGXFx1RENEMS1cXHVEQ0Y1XFx1REQwMC1cXHVERDBDXFx1REQxMC1cXHVERDZCXFx1REQ3MC1cXHVEREFDXFx1RERFNi1cXHVEREZGXFx1REUwMVxcdURFMDJcXHVERTEwLVxcdURFM0JcXHVERTQwLVxcdURFNDhcXHVERTUwXFx1REU1MVxcdURFNjAtXFx1REU2NVxcdURGMDAtXFx1REZGRl18XFx1RDgzRFtcXHVEQzAwLVxcdURFRDRcXHVERUUwLVxcdURFRUNcXHVERUYwLVxcdURFRjlcXHVERjAwLVxcdURGNzNcXHVERjgwLVxcdURGRDhdfFxcdUQ4M0VbXFx1REMwMC1cXHVEQzBCXFx1REMxMC1cXHVEQzQ3XFx1REM1MC1cXHVEQzU5XFx1REM2MC1cXHVEQzg3XFx1REM5MC1cXHVEQ0FEXFx1REQwMC1cXHVERDBCXFx1REQxMC1cXHVERDNFXFx1REQ0MC1cXHVERDcwXFx1REQ3My1cXHVERDc2XFx1REQ3QVxcdUREN0MtXFx1RERBMlxcdUREQjAtXFx1RERCOVxcdUREQzAtXFx1RERDMlxcdURERDAtXFx1RERGRlxcdURFNjAtXFx1REU2RF18XFx1REI0MFtcXHVEQzAxXFx1REMyMC1cXHVEQzdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnQ29wdGljJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwM0UyLVxcdTAzRUZcXHUyQzgwLVxcdTJDRjNcXHUyQ0Y5LVxcdTJDRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0N1bmVpZm9ybScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM3MC1cXHVEQzc0XFx1REM4MC1cXHVERDQzXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnQ3lwcmlvdCcsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0N5cmlsbGljJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwNDAwLVxcdTA0ODRcXHUwNDg3LVxcdTA1MkZcXHUxQzgwLVxcdTFDODhcXHUxRDJCXFx1MUQ3OFxcdTJERTAtXFx1MkRGRlxcdUE2NDAtXFx1QTY5RlxcdUZFMkVcXHVGRTJGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdEZXNlcmV0JyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAxW1xcdURDMDAtXFx1REM0Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0RldmFuYWdhcmknLFxuICAgICAgICAnYm1wJzogJ1xcdTA5MDAtXFx1MDk1MFxcdTA5NTMtXFx1MDk2M1xcdTA5NjYtXFx1MDk3RlxcdUE4RTAtXFx1QThGRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnRG9ncmEnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDZbXFx1REMwMC1cXHVEQzNCXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnRHVwbG95YW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MkZbXFx1REMwMC1cXHVEQzZBXFx1REM3MC1cXHVEQzdDXFx1REM4MC1cXHVEQzg4XFx1REM5MC1cXHVEQzk5XFx1REM5Qy1cXHVEQzlGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnRWd5cHRpYW5fSGllcm9nbHlwaHMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MENbXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0VsYmFzYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDFbXFx1REQwMC1cXHVERDI3XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnRXRoaW9waWMnLFxuICAgICAgICAnYm1wJzogJ1xcdTEyMDAtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM1RC1cXHUxMzdDXFx1MTM4MC1cXHUxMzk5XFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdHZW9yZ2lhbicsXG4gICAgICAgICdibXAnOiAnXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEwRkZcXHUxQzkwLVxcdTFDQkFcXHUxQ0JELVxcdTFDQkZcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRCdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnR2xhZ29saXRpYycsXG4gICAgICAgICdibXAnOiAnXFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODM4W1xcdURDMDAtXFx1REMwNlxcdURDMDgtXFx1REMxOFxcdURDMUItXFx1REMyMVxcdURDMjNcXHVEQzI0XFx1REMyNi1cXHVEQzJBXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnR290aGljJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAwW1xcdURGMzAtXFx1REY0QV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0dyYW50aGEnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1REYwMC1cXHVERjAzXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0MtXFx1REY0NFxcdURGNDdcXHVERjQ4XFx1REY0Qi1cXHVERjREXFx1REY1MFxcdURGNTdcXHVERjVELVxcdURGNjNcXHVERjY2LVxcdURGNkNcXHVERjcwLVxcdURGNzRdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdHcmVlaycsXG4gICAgICAgICdibXAnOiAnXFx1MDM3MC1cXHUwMzczXFx1MDM3NS1cXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODRcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNFMVxcdTAzRjAtXFx1MDNGRlxcdTFEMjYtXFx1MUQyQVxcdTFENUQtXFx1MUQ2MVxcdTFENjYtXFx1MUQ2QVxcdTFEQkZcXHUxRjAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQzRcXHUxRkM2LVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkRELVxcdTFGRUZcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkVcXHUyMTI2XFx1QUI2NScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERDQwLVxcdUREOEVcXHVEREEwXXxcXHVEODM0W1xcdURFMDAtXFx1REU0NV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0d1amFyYXRpJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwQTgxLVxcdTBBODNcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkMtXFx1MEFDNVxcdTBBQzctXFx1MEFDOVxcdTBBQ0ItXFx1MEFDRFxcdTBBRDBcXHUwQUUwLVxcdTBBRTNcXHUwQUU2LVxcdTBBRjFcXHUwQUY5LVxcdTBBRkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0d1bmphbGFfR29uZGknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDdbXFx1REQ2MC1cXHVERDY1XFx1REQ2N1xcdURENjhcXHVERDZBLVxcdUREOEVcXHVERDkwXFx1REQ5MVxcdUREOTMtXFx1REQ5OFxcdUREQTAtXFx1RERBOV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0d1cm11a2hpJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwQTAxLVxcdTBBMDNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBM0NcXHUwQTNFLVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEItXFx1MEE0RFxcdTBBNTFcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE2Ni1cXHUwQTc2J1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdIYW4nLFxuICAgICAgICAnYm1wJzogJ1xcdTJFODAtXFx1MkU5OVxcdTJFOUItXFx1MkVGM1xcdTJGMDAtXFx1MkZENVxcdTMwMDVcXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzOC1cXHUzMDNCXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkVGXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5JyxcbiAgICAgICAgJ2FzdHJhbCc6ICdbXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXFx1RDg3NC1cXHVEODc5XVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXFx1REVCMC1cXHVERkZGXXxcXHVEODdBW1xcdURDMDAtXFx1REZFMF18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdIYW5ndWwnLFxuICAgICAgICAnYm1wJzogJ1xcdTExMDAtXFx1MTFGRlxcdTMwMkVcXHUzMDJGXFx1MzEzMS1cXHUzMThFXFx1MzIwMC1cXHUzMjFFXFx1MzI2MC1cXHUzMjdFXFx1QTk2MC1cXHVBOTdDXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RkZBMC1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdIYW5pZmlfUm9oaW5neWEnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDNbXFx1REQwMC1cXHVERDI3XFx1REQzMC1cXHVERDM5XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSGFudW5vbycsXG4gICAgICAgICdibXAnOiAnXFx1MTcyMC1cXHUxNzM0J1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdIYXRyYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVEQ0ZCLVxcdURDRkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdIZWJyZXcnLFxuICAgICAgICAnYm1wJzogJ1xcdTA1OTEtXFx1MDVDN1xcdTA1RDAtXFx1MDVFQVxcdTA1RUYtXFx1MDVGNFxcdUZCMUQtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQjRGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdIaXJhZ2FuYScsXG4gICAgICAgICdibXAnOiAnXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODJDW1xcdURDMDEtXFx1REQxRV18XFx1RDgzQ1xcdURFMDAnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0ltcGVyaWFsX0FyYW1haWMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REM0MC1cXHVEQzU1XFx1REM1Ny1cXHVEQzVGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5oZXJpdGVkJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwMzAwLVxcdTAzNkZcXHUwNDg1XFx1MDQ4NlxcdTA2NEItXFx1MDY1NVxcdTA2NzBcXHUwOTUxXFx1MDk1MlxcdTFBQjAtXFx1MUFCRVxcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNFMFxcdTFDRTItXFx1MUNFOFxcdTFDRURcXHUxQ0Y0XFx1MUNGOFxcdTFDRjlcXHUxREMwLVxcdTFERjlcXHUxREZCLVxcdTFERkZcXHUyMDBDXFx1MjAwRFxcdTIwRDAtXFx1MjBGMFxcdTMwMkEtXFx1MzAyRFxcdTMwOTlcXHUzMDlBXFx1RkUwMC1cXHVGRTBGXFx1RkUyMC1cXHVGRTJEJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAwW1xcdURERkRcXHVERUUwXXxcXHVEODA0XFx1REYzQnxcXHVEODM0W1xcdURENjctXFx1REQ2OVxcdUREN0ItXFx1REQ4MlxcdUREODUtXFx1REQ4QlxcdUREQUEtXFx1RERBRF18XFx1REI0MFtcXHVERDAwLVxcdURERUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdJbnNjcmlwdGlvbmFsX1BhaGxhdmknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REY2MC1cXHVERjcyXFx1REY3OC1cXHVERjdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnSW5zY3JpcHRpb25hbF9QYXJ0aGlhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVERjQwLVxcdURGNTVcXHVERjU4LVxcdURGNUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdKYXZhbmVzZScsXG4gICAgICAgICdibXAnOiAnXFx1QTk4MC1cXHVBOUNEXFx1QTlEMC1cXHVBOUQ5XFx1QTlERVxcdUE5REYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0thaXRoaScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNFtcXHVEQzgwLVxcdURDQzFcXHVEQ0NEXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnS2FubmFkYScsXG4gICAgICAgICdibXAnOiAnXFx1MEM4MC1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCQy1cXHUwQ0M0XFx1MENDNi1cXHUwQ0M4XFx1MENDQS1cXHUwQ0NEXFx1MENENVxcdTBDRDZcXHUwQ0RFXFx1MENFMC1cXHUwQ0UzXFx1MENFNi1cXHUwQ0VGXFx1MENGMVxcdTBDRjInXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0thdGFrYW5hJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUzMEExLVxcdTMwRkFcXHUzMEZELVxcdTMwRkZcXHUzMUYwLVxcdTMxRkZcXHUzMkQwLVxcdTMyRkVcXHUzMzAwLVxcdTMzNTdcXHVGRjY2LVxcdUZGNkZcXHVGRjcxLVxcdUZGOUQnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MkNcXHVEQzAwJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdLYXlhaF9MaScsXG4gICAgICAgICdibXAnOiAnXFx1QTkwMC1cXHVBOTJEXFx1QTkyRidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnS2hhcm9zaHRoaScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVERTAwLVxcdURFMDNcXHVERTA1XFx1REUwNlxcdURFMEMtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzNVxcdURFMzgtXFx1REUzQVxcdURFM0YtXFx1REU0OFxcdURFNTAtXFx1REU1OF0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0tobWVyJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxNzgwLVxcdTE3RERcXHUxN0UwLVxcdTE3RTlcXHUxN0YwLVxcdTE3RjlcXHUxOUUwLVxcdTE5RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0tob2praScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNFtcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFM0VdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdLaHVkYXdhZGknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1REVCMC1cXHVERUVBXFx1REVGMC1cXHVERUY5XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTGFvJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCOVxcdTBFQkItXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRUM4LVxcdTBFQ0RcXHUwRUQwLVxcdTBFRDlcXHUwRURDLVxcdTBFREYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0xhdGluJyxcbiAgICAgICAgJ2JtcCc6ICdBLVphLXpcXHhBQVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQjhcXHUwMkUwLVxcdTAyRTRcXHUxRDAwLVxcdTFEMjVcXHUxRDJDLVxcdTFENUNcXHUxRDYyLVxcdTFENjVcXHUxRDZCLVxcdTFENzdcXHUxRDc5LVxcdTFEQkVcXHUxRTAwLVxcdTFFRkZcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMkFcXHUyMTJCXFx1MjEzMlxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyQzYwLVxcdTJDN0ZcXHVBNzIyLVxcdUE3ODdcXHVBNzhCLVxcdUE3QjlcXHVBN0Y3LVxcdUE3RkZcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNjRcXHVGQjAwLVxcdUZCMDZcXHVGRjIxLVxcdUZGM0FcXHVGRjQxLVxcdUZGNUEnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0xlcGNoYScsXG4gICAgICAgICdibXAnOiAnXFx1MUMwMC1cXHUxQzM3XFx1MUMzQi1cXHUxQzQ5XFx1MUM0RC1cXHUxQzRGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdMaW1idScsXG4gICAgICAgICdibXAnOiAnXFx1MTkwMC1cXHUxOTFFXFx1MTkyMC1cXHUxOTJCXFx1MTkzMC1cXHUxOTNCXFx1MTk0MFxcdTE5NDQtXFx1MTk0RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTGluZWFyX0EnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDFbXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTGluZWFyX0InLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdMaXN1JyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBNEQwLVxcdUE0RkYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ0x5Y2lhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERTgwLVxcdURFOUNdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdMeWRpYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REQyMC1cXHVERDM5XFx1REQzRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ01haGFqYW5pJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA0W1xcdURENTAtXFx1REQ3Nl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ01ha2FzYXInLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDdbXFx1REVFMC1cXHVERUY4XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTWFsYXlhbGFtJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwRDAwLVxcdTBEMDNcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBENDRcXHUwRDQ2LVxcdTBENDhcXHUwRDRBLVxcdTBENEZcXHUwRDU0LVxcdTBENjNcXHUwRDY2LVxcdTBEN0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ01hbmRhaWMnLFxuICAgICAgICAnYm1wJzogJ1xcdTA4NDAtXFx1MDg1QlxcdTA4NUUnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ01hbmljaGFlYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REVDMC1cXHVERUU2XFx1REVFQi1cXHVERUY2XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTWFyY2hlbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwN1tcXHVEQzcwLVxcdURDOEZcXHVEQzkyLVxcdURDQTdcXHVEQ0E5LVxcdURDQjZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdNYXNhcmFtX0dvbmRpJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA3W1xcdUREMDAtXFx1REQwNlxcdUREMDhcXHVERDA5XFx1REQwQi1cXHVERDM2XFx1REQzQVxcdUREM0NcXHVERDNEXFx1REQzRi1cXHVERDQ3XFx1REQ1MC1cXHVERDU5XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTWVkZWZhaWRyaW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MUJbXFx1REU0MC1cXHVERTlBXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTWVldGVpX01heWVrJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBQUUwLVxcdUFBRjZcXHVBQkMwLVxcdUFCRURcXHVBQkYwLVxcdUFCRjknXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ01lbmRlX0tpa2FrdWknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XFx1RENDNy1cXHVEQ0Q2XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTWVyb2l0aWNfQ3Vyc2l2ZScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVEREEwLVxcdUREQjdcXHVEREJDLVxcdUREQ0ZcXHVEREQyLVxcdURERkZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdNZXJvaXRpY19IaWVyb2dseXBocycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVERDgwLVxcdUREOUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdNaWFvJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTAtXFx1REY3RVxcdURGOEYtXFx1REY5Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ01vZGknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDVbXFx1REUwMC1cXHVERTQ0XFx1REU1MC1cXHVERTU5XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTW9uZ29saWFuJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxODAwXFx1MTgwMVxcdTE4MDRcXHUxODA2LVxcdTE4MEVcXHUxODEwLVxcdTE4MTlcXHUxODIwLVxcdTE4NzhcXHUxODgwLVxcdTE4QUEnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDVbXFx1REU2MC1cXHVERTZDXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTXJvJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODFBW1xcdURFNDAtXFx1REU1RVxcdURFNjAtXFx1REU2OVxcdURFNkVcXHVERTZGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTXVsdGFuaScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNFtcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE5XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTXlhbm1hcicsXG4gICAgICAgICdibXAnOiAnXFx1MTAwMC1cXHUxMDlGXFx1QTlFMC1cXHVBOUZFXFx1QUE2MC1cXHVBQTdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdOYWJhdGFlYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REM4MC1cXHVEQzlFXFx1RENBNy1cXHVEQ0FGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnTmV3X1RhaV9MdWUnLFxuICAgICAgICAnYm1wJzogJ1xcdTE5ODAtXFx1MTlBQlxcdTE5QjAtXFx1MTlDOVxcdTE5RDAtXFx1MTlEQVxcdTE5REVcXHUxOURGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdOZXdhJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA1W1xcdURDMDAtXFx1REM1OVxcdURDNUJcXHVEQzVEXFx1REM1RV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ05rbycsXG4gICAgICAgICdibXAnOiAnXFx1MDdDMC1cXHUwN0ZBXFx1MDdGRC1cXHUwN0ZGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdOdXNodScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgxQlxcdURGRTF8XFx1RDgyQ1tcXHVERDcwLVxcdURFRkJdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdPZ2hhbScsXG4gICAgICAgICdibXAnOiAnXFx1MTY4MC1cXHUxNjlDJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdPbF9DaGlraScsXG4gICAgICAgICdibXAnOiAnXFx1MUM1MC1cXHUxQzdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdPbGRfSHVuZ2FyaWFuJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAzW1xcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMlxcdURDRkEtXFx1RENGRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ09sZF9JdGFsaWMnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDBbXFx1REYwMC1cXHVERjIzXFx1REYyRC1cXHVERjJGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnT2xkX05vcnRoX0FyYWJpYW4nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REU4MC1cXHVERTlGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnT2xkX1Blcm1pYycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERjUwLVxcdURGN0FdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdPbGRfUGVyc2lhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMFtcXHVERkEwLVxcdURGQzNcXHVERkM4LVxcdURGRDVdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdPbGRfU29nZGlhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwM1tcXHVERjAwLVxcdURGMjddJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdPbGRfU291dGhfQXJhYmlhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVERTYwLVxcdURFN0ZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdPbGRfVHVya2ljJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAzW1xcdURDMDAtXFx1REM0OF0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ09yaXlhJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwQjAxLVxcdTBCMDNcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzQy1cXHUwQjQ0XFx1MEI0N1xcdTBCNDhcXHUwQjRCLVxcdTBCNERcXHUwQjU2XFx1MEI1N1xcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYzXFx1MEI2Ni1cXHUwQjc3J1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdPc2FnZScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMVtcXHVEQ0IwLVxcdURDRDNcXHVEQ0Q4LVxcdURDRkJdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdPc21hbnlhJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAxW1xcdURDODAtXFx1REM5RFxcdURDQTAtXFx1RENBOV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1BhaGF3aF9IbW9uZycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgxQVtcXHVERjAwLVxcdURGNDVcXHVERjUwLVxcdURGNTlcXHVERjVCLVxcdURGNjFcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdQYWxteXJlbmUnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDJbXFx1REM2MC1cXHVEQzdGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnUGF1X0Npbl9IYXUnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDZbXFx1REVDMC1cXHVERUY4XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnUGhhZ3NfUGEnLFxuICAgICAgICAnYm1wJzogJ1xcdUE4NDAtXFx1QTg3NydcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnUGhvZW5pY2lhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwMltcXHVERDAwLVxcdUREMUJcXHVERDFGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnUHNhbHRlcl9QYWhsYXZpJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAyW1xcdURGODAtXFx1REY5MVxcdURGOTktXFx1REY5Q1xcdURGQTktXFx1REZBRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1JlamFuZycsXG4gICAgICAgICdibXAnOiAnXFx1QTkzMC1cXHVBOTUzXFx1QTk1RidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnUnVuaWMnLFxuICAgICAgICAnYm1wJzogJ1xcdTE2QTAtXFx1MTZFQVxcdTE2RUUtXFx1MTZGOCdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnU2FtYXJpdGFuJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwODAwLVxcdTA4MkRcXHUwODMwLVxcdTA4M0UnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1NhdXJhc2h0cmEnLFxuICAgICAgICAnYm1wJzogJ1xcdUE4ODAtXFx1QThDNVxcdUE4Q0UtXFx1QThEOSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnU2hhcmFkYScsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNFtcXHVERDgwLVxcdUREQ0RcXHVEREQwLVxcdUREREZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdTaGF2aWFuJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAxW1xcdURDNTAtXFx1REM3Rl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1NpZGRoYW0nLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDVbXFx1REQ4MC1cXHVEREI1XFx1RERCOC1cXHVEREREXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnU2lnbldyaXRpbmcnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MzZbXFx1REMwMC1cXHVERThCXFx1REU5Qi1cXHVERTlGXFx1REVBMS1cXHVERUFGXSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnU2luaGFsYScsXG4gICAgICAgICdibXAnOiAnXFx1MEQ4MlxcdTBEODNcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MERDQVxcdTBEQ0YtXFx1MERENFxcdTBERDZcXHUwREQ4LVxcdTBEREZcXHUwREU2LVxcdTBERUZcXHUwREYyLVxcdTBERjQnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1RERFMS1cXHVEREY0XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnU29nZGlhbicsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwM1tcXHVERjMwLVxcdURGNTldJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdTb3JhX1NvbXBlbmcnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDRbXFx1RENEMC1cXHVEQ0U4XFx1RENGMC1cXHVEQ0Y5XSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnU295b21ibycsXG4gICAgICAgICdhc3RyYWwnOiAnXFx1RDgwNltcXHVERTUwLVxcdURFODNcXHVERTg2LVxcdURFQTJdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdTdW5kYW5lc2UnLFxuICAgICAgICAnYm1wJzogJ1xcdTFCODAtXFx1MUJCRlxcdTFDQzAtXFx1MUNDNydcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnU3lsb3RpX05hZ3JpJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBODAwLVxcdUE4MkInXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1N5cmlhYycsXG4gICAgICAgICdibXAnOiAnXFx1MDcwMC1cXHUwNzBEXFx1MDcwRi1cXHUwNzRBXFx1MDc0RC1cXHUwNzRGXFx1MDg2MC1cXHUwODZBJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdUYWdhbG9nJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTQnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1RhZ2JhbndhJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzcyXFx1MTc3MydcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnVGFpX0xlJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzQnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1RhaV9UaGFtJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUxQTIwLVxcdTFBNUVcXHUxQTYwLVxcdTFBN0NcXHUxQTdGLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQUEwLVxcdTFBQUQnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1RhaV9WaWV0JyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBQTgwLVxcdUFBQzJcXHVBQURCLVxcdUFBREYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1Rha3JpJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA1W1xcdURFODAtXFx1REVCN1xcdURFQzAtXFx1REVDOV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1RhbWlsJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwQjgyXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkJFLVxcdTBCQzJcXHUwQkM2LVxcdTBCQzhcXHUwQkNBLVxcdTBCQ0RcXHUwQkQwXFx1MEJEN1xcdTBCRTYtXFx1MEJGQSdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnVGFuZ3V0JyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODFCXFx1REZFMHxbXFx1RDgxQy1cXHVEODIwXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MjFbXFx1REMwMC1cXHVERkYxXXxcXHVEODIyW1xcdURDMDAtXFx1REVGMl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1RlbHVndScsXG4gICAgICAgICdibXAnOiAnXFx1MEMwMC1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRC1cXHUwQzQ0XFx1MEM0Ni1cXHUwQzQ4XFx1MEM0QS1cXHUwQzREXFx1MEM1NVxcdTBDNTZcXHUwQzU4LVxcdTBDNUFcXHUwQzYwLVxcdTBDNjNcXHUwQzY2LVxcdTBDNkZcXHUwQzc4LVxcdTBDN0YnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1RoYWFuYScsXG4gICAgICAgICdibXAnOiAnXFx1MDc4MC1cXHUwN0IxJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdUaGFpJyxcbiAgICAgICAgJ2JtcCc6ICdcXHUwRTAxLVxcdTBFM0FcXHUwRTQwLVxcdTBFNUInXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1RpYmV0YW4nLFxuICAgICAgICAnYm1wJzogJ1xcdTBGMDAtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGNzEtXFx1MEY5N1xcdTBGOTktXFx1MEZCQ1xcdTBGQkUtXFx1MEZDQ1xcdTBGQ0UtXFx1MEZENFxcdTBGRDlcXHUwRkRBJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdUaWZpbmFnaCcsXG4gICAgICAgICdibXAnOiAnXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJENzBcXHUyRDdGJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdUaXJodXRhJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODA1W1xcdURDODAtXFx1RENDN1xcdURDRDAtXFx1RENEOV0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1VnYXJpdGljJyxcbiAgICAgICAgJ2FzdHJhbCc6ICdcXHVEODAwW1xcdURGODAtXFx1REY5RFxcdURGOUZdJ1xuICAgIH0sXG4gICAge1xuICAgICAgICAnbmFtZSc6ICdWYWknLFxuICAgICAgICAnYm1wJzogJ1xcdUE1MDAtXFx1QTYyQidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ25hbWUnOiAnV2FyYW5nX0NpdGknLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDZbXFx1RENBMC1cXHVEQ0YyXFx1RENGRl0nXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1lpJyxcbiAgICAgICAgJ2JtcCc6ICdcXHVBMDAwLVxcdUE0OENcXHVBNDkwLVxcdUE0QzYnXG4gICAgfSxcbiAgICB7XG4gICAgICAgICduYW1lJzogJ1phbmFiYXphcl9TcXVhcmUnLFxuICAgICAgICAnYXN0cmFsJzogJ1xcdUQ4MDZbXFx1REUwMC1cXHVERTQ3XSdcbiAgICB9XG5dO1xuIiwiaWYgKCF3aW5kb3cuU2VydmVkT25jZSkge1xuXHQoZnVuY3Rpb24gKCkge1xuXHRcdHdpbmRvdy5TZXJ2ZWRPbmNlID0gdHJ1ZTtcblx0XHR3aW5kb3cuWFJlZ0V4cCA9IHJlcXVpcmUoXCJ4cmVnZXhwXCIpO1xuXHRcdHdpbmRvdy5zY29wZSA9IHJlcXVpcmUoJy4uLy4uL2xpYi9zY29wZVJ1bnRpbWUuanMnKTtcblx0XHR3aW5kb3cuU2NvcGVBcGkgPSByZXF1aXJlKCcuLi8uLi9saWIvc2NvcGVSdW50aW1lQXBpLmpzJykoc2NvcGUpO1xuXHRcdHdpbmRvdy5zb2NrZXQgPSBpby5jb25uZWN0KCk7XG5cdFx0c2NvcGUuZGVjbGFyYXRpb25FeHByZXNzaW9uKHtcblx0XHRcdHR5cGU6IFwibGV0XCIsIFxuXHRcdFx0bmFtZTogXCJzb2NrZXRcIiwgXG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRlbWl0IChjaGFubmVsLCBkYXRhKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHNvY2tldC5lbWl0KGNoYW5uZWwsIFNjb3BlQXBpLnRvSlNPTihkYXRhKSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9uIChjaGFubmVsLCBoYW5kbGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gc29ja2V0Lm9uKGNoYW5uZWwsIGhhbmRsZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGZ1bmN0aW9uIGF0dHJUb01hcChhdHRyaWJ1dGVzKSB7XG5cdFx0XHRsZXQgcmVzdWx0ID0gc2NvcGUubWFwRXhwcmVzc2lvbigpO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRcdGxldCBuYW1lID0gYXR0cmlidXRlc1tpXS5uYW1lO1xuXHRcdFx0XHRsZXQgdmFsdWUgPSBhdHRyaWJ1dGVzW2ldLnZhbHVlO1xuXHRcdFx0XHRyZXN1bHRbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdGZ1bmN0aW9uIHJhbmRTdHIgKGxlbj0xNikge1xuXHRcdFx0bGV0IHJlc3VsdCA9IFwiXCI7XG5cdFx0XHRsZXQgY2hhcnMgPSBcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG5cdFx0XHRcdHJlc3VsdCArPSBjaGFyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFycy5sZW5ndGgpXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc3RhdGVQcm94eSAoaW5zdGFuY2UsIGVsZW1lbnQpIHtcblx0XHRcdGxldCBzdGF0ZSA9IGluc3RhbmNlLnN0YXRlO1xuXHRcdFx0bGV0IHN0YXRlUHJveHlUcmFwcyA9IHtcblx0XHRcdFx0Z2V0ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImdldCBzdGF0ZS1wcm94eTpcIiwgcHJvcCwgdGFyZ2V0W3Byb3BdKTtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHRhcmdldFtwcm9wXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdFx0aWYgKHByb3AgPT09IFwic2V0XCIpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChuYW1lLCB2YWwpIHtcblx0XHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwic2V0IHN0YXRlLXByb3h5KDIpOlwiLCBuYW1lLCB2YWwpO1xuXHRcdFx0XHRcdFx0XHRcdGxldCByZXN1bHQgPSB0YXJnZXRbcHJvcF0obmFtZSwgdmFsKTtcblx0XHRcdFx0XHRcdFx0XHRsZXQgbmV3RWxlbWVudCA9IHNjb3BlLmlkZW50aWZpZXIoXCJyZW5kZXJFbmdpbmVcIikucmVuZGVyQ2hpbGRyZW4oaW5zdGFuY2UucmVuZGVyKCkpO1xuXHRcdFx0XHRcdFx0XHRcdCQoZWxlbWVudCkucmVwbGFjZVdpdGgobmV3RWxlbWVudCk7XG5cdFx0XHRcdFx0XHRcdFx0ZWxlbWVudCA9IG5ld0VsZW1lbnQ7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0W3Byb3BdID09PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBuZXcgUHJveHkodGFyZ2V0W3Byb3BdLCBzdGF0ZVByb3h5VHJhcHMpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIHRhcmdldFtwcm9wXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdFx0fSxcblx0XHRcdFx0c2V0ICh0YXJnZXQsIHByb3AsIHZhbCkge1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJzZXQgc3RhdGUtcHJveHk6XCIsIHByb3AsIHRhcmdldFtwcm9wXSwgdmFsKTtcblx0XHRcdFx0XHR0YXJnZXRbcHJvcF0gPSB2YWw7XG5cdFx0XHRcdFx0bGV0IG5ld0VsZW1lbnQgPSBzY29wZS5pZGVudGlmaWVyKFwicmVuZGVyRW5naW5lXCIpLnJlbmRlckNoaWxkcmVuKGluc3RhbmNlLnJlbmRlcigpKTtcblx0XHRcdFx0XHQkKGVsZW1lbnQpLnJlcGxhY2VXaXRoKG5ld0VsZW1lbnQpO1xuXHRcdFx0XHRcdGVsZW1lbnQgPSBuZXdFbGVtZW50O1xuXHRcdFx0XHRcdHJldHVybiB2YWw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGluc3RhbmNlLnN0YXRlID0gbmV3IFByb3h5KHN0YXRlLCBzdGF0ZVByb3h5VHJhcHMpO1xuXHRcdFx0aW5zdGFuY2Uuc2V0U3RhdGUgPSAobmV3U3RhdGUpID0+IHtcblx0XHRcdFx0Zm9yIChsZXQgW2tleSwgdmFsXSBvZiBzdGF0ZSkge1xuXHRcdFx0XHRcdGlmICghbmV3U3RhdGUuaGFzKGtleSkpIHtcblx0XHRcdFx0XHRcdG5ld1N0YXRlLnNldChrZXksIHZhbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0YXRlID0gbmV3U3RhdGU7XG5cdFx0XHRcdGluc3RhbmNlLnN0YXRlID0gbmV3IFByb3h5KG5ld1N0YXRlLCBzdGF0ZVByb3h5VHJhcHMpO1xuXHRcdFx0XHRsZXQgbmV3RWxlbWVudCA9IHNjb3BlLmlkZW50aWZpZXIoXCJyZW5kZXJFbmdpbmVcIikucmVuZGVyQ2hpbGRyZW4oaW5zdGFuY2UucmVuZGVyKCkpO1xuXHRcdFx0XHQkKGVsZW1lbnQpLnJlcGxhY2VXaXRoKG5ld0VsZW1lbnQpO1xuXHRcdFx0XHRlbGVtZW50ID0gbmV3RWxlbWVudDtcblx0XHRcdFx0cmV0dXJuIGluc3RhbmNlLnN0YXRlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHNjb3BlLmRlY2xhcmF0aW9uRXhwcmVzc2lvbih7XG5cdFx0XHR0eXBlOiBcImxldFwiLFxuXHRcdFx0bmFtZTogXCJ1c2VyVGFnU3RhdGVzXCIsXG5cdFx0XHR2YWx1ZTogc2NvcGUubWFwRXhwcmVzc2lvbigpXG5cdFx0fSk7XG5cdFx0bGV0IGxhc3RQYWludCA9IDA7XG5cdFx0bGV0IG1pblBhaW50SW50ZXJ2YWwgPSAxNTA7XG5cdFx0c2NvcGUuZGVjbGFyYXRpb25FeHByZXNzaW9uKHtcblx0XHRcdHR5cGU6IFwibGV0XCIsXG5cdFx0XHRuYW1lOiBcInJlbmRlckVuZ2luZVwiLFxuXHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0dHJpZ2dlclBhaW50ICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzY29wZS5pZGVudGlmaWVyKFwicmVuZGVyRW5naW5lXCIpLnBhaW50KTtcblx0XHRcdFx0fSxcblx0XHRcdFx0cmVuZGVyVXNlclRhZyAodGFnTmFtZSwgc2MsIGVsZW1lbnQpIHtcblx0XHRcdFx0XHRsZXQgYXR0ciA9ICQoZWxlbWVudCkuZGF0YShcInJhd0F0dHJpYnV0ZXNcIikgfHwgc2NvcGUubWFwRXhwcmVzc2lvbigpO1xuXHRcdFx0XHRcdGxldCBpZCA9IHJhbmRTdHIoKTtcblx0XHRcdFx0XHRsZXQgdENsYXNzID0gc2MoYXR0ciwgZWxlbWVudC5jaGlsZE5vZGVzKTtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHRDbGFzcy5yZW5kZXIgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0bGV0IG5vZGUgPSB0Q2xhc3MucmVuZGVyKCk7XG5cdFx0XHRcdFx0XHRzY29wZS5pZGVudGlmaWVyKFwidXNlclRhZ1N0YXRlc1wiKS5zZXQoaWQsIHRDbGFzcyk7XG5cdFx0XHRcdFx0XHRpZiAodENsYXNzLnN0YXRlICYmIHRDbGFzcy5zdGF0ZSBpbnN0YW5jZW9mIE1hcCkge1xuXHRcdFx0XHRcdFx0XHRzdGF0ZVByb3h5KHRDbGFzcywgbm9kZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAodENsYXNzLmxpc3RlbmVycyAmJiB0Q2xhc3MubGlzdGVuZXJzIGluc3RhbmNlb2YgTWFwKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAobGV0IFtldmVudCwgZnVuY10gb2YgdENsYXNzLmxpc3RlbmVycykge1xuXHRcdFx0XHRcdFx0XHRcdCQobm9kZSkub24oZXZlbnQsIGZ1bmMpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gbm9kZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gTm8gcmVuZGVyIGZ1bmN0aW9uIGZvdW5kLCBzbyByZXR1cm4gb3JpZ2luYWwgZWxlbWVudC5cblx0XHRcdFx0XHRyZXR1cm4gZWxlbWVudDtcblx0XHRcdFx0fSxcblx0XHRcdFx0cmVuZGVyQ2hpbGRyZW4gKG4pIHtcblx0XHRcdFx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0XHRcdFx0bGV0IHVzZXJUYWdzID0gU2NvcGVBcGkuZ2V0QWxsVGFncygpO1xuXHRcdFx0XHRcdC8qaWYoZG9jdW1lbnQuY29udGFpbnMobikpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwicmVuZGVyIGFmdGVyIHBhaW50XCIpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcInJlbmRlciBiZWZvcmUgcGFpbnRcIik7XG5cdFx0XHRcdFx0fSovXG5cdFx0XHRcdFx0Zm9yIChsZXQgW3RhZ05hbWUsIHNjXSBvZiB1c2VyVGFncykge1xuXHRcdFx0XHRcdFx0JChuKS5maW5kKHRhZ05hbWUpLmVhY2goZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdFx0bGV0IG5vZGUgPSBzZWxmLnJlbmRlclVzZXJUYWcodGFnTmFtZSwgc2MsIGVsZW1lbnQpO1xuXHRcdFx0XHRcdFx0XHRlbGVtZW50LnJlcGxhY2VXaXRoKHNlbGYucmVuZGVyQ2hpbGRyZW4obm9kZSkpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBuO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRwYWludCgpIHtcblx0XHRcdFx0XHRsZXQgc2VsZiA9IHNjb3BlLmlkZW50aWZpZXIoXCJyZW5kZXJFbmdpbmVcIik7XG5cdFx0XHRcdFx0c2VsZi5yZW5kZXJDaGlsZHJlbihkb2N1bWVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHR3aGVuUmVhZHkoc2NvcGUuaWRlbnRpZmllcihcInJlbmRlckVuZ2luZVwiKS50cmlnZ2VyUGFpbnQpO1xuXHRcdCQoJ1tiaW5kLWluXScpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGJpbmRlciA9ICQodGhpcykuYXR0cignYmluZC1pbicpLnNwbGl0KCc6Jyk7XG5cdFx0XHR2YXIgZXZlbnQgPSBiaW5kZXJbMF07XG5cdFx0XHR2YXIgaWQgPSBiaW5kZXJbMV07XG5cdFx0XHQkKHRoaXMpLm9uKGV2ZW50LCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRzY29wZS5pZGVudGlmaWVyKFwic29ja2V0XCIpLmVtaXQoaWQsICQodGhpcykudmFsKCkpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHQkKCdbYmluZC1vdXRdJykuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgY2hhbm5lbCA9ICQodGhpcykuYXR0cignYmluZC1vdXQnKTtcblx0XHRcdHZhciBlbCA9ICQodGhpcyk7XG5cdFx0XHRzb2NrZXQub24oY2hhbm5lbCwgZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0ZWwuaHRtbChkYXRhKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9KCkpO1xufSJdfQ==
