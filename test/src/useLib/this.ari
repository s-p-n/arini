// Arini stores properties in arrays just like the one below..
// We don't have to name it 'this'- we can name it anything..ish
let this = [
	"public"	= [],
	"protected"	= []
];

// We can only `use` functions- not Arrays.
// So let's create a function called 'construct'
// It doesn't need to be named 'construct'- we can name it anything..ish
private construct {
	// This function must return the variable we created to store the properties.
	// Our Array is formatted like something Arini can use- that's why this works.
	// Instead of using a newly created object, when we `use construct`
	// the properties in this.public and this.protected are
	// referenced by the object created for a GotThis instance.
	return this;
};

// When we use construct, the public and protected
// properties we create will be accessible by 'this'
// and properties assigned to this['public'] are
// accessible by GotThis instances.
use construct;


// Note: doing this sort of thing below negates the
// access control a bit, but we still have 'private' which we 
// did not include, and 'let' which we cannot include, so there's that.
// With that said:

// Let's pass control to the user of this class.
public set (access="public", name, value) {
	// The user can create/change properties with access control using:
	//   YES: [GotThis].set('protected', 'theName', 'the value.')
	//   YES: [GotThis].set('get123', {return 123;});
	//   YES: [GotThis].set('protected', 'bar');
	//   YES: [GotThis].set('baz');
	//   NO: [GotThis].set()
	//   NO: [GotThis].set('public');
	//   NO: [GotThis].set('protected');

	// set(?,?)
	if (value is undefined) {
		// set(?)
		if (name is undefined) {
			// set('foo') // public foo = undefined
			if (access isnt 'public'
			and access isnt 'protected') {
				name = access;
				access = 'public';

			// set() or set('public' | 'protected') // do nothing
			} else {
				// No name
				return undefined;
			};

		// set('foo', 123);
		} else if (access isnt 'public'
		and access isnt 'protected') {
			value = name;
			name = access;
			access = "public";
		};

		// set(public|protected, ?); is what's left. that works as-is. 
	};
	return this[access][name] = value;
};

// Now a way to get protected or public properties..
public get (name) {
	return this['protected'][name] or this['public'][name];
};

public getAllProps () {
	return this;
};