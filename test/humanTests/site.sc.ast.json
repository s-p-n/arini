{
  "type": "controlCode",
  "body": [
    {
      "type": "controlCode",
      "body": [
        {
          "type": "controlCode",
          "body": [
            {
              "type": "controlCode",
              "body": [
                {
                  "type": "controlCode",
                  "body": [
                    {
                      "type": "controlCode",
                      "body": [
                        {
                          "type": "controlCode",
                          "body": [
                            {
                              "type": "controlCode",
                              "body": [
                                {
                                  "type": "controlCode",
                                  "body": [
                                    {
                                      "type": "controlCode",
                                      "body": [
                                        {
                                          "type": "controlCode",
                                          "body": [
                                            {
                                              "type": "controlCode",
                                              "body": [
                                                {
                                                  "type": "controlCode",
                                                  "body": [
                                                    {
                                                      "type": "controlCode",
                                                      "body": [
                                                        {
                                                          "type": "controlCode",
                                                          "body": [],
                                                          "loc": {
                                                            "start": {
                                                              "line": 1,
                                                              "column": 0
                                                            },
                                                            "end": {
                                                              "line": 1,
                                                              "column": 3
                                                            }
                                                          },
                                                          "raw": "let",
                                                          "line": 1
                                                        },
                                                        {
                                                          "type": "declarationExpression",
                                                          "body": [
                                                            "let",
                                                            "server",
                                                            {
                                                              "type": "invokeExpression",
                                                              "body": [
                                                                {
                                                                  "type": "importExpression",
                                                                  "body": [
                                                                    "\"serve\""
                                                                  ],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 1,
                                                                      "column": 27
                                                                    },
                                                                    "end": {
                                                                      "line": 1,
                                                                      "column": 28
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(",
                                                                  "line": 1
                                                                },
                                                                {
                                                                  "type": "invokeArguments",
                                                                  "body": [],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 4,
                                                                      "column": 3
                                                                    },
                                                                    "end": {
                                                                      "line": 4,
                                                                      "column": 4
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/)",
                                                                  "line": 4
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 4,
                                                                  "column": 4
                                                                },
                                                                "end": {
                                                                  "line": 4,
                                                                  "column": 5
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);",
                                                              "line": 4
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 4,
                                                              "column": 4
                                                            },
                                                            "end": {
                                                              "line": 4,
                                                              "column": 5
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);",
                                                          "line": 4
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 30,
                                                          "column": 0
                                                        },
                                                        "end": {
                                                          "line": 30,
                                                          "column": 3
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet",
                                                      "line": 30
                                                    },
                                                    {
                                                      "type": "declarationExpression",
                                                      "body": [
                                                        "let",
                                                        "template",
                                                        {
                                                          "type": "importExpression",
                                                          "body": [
                                                            "\"inc/template.sc\""
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 30,
                                                              "column": 39
                                                            },
                                                            "end": {
                                                              "line": 30,
                                                              "column": 40
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";",
                                                          "line": 30
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 30,
                                                          "column": 39
                                                        },
                                                        "end": {
                                                          "line": 30,
                                                          "column": 40
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";",
                                                      "line": 30
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 31,
                                                      "column": 0
                                                    },
                                                    "end": {
                                                      "line": 31,
                                                      "column": 3
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet",
                                                  "line": 31
                                                },
                                                {
                                                  "type": "declarationExpression",
                                                  "body": [
                                                    "let",
                                                    "loadPages",
                                                    {
                                                      "type": "importExpression",
                                                      "body": [
                                                        "\"inc/loadPages.sc\""
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 31,
                                                          "column": 41
                                                        },
                                                        "end": {
                                                          "line": 31,
                                                          "column": 42
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";",
                                                      "line": 31
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 31,
                                                      "column": 41
                                                    },
                                                    "end": {
                                                      "line": 31,
                                                      "column": 42
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";",
                                                  "line": 31
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 33,
                                                  "column": 0
                                                },
                                                "end": {
                                                  "line": 33,
                                                  "column": 3
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet",
                                              "line": 33
                                            },
                                            {
                                              "type": "declarationExpression",
                                              "body": [
                                                "let",
                                                "loader",
                                                {
                                                  "type": "invokeExpression",
                                                  "body": [
                                                    {
                                                      "type": "invokeTracker",
                                                      "body": [
                                                        {
                                                          "type": "identifier",
                                                          "body": [
                                                            "loadPages"
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 33,
                                                              "column": 22
                                                            },
                                                            "end": {
                                                              "line": 33,
                                                              "column": 23
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(",
                                                          "line": 33
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 33,
                                                          "column": 23
                                                        },
                                                        "end": {
                                                          "line": 33,
                                                          "column": 34
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\"",
                                                      "line": 33
                                                    },
                                                    {
                                                      "type": "invokeArguments",
                                                      "body": [
                                                        {
                                                          "type": "expressionList",
                                                          "body": [
                                                            {
                                                              "type": "stringLiteral",
                                                              "body": "inc/pages",
                                                              "loc": {
                                                                "start": {
                                                                  "line": 33,
                                                                  "column": 34
                                                                },
                                                                "end": {
                                                                  "line": 33,
                                                                  "column": 35
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\")",
                                                              "line": 33
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 33,
                                                              "column": 34
                                                            },
                                                            "end": {
                                                              "line": 33,
                                                              "column": 35
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\")",
                                                          "line": 33
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 33,
                                                          "column": 34
                                                        },
                                                        "end": {
                                                          "line": 33,
                                                          "column": 35
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\")",
                                                      "line": 33
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 33,
                                                      "column": 35
                                                    },
                                                    "end": {
                                                      "line": 33,
                                                      "column": 36
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");",
                                                  "line": 33
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 33,
                                                  "column": 35
                                                },
                                                "end": {
                                                  "line": 33,
                                                  "column": 36
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");",
                                              "line": 33
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 35,
                                              "column": 0
                                            },
                                            "end": {
                                              "line": 35,
                                              "column": 8
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate",
                                          "line": 35
                                        },
                                        {
                                          "type": "assignmentExpression",
                                          "body": [
                                            {
                                              "type": "identifier",
                                              "body": [
                                                {
                                                  "type": "identifier",
                                                  "body": [
                                                    "template"
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 35,
                                                      "column": 8
                                                    },
                                                    "end": {
                                                      "line": 35,
                                                      "column": 9
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.",
                                                  "line": 35
                                                },
                                                "dot",
                                                "manifest"
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 35,
                                                  "column": 18
                                                },
                                                "end": {
                                                  "line": 35,
                                                  "column": 19
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest =",
                                              "line": 35
                                            },
                                            {
                                              "type": "assignmentValue",
                                              "body": [
                                                "=",
                                                {
                                                  "type": "mapExpression",
                                                  "body": [
                                                    {
                                                      "type": "arrayStart",
                                                      "body": [],
                                                      "loc": {
                                                        "start": {
                                                          "line": 36,
                                                          "column": 1
                                                        },
                                                        "end": {
                                                          "line": 36,
                                                          "column": 11
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name",
                                                      "line": 36
                                                    },
                                                    {
                                                      "type": "associativeList",
                                                      "body": [
                                                        {
                                                          "type": "associativeList",
                                                          "body": [
                                                            {
                                                              "type": "associativeList",
                                                              "body": [
                                                                {
                                                                  "type": "associativeList",
                                                                  "body": [
                                                                    {
                                                                      "type": "associativeList",
                                                                      "body": [
                                                                        {
                                                                          "type": "associativeList",
                                                                          "body": [
                                                                            {
                                                                              "type": "associativeList",
                                                                              "body": [
                                                                                {
                                                                                  "type": "associativeDeclaration",
                                                                                  "body": [
                                                                                    "short_name",
                                                                                    "id",
                                                                                    {
                                                                                      "type": "stringLiteral",
                                                                                      "body": "Scope Test",
                                                                                      "loc": {
                                                                                        "start": {
                                                                                          "line": 36,
                                                                                          "column": 25
                                                                                        },
                                                                                        "end": {
                                                                                          "line": 36,
                                                                                          "column": 26
                                                                                        }
                                                                                      },
                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",",
                                                                                      "line": 36
                                                                                    }
                                                                                  ],
                                                                                  "loc": {
                                                                                    "start": {
                                                                                      "line": 36,
                                                                                      "column": 25
                                                                                    },
                                                                                    "end": {
                                                                                      "line": 36,
                                                                                      "column": 26
                                                                                    }
                                                                                  },
                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",",
                                                                                  "line": 36
                                                                                }
                                                                              ],
                                                                              "loc": {
                                                                                "start": {
                                                                                  "line": 36,
                                                                                  "column": 25
                                                                                },
                                                                                "end": {
                                                                                  "line": 36,
                                                                                  "column": 26
                                                                                }
                                                                              },
                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",",
                                                                              "line": 36
                                                                            },
                                                                            {
                                                                              "type": "associativeDeclaration",
                                                                              "body": [
                                                                                "name",
                                                                                "id",
                                                                                {
                                                                                  "type": "stringLiteral",
                                                                                  "body": "Scope Programming Language Test Site",
                                                                                  "loc": {
                                                                                    "start": {
                                                                                      "line": 37,
                                                                                      "column": 45
                                                                                    },
                                                                                    "end": {
                                                                                      "line": 37,
                                                                                      "column": 46
                                                                                    }
                                                                                  },
                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",",
                                                                                  "line": 37
                                                                                }
                                                                              ],
                                                                              "loc": {
                                                                                "start": {
                                                                                  "line": 37,
                                                                                  "column": 45
                                                                                },
                                                                                "end": {
                                                                                  "line": 37,
                                                                                  "column": 46
                                                                                }
                                                                              },
                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",",
                                                                              "line": 37
                                                                            }
                                                                          ],
                                                                          "loc": {
                                                                            "start": {
                                                                              "line": 37,
                                                                              "column": 45
                                                                            },
                                                                            "end": {
                                                                              "line": 37,
                                                                              "column": 46
                                                                            }
                                                                          },
                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",",
                                                                          "line": 37
                                                                        },
                                                                        {
                                                                          "type": "associativeDeclaration",
                                                                          "body": [
                                                                            "start_url",
                                                                            "id",
                                                                            {
                                                                              "type": "stringLiteral",
                                                                              "body": "/",
                                                                              "loc": {
                                                                                "start": {
                                                                                  "line": 38,
                                                                                  "column": 15
                                                                                },
                                                                                "end": {
                                                                                  "line": 38,
                                                                                  "column": 16
                                                                                }
                                                                              },
                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",",
                                                                              "line": 38
                                                                            }
                                                                          ],
                                                                          "loc": {
                                                                            "start": {
                                                                              "line": 38,
                                                                              "column": 15
                                                                            },
                                                                            "end": {
                                                                              "line": 38,
                                                                              "column": 16
                                                                            }
                                                                          },
                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",",
                                                                          "line": 38
                                                                        }
                                                                      ],
                                                                      "loc": {
                                                                        "start": {
                                                                          "line": 38,
                                                                          "column": 15
                                                                        },
                                                                        "end": {
                                                                          "line": 38,
                                                                          "column": 16
                                                                        }
                                                                      },
                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",",
                                                                      "line": 38
                                                                    },
                                                                    {
                                                                      "type": "associativeDeclaration",
                                                                      "body": [
                                                                        "background_color",
                                                                        "id",
                                                                        {
                                                                          "type": "stringLiteral",
                                                                          "body": "#FFFFFF",
                                                                          "loc": {
                                                                            "start": {
                                                                              "line": 39,
                                                                              "column": 28
                                                                            },
                                                                            "end": {
                                                                              "line": 39,
                                                                              "column": 29
                                                                            }
                                                                          },
                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",",
                                                                          "line": 39
                                                                        }
                                                                      ],
                                                                      "loc": {
                                                                        "start": {
                                                                          "line": 39,
                                                                          "column": 28
                                                                        },
                                                                        "end": {
                                                                          "line": 39,
                                                                          "column": 29
                                                                        }
                                                                      },
                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",",
                                                                      "line": 39
                                                                    }
                                                                  ],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 39,
                                                                      "column": 28
                                                                    },
                                                                    "end": {
                                                                      "line": 39,
                                                                      "column": 29
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",",
                                                                  "line": 39
                                                                },
                                                                {
                                                                  "type": "associativeDeclaration",
                                                                  "body": [
                                                                    "display",
                                                                    "id",
                                                                    {
                                                                      "type": "stringLiteral",
                                                                      "body": "standalone",
                                                                      "loc": {
                                                                        "start": {
                                                                          "line": 40,
                                                                          "column": 22
                                                                        },
                                                                        "end": {
                                                                          "line": 40,
                                                                          "column": 23
                                                                        }
                                                                      },
                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",",
                                                                      "line": 40
                                                                    }
                                                                  ],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 40,
                                                                      "column": 22
                                                                    },
                                                                    "end": {
                                                                      "line": 40,
                                                                      "column": 23
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",",
                                                                  "line": 40
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 40,
                                                                  "column": 22
                                                                },
                                                                "end": {
                                                                  "line": 40,
                                                                  "column": 23
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",",
                                                              "line": 40
                                                            },
                                                            {
                                                              "type": "associativeDeclaration",
                                                              "body": [
                                                                "scope",
                                                                "id",
                                                                {
                                                                  "type": "stringLiteral",
                                                                  "body": "/",
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 41,
                                                                      "column": 11
                                                                    },
                                                                    "end": {
                                                                      "line": 41,
                                                                      "column": 12
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",",
                                                                  "line": 41
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 41,
                                                                  "column": 11
                                                                },
                                                                "end": {
                                                                  "line": 41,
                                                                  "column": 12
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",",
                                                              "line": 41
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 41,
                                                              "column": 11
                                                            },
                                                            "end": {
                                                              "line": 41,
                                                              "column": 12
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",",
                                                          "line": 41
                                                        },
                                                        {
                                                          "type": "associativeDeclaration",
                                                          "body": [
                                                            "theme_color",
                                                            "id",
                                                            {
                                                              "type": "stringLiteral",
                                                              "body": "#0090D2",
                                                              "loc": {
                                                                "start": {
                                                                  "line": 43,
                                                                  "column": 0
                                                                },
                                                                "end": {
                                                                  "line": 43,
                                                                  "column": 1
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n]",
                                                              "line": 43
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 43,
                                                              "column": 0
                                                            },
                                                            "end": {
                                                              "line": 43,
                                                              "column": 1
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n]",
                                                          "line": 43
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 43,
                                                          "column": 0
                                                        },
                                                        "end": {
                                                          "line": 43,
                                                          "column": 1
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n]",
                                                      "line": 43
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 43,
                                                      "column": 1
                                                    },
                                                    "end": {
                                                      "line": 43,
                                                      "column": 2
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];",
                                                  "line": 43
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 43,
                                                  "column": 1
                                                },
                                                "end": {
                                                  "line": 43,
                                                  "column": 2
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];",
                                              "line": 43
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 43,
                                              "column": 1
                                            },
                                            "end": {
                                              "line": 43,
                                              "column": 2
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];",
                                          "line": 43
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 45,
                                          "column": 0
                                        },
                                        "end": {
                                          "line": 45,
                                          "column": 8
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate",
                                      "line": 45
                                    },
                                    {
                                      "type": "assignmentExpression",
                                      "body": [
                                        {
                                          "type": "identifier",
                                          "body": [
                                            {
                                              "type": "identifier",
                                              "body": [
                                                "template"
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 45,
                                                  "column": 8
                                                },
                                                "end": {
                                                  "line": 45,
                                                  "column": 9
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.",
                                              "line": 45
                                            },
                                            "dot",
                                            "styleLink"
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 45,
                                              "column": 19
                                            },
                                            "end": {
                                              "line": 45,
                                              "column": 20
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink =",
                                          "line": 45
                                        },
                                        {
                                          "type": "assignmentValue",
                                          "body": [
                                            "=",
                                            {
                                              "type": "stringLiteral",
                                              "body": "/styles/main.css",
                                              "loc": {
                                                "start": {
                                                  "line": 45,
                                                  "column": 39
                                                },
                                                "end": {
                                                  "line": 45,
                                                  "column": 40
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";",
                                              "line": 45
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 45,
                                              "column": 39
                                            },
                                            "end": {
                                              "line": 45,
                                              "column": 40
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";",
                                          "line": 45
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 45,
                                          "column": 39
                                        },
                                        "end": {
                                          "line": 45,
                                          "column": 40
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";",
                                      "line": 45
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 47,
                                      "column": 0
                                    },
                                    "end": {
                                      "line": 47,
                                      "column": 8
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate",
                                  "line": 47
                                },
                                {
                                  "type": "assignmentExpression",
                                  "body": [
                                    {
                                      "type": "identifier",
                                      "body": [
                                        {
                                          "type": "identifier",
                                          "body": [
                                            "template"
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 47,
                                              "column": 8
                                            },
                                            "end": {
                                              "line": 47,
                                              "column": 9
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.",
                                          "line": 47
                                        },
                                        "dot",
                                        "nav"
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 47,
                                          "column": 13
                                        },
                                        "end": {
                                          "line": 47,
                                          "column": 14
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav =",
                                      "line": 47
                                    },
                                    {
                                      "type": "assignmentValue",
                                      "body": [
                                        "=",
                                        {
                                          "type": "mapExpression",
                                          "body": [
                                            {
                                              "type": "arrayStart",
                                              "body": [],
                                              "loc": {
                                                "start": {
                                                  "line": 48,
                                                  "column": 1
                                                },
                                                "end": {
                                                  "line": 48,
                                                  "column": 5
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome",
                                              "line": 48
                                            },
                                            {
                                              "type": "associativeList",
                                              "body": [
                                                {
                                                  "type": "associativeList",
                                                  "body": [
                                                    {
                                                      "type": "associativeList",
                                                      "body": [
                                                        {
                                                          "type": "associativeList",
                                                          "body": [
                                                            {
                                                              "type": "associativeDeclaration",
                                                              "body": [
                                                                "Home",
                                                                "id",
                                                                {
                                                                  "type": "stringLiteral",
                                                                  "body": "/home",
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 48,
                                                                      "column": 14
                                                                    },
                                                                    "end": {
                                                                      "line": 48,
                                                                      "column": 15
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",",
                                                                  "line": 48
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 48,
                                                                  "column": 14
                                                                },
                                                                "end": {
                                                                  "line": 48,
                                                                  "column": 15
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",",
                                                              "line": 48
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 48,
                                                              "column": 14
                                                            },
                                                            "end": {
                                                              "line": 48,
                                                              "column": 15
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",",
                                                          "line": 48
                                                        },
                                                        {
                                                          "type": "associativeDeclaration",
                                                          "body": [
                                                            "Documentation",
                                                            "id",
                                                            {
                                                              "type": "stringLiteral",
                                                              "body": "/docs",
                                                              "loc": {
                                                                "start": {
                                                                  "line": 49,
                                                                  "column": 23
                                                                },
                                                                "end": {
                                                                  "line": 49,
                                                                  "column": 24
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",",
                                                              "line": 49
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 49,
                                                              "column": 23
                                                            },
                                                            "end": {
                                                              "line": 49,
                                                              "column": 24
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",",
                                                          "line": 49
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 49,
                                                          "column": 23
                                                        },
                                                        "end": {
                                                          "line": 49,
                                                          "column": 24
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",",
                                                      "line": 49
                                                    },
                                                    {
                                                      "type": "associativeDeclaration",
                                                      "body": [
                                                        "About",
                                                        "id",
                                                        {
                                                          "type": "stringLiteral",
                                                          "body": "/about",
                                                          "loc": {
                                                            "start": {
                                                              "line": 50,
                                                              "column": 16
                                                            },
                                                            "end": {
                                                              "line": 50,
                                                              "column": 17
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",",
                                                          "line": 50
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 50,
                                                          "column": 16
                                                        },
                                                        "end": {
                                                          "line": 50,
                                                          "column": 17
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",",
                                                      "line": 50
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 50,
                                                      "column": 16
                                                    },
                                                    "end": {
                                                      "line": 50,
                                                      "column": 17
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",",
                                                  "line": 50
                                                },
                                                {
                                                  "type": "associativeDeclaration",
                                                  "body": [
                                                    "Contact",
                                                    "id",
                                                    {
                                                      "type": "stringLiteral",
                                                      "body": "/contact",
                                                      "loc": {
                                                        "start": {
                                                          "line": 52,
                                                          "column": 0
                                                        },
                                                        "end": {
                                                          "line": 52,
                                                          "column": 1
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n]",
                                                      "line": 52
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 52,
                                                      "column": 0
                                                    },
                                                    "end": {
                                                      "line": 52,
                                                      "column": 1
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n]",
                                                  "line": 52
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 52,
                                                  "column": 0
                                                },
                                                "end": {
                                                  "line": 52,
                                                  "column": 1
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n]",
                                              "line": 52
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 52,
                                              "column": 1
                                            },
                                            "end": {
                                              "line": 52,
                                              "column": 2
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];",
                                          "line": 52
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 52,
                                          "column": 1
                                        },
                                        "end": {
                                          "line": 52,
                                          "column": 2
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];",
                                      "line": 52
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 52,
                                      "column": 1
                                    },
                                    "end": {
                                      "line": 52,
                                      "column": 2
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];",
                                  "line": 52
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 54,
                                  "column": 0
                                },
                                "end": {
                                  "line": 54,
                                  "column": 3
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet",
                              "line": 54
                            },
                            {
                              "type": "declarationExpression",
                              "body": [
                                "let",
                                "notFound",
                                {
                                  "type": "mapExpression",
                                  "body": [
                                    {
                                      "type": "arrayStart",
                                      "body": [],
                                      "loc": {
                                        "start": {
                                          "line": 55,
                                          "column": 1
                                        },
                                        "end": {
                                          "line": 55,
                                          "column": 6
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle",
                                      "line": 55
                                    },
                                    {
                                      "type": "associativeList",
                                      "body": [
                                        {
                                          "type": "associativeList",
                                          "body": [
                                            {
                                              "type": "associativeList",
                                              "body": [
                                                {
                                                  "type": "associativeDeclaration",
                                                  "body": [
                                                    "title",
                                                    "id",
                                                    {
                                                      "type": "stringLiteral",
                                                      "body": "404: Not Found",
                                                      "loc": {
                                                        "start": {
                                                          "line": 55,
                                                          "column": 24
                                                        },
                                                        "end": {
                                                          "line": 55,
                                                          "column": 25
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",",
                                                      "line": 55
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 55,
                                                      "column": 24
                                                    },
                                                    "end": {
                                                      "line": 55,
                                                      "column": 25
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",",
                                                  "line": 55
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 55,
                                                  "column": 24
                                                },
                                                "end": {
                                                  "line": 55,
                                                  "column": 25
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",",
                                              "line": 55
                                            },
                                            {
                                              "type": "associativeDeclaration",
                                              "body": [
                                                "url",
                                                "id",
                                                {
                                                  "type": "stringLiteral",
                                                  "body": "404",
                                                  "loc": {
                                                    "start": {
                                                      "line": 56,
                                                      "column": 11
                                                    },
                                                    "end": {
                                                      "line": 56,
                                                      "column": 12
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",",
                                                  "line": 56
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 56,
                                                  "column": 11
                                                },
                                                "end": {
                                                  "line": 56,
                                                  "column": 12
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",",
                                              "line": 56
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 56,
                                              "column": 11
                                            },
                                            "end": {
                                              "line": 56,
                                              "column": 12
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",",
                                          "line": 56
                                        },
                                        {
                                          "type": "associativeDeclaration",
                                          "body": [
                                            "body",
                                            "id",
                                            {
                                              "type": "xmlExpression",
                                              "body": [
                                                {
                                                  "type": "identifier",
                                                  "body": [
                                                    "article"
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 58,
                                                      "column": 9
                                                    },
                                                    "end": {
                                                      "line": 58,
                                                      "column": 10
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>",
                                                  "line": 58
                                                },
                                                {
                                                  "type": "xmlAttributes",
                                                  "body": [],
                                                  "loc": {
                                                    "start": {
                                                      "line": 58,
                                                      "column": 9
                                                    },
                                                    "end": {
                                                      "line": 58,
                                                      "column": 10
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>",
                                                  "line": 58
                                                },
                                                {
                                                  "type": "xmlControlCode",
                                                  "body": [
                                                    {
                                                      "type": "xmlControlCode",
                                                      "body": [
                                                        {
                                                          "type": "xmlControlCode",
                                                          "body": [],
                                                          "loc": {
                                                            "start": {
                                                              "line": 59,
                                                              "column": 2
                                                            },
                                                            "end": {
                                                              "line": 59,
                                                              "column": 3
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<",
                                                          "line": 59
                                                        },
                                                        {
                                                          "type": "xmlExpression",
                                                          "body": [
                                                            {
                                                              "type": "identifier",
                                                              "body": [
                                                                "h2"
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 59,
                                                                  "column": 5
                                                                },
                                                                "end": {
                                                                  "line": 59,
                                                                  "column": 6
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>",
                                                              "line": 59
                                                            },
                                                            {
                                                              "type": "xmlAttributes",
                                                              "body": [],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 59,
                                                                  "column": 5
                                                                },
                                                                "end": {
                                                                  "line": 59,
                                                                  "column": 6
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>",
                                                              "line": 59
                                                            },
                                                            {
                                                              "type": "xmlControlCode",
                                                              "body": [
                                                                {
                                                                  "type": "xmlControlCode",
                                                                  "body": [],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 60,
                                                                      "column": 3
                                                                    },
                                                                    "end": {
                                                                      "line": 60,
                                                                      "column": 24
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\"",
                                                                  "line": 60
                                                                },
                                                                {
                                                                  "type": "stringLiteral",
                                                                  "body": "We have a problem..",
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 60,
                                                                      "column": 24
                                                                    },
                                                                    "end": {
                                                                      "line": 60,
                                                                      "column": 25
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";",
                                                                  "line": 60
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 61,
                                                                  "column": 2
                                                                },
                                                                "end": {
                                                                  "line": 61,
                                                                  "column": 4
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</",
                                                              "line": 61
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 61,
                                                              "column": 7
                                                            },
                                                            "end": {
                                                              "line": 61,
                                                              "column": 8
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;",
                                                          "line": 61
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 62,
                                                          "column": 2
                                                        },
                                                        "end": {
                                                          "line": 62,
                                                          "column": 3
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<",
                                                      "line": 62
                                                    },
                                                    {
                                                      "type": "xmlExpression",
                                                      "body": [
                                                        {
                                                          "type": "identifier",
                                                          "body": [
                                                            "div"
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 62,
                                                              "column": 6
                                                            },
                                                            "end": {
                                                              "line": 62,
                                                              "column": 7
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>",
                                                          "line": 62
                                                        },
                                                        {
                                                          "type": "xmlAttributes",
                                                          "body": [],
                                                          "loc": {
                                                            "start": {
                                                              "line": 62,
                                                              "column": 6
                                                            },
                                                            "end": {
                                                              "line": 62,
                                                              "column": 7
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>",
                                                          "line": 62
                                                        },
                                                        {
                                                          "type": "xmlControlCode",
                                                          "body": [
                                                            {
                                                              "type": "xmlControlCode",
                                                              "body": [
                                                                {
                                                                  "type": "xmlControlCode",
                                                                  "body": [],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 63,
                                                                      "column": 3
                                                                    },
                                                                    "end": {
                                                                      "line": 63,
                                                                      "column": 4
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<",
                                                                  "line": 63
                                                                },
                                                                {
                                                                  "type": "xmlExpression",
                                                                  "body": [
                                                                    {
                                                                      "type": "identifier",
                                                                      "body": [
                                                                        "strong"
                                                                      ],
                                                                      "loc": {
                                                                        "start": {
                                                                          "line": 63,
                                                                          "column": 10
                                                                        },
                                                                        "end": {
                                                                          "line": 63,
                                                                          "column": 11
                                                                        }
                                                                      },
                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>",
                                                                      "line": 63
                                                                    },
                                                                    {
                                                                      "type": "xmlAttributes",
                                                                      "body": [],
                                                                      "loc": {
                                                                        "start": {
                                                                          "line": 63,
                                                                          "column": 10
                                                                        },
                                                                        "end": {
                                                                          "line": 63,
                                                                          "column": 11
                                                                        }
                                                                      },
                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>",
                                                                      "line": 63
                                                                    },
                                                                    {
                                                                      "type": "xmlControlCode",
                                                                      "body": [
                                                                        {
                                                                          "type": "xmlControlCode",
                                                                          "body": [],
                                                                          "loc": {
                                                                            "start": {
                                                                              "line": 63,
                                                                              "column": 11
                                                                            },
                                                                            "end": {
                                                                              "line": 63,
                                                                              "column": 27
                                                                            }
                                                                          },
                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\"",
                                                                          "line": 63
                                                                        },
                                                                        {
                                                                          "type": "stringLiteral",
                                                                          "body": "404 Not Found:",
                                                                          "loc": {
                                                                            "start": {
                                                                              "line": 63,
                                                                              "column": 27
                                                                            },
                                                                            "end": {
                                                                              "line": 63,
                                                                              "column": 28
                                                                            }
                                                                          },
                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";",
                                                                          "line": 63
                                                                        }
                                                                      ],
                                                                      "loc": {
                                                                        "start": {
                                                                          "line": 63,
                                                                          "column": 28
                                                                        },
                                                                        "end": {
                                                                          "line": 63,
                                                                          "column": 30
                                                                        }
                                                                      },
                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</",
                                                                      "line": 63
                                                                    }
                                                                  ],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 63,
                                                                      "column": 37
                                                                    },
                                                                    "end": {
                                                                      "line": 63,
                                                                      "column": 38
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;",
                                                                  "line": 63
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 64,
                                                                  "column": 3
                                                                },
                                                                "end": {
                                                                  "line": 64,
                                                                  "column": 39
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\"",
                                                              "line": 64
                                                            },
                                                            {
                                                              "type": "stringLiteral",
                                                              "body": " The requested page was not found.",
                                                              "loc": {
                                                                "start": {
                                                                  "line": 64,
                                                                  "column": 39
                                                                },
                                                                "end": {
                                                                  "line": 64,
                                                                  "column": 40
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";",
                                                              "line": 64
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 65,
                                                              "column": 2
                                                            },
                                                            "end": {
                                                              "line": 65,
                                                              "column": 4
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</",
                                                          "line": 65
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 65,
                                                          "column": 8
                                                        },
                                                        "end": {
                                                          "line": 65,
                                                          "column": 9
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;",
                                                      "line": 65
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 66,
                                                      "column": 1
                                                    },
                                                    "end": {
                                                      "line": 66,
                                                      "column": 3
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</",
                                                  "line": 66
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 67,
                                                  "column": 0
                                                },
                                                "end": {
                                                  "line": 67,
                                                  "column": 1
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n]",
                                              "line": 67
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 67,
                                              "column": 0
                                            },
                                            "end": {
                                              "line": 67,
                                              "column": 1
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n]",
                                          "line": 67
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 67,
                                          "column": 0
                                        },
                                        "end": {
                                          "line": 67,
                                          "column": 1
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n]",
                                      "line": 67
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 67,
                                      "column": 1
                                    },
                                    "end": {
                                      "line": 67,
                                      "column": 2
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];",
                                  "line": 67
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 67,
                                  "column": 1
                                },
                                "end": {
                                  "line": 67,
                                  "column": 2
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];",
                              "line": 67
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 69,
                              "column": 0
                            },
                            "end": {
                              "line": 69,
                              "column": 6
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver",
                          "line": 69
                        },
                        {
                          "type": "invokeExpression",
                          "body": [
                            {
                              "type": "invokeTracker",
                              "body": [
                                {
                                  "type": "identifier",
                                  "body": [
                                    {
                                      "type": "identifier",
                                      "body": [
                                        "server"
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 69,
                                          "column": 6
                                        },
                                        "end": {
                                          "line": 69,
                                          "column": 7
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.",
                                      "line": 69
                                    },
                                    "dot",
                                    "manifest"
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 69,
                                      "column": 15
                                    },
                                    "end": {
                                      "line": 69,
                                      "column": 16
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(",
                                  "line": 69
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 69,
                                  "column": 16
                                },
                                "end": {
                                  "line": 69,
                                  "column": 24
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template",
                              "line": 69
                            },
                            {
                              "type": "invokeArguments",
                              "body": [
                                {
                                  "type": "expressionList",
                                  "body": [
                                    {
                                      "type": "identifier",
                                      "body": [
                                        {
                                          "type": "identifier",
                                          "body": [
                                            "template"
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 69,
                                              "column": 24
                                            },
                                            "end": {
                                              "line": 69,
                                              "column": 25
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.",
                                          "line": 69
                                        },
                                        "dot",
                                        "manifest"
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 69,
                                          "column": 33
                                        },
                                        "end": {
                                          "line": 69,
                                          "column": 34
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest)",
                                      "line": 69
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 69,
                                      "column": 33
                                    },
                                    "end": {
                                      "line": 69,
                                      "column": 34
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest)",
                                  "line": 69
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 69,
                                  "column": 33
                                },
                                "end": {
                                  "line": 69,
                                  "column": 34
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest)",
                              "line": 69
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 69,
                              "column": 34
                            },
                            "end": {
                              "line": 69,
                              "column": 35
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);",
                          "line": 69
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 71,
                          "column": 0
                        },
                        "end": {
                          "line": 71,
                          "column": 6
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver",
                      "line": 71
                    },
                    {
                      "type": "invokeExpression",
                      "body": [
                        {
                          "type": "invokeTracker",
                          "body": [
                            {
                              "type": "identifier",
                              "body": [
                                {
                                  "type": "identifier",
                                  "body": [
                                    "server"
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 71,
                                      "column": 6
                                    },
                                    "end": {
                                      "line": 71,
                                      "column": 7
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.",
                                  "line": 71
                                },
                                "dot",
                                "get"
                              ],
                              "loc": {
                                "start": {
                                  "line": 71,
                                  "column": 10
                                },
                                "end": {
                                  "line": 71,
                                  "column": 11
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(",
                              "line": 71
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 71,
                              "column": 11
                            },
                            "end": {
                              "line": 71,
                              "column": 14
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\"",
                          "line": 71
                        },
                        {
                          "type": "invokeArguments",
                          "body": [
                            {
                              "type": "expressionList",
                              "body": [
                                {
                                  "type": "stringLiteral",
                                  "body": "/",
                                  "loc": {
                                    "start": {
                                      "line": 71,
                                      "column": 14
                                    },
                                    "end": {
                                      "line": 71,
                                      "column": 15
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\",",
                                  "line": 71
                                },
                                {
                                  "type": "expressionList",
                                  "body": [
                                    {
                                      "type": "scopeExpression",
                                      "body": [
                                        {
                                          "type": "scopeStart",
                                          "body": [],
                                          "loc": {
                                            "start": {
                                              "line": 72,
                                              "column": 1
                                            },
                                            "end": {
                                              "line": 72,
                                              "column": 7
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient",
                                          "line": 72
                                        },
                                        {
                                          "type": "scopeArguments",
                                          "body": [
                                            {
                                              "type": "associativeList",
                                              "body": [
                                                {
                                                  "type": "associativeDeclaration",
                                                  "body": [
                                                    "client",
                                                    "id",
                                                    {
                                                      "type": "emptyMapExpression",
                                                      "body": [
                                                        {
                                                          "type": "arrayStart",
                                                          "body": [],
                                                          "loc": {
                                                            "start": {
                                                              "line": 71,
                                                              "column": 26
                                                            },
                                                            "end": {
                                                              "line": 71,
                                                              "column": 27
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []",
                                                          "line": 71
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 71,
                                                          "column": 27
                                                        },
                                                        "end": {
                                                          "line": 71,
                                                          "column": 28
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: [])",
                                                      "line": 71
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 71,
                                                      "column": 27
                                                    },
                                                    "end": {
                                                      "line": 71,
                                                      "column": 28
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: [])",
                                                  "line": 71
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 71,
                                                  "column": 27
                                                },
                                                "end": {
                                                  "line": 71,
                                                  "column": 28
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: [])",
                                              "line": 71
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 71,
                                              "column": 27
                                            },
                                            "end": {
                                              "line": 71,
                                              "column": 28
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: [])",
                                          "line": 71
                                        },
                                        {
                                          "type": "controlCode",
                                          "body": [
                                            {
                                              "type": "controlCode",
                                              "body": [],
                                              "loc": {
                                                "start": {
                                                  "line": 72,
                                                  "column": 1
                                                },
                                                "end": {
                                                  "line": 72,
                                                  "column": 7
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient",
                                              "line": 72
                                            },
                                            {
                                              "type": "invokeExpression",
                                              "body": [
                                                {
                                                  "type": "invokeTracker",
                                                  "body": [
                                                    {
                                                      "type": "identifier",
                                                      "body": [
                                                        {
                                                          "type": "identifier",
                                                          "body": [
                                                            {
                                                              "type": "identifier",
                                                              "body": [
                                                                "client"
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 72,
                                                                  "column": 7
                                                                },
                                                                "end": {
                                                                  "line": 72,
                                                                  "column": 8
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.",
                                                              "line": 72
                                                            },
                                                            "dot",
                                                            "response"
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 72,
                                                              "column": 16
                                                            },
                                                            "end": {
                                                              "line": 72,
                                                              "column": 17
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.",
                                                          "line": 72
                                                        },
                                                        "dot",
                                                        "redirect"
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 72,
                                                          "column": 25
                                                        },
                                                        "end": {
                                                          "line": 72,
                                                          "column": 26
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(",
                                                      "line": 72
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 72,
                                                      "column": 26
                                                    },
                                                    "end": {
                                                      "line": 72,
                                                      "column": 29
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301",
                                                  "line": 72
                                                },
                                                {
                                                  "type": "invokeArguments",
                                                  "body": [
                                                    {
                                                      "type": "expressionList",
                                                      "body": [
                                                        {
                                                          "type": "numericLiteral",
                                                          "body": 301,
                                                          "loc": {
                                                            "start": {
                                                              "line": 72,
                                                              "column": 29
                                                            },
                                                            "end": {
                                                              "line": 72,
                                                              "column": 30
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301,",
                                                          "line": 72
                                                        },
                                                        {
                                                          "type": "expressionList",
                                                          "body": [
                                                            {
                                                              "type": "stringLiteral",
                                                              "body": "/home",
                                                              "loc": {
                                                                "start": {
                                                                  "line": 72,
                                                                  "column": 38
                                                                },
                                                                "end": {
                                                                  "line": 72,
                                                                  "column": 39
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\")",
                                                              "line": 72
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 72,
                                                              "column": 38
                                                            },
                                                            "end": {
                                                              "line": 72,
                                                              "column": 39
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\")",
                                                          "line": 72
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 72,
                                                          "column": 38
                                                        },
                                                        "end": {
                                                          "line": 72,
                                                          "column": 39
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\")",
                                                      "line": 72
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 72,
                                                      "column": 38
                                                    },
                                                    "end": {
                                                      "line": 72,
                                                      "column": 39
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\")",
                                                  "line": 72
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 72,
                                                  "column": 39
                                                },
                                                "end": {
                                                  "line": 72,
                                                  "column": 40
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");",
                                              "line": 72
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 73,
                                              "column": 0
                                            },
                                            "end": {
                                              "line": 73,
                                              "column": 1
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n}",
                                          "line": 73
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 73,
                                          "column": 1
                                        },
                                        "end": {
                                          "line": 73,
                                          "column": 2
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n})",
                                      "line": 73
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 73,
                                      "column": 1
                                    },
                                    "end": {
                                      "line": 73,
                                      "column": 2
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n})",
                                  "line": 73
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 73,
                                  "column": 1
                                },
                                "end": {
                                  "line": 73,
                                  "column": 2
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n})",
                              "line": 73
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 73,
                              "column": 1
                            },
                            "end": {
                              "line": 73,
                              "column": 2
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n})",
                          "line": 73
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 73,
                          "column": 2
                        },
                        "end": {
                          "line": 73,
                          "column": 3
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});",
                      "line": 73
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 75,
                      "column": 0
                    },
                    "end": {
                      "line": 75,
                      "column": 6
                    }
                  },
                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver",
                  "line": 75
                },
                {
                  "type": "invokeExpression",
                  "body": [
                    {
                      "type": "invokeTracker",
                      "body": [
                        {
                          "type": "identifier",
                          "body": [
                            {
                              "type": "identifier",
                              "body": [
                                "server"
                              ],
                              "loc": {
                                "start": {
                                  "line": 75,
                                  "column": 6
                                },
                                "end": {
                                  "line": 75,
                                  "column": 7
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.",
                              "line": 75
                            },
                            "dot",
                            "get"
                          ],
                          "loc": {
                            "start": {
                              "line": 75,
                              "column": 10
                            },
                            "end": {
                              "line": 75,
                              "column": 11
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(",
                          "line": 75
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 75,
                          "column": 11
                        },
                        "end": {
                          "line": 75,
                          "column": 17
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\"",
                      "line": 75
                    },
                    {
                      "type": "invokeArguments",
                      "body": [
                        {
                          "type": "expressionList",
                          "body": [
                            {
                              "type": "stringLiteral",
                              "body": "/404",
                              "loc": {
                                "start": {
                                  "line": 75,
                                  "column": 17
                                },
                                "end": {
                                  "line": 75,
                                  "column": 18
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\",",
                              "line": 75
                            },
                            {
                              "type": "expressionList",
                              "body": [
                                {
                                  "type": "scopeExpression",
                                  "body": [
                                    {
                                      "type": "scopeStart",
                                      "body": [],
                                      "loc": {
                                        "start": {
                                          "line": 76,
                                          "column": 1
                                        },
                                        "end": {
                                          "line": 76,
                                          "column": 7
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient",
                                      "line": 76
                                    },
                                    {
                                      "type": "scopeArguments",
                                      "body": [
                                        {
                                          "type": "associativeList",
                                          "body": [
                                            {
                                              "type": "associativeDeclaration",
                                              "body": [
                                                "client",
                                                "id",
                                                {
                                                  "type": "emptyMapExpression",
                                                  "body": [
                                                    {
                                                      "type": "arrayStart",
                                                      "body": [],
                                                      "loc": {
                                                        "start": {
                                                          "line": 75,
                                                          "column": 29
                                                        },
                                                        "end": {
                                                          "line": 75,
                                                          "column": 30
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []",
                                                      "line": 75
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 75,
                                                      "column": 30
                                                    },
                                                    "end": {
                                                      "line": 75,
                                                      "column": 31
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: [])",
                                                  "line": 75
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 75,
                                                  "column": 30
                                                },
                                                "end": {
                                                  "line": 75,
                                                  "column": 31
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: [])",
                                              "line": 75
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 75,
                                              "column": 30
                                            },
                                            "end": {
                                              "line": 75,
                                              "column": 31
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: [])",
                                          "line": 75
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 75,
                                          "column": 30
                                        },
                                        "end": {
                                          "line": 75,
                                          "column": 31
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: [])",
                                      "line": 75
                                    },
                                    {
                                      "type": "controlCode",
                                      "body": [
                                        {
                                          "type": "controlCode",
                                          "body": [
                                            {
                                              "type": "controlCode",
                                              "body": [],
                                              "loc": {
                                                "start": {
                                                  "line": 76,
                                                  "column": 1
                                                },
                                                "end": {
                                                  "line": 76,
                                                  "column": 7
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient",
                                              "line": 76
                                            },
                                            {
                                              "type": "invokeExpression",
                                              "body": [
                                                {
                                                  "type": "invokeTracker",
                                                  "body": [
                                                    {
                                                      "type": "identifier",
                                                      "body": [
                                                        {
                                                          "type": "identifier",
                                                          "body": [
                                                            {
                                                              "type": "identifier",
                                                              "body": [
                                                                "client"
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 76,
                                                                  "column": 7
                                                                },
                                                                "end": {
                                                                  "line": 76,
                                                                  "column": 8
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.",
                                                              "line": 76
                                                            },
                                                            "dot",
                                                            "response"
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 76,
                                                              "column": 16
                                                            },
                                                            "end": {
                                                              "line": 76,
                                                              "column": 17
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.",
                                                          "line": 76
                                                        },
                                                        "dot",
                                                        "status"
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 76,
                                                          "column": 23
                                                        },
                                                        "end": {
                                                          "line": 76,
                                                          "column": 24
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(",
                                                      "line": 76
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 76,
                                                      "column": 24
                                                    },
                                                    "end": {
                                                      "line": 76,
                                                      "column": 27
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404",
                                                  "line": 76
                                                },
                                                {
                                                  "type": "invokeArguments",
                                                  "body": [
                                                    {
                                                      "type": "expressionList",
                                                      "body": [
                                                        {
                                                          "type": "numericLiteral",
                                                          "body": 404,
                                                          "loc": {
                                                            "start": {
                                                              "line": 76,
                                                              "column": 27
                                                            },
                                                            "end": {
                                                              "line": 76,
                                                              "column": 28
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404)",
                                                          "line": 76
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 76,
                                                          "column": 27
                                                        },
                                                        "end": {
                                                          "line": 76,
                                                          "column": 28
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404)",
                                                      "line": 76
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 76,
                                                      "column": 27
                                                    },
                                                    "end": {
                                                      "line": 76,
                                                      "column": 28
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404)",
                                                  "line": 76
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 76,
                                                  "column": 28
                                                },
                                                "end": {
                                                  "line": 76,
                                                  "column": 29
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);",
                                              "line": 76
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 77,
                                              "column": 1
                                            },
                                            "end": {
                                              "line": 77,
                                              "column": 7
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient",
                                          "line": 77
                                        },
                                        {
                                          "type": "invokeExpression",
                                          "body": [
                                            {
                                              "type": "invokeTracker",
                                              "body": [
                                                {
                                                  "type": "identifier",
                                                  "body": [
                                                    {
                                                      "type": "identifier",
                                                      "body": [
                                                        {
                                                          "type": "identifier",
                                                          "body": [
                                                            "client"
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 77,
                                                              "column": 7
                                                            },
                                                            "end": {
                                                              "line": 77,
                                                              "column": 8
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.",
                                                          "line": 77
                                                        },
                                                        "dot",
                                                        "response"
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 77,
                                                          "column": 16
                                                        },
                                                        "end": {
                                                          "line": 77,
                                                          "column": 17
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.",
                                                      "line": 77
                                                    },
                                                    "dot",
                                                    "render"
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 77,
                                                      "column": 23
                                                    },
                                                    "end": {
                                                      "line": 77,
                                                      "column": 24
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(",
                                                  "line": 77
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 77,
                                                  "column": 24
                                                },
                                                "end": {
                                                  "line": 77,
                                                  "column": 32
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template",
                                              "line": 77
                                            },
                                            {
                                              "type": "invokeArguments",
                                              "body": [
                                                {
                                                  "type": "expressionList",
                                                  "body": [
                                                    {
                                                      "type": "invokeExpression",
                                                      "body": [
                                                        {
                                                          "type": "invokeTracker",
                                                          "body": [
                                                            {
                                                              "type": "identifier",
                                                              "body": [
                                                                {
                                                                  "type": "identifier",
                                                                  "body": [
                                                                    "template"
                                                                  ],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 77,
                                                                      "column": 32
                                                                    },
                                                                    "end": {
                                                                      "line": 77,
                                                                      "column": 33
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.",
                                                                  "line": 77
                                                                },
                                                                "dot",
                                                                "generate"
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 77,
                                                                  "column": 41
                                                                },
                                                                "end": {
                                                                  "line": 77,
                                                                  "column": 42
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(",
                                                              "line": 77
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 77,
                                                              "column": 42
                                                            },
                                                            "end": {
                                                              "line": 77,
                                                              "column": 50
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound",
                                                          "line": 77
                                                        },
                                                        {
                                                          "type": "invokeArguments",
                                                          "body": [
                                                            {
                                                              "type": "expressionList",
                                                              "body": [
                                                                {
                                                                  "type": "identifier",
                                                                  "body": [
                                                                    "notFound"
                                                                  ],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 77,
                                                                      "column": 50
                                                                    },
                                                                    "end": {
                                                                      "line": 77,
                                                                      "column": 51
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound)",
                                                                  "line": 77
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 77,
                                                                  "column": 50
                                                                },
                                                                "end": {
                                                                  "line": 77,
                                                                  "column": 51
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound)",
                                                              "line": 77
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 77,
                                                              "column": 50
                                                            },
                                                            "end": {
                                                              "line": 77,
                                                              "column": 51
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound)",
                                                          "line": 77
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 77,
                                                          "column": 51
                                                        },
                                                        "end": {
                                                          "line": 77,
                                                          "column": 52
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound))",
                                                      "line": 77
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 77,
                                                      "column": 51
                                                    },
                                                    "end": {
                                                      "line": 77,
                                                      "column": 52
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound))",
                                                  "line": 77
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 77,
                                                  "column": 51
                                                },
                                                "end": {
                                                  "line": 77,
                                                  "column": 52
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound))",
                                              "line": 77
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 77,
                                              "column": 52
                                            },
                                            "end": {
                                              "line": 77,
                                              "column": 53
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));",
                                          "line": 77
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 78,
                                          "column": 0
                                        },
                                        "end": {
                                          "line": 78,
                                          "column": 1
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n}",
                                      "line": 78
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 78,
                                      "column": 1
                                    },
                                    "end": {
                                      "line": 78,
                                      "column": 2
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n})",
                                  "line": 78
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 78,
                                  "column": 1
                                },
                                "end": {
                                  "line": 78,
                                  "column": 2
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n})",
                              "line": 78
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 78,
                              "column": 1
                            },
                            "end": {
                              "line": 78,
                              "column": 2
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n})",
                          "line": 78
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 78,
                          "column": 1
                        },
                        "end": {
                          "line": 78,
                          "column": 2
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n})",
                      "line": 78
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 78,
                      "column": 2
                    },
                    "end": {
                      "line": 78,
                      "column": 3
                    }
                  },
                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});",
                  "line": 78
                }
              ],
              "loc": {
                "start": {
                  "line": 80,
                  "column": 0
                },
                "end": {
                  "line": 80,
                  "column": 6
                }
              },
              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver",
              "line": 80
            },
            {
              "type": "invokeExpression",
              "body": [
                {
                  "type": "invokeTracker",
                  "body": [
                    {
                      "type": "identifier",
                      "body": [
                        {
                          "type": "identifier",
                          "body": [
                            "server"
                          ],
                          "loc": {
                            "start": {
                              "line": 80,
                              "column": 6
                            },
                            "end": {
                              "line": 80,
                              "column": 7
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.",
                          "line": 80
                        },
                        "dot",
                        "get"
                      ],
                      "loc": {
                        "start": {
                          "line": 80,
                          "column": 10
                        },
                        "end": {
                          "line": 80,
                          "column": 11
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(",
                      "line": 80
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 80,
                      "column": 11
                    },
                    "end": {
                      "line": 80,
                      "column": 19
                    }
                  },
                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template",
                  "line": 80
                },
                {
                  "type": "invokeArguments",
                  "body": [
                    {
                      "type": "expressionList",
                      "body": [
                        {
                          "type": "identifier",
                          "body": [
                            {
                              "type": "identifier",
                              "body": [
                                "template"
                              ],
                              "loc": {
                                "start": {
                                  "line": 80,
                                  "column": 19
                                },
                                "end": {
                                  "line": 80,
                                  "column": 20
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.",
                              "line": 80
                            },
                            "dot",
                            "styleLink"
                          ],
                          "loc": {
                            "start": {
                              "line": 80,
                              "column": 29
                            },
                            "end": {
                              "line": 80,
                              "column": 30
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink,",
                          "line": 80
                        },
                        {
                          "type": "expressionList",
                          "body": [
                            {
                              "type": "scopeExpression",
                              "body": [
                                {
                                  "type": "scopeStart",
                                  "body": [],
                                  "loc": {
                                    "start": {
                                      "line": 81,
                                      "column": 1
                                    },
                                    "end": {
                                      "line": 81,
                                      "column": 7
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient",
                                  "line": 81
                                },
                                {
                                  "type": "scopeArguments",
                                  "body": [
                                    {
                                      "type": "associativeList",
                                      "body": [
                                        {
                                          "type": "associativeDeclaration",
                                          "body": [
                                            "client",
                                            "id",
                                            {
                                              "type": "emptyMapExpression",
                                              "body": [
                                                {
                                                  "type": "arrayStart",
                                                  "body": [],
                                                  "loc": {
                                                    "start": {
                                                      "line": 80,
                                                      "column": 41
                                                    },
                                                    "end": {
                                                      "line": 80,
                                                      "column": 42
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []",
                                                  "line": 80
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 80,
                                                  "column": 42
                                                },
                                                "end": {
                                                  "line": 80,
                                                  "column": 43
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: [])",
                                              "line": 80
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 80,
                                              "column": 42
                                            },
                                            "end": {
                                              "line": 80,
                                              "column": 43
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: [])",
                                          "line": 80
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 80,
                                          "column": 42
                                        },
                                        "end": {
                                          "line": 80,
                                          "column": 43
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: [])",
                                      "line": 80
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 80,
                                      "column": 42
                                    },
                                    "end": {
                                      "line": 80,
                                      "column": 43
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: [])",
                                  "line": 80
                                },
                                {
                                  "type": "controlCode",
                                  "body": [
                                    {
                                      "type": "controlCode",
                                      "body": [],
                                      "loc": {
                                        "start": {
                                          "line": 81,
                                          "column": 1
                                        },
                                        "end": {
                                          "line": 81,
                                          "column": 7
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient",
                                      "line": 81
                                    },
                                    {
                                      "type": "invokeExpression",
                                      "body": [
                                        {
                                          "type": "invokeTracker",
                                          "body": [
                                            {
                                              "type": "identifier",
                                              "body": [
                                                {
                                                  "type": "identifier",
                                                  "body": [
                                                    {
                                                      "type": "identifier",
                                                      "body": [
                                                        "client"
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 81,
                                                          "column": 7
                                                        },
                                                        "end": {
                                                          "line": 81,
                                                          "column": 8
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.",
                                                      "line": 81
                                                    },
                                                    "dot",
                                                    "response"
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 81,
                                                      "column": 16
                                                    },
                                                    "end": {
                                                      "line": 81,
                                                      "column": 17
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.",
                                                  "line": 81
                                                },
                                                "dot",
                                                "sendStyle"
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 81,
                                                  "column": 26
                                                },
                                                "end": {
                                                  "line": 81,
                                                  "column": 27
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(",
                                              "line": 81
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 81,
                                              "column": 27
                                            },
                                            "end": {
                                              "line": 81,
                                              "column": 35
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template",
                                          "line": 81
                                        },
                                        {
                                          "type": "invokeArguments",
                                          "body": [
                                            {
                                              "type": "expressionList",
                                              "body": [
                                                {
                                                  "type": "identifier",
                                                  "body": [
                                                    {
                                                      "type": "identifier",
                                                      "body": [
                                                        "template"
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 81,
                                                          "column": 35
                                                        },
                                                        "end": {
                                                          "line": 81,
                                                          "column": 36
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.",
                                                      "line": 81
                                                    },
                                                    "dot",
                                                    "stylesheet"
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 81,
                                                      "column": 46
                                                    },
                                                    "end": {
                                                      "line": 81,
                                                      "column": 47
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet)",
                                                  "line": 81
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 81,
                                                  "column": 46
                                                },
                                                "end": {
                                                  "line": 81,
                                                  "column": 47
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet)",
                                              "line": 81
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 81,
                                              "column": 46
                                            },
                                            "end": {
                                              "line": 81,
                                              "column": 47
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet)",
                                          "line": 81
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 81,
                                          "column": 47
                                        },
                                        "end": {
                                          "line": 81,
                                          "column": 48
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);",
                                      "line": 81
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 82,
                                      "column": 0
                                    },
                                    "end": {
                                      "line": 82,
                                      "column": 1
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n}",
                                  "line": 82
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 82,
                                  "column": 1
                                },
                                "end": {
                                  "line": 82,
                                  "column": 2
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n})",
                              "line": 82
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 82,
                              "column": 1
                            },
                            "end": {
                              "line": 82,
                              "column": 2
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n})",
                          "line": 82
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 82,
                          "column": 1
                        },
                        "end": {
                          "line": 82,
                          "column": 2
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n})",
                      "line": 82
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 82,
                      "column": 1
                    },
                    "end": {
                      "line": 82,
                      "column": 2
                    }
                  },
                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n})",
                  "line": 82
                }
              ],
              "loc": {
                "start": {
                  "line": 82,
                  "column": 2
                },
                "end": {
                  "line": 82,
                  "column": 3
                }
              },
              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});",
              "line": 82
            }
          ],
          "loc": {
            "start": {
              "line": 83,
              "column": 0
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise",
          "line": 83
        },
        {
          "type": "invokeExpression",
          "body": [
            {
              "type": "invokeId",
              "body": [
                {
                  "type": "invokeExpression",
                  "body": [
                    {
                      "type": "invokeTracker",
                      "body": [
                        {
                          "type": "identifier",
                          "body": [
                            {
                              "type": "identifier",
                              "body": [
                                "promise"
                              ],
                              "loc": {
                                "start": {
                                  "line": 83,
                                  "column": 7
                                },
                                "end": {
                                  "line": 83,
                                  "column": 8
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.",
                              "line": 83
                            },
                            "dot",
                            "all"
                          ],
                          "loc": {
                            "start": {
                              "line": 83,
                              "column": 11
                            },
                            "end": {
                              "line": 83,
                              "column": 12
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(",
                          "line": 83
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 83,
                          "column": 12
                        },
                        "end": {
                          "line": 83,
                          "column": 18
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader",
                      "line": 83
                    },
                    {
                      "type": "invokeArguments",
                      "body": [
                        {
                          "type": "expressionList",
                          "body": [
                            {
                              "type": "identifier",
                              "body": [
                                {
                                  "type": "identifier",
                                  "body": [
                                    "loader"
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 83,
                                      "column": 18
                                    },
                                    "end": {
                                      "line": 83,
                                      "column": 19
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.",
                                  "line": 83
                                },
                                "dot",
                                "promises"
                              ],
                              "loc": {
                                "start": {
                                  "line": 83,
                                  "column": 27
                                },
                                "end": {
                                  "line": 83,
                                  "column": 28
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises)",
                              "line": 83
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 83,
                              "column": 27
                            },
                            "end": {
                              "line": 83,
                              "column": 28
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises)",
                          "line": 83
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 83,
                          "column": 27
                        },
                        "end": {
                          "line": 83,
                          "column": 28
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises)",
                      "line": 83
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 83,
                      "column": 28
                    },
                    "end": {
                      "line": 83,
                      "column": 29
                    }
                  },
                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).",
                  "line": 83
                },
                "dot",
                {
                  "type": "identifier",
                  "body": [
                    "then"
                  ],
                  "loc": {
                    "start": {
                      "line": 83,
                      "column": 33
                    },
                    "end": {
                      "line": 83,
                      "column": 34
                    }
                  },
                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then(",
                  "line": 83
                }
              ],
              "loc": {
                "start": {
                  "line": 83,
                  "column": 33
                },
                "end": {
                  "line": 83,
                  "column": 34
                }
              },
              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then(",
              "line": 83
            },
            {
              "type": "invokeArguments",
              "body": [
                {
                  "type": "expressionList",
                  "body": [
                    {
                      "type": "scopeExpression",
                      "body": [
                        {
                          "type": "scopeStart",
                          "body": [],
                          "loc": {
                            "start": {
                              "line": 84,
                              "column": 1
                            },
                            "end": {
                              "line": 84,
                              "column": 7
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver",
                          "line": 84
                        },
                        {
                          "type": "scopeArguments",
                          "body": [
                            {
                              "type": "associativeList",
                              "body": [
                                {
                                  "type": "associativeDeclaration",
                                  "body": [
                                    "pages",
                                    "id",
                                    {
                                      "type": "emptyMapExpression",
                                      "body": [
                                        {
                                          "type": "arrayStart",
                                          "body": [],
                                          "loc": {
                                            "start": {
                                              "line": 83,
                                              "column": 43
                                            },
                                            "end": {
                                              "line": 83,
                                              "column": 44
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []",
                                          "line": 83
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 83,
                                          "column": 44
                                        },
                                        "end": {
                                          "line": 83,
                                          "column": 45
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: [])",
                                      "line": 83
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 83,
                                      "column": 44
                                    },
                                    "end": {
                                      "line": 83,
                                      "column": 45
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: [])",
                                  "line": 83
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 83,
                                  "column": 44
                                },
                                "end": {
                                  "line": 83,
                                  "column": 45
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: [])",
                              "line": 83
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 83,
                              "column": 44
                            },
                            "end": {
                              "line": 83,
                              "column": 45
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: [])",
                          "line": 83
                        },
                        {
                          "type": "controlCode",
                          "body": [
                            {
                              "type": "controlCode",
                              "body": [],
                              "loc": {
                                "start": {
                                  "line": 84,
                                  "column": 1
                                },
                                "end": {
                                  "line": 84,
                                  "column": 7
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver",
                              "line": 84
                            },
                            {
                              "type": "invokeExpression",
                              "body": [
                                {
                                  "type": "invokeTracker",
                                  "body": [
                                    {
                                      "type": "identifier",
                                      "body": [
                                        {
                                          "type": "identifier",
                                          "body": [
                                            "server"
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 84,
                                              "column": 7
                                            },
                                            "end": {
                                              "line": 84,
                                              "column": 8
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.",
                                          "line": 84
                                        },
                                        "dot",
                                        "get"
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 84,
                                          "column": 11
                                        },
                                        "end": {
                                          "line": 84,
                                          "column": 12
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(",
                                      "line": 84
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 84,
                                      "column": 12
                                    },
                                    "end": {
                                      "line": 84,
                                      "column": 20
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\"",
                                  "line": 84
                                },
                                {
                                  "type": "invokeArguments",
                                  "body": [
                                    {
                                      "type": "expressionList",
                                      "body": [
                                        {
                                          "type": "stringLiteral",
                                          "body": "/:page",
                                          "loc": {
                                            "start": {
                                              "line": 84,
                                              "column": 20
                                            },
                                            "end": {
                                              "line": 84,
                                              "column": 21
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\",",
                                          "line": 84
                                        },
                                        {
                                          "type": "expressionList",
                                          "body": [
                                            {
                                              "type": "scopeExpression",
                                              "body": [
                                                {
                                                  "type": "scopeStart",
                                                  "body": [],
                                                  "loc": {
                                                    "start": {
                                                      "line": 85,
                                                      "column": 2
                                                    },
                                                    "end": {
                                                      "line": 85,
                                                      "column": 5
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet",
                                                  "line": 85
                                                },
                                                {
                                                  "type": "scopeArguments",
                                                  "body": [
                                                    {
                                                      "type": "associativeList",
                                                      "body": [
                                                        {
                                                          "type": "associativeDeclaration",
                                                          "body": [
                                                            "client",
                                                            "id",
                                                            {
                                                              "type": "emptyMapExpression",
                                                              "body": [
                                                                {
                                                                  "type": "arrayStart",
                                                                  "body": [],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 84,
                                                                      "column": 32
                                                                    },
                                                                    "end": {
                                                                      "line": 84,
                                                                      "column": 33
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []",
                                                                  "line": 84
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 84,
                                                                  "column": 33
                                                                },
                                                                "end": {
                                                                  "line": 84,
                                                                  "column": 34
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: [])",
                                                              "line": 84
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 84,
                                                              "column": 33
                                                            },
                                                            "end": {
                                                              "line": 84,
                                                              "column": 34
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: [])",
                                                          "line": 84
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 84,
                                                          "column": 33
                                                        },
                                                        "end": {
                                                          "line": 84,
                                                          "column": 34
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: [])",
                                                      "line": 84
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 84,
                                                      "column": 33
                                                    },
                                                    "end": {
                                                      "line": 84,
                                                      "column": 34
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: [])",
                                                  "line": 84
                                                },
                                                {
                                                  "type": "controlCode",
                                                  "body": [
                                                    {
                                                      "type": "controlCode",
                                                      "body": [
                                                        {
                                                          "type": "controlCode",
                                                          "body": [
                                                            {
                                                              "type": "controlCode",
                                                              "body": [],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 85,
                                                                  "column": 2
                                                                },
                                                                "end": {
                                                                  "line": 85,
                                                                  "column": 5
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet",
                                                              "line": 85
                                                            },
                                                            {
                                                              "type": "declarationExpression",
                                                              "body": [
                                                                "let",
                                                                "renderred",
                                                                {
                                                                  "type": "booleanLiteral",
                                                                  "body": false,
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 85,
                                                                      "column": 23
                                                                    },
                                                                    "end": {
                                                                      "line": 85,
                                                                      "column": 24
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;",
                                                                  "line": 85
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 85,
                                                                  "column": 23
                                                                },
                                                                "end": {
                                                                  "line": 85,
                                                                  "column": 24
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;",
                                                              "line": 85
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 86,
                                                              "column": 2
                                                            },
                                                            "end": {
                                                              "line": 86,
                                                              "column": 6
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach",
                                                          "line": 86
                                                        },
                                                        {
                                                          "type": "invokeExpression",
                                                          "body": [
                                                            {
                                                              "type": "invokeTracker",
                                                              "body": [
                                                                {
                                                                  "type": "identifier",
                                                                  "body": [
                                                                    "each"
                                                                  ],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 86,
                                                                      "column": 6
                                                                    },
                                                                    "end": {
                                                                      "line": 86,
                                                                      "column": 7
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(",
                                                                  "line": 86
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 86,
                                                                  "column": 7
                                                                },
                                                                "end": {
                                                                  "line": 86,
                                                                  "column": 12
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages",
                                                              "line": 86
                                                            },
                                                            {
                                                              "type": "invokeArguments",
                                                              "body": [
                                                                {
                                                                  "type": "expressionList",
                                                                  "body": [
                                                                    {
                                                                      "type": "identifier",
                                                                      "body": [
                                                                        "pages"
                                                                      ],
                                                                      "loc": {
                                                                        "start": {
                                                                          "line": 86,
                                                                          "column": 12
                                                                        },
                                                                        "end": {
                                                                          "line": 86,
                                                                          "column": 13
                                                                        }
                                                                      },
                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages,",
                                                                      "line": 86
                                                                    },
                                                                    {
                                                                      "type": "expressionList",
                                                                      "body": [
                                                                        {
                                                                          "type": "scopeExpression",
                                                                          "body": [
                                                                            {
                                                                              "type": "scopeStart",
                                                                              "body": [],
                                                                              "loc": {
                                                                                "start": {
                                                                                  "line": 87,
                                                                                  "column": 3
                                                                                },
                                                                                "end": {
                                                                                  "line": 87,
                                                                                  "column": 5
                                                                                }
                                                                              },
                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif",
                                                                              "line": 87
                                                                            },
                                                                            {
                                                                              "type": "scopeArguments",
                                                                              "body": [
                                                                                {
                                                                                  "type": "associativeList",
                                                                                  "body": [
                                                                                    {
                                                                                      "type": "associativeList",
                                                                                      "body": [
                                                                                        {
                                                                                          "type": "associativeDeclaration",
                                                                                          "body": [
                                                                                            "sc",
                                                                                            "id",
                                                                                            {
                                                                                              "type": "scopeExpression",
                                                                                              "body": [
                                                                                                {
                                                                                                  "type": "scopeStart",
                                                                                                  "body": [],
                                                                                                  "loc": {
                                                                                                    "start": {
                                                                                                      "line": 86,
                                                                                                      "column": 20
                                                                                                    },
                                                                                                    "end": {
                                                                                                      "line": 86,
                                                                                                      "column": 21
                                                                                                    }
                                                                                                  },
                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}",
                                                                                                  "line": 86
                                                                                                },
                                                                                                {
                                                                                                  "type": "controlCode",
                                                                                                  "body": [],
                                                                                                  "loc": {
                                                                                                    "start": {
                                                                                                      "line": 86,
                                                                                                      "column": 20
                                                                                                    },
                                                                                                    "end": {
                                                                                                      "line": 86,
                                                                                                      "column": 21
                                                                                                    }
                                                                                                  },
                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}",
                                                                                                  "line": 86
                                                                                                }
                                                                                              ],
                                                                                              "loc": {
                                                                                                "start": {
                                                                                                  "line": 86,
                                                                                                  "column": 21
                                                                                                },
                                                                                                "end": {
                                                                                                  "line": 86,
                                                                                                  "column": 22
                                                                                                }
                                                                                              },
                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {},",
                                                                                              "line": 86
                                                                                            }
                                                                                          ],
                                                                                          "loc": {
                                                                                            "start": {
                                                                                              "line": 86,
                                                                                              "column": 21
                                                                                            },
                                                                                            "end": {
                                                                                              "line": 86,
                                                                                              "column": 22
                                                                                            }
                                                                                          },
                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {},",
                                                                                          "line": 86
                                                                                        }
                                                                                      ],
                                                                                      "loc": {
                                                                                        "start": {
                                                                                          "line": 86,
                                                                                          "column": 21
                                                                                        },
                                                                                        "end": {
                                                                                          "line": 86,
                                                                                          "column": 22
                                                                                        }
                                                                                      },
                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {},",
                                                                                      "line": 86
                                                                                    },
                                                                                    {
                                                                                      "type": "associativeDeclaration",
                                                                                      "body": [
                                                                                        "name",
                                                                                        "id",
                                                                                        {
                                                                                          "type": "stringLiteral",
                                                                                          "body": "",
                                                                                          "loc": {
                                                                                            "start": {
                                                                                              "line": 86,
                                                                                              "column": 31
                                                                                            },
                                                                                            "end": {
                                                                                              "line": 86,
                                                                                              "column": 32
                                                                                            }
                                                                                          },
                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\")",
                                                                                          "line": 86
                                                                                        }
                                                                                      ],
                                                                                      "loc": {
                                                                                        "start": {
                                                                                          "line": 86,
                                                                                          "column": 31
                                                                                        },
                                                                                        "end": {
                                                                                          "line": 86,
                                                                                          "column": 32
                                                                                        }
                                                                                      },
                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\")",
                                                                                      "line": 86
                                                                                    }
                                                                                  ],
                                                                                  "loc": {
                                                                                    "start": {
                                                                                      "line": 86,
                                                                                      "column": 31
                                                                                    },
                                                                                    "end": {
                                                                                      "line": 86,
                                                                                      "column": 32
                                                                                    }
                                                                                  },
                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\")",
                                                                                  "line": 86
                                                                                }
                                                                              ],
                                                                              "loc": {
                                                                                "start": {
                                                                                  "line": 86,
                                                                                  "column": 31
                                                                                },
                                                                                "end": {
                                                                                  "line": 86,
                                                                                  "column": 32
                                                                                }
                                                                              },
                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\")",
                                                                              "line": 86
                                                                            },
                                                                            {
                                                                              "type": "controlCode",
                                                                              "body": [
                                                                                {
                                                                                  "type": "controlCode",
                                                                                  "body": [],
                                                                                  "loc": {
                                                                                    "start": {
                                                                                      "line": 87,
                                                                                      "column": 3
                                                                                    },
                                                                                    "end": {
                                                                                      "line": 87,
                                                                                      "column": 5
                                                                                    }
                                                                                  },
                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif",
                                                                                  "line": 87
                                                                                },
                                                                                {
                                                                                  "type": "invokeExpression",
                                                                                  "body": [
                                                                                    {
                                                                                      "type": "invokeTracker",
                                                                                      "body": [
                                                                                        {
                                                                                          "type": "identifier",
                                                                                          "body": [
                                                                                            "if"
                                                                                          ],
                                                                                          "loc": {
                                                                                            "start": {
                                                                                              "line": 87,
                                                                                              "column": 6
                                                                                            },
                                                                                            "end": {
                                                                                              "line": 87,
                                                                                              "column": 7
                                                                                            }
                                                                                          },
                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (",
                                                                                          "line": 87
                                                                                        }
                                                                                      ],
                                                                                      "loc": {
                                                                                        "start": {
                                                                                          "line": 87,
                                                                                          "column": 7
                                                                                        },
                                                                                        "end": {
                                                                                          "line": 87,
                                                                                          "column": 11
                                                                                        }
                                                                                      },
                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name",
                                                                                      "line": 87
                                                                                    },
                                                                                    {
                                                                                      "type": "invokeArguments",
                                                                                      "body": [
                                                                                        {
                                                                                          "type": "expressionList",
                                                                                          "body": [
                                                                                            {
                                                                                              "type": "binaryExpression",
                                                                                              "body": [
                                                                                                {
                                                                                                  "type": "identifier",
                                                                                                  "body": [
                                                                                                    "name"
                                                                                                  ],
                                                                                                  "loc": {
                                                                                                    "start": {
                                                                                                      "line": 87,
                                                                                                      "column": 12
                                                                                                    },
                                                                                                    "end": {
                                                                                                      "line": 87,
                                                                                                      "column": 14
                                                                                                    }
                                                                                                  },
                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is",
                                                                                                  "line": 87
                                                                                                },
                                                                                                "===",
                                                                                                {
                                                                                                  "type": "identifier",
                                                                                                  "body": [
                                                                                                    {
                                                                                                      "type": "identifier",
                                                                                                      "body": [
                                                                                                        {
                                                                                                          "type": "identifier",
                                                                                                          "body": [
                                                                                                            {
                                                                                                              "type": "identifier",
                                                                                                              "body": [
                                                                                                                "client"
                                                                                                              ],
                                                                                                              "loc": {
                                                                                                                "start": {
                                                                                                                  "line": 87,
                                                                                                                  "column": 21
                                                                                                                },
                                                                                                                "end": {
                                                                                                                  "line": 87,
                                                                                                                  "column": 22
                                                                                                                }
                                                                                                              },
                                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.",
                                                                                                              "line": 87
                                                                                                            },
                                                                                                            "dot",
                                                                                                            "request"
                                                                                                          ],
                                                                                                          "loc": {
                                                                                                            "start": {
                                                                                                              "line": 87,
                                                                                                              "column": 29
                                                                                                            },
                                                                                                            "end": {
                                                                                                              "line": 87,
                                                                                                              "column": 30
                                                                                                            }
                                                                                                          },
                                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.",
                                                                                                          "line": 87
                                                                                                        },
                                                                                                        "dot",
                                                                                                        "params"
                                                                                                      ],
                                                                                                      "loc": {
                                                                                                        "start": {
                                                                                                          "line": 87,
                                                                                                          "column": 36
                                                                                                        },
                                                                                                        "end": {
                                                                                                          "line": 87,
                                                                                                          "column": 37
                                                                                                        }
                                                                                                      },
                                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.",
                                                                                                      "line": 87
                                                                                                    },
                                                                                                    "dot",
                                                                                                    "page"
                                                                                                  ],
                                                                                                  "loc": {
                                                                                                    "start": {
                                                                                                      "line": 87,
                                                                                                      "column": 41
                                                                                                    },
                                                                                                    "end": {
                                                                                                      "line": 87,
                                                                                                      "column": 42
                                                                                                    }
                                                                                                  },
                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page,",
                                                                                                  "line": 87
                                                                                                }
                                                                                              ],
                                                                                              "loc": {
                                                                                                "start": {
                                                                                                  "line": 87,
                                                                                                  "column": 41
                                                                                                },
                                                                                                "end": {
                                                                                                  "line": 87,
                                                                                                  "column": 42
                                                                                                }
                                                                                              },
                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page,",
                                                                                              "line": 87
                                                                                            },
                                                                                            {
                                                                                              "type": "expressionList",
                                                                                              "body": [
                                                                                                {
                                                                                                  "type": "scopeExpression",
                                                                                                  "body": [
                                                                                                    {
                                                                                                      "type": "scopeStart",
                                                                                                      "body": [],
                                                                                                      "loc": {
                                                                                                        "start": {
                                                                                                          "line": 88,
                                                                                                          "column": 4
                                                                                                        },
                                                                                                        "end": {
                                                                                                          "line": 88,
                                                                                                          "column": 7
                                                                                                        }
                                                                                                      },
                                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse",
                                                                                                      "line": 88
                                                                                                    },
                                                                                                    {
                                                                                                      "type": "controlCode",
                                                                                                      "body": [
                                                                                                        {
                                                                                                          "type": "controlCode",
                                                                                                          "body": [
                                                                                                            {
                                                                                                              "type": "controlCode",
                                                                                                              "body": [
                                                                                                                {
                                                                                                                  "type": "controlCode",
                                                                                                                  "body": [],
                                                                                                                  "loc": {
                                                                                                                    "start": {
                                                                                                                      "line": 88,
                                                                                                                      "column": 4
                                                                                                                    },
                                                                                                                    "end": {
                                                                                                                      "line": 88,
                                                                                                                      "column": 7
                                                                                                                    }
                                                                                                                  },
                                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse",
                                                                                                                  "line": 88
                                                                                                                },
                                                                                                                {
                                                                                                                  "type": "useExpression",
                                                                                                                  "body": [
                                                                                                                    {
                                                                                                                      "type": "usable",
                                                                                                                      "body": [
                                                                                                                        {
                                                                                                                          "type": "identifier",
                                                                                                                          "body": [
                                                                                                                            "sc"
                                                                                                                          ],
                                                                                                                          "loc": {
                                                                                                                            "start": {
                                                                                                                              "line": 88,
                                                                                                                              "column": 10
                                                                                                                            },
                                                                                                                            "end": {
                                                                                                                              "line": 88,
                                                                                                                              "column": 11
                                                                                                                            }
                                                                                                                          },
                                                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;",
                                                                                                                          "line": 88
                                                                                                                        }
                                                                                                                      ],
                                                                                                                      "loc": {
                                                                                                                        "start": {
                                                                                                                          "line": 88,
                                                                                                                          "column": 10
                                                                                                                        },
                                                                                                                        "end": {
                                                                                                                          "line": 88,
                                                                                                                          "column": 11
                                                                                                                        }
                                                                                                                      },
                                                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;",
                                                                                                                      "line": 88
                                                                                                                    }
                                                                                                                  ],
                                                                                                                  "loc": {
                                                                                                                    "start": {
                                                                                                                      "line": 88,
                                                                                                                      "column": 10
                                                                                                                    },
                                                                                                                    "end": {
                                                                                                                      "line": 88,
                                                                                                                      "column": 11
                                                                                                                    }
                                                                                                                  },
                                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;",
                                                                                                                  "line": 88
                                                                                                                }
                                                                                                              ],
                                                                                                              "loc": {
                                                                                                                "start": {
                                                                                                                  "line": 89,
                                                                                                                  "column": 4
                                                                                                                },
                                                                                                                "end": {
                                                                                                                  "line": 89,
                                                                                                                  "column": 10
                                                                                                                }
                                                                                                              },
                                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient",
                                                                                                              "line": 89
                                                                                                            },
                                                                                                            {
                                                                                                              "type": "invokeExpression",
                                                                                                              "body": [
                                                                                                                {
                                                                                                                  "type": "invokeTracker",
                                                                                                                  "body": [
                                                                                                                    {
                                                                                                                      "type": "identifier",
                                                                                                                      "body": [
                                                                                                                        {
                                                                                                                          "type": "identifier",
                                                                                                                          "body": [
                                                                                                                            {
                                                                                                                              "type": "identifier",
                                                                                                                              "body": [
                                                                                                                                "client"
                                                                                                                              ],
                                                                                                                              "loc": {
                                                                                                                                "start": {
                                                                                                                                  "line": 89,
                                                                                                                                  "column": 10
                                                                                                                                },
                                                                                                                                "end": {
                                                                                                                                  "line": 89,
                                                                                                                                  "column": 11
                                                                                                                                }
                                                                                                                              },
                                                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.",
                                                                                                                              "line": 89
                                                                                                                            },
                                                                                                                            "dot",
                                                                                                                            "response"
                                                                                                                          ],
                                                                                                                          "loc": {
                                                                                                                            "start": {
                                                                                                                              "line": 89,
                                                                                                                              "column": 19
                                                                                                                            },
                                                                                                                            "end": {
                                                                                                                              "line": 89,
                                                                                                                              "column": 20
                                                                                                                            }
                                                                                                                          },
                                                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.",
                                                                                                                          "line": 89
                                                                                                                        },
                                                                                                                        "dot",
                                                                                                                        "render"
                                                                                                                      ],
                                                                                                                      "loc": {
                                                                                                                        "start": {
                                                                                                                          "line": 89,
                                                                                                                          "column": 26
                                                                                                                        },
                                                                                                                        "end": {
                                                                                                                          "line": 89,
                                                                                                                          "column": 27
                                                                                                                        }
                                                                                                                      },
                                                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(",
                                                                                                                      "line": 89
                                                                                                                    }
                                                                                                                  ],
                                                                                                                  "loc": {
                                                                                                                    "start": {
                                                                                                                      "line": 89,
                                                                                                                      "column": 27
                                                                                                                    },
                                                                                                                    "end": {
                                                                                                                      "line": 89,
                                                                                                                      "column": 31
                                                                                                                    }
                                                                                                                  },
                                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page",
                                                                                                                  "line": 89
                                                                                                                },
                                                                                                                {
                                                                                                                  "type": "invokeArguments",
                                                                                                                  "body": [
                                                                                                                    {
                                                                                                                      "type": "expressionList",
                                                                                                                      "body": [
                                                                                                                        {
                                                                                                                          "type": "invokeExpression",
                                                                                                                          "body": [
                                                                                                                            {
                                                                                                                              "type": "invokeTracker",
                                                                                                                              "body": [
                                                                                                                                {
                                                                                                                                  "type": "identifier",
                                                                                                                                  "body": [
                                                                                                                                    "page"
                                                                                                                                  ],
                                                                                                                                  "loc": {
                                                                                                                                    "start": {
                                                                                                                                      "line": 89,
                                                                                                                                      "column": 31
                                                                                                                                    },
                                                                                                                                    "end": {
                                                                                                                                      "line": 89,
                                                                                                                                      "column": 32
                                                                                                                                    }
                                                                                                                                  },
                                                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(",
                                                                                                                                  "line": 89
                                                                                                                                }
                                                                                                                              ],
                                                                                                                              "loc": {
                                                                                                                                "start": {
                                                                                                                                  "line": 89,
                                                                                                                                  "column": 32
                                                                                                                                },
                                                                                                                                "end": {
                                                                                                                                  "line": 89,
                                                                                                                                  "column": 40
                                                                                                                                }
                                                                                                                              },
                                                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template",
                                                                                                                              "line": 89
                                                                                                                            },
                                                                                                                            {
                                                                                                                              "type": "invokeArguments",
                                                                                                                              "body": [
                                                                                                                                {
                                                                                                                                  "type": "expressionList",
                                                                                                                                  "body": [
                                                                                                                                    {
                                                                                                                                      "type": "identifier",
                                                                                                                                      "body": [
                                                                                                                                        {
                                                                                                                                          "type": "identifier",
                                                                                                                                          "body": [
                                                                                                                                            "template"
                                                                                                                                          ],
                                                                                                                                          "loc": {
                                                                                                                                            "start": {
                                                                                                                                              "line": 89,
                                                                                                                                              "column": 40
                                                                                                                                            },
                                                                                                                                            "end": {
                                                                                                                                              "line": 89,
                                                                                                                                              "column": 41
                                                                                                                                            }
                                                                                                                                          },
                                                                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.",
                                                                                                                                          "line": 89
                                                                                                                                        },
                                                                                                                                        "dot",
                                                                                                                                        "generate"
                                                                                                                                      ],
                                                                                                                                      "loc": {
                                                                                                                                        "start": {
                                                                                                                                          "line": 89,
                                                                                                                                          "column": 49
                                                                                                                                        },
                                                                                                                                        "end": {
                                                                                                                                          "line": 89,
                                                                                                                                          "column": 50
                                                                                                                                        }
                                                                                                                                      },
                                                                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate)",
                                                                                                                                      "line": 89
                                                                                                                                    }
                                                                                                                                  ],
                                                                                                                                  "loc": {
                                                                                                                                    "start": {
                                                                                                                                      "line": 89,
                                                                                                                                      "column": 49
                                                                                                                                    },
                                                                                                                                    "end": {
                                                                                                                                      "line": 89,
                                                                                                                                      "column": 50
                                                                                                                                    }
                                                                                                                                  },
                                                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate)",
                                                                                                                                  "line": 89
                                                                                                                                }
                                                                                                                              ],
                                                                                                                              "loc": {
                                                                                                                                "start": {
                                                                                                                                  "line": 89,
                                                                                                                                  "column": 49
                                                                                                                                },
                                                                                                                                "end": {
                                                                                                                                  "line": 89,
                                                                                                                                  "column": 50
                                                                                                                                }
                                                                                                                              },
                                                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate)",
                                                                                                                              "line": 89
                                                                                                                            }
                                                                                                                          ],
                                                                                                                          "loc": {
                                                                                                                            "start": {
                                                                                                                              "line": 89,
                                                                                                                              "column": 50
                                                                                                                            },
                                                                                                                            "end": {
                                                                                                                              "line": 89,
                                                                                                                              "column": 51
                                                                                                                            }
                                                                                                                          },
                                                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate),",
                                                                                                                          "line": 89
                                                                                                                        },
                                                                                                                        {
                                                                                                                          "type": "expressionList",
                                                                                                                          "body": [
                                                                                                                            {
                                                                                                                              "type": "booleanLiteral",
                                                                                                                              "body": false,
                                                                                                                              "loc": {
                                                                                                                                "start": {
                                                                                                                                  "line": 89,
                                                                                                                                  "column": 57
                                                                                                                                },
                                                                                                                                "end": {
                                                                                                                                  "line": 89,
                                                                                                                                  "column": 58
                                                                                                                                }
                                                                                                                              },
                                                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false)",
                                                                                                                              "line": 89
                                                                                                                            }
                                                                                                                          ],
                                                                                                                          "loc": {
                                                                                                                            "start": {
                                                                                                                              "line": 89,
                                                                                                                              "column": 57
                                                                                                                            },
                                                                                                                            "end": {
                                                                                                                              "line": 89,
                                                                                                                              "column": 58
                                                                                                                            }
                                                                                                                          },
                                                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false)",
                                                                                                                          "line": 89
                                                                                                                        }
                                                                                                                      ],
                                                                                                                      "loc": {
                                                                                                                        "start": {
                                                                                                                          "line": 89,
                                                                                                                          "column": 57
                                                                                                                        },
                                                                                                                        "end": {
                                                                                                                          "line": 89,
                                                                                                                          "column": 58
                                                                                                                        }
                                                                                                                      },
                                                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false)",
                                                                                                                      "line": 89
                                                                                                                    }
                                                                                                                  ],
                                                                                                                  "loc": {
                                                                                                                    "start": {
                                                                                                                      "line": 89,
                                                                                                                      "column": 57
                                                                                                                    },
                                                                                                                    "end": {
                                                                                                                      "line": 89,
                                                                                                                      "column": 58
                                                                                                                    }
                                                                                                                  },
                                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false)",
                                                                                                                  "line": 89
                                                                                                                }
                                                                                                              ],
                                                                                                              "loc": {
                                                                                                                "start": {
                                                                                                                  "line": 89,
                                                                                                                  "column": 58
                                                                                                                },
                                                                                                                "end": {
                                                                                                                  "line": 89,
                                                                                                                  "column": 59
                                                                                                                }
                                                                                                              },
                                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);",
                                                                                                              "line": 89
                                                                                                            }
                                                                                                          ],
                                                                                                          "loc": {
                                                                                                            "start": {
                                                                                                              "line": 90,
                                                                                                              "column": 4
                                                                                                            },
                                                                                                            "end": {
                                                                                                              "line": 90,
                                                                                                              "column": 13
                                                                                                            }
                                                                                                          },
                                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred",
                                                                                                          "line": 90
                                                                                                        },
                                                                                                        {
                                                                                                          "type": "assignmentExpression",
                                                                                                          "body": [
                                                                                                            {
                                                                                                              "type": "identifier",
                                                                                                              "body": [
                                                                                                                "renderred"
                                                                                                              ],
                                                                                                              "loc": {
                                                                                                                "start": {
                                                                                                                  "line": 90,
                                                                                                                  "column": 14
                                                                                                                },
                                                                                                                "end": {
                                                                                                                  "line": 90,
                                                                                                                  "column": 15
                                                                                                                }
                                                                                                              },
                                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred =",
                                                                                                              "line": 90
                                                                                                            },
                                                                                                            {
                                                                                                              "type": "assignmentValue",
                                                                                                              "body": [
                                                                                                                "=",
                                                                                                                {
                                                                                                                  "type": "booleanLiteral",
                                                                                                                  "body": true,
                                                                                                                  "loc": {
                                                                                                                    "start": {
                                                                                                                      "line": 90,
                                                                                                                      "column": 20
                                                                                                                    },
                                                                                                                    "end": {
                                                                                                                      "line": 90,
                                                                                                                      "column": 21
                                                                                                                    }
                                                                                                                  },
                                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;",
                                                                                                                  "line": 90
                                                                                                                }
                                                                                                              ],
                                                                                                              "loc": {
                                                                                                                "start": {
                                                                                                                  "line": 90,
                                                                                                                  "column": 20
                                                                                                                },
                                                                                                                "end": {
                                                                                                                  "line": 90,
                                                                                                                  "column": 21
                                                                                                                }
                                                                                                              },
                                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;",
                                                                                                              "line": 90
                                                                                                            }
                                                                                                          ],
                                                                                                          "loc": {
                                                                                                            "start": {
                                                                                                              "line": 90,
                                                                                                              "column": 20
                                                                                                            },
                                                                                                            "end": {
                                                                                                              "line": 90,
                                                                                                              "column": 21
                                                                                                            }
                                                                                                          },
                                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;",
                                                                                                          "line": 90
                                                                                                        }
                                                                                                      ],
                                                                                                      "loc": {
                                                                                                        "start": {
                                                                                                          "line": 91,
                                                                                                          "column": 3
                                                                                                        },
                                                                                                        "end": {
                                                                                                          "line": 91,
                                                                                                          "column": 4
                                                                                                        }
                                                                                                      },
                                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t}",
                                                                                                      "line": 91
                                                                                                    }
                                                                                                  ],
                                                                                                  "loc": {
                                                                                                    "start": {
                                                                                                      "line": 91,
                                                                                                      "column": 4
                                                                                                    },
                                                                                                    "end": {
                                                                                                      "line": 91,
                                                                                                      "column": 5
                                                                                                    }
                                                                                                  },
                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t})",
                                                                                                  "line": 91
                                                                                                }
                                                                                              ],
                                                                                              "loc": {
                                                                                                "start": {
                                                                                                  "line": 91,
                                                                                                  "column": 4
                                                                                                },
                                                                                                "end": {
                                                                                                  "line": 91,
                                                                                                  "column": 5
                                                                                                }
                                                                                              },
                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t})",
                                                                                              "line": 91
                                                                                            }
                                                                                          ],
                                                                                          "loc": {
                                                                                            "start": {
                                                                                              "line": 91,
                                                                                              "column": 4
                                                                                            },
                                                                                            "end": {
                                                                                              "line": 91,
                                                                                              "column": 5
                                                                                            }
                                                                                          },
                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t})",
                                                                                          "line": 91
                                                                                        }
                                                                                      ],
                                                                                      "loc": {
                                                                                        "start": {
                                                                                          "line": 91,
                                                                                          "column": 4
                                                                                        },
                                                                                        "end": {
                                                                                          "line": 91,
                                                                                          "column": 5
                                                                                        }
                                                                                      },
                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t})",
                                                                                      "line": 91
                                                                                    }
                                                                                  ],
                                                                                  "loc": {
                                                                                    "start": {
                                                                                      "line": 91,
                                                                                      "column": 5
                                                                                    },
                                                                                    "end": {
                                                                                      "line": 91,
                                                                                      "column": 6
                                                                                    }
                                                                                  },
                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});",
                                                                                  "line": 91
                                                                                }
                                                                              ],
                                                                              "loc": {
                                                                                "start": {
                                                                                  "line": 92,
                                                                                  "column": 2
                                                                                },
                                                                                "end": {
                                                                                  "line": 92,
                                                                                  "column": 3
                                                                                }
                                                                              },
                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t}",
                                                                              "line": 92
                                                                            }
                                                                          ],
                                                                          "loc": {
                                                                            "start": {
                                                                              "line": 92,
                                                                              "column": 3
                                                                            },
                                                                            "end": {
                                                                              "line": 92,
                                                                              "column": 4
                                                                            }
                                                                          },
                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t})",
                                                                          "line": 92
                                                                        }
                                                                      ],
                                                                      "loc": {
                                                                        "start": {
                                                                          "line": 92,
                                                                          "column": 3
                                                                        },
                                                                        "end": {
                                                                          "line": 92,
                                                                          "column": 4
                                                                        }
                                                                      },
                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t})",
                                                                      "line": 92
                                                                    }
                                                                  ],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 92,
                                                                      "column": 3
                                                                    },
                                                                    "end": {
                                                                      "line": 92,
                                                                      "column": 4
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t})",
                                                                  "line": 92
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 92,
                                                                  "column": 3
                                                                },
                                                                "end": {
                                                                  "line": 92,
                                                                  "column": 4
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t})",
                                                              "line": 92
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 92,
                                                              "column": 4
                                                            },
                                                            "end": {
                                                              "line": 92,
                                                              "column": 5
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});",
                                                          "line": 92
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 93,
                                                          "column": 2
                                                        },
                                                        "end": {
                                                          "line": 93,
                                                          "column": 4
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif",
                                                      "line": 93
                                                    },
                                                    {
                                                      "type": "invokeExpression",
                                                      "body": [
                                                        {
                                                          "type": "invokeTracker",
                                                          "body": [
                                                            {
                                                              "type": "identifier",
                                                              "body": [
                                                                "if"
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 93,
                                                                  "column": 5
                                                                },
                                                                "end": {
                                                                  "line": 93,
                                                                  "column": 6
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (",
                                                              "line": 93
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 93,
                                                              "column": 6
                                                            },
                                                            "end": {
                                                              "line": 93,
                                                              "column": 7
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!",
                                                          "line": 93
                                                        },
                                                        {
                                                          "type": "invokeArguments",
                                                          "body": [
                                                            {
                                                              "type": "expressionList",
                                                              "body": [
                                                                {
                                                                  "type": "unaryExpression",
                                                                  "body": [
                                                                    "!",
                                                                    {
                                                                      "type": "identifier",
                                                                      "body": [
                                                                        "renderred"
                                                                      ],
                                                                      "loc": {
                                                                        "start": {
                                                                          "line": 93,
                                                                          "column": 16
                                                                        },
                                                                        "end": {
                                                                          "line": 93,
                                                                          "column": 17
                                                                        }
                                                                      },
                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred,",
                                                                      "line": 93
                                                                    }
                                                                  ],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 93,
                                                                      "column": 16
                                                                    },
                                                                    "end": {
                                                                      "line": 93,
                                                                      "column": 17
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred,",
                                                                  "line": 93
                                                                },
                                                                {
                                                                  "type": "expressionList",
                                                                  "body": [
                                                                    {
                                                                      "type": "scopeExpression",
                                                                      "body": [
                                                                        {
                                                                          "type": "scopeStart",
                                                                          "body": [],
                                                                          "loc": {
                                                                            "start": {
                                                                              "line": 94,
                                                                              "column": 3
                                                                            },
                                                                            "end": {
                                                                              "line": 94,
                                                                              "column": 9
                                                                            }
                                                                          },
                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient",
                                                                          "line": 94
                                                                        },
                                                                        {
                                                                          "type": "controlCode",
                                                                          "body": [
                                                                            {
                                                                              "type": "controlCode",
                                                                              "body": [
                                                                                {
                                                                                  "type": "controlCode",
                                                                                  "body": [],
                                                                                  "loc": {
                                                                                    "start": {
                                                                                      "line": 94,
                                                                                      "column": 3
                                                                                    },
                                                                                    "end": {
                                                                                      "line": 94,
                                                                                      "column": 9
                                                                                    }
                                                                                  },
                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient",
                                                                                  "line": 94
                                                                                },
                                                                                {
                                                                                  "type": "invokeExpression",
                                                                                  "body": [
                                                                                    {
                                                                                      "type": "invokeTracker",
                                                                                      "body": [
                                                                                        {
                                                                                          "type": "identifier",
                                                                                          "body": [
                                                                                            {
                                                                                              "type": "identifier",
                                                                                              "body": [
                                                                                                {
                                                                                                  "type": "identifier",
                                                                                                  "body": [
                                                                                                    "client"
                                                                                                  ],
                                                                                                  "loc": {
                                                                                                    "start": {
                                                                                                      "line": 94,
                                                                                                      "column": 9
                                                                                                    },
                                                                                                    "end": {
                                                                                                      "line": 94,
                                                                                                      "column": 10
                                                                                                    }
                                                                                                  },
                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.",
                                                                                                  "line": 94
                                                                                                },
                                                                                                "dot",
                                                                                                "response"
                                                                                              ],
                                                                                              "loc": {
                                                                                                "start": {
                                                                                                  "line": 94,
                                                                                                  "column": 18
                                                                                                },
                                                                                                "end": {
                                                                                                  "line": 94,
                                                                                                  "column": 19
                                                                                                }
                                                                                              },
                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.",
                                                                                              "line": 94
                                                                                            },
                                                                                            "dot",
                                                                                            "status"
                                                                                          ],
                                                                                          "loc": {
                                                                                            "start": {
                                                                                              "line": 94,
                                                                                              "column": 25
                                                                                            },
                                                                                            "end": {
                                                                                              "line": 94,
                                                                                              "column": 26
                                                                                            }
                                                                                          },
                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(",
                                                                                          "line": 94
                                                                                        }
                                                                                      ],
                                                                                      "loc": {
                                                                                        "start": {
                                                                                          "line": 94,
                                                                                          "column": 26
                                                                                        },
                                                                                        "end": {
                                                                                          "line": 94,
                                                                                          "column": 29
                                                                                        }
                                                                                      },
                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404",
                                                                                      "line": 94
                                                                                    },
                                                                                    {
                                                                                      "type": "invokeArguments",
                                                                                      "body": [
                                                                                        {
                                                                                          "type": "expressionList",
                                                                                          "body": [
                                                                                            {
                                                                                              "type": "numericLiteral",
                                                                                              "body": 404,
                                                                                              "loc": {
                                                                                                "start": {
                                                                                                  "line": 94,
                                                                                                  "column": 29
                                                                                                },
                                                                                                "end": {
                                                                                                  "line": 94,
                                                                                                  "column": 30
                                                                                                }
                                                                                              },
                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404)",
                                                                                              "line": 94
                                                                                            }
                                                                                          ],
                                                                                          "loc": {
                                                                                            "start": {
                                                                                              "line": 94,
                                                                                              "column": 29
                                                                                            },
                                                                                            "end": {
                                                                                              "line": 94,
                                                                                              "column": 30
                                                                                            }
                                                                                          },
                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404)",
                                                                                          "line": 94
                                                                                        }
                                                                                      ],
                                                                                      "loc": {
                                                                                        "start": {
                                                                                          "line": 94,
                                                                                          "column": 29
                                                                                        },
                                                                                        "end": {
                                                                                          "line": 94,
                                                                                          "column": 30
                                                                                        }
                                                                                      },
                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404)",
                                                                                      "line": 94
                                                                                    }
                                                                                  ],
                                                                                  "loc": {
                                                                                    "start": {
                                                                                      "line": 94,
                                                                                      "column": 30
                                                                                    },
                                                                                    "end": {
                                                                                      "line": 94,
                                                                                      "column": 31
                                                                                    }
                                                                                  },
                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);",
                                                                                  "line": 94
                                                                                }
                                                                              ],
                                                                              "loc": {
                                                                                "start": {
                                                                                  "line": 95,
                                                                                  "column": 3
                                                                                },
                                                                                "end": {
                                                                                  "line": 95,
                                                                                  "column": 9
                                                                                }
                                                                              },
                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient",
                                                                              "line": 95
                                                                            },
                                                                            {
                                                                              "type": "invokeExpression",
                                                                              "body": [
                                                                                {
                                                                                  "type": "invokeTracker",
                                                                                  "body": [
                                                                                    {
                                                                                      "type": "identifier",
                                                                                      "body": [
                                                                                        {
                                                                                          "type": "identifier",
                                                                                          "body": [
                                                                                            {
                                                                                              "type": "identifier",
                                                                                              "body": [
                                                                                                "client"
                                                                                              ],
                                                                                              "loc": {
                                                                                                "start": {
                                                                                                  "line": 95,
                                                                                                  "column": 9
                                                                                                },
                                                                                                "end": {
                                                                                                  "line": 95,
                                                                                                  "column": 10
                                                                                                }
                                                                                              },
                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.",
                                                                                              "line": 95
                                                                                            },
                                                                                            "dot",
                                                                                            "response"
                                                                                          ],
                                                                                          "loc": {
                                                                                            "start": {
                                                                                              "line": 95,
                                                                                              "column": 18
                                                                                            },
                                                                                            "end": {
                                                                                              "line": 95,
                                                                                              "column": 19
                                                                                            }
                                                                                          },
                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.",
                                                                                          "line": 95
                                                                                        },
                                                                                        "dot",
                                                                                        "render"
                                                                                      ],
                                                                                      "loc": {
                                                                                        "start": {
                                                                                          "line": 95,
                                                                                          "column": 25
                                                                                        },
                                                                                        "end": {
                                                                                          "line": 95,
                                                                                          "column": 26
                                                                                        }
                                                                                      },
                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(",
                                                                                      "line": 95
                                                                                    }
                                                                                  ],
                                                                                  "loc": {
                                                                                    "start": {
                                                                                      "line": 95,
                                                                                      "column": 26
                                                                                    },
                                                                                    "end": {
                                                                                      "line": 95,
                                                                                      "column": 34
                                                                                    }
                                                                                  },
                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template",
                                                                                  "line": 95
                                                                                },
                                                                                {
                                                                                  "type": "invokeArguments",
                                                                                  "body": [
                                                                                    {
                                                                                      "type": "expressionList",
                                                                                      "body": [
                                                                                        {
                                                                                          "type": "invokeExpression",
                                                                                          "body": [
                                                                                            {
                                                                                              "type": "invokeTracker",
                                                                                              "body": [
                                                                                                {
                                                                                                  "type": "identifier",
                                                                                                  "body": [
                                                                                                    {
                                                                                                      "type": "identifier",
                                                                                                      "body": [
                                                                                                        "template"
                                                                                                      ],
                                                                                                      "loc": {
                                                                                                        "start": {
                                                                                                          "line": 95,
                                                                                                          "column": 34
                                                                                                        },
                                                                                                        "end": {
                                                                                                          "line": 95,
                                                                                                          "column": 35
                                                                                                        }
                                                                                                      },
                                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.",
                                                                                                      "line": 95
                                                                                                    },
                                                                                                    "dot",
                                                                                                    "generate"
                                                                                                  ],
                                                                                                  "loc": {
                                                                                                    "start": {
                                                                                                      "line": 95,
                                                                                                      "column": 43
                                                                                                    },
                                                                                                    "end": {
                                                                                                      "line": 95,
                                                                                                      "column": 44
                                                                                                    }
                                                                                                  },
                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(",
                                                                                                  "line": 95
                                                                                                }
                                                                                              ],
                                                                                              "loc": {
                                                                                                "start": {
                                                                                                  "line": 95,
                                                                                                  "column": 44
                                                                                                },
                                                                                                "end": {
                                                                                                  "line": 95,
                                                                                                  "column": 52
                                                                                                }
                                                                                              },
                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound",
                                                                                              "line": 95
                                                                                            },
                                                                                            {
                                                                                              "type": "invokeArguments",
                                                                                              "body": [
                                                                                                {
                                                                                                  "type": "expressionList",
                                                                                                  "body": [
                                                                                                    {
                                                                                                      "type": "identifier",
                                                                                                      "body": [
                                                                                                        "notFound"
                                                                                                      ],
                                                                                                      "loc": {
                                                                                                        "start": {
                                                                                                          "line": 95,
                                                                                                          "column": 52
                                                                                                        },
                                                                                                        "end": {
                                                                                                          "line": 95,
                                                                                                          "column": 53
                                                                                                        }
                                                                                                      },
                                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound)",
                                                                                                      "line": 95
                                                                                                    }
                                                                                                  ],
                                                                                                  "loc": {
                                                                                                    "start": {
                                                                                                      "line": 95,
                                                                                                      "column": 52
                                                                                                    },
                                                                                                    "end": {
                                                                                                      "line": 95,
                                                                                                      "column": 53
                                                                                                    }
                                                                                                  },
                                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound)",
                                                                                                  "line": 95
                                                                                                }
                                                                                              ],
                                                                                              "loc": {
                                                                                                "start": {
                                                                                                  "line": 95,
                                                                                                  "column": 52
                                                                                                },
                                                                                                "end": {
                                                                                                  "line": 95,
                                                                                                  "column": 53
                                                                                                }
                                                                                              },
                                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound)",
                                                                                              "line": 95
                                                                                            }
                                                                                          ],
                                                                                          "loc": {
                                                                                            "start": {
                                                                                              "line": 95,
                                                                                              "column": 53
                                                                                            },
                                                                                            "end": {
                                                                                              "line": 95,
                                                                                              "column": 54
                                                                                            }
                                                                                          },
                                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound))",
                                                                                          "line": 95
                                                                                        }
                                                                                      ],
                                                                                      "loc": {
                                                                                        "start": {
                                                                                          "line": 95,
                                                                                          "column": 53
                                                                                        },
                                                                                        "end": {
                                                                                          "line": 95,
                                                                                          "column": 54
                                                                                        }
                                                                                      },
                                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound))",
                                                                                      "line": 95
                                                                                    }
                                                                                  ],
                                                                                  "loc": {
                                                                                    "start": {
                                                                                      "line": 95,
                                                                                      "column": 53
                                                                                    },
                                                                                    "end": {
                                                                                      "line": 95,
                                                                                      "column": 54
                                                                                    }
                                                                                  },
                                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound))",
                                                                                  "line": 95
                                                                                }
                                                                              ],
                                                                              "loc": {
                                                                                "start": {
                                                                                  "line": 95,
                                                                                  "column": 54
                                                                                },
                                                                                "end": {
                                                                                  "line": 95,
                                                                                  "column": 55
                                                                                }
                                                                              },
                                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));",
                                                                              "line": 95
                                                                            }
                                                                          ],
                                                                          "loc": {
                                                                            "start": {
                                                                              "line": 96,
                                                                              "column": 2
                                                                            },
                                                                            "end": {
                                                                              "line": 96,
                                                                              "column": 3
                                                                            }
                                                                          },
                                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t}",
                                                                          "line": 96
                                                                        }
                                                                      ],
                                                                      "loc": {
                                                                        "start": {
                                                                          "line": 96,
                                                                          "column": 3
                                                                        },
                                                                        "end": {
                                                                          "line": 96,
                                                                          "column": 4
                                                                        }
                                                                      },
                                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t})",
                                                                      "line": 96
                                                                    }
                                                                  ],
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 96,
                                                                      "column": 3
                                                                    },
                                                                    "end": {
                                                                      "line": 96,
                                                                      "column": 4
                                                                    }
                                                                  },
                                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t})",
                                                                  "line": 96
                                                                }
                                                              ],
                                                              "loc": {
                                                                "start": {
                                                                  "line": 96,
                                                                  "column": 3
                                                                },
                                                                "end": {
                                                                  "line": 96,
                                                                  "column": 4
                                                                }
                                                              },
                                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t})",
                                                              "line": 96
                                                            }
                                                          ],
                                                          "loc": {
                                                            "start": {
                                                              "line": 96,
                                                              "column": 3
                                                            },
                                                            "end": {
                                                              "line": 96,
                                                              "column": 4
                                                            }
                                                          },
                                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t})",
                                                          "line": 96
                                                        }
                                                      ],
                                                      "loc": {
                                                        "start": {
                                                          "line": 96,
                                                          "column": 4
                                                        },
                                                        "end": {
                                                          "line": 96,
                                                          "column": 5
                                                        }
                                                      },
                                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});",
                                                      "line": 96
                                                    }
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 97,
                                                      "column": 1
                                                    },
                                                    "end": {
                                                      "line": 97,
                                                      "column": 2
                                                    }
                                                  },
                                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t}",
                                                  "line": 97
                                                }
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 97,
                                                  "column": 2
                                                },
                                                "end": {
                                                  "line": 97,
                                                  "column": 3
                                                }
                                              },
                                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t})",
                                              "line": 97
                                            }
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 97,
                                              "column": 2
                                            },
                                            "end": {
                                              "line": 97,
                                              "column": 3
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t})",
                                          "line": 97
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 97,
                                          "column": 2
                                        },
                                        "end": {
                                          "line": 97,
                                          "column": 3
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t})",
                                      "line": 97
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 97,
                                      "column": 2
                                    },
                                    "end": {
                                      "line": 97,
                                      "column": 3
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t})",
                                  "line": 97
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 97,
                                  "column": 3
                                },
                                "end": {
                                  "line": 97,
                                  "column": 4
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});",
                              "line": 97
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 98,
                              "column": 0
                            },
                            "end": {
                              "line": 98,
                              "column": 1
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n}",
                          "line": 98
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 98,
                          "column": 1
                        },
                        "end": {
                          "line": 98,
                          "column": 2
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n})",
                      "line": 98
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 98,
                      "column": 1
                    },
                    "end": {
                      "line": 98,
                      "column": 2
                    }
                  },
                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n})",
                  "line": 98
                }
              ],
              "loc": {
                "start": {
                  "line": 98,
                  "column": 1
                },
                "end": {
                  "line": 98,
                  "column": 2
                }
              },
              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n})",
              "line": 98
            }
          ],
          "loc": {
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 98,
              "column": 3
            }
          },
          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});",
          "line": 98
        }
      ],
      "loc": {
        "start": {
          "line": 100,
          "column": 0
        },
        "end": {
          "line": 100,
          "column": 6
        }
      },
      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver",
      "line": 100
    },
    {
      "type": "invokeExpression",
      "body": [
        {
          "type": "invokeTracker",
          "body": [
            {
              "type": "identifier",
              "body": [
                {
                  "type": "identifier",
                  "body": [
                    "server"
                  ],
                  "loc": {
                    "start": {
                      "line": 100,
                      "column": 6
                    },
                    "end": {
                      "line": 100,
                      "column": 7
                    }
                  },
                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.",
                  "line": 100
                },
                "dot",
                "listen"
              ],
              "loc": {
                "start": {
                  "line": 100,
                  "column": 13
                },
                "end": {
                  "line": 100,
                  "column": 14
                }
              },
              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen(",
              "line": 100
            }
          ],
          "loc": {
            "start": {
              "line": 100,
              "column": 14
            },
            "end": {
              "line": 100,
              "column": 15
            }
          },
          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([",
          "line": 100
        },
        {
          "type": "invokeArguments",
          "body": [
            {
              "type": "expressionList",
              "body": [
                {
                  "type": "mapExpression",
                  "body": [
                    {
                      "type": "arrayStart",
                      "body": [],
                      "loc": {
                        "start": {
                          "line": 100,
                          "column": 15
                        },
                        "end": {
                          "line": 100,
                          "column": 19
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port",
                      "line": 100
                    },
                    {
                      "type": "associativeList",
                      "body": [
                        {
                          "type": "associativeList",
                          "body": [
                            {
                              "type": "associativeDeclaration",
                              "body": [
                                "port",
                                "id",
                                {
                                  "type": "numericLiteral",
                                  "body": 8080,
                                  "loc": {
                                    "start": {
                                      "line": 100,
                                      "column": 25
                                    },
                                    "end": {
                                      "line": 100,
                                      "column": 26
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080,",
                                  "line": 100
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 100,
                                  "column": 25
                                },
                                "end": {
                                  "line": 100,
                                  "column": 26
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080,",
                              "line": 100
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 100,
                              "column": 25
                            },
                            "end": {
                              "line": 100,
                              "column": 26
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080,",
                          "line": 100
                        },
                        {
                          "type": "associativeDeclaration",
                          "body": [
                            "clientScope",
                            "id",
                            {
                              "type": "booleanLiteral",
                              "body": true,
                              "loc": {
                                "start": {
                                  "line": 100,
                                  "column": 44
                                },
                                "end": {
                                  "line": 100,
                                  "column": 45
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true]",
                              "line": 100
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 100,
                              "column": 44
                            },
                            "end": {
                              "line": 100,
                              "column": 45
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true]",
                          "line": 100
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 100,
                          "column": 44
                        },
                        "end": {
                          "line": 100,
                          "column": 45
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true]",
                      "line": 100
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 100,
                      "column": 45
                    },
                    "end": {
                      "line": 100,
                      "column": 46
                    }
                  },
                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true],",
                  "line": 100
                },
                {
                  "type": "expressionList",
                  "body": [
                    {
                      "type": "scopeExpression",
                      "body": [
                        {
                          "type": "scopeStart",
                          "body": [],
                          "loc": {
                            "start": {
                              "line": 101,
                              "column": 1
                            },
                            "end": {
                              "line": 101,
                              "column": 6
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint",
                          "line": 101
                        },
                        {
                          "type": "controlCode",
                          "body": [
                            {
                              "type": "controlCode",
                              "body": [],
                              "loc": {
                                "start": {
                                  "line": 101,
                                  "column": 1
                                },
                                "end": {
                                  "line": 101,
                                  "column": 6
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint",
                              "line": 101
                            },
                            {
                              "type": "invokeExpression",
                              "body": [
                                {
                                  "type": "invokeTracker",
                                  "body": [
                                    {
                                      "type": "identifier",
                                      "body": [
                                        "print"
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 101,
                                          "column": 6
                                        },
                                        "end": {
                                          "line": 101,
                                          "column": 7
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(",
                                      "line": 101
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 101,
                                      "column": 7
                                    },
                                    "end": {
                                      "line": 101,
                                      "column": 31
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\"",
                                  "line": 101
                                },
                                {
                                  "type": "invokeArguments",
                                  "body": [
                                    {
                                      "type": "expressionList",
                                      "body": [
                                        {
                                          "type": "stringLiteral",
                                          "body": "Server running on 8080",
                                          "loc": {
                                            "start": {
                                              "line": 101,
                                              "column": 31
                                            },
                                            "end": {
                                              "line": 101,
                                              "column": 32
                                            }
                                          },
                                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\")",
                                          "line": 101
                                        }
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 101,
                                          "column": 31
                                        },
                                        "end": {
                                          "line": 101,
                                          "column": 32
                                        }
                                      },
                                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\")",
                                      "line": 101
                                    }
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 101,
                                      "column": 31
                                    },
                                    "end": {
                                      "line": 101,
                                      "column": 32
                                    }
                                  },
                                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\")",
                                  "line": 101
                                }
                              ],
                              "loc": {
                                "start": {
                                  "line": 101,
                                  "column": 32
                                },
                                "end": {
                                  "line": 101,
                                  "column": 33
                                }
                              },
                              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\");",
                              "line": 101
                            }
                          ],
                          "loc": {
                            "start": {
                              "line": 102,
                              "column": 0
                            },
                            "end": {
                              "line": 102,
                              "column": 1
                            }
                          },
                          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\");\n}",
                          "line": 102
                        }
                      ],
                      "loc": {
                        "start": {
                          "line": 102,
                          "column": 1
                        },
                        "end": {
                          "line": 102,
                          "column": 2
                        }
                      },
                      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\");\n})",
                      "line": 102
                    }
                  ],
                  "loc": {
                    "start": {
                      "line": 102,
                      "column": 1
                    },
                    "end": {
                      "line": 102,
                      "column": 2
                    }
                  },
                  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\");\n})",
                  "line": 102
                }
              ],
              "loc": {
                "start": {
                  "line": 102,
                  "column": 1
                },
                "end": {
                  "line": 102,
                  "column": 2
                }
              },
              "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\");\n})",
              "line": 102
            }
          ],
          "loc": {
            "start": {
              "line": 102,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\");\n})",
          "line": 102
        }
      ],
      "loc": {
        "start": {
          "line": 102,
          "column": 2
        },
        "end": {
          "line": 102,
          "column": 3
        }
      },
      "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\");\n});",
      "line": 102
    }
  ],
  "loc": {
    "start": {
      "line": 102,
      "column": 3
    },
    "end": {
      "line": 102,
      "column": 3
    }
  },
  "raw": "let server = import \"serve\"(/*[\n\tkey: \"lib/server.key\",\n\tcert: \"lib/server.cert\"\n]*/);\n/*\nlet db = import \"inc/db.sc\";\nlet users = db.collection(\"users\");\nlet newUser = [\n\tusername: \"foo\",\n\tpassword: \"bar\",\n\temail: \"foo@example.com\"\n];\n\nusers.insert(newUser, (err: \"\", value: \"\") {\n\tif(err, {\n\t\tprint(\"insert error:\", err);\n\t}, {\n\t\tprint(\"insert successful:\", value);\n\t});\n});\n\ndb.on(\"error\", (err: \"\") {\n\tprint(\"DB Error:\", err);\n});\n\ndb.on(\"connect\", {\n\tprint(\"DB Connected!\");\n});\n*/\nlet template = import \"inc/template.sc\";\nlet loadPages = import \"inc/loadPages.sc\";\n\nlet loader = loadPages(\"inc/pages\");\n\ntemplate.manifest = [\n\tshort_name: \"Scope Test\",\n\tname: \"Scope Programming Language Test Site\",\n\tstart_url: \"/\",\n\tbackground_color: \"#FFFFFF\",\n\tdisplay: \"standalone\",\n\tscope: \"/\",\n\ttheme_color: \"#0090D2\"\n];\n\ntemplate.styleLink = \"/styles/main.css\";\n\ntemplate.nav = [\n\tHome: \"/home\",\n\tDocumentation: \"/docs\",\n\tAbout: \"/about\",\n\tContact: \"/contact\"\n];\n\nlet notFound = [\n\ttitle: \"404: Not Found\",\n\turl: \"404\",\n\tbody: \n\t<article>\n\t\t<h2>\n\t\t\t\"We have a problem..\";\n\t\t</h2>;\n\t\t<div>\n\t\t\t<strong>\"404 Not Found:\";</strong>;\n\t\t\t\" The requested page was not found.\";\n\t\t</div>;\n\t</article>\n];\n\nserver.manifest(template.manifest);\n\nserver.get(\"/\", (client: []) {\n\tclient.response.redirect(301, \"/home\");\n});\n\nserver.get(\"/404\", (client: []) {\n\tclient.response.status(404);\n\tclient.response.render(template.generate(notFound));\n});\n\nserver.get(template.styleLink, (client: []) {\n\tclient.response.sendStyle(template.stylesheet);\n});\npromise.all(loader.promises).then((pages: []) {\n\tserver.get(\"/:page\", (client: []) {\n\t\tlet renderred = false;\n\t\teach(pages, (sc: {}, name: \"\") {\n\t\t\tif (name is client.request.params.page, {\n\t\t\t\tuse sc;\n\t\t\t\tclient.response.render(page(template.generate), false);\n\t\t\t\trenderred = true;\n\t\t\t});\n\t\t});\n\t\tif (!renderred, {\n\t\t\tclient.response.status(404);\n\t\t\tclient.response.render(template.generate(notFound));\n\t\t});\n\t});\n});\n\nserver.listen([port: 8080, clientScope: true], {\n\tprint(\"Server running on 8080\");\n});",
  "line": 102
}