"use strict";require("core-js/modules/es6.regexp.replace"),require("core-js/modules/es6.regexp.split"),require("core-js/modules/es6.regexp.match");var backtickParser=function(){function a(){this.yy={}}var b=function(a,b,c,d){for(c=c||{},d=a.length;d--;c[a[d]]=b);return c},c=[1,2],d=[4,8,11],e=[4,8,9,10],f=[2,4],g=[1,10],h=[1,12],i={trace:function(){},yy:{},symbols_:{error:2,btString:3,"`":4,btBody:5,btPart:6,btExpr:7,BTCHAR:8,"{":9,"}":10,"${":11,$accept:0,$end:1},terminals_:{2:"error",4:"`",8:"BTCHAR",9:"{",10:"}",11:"${"},productions_:[0,[3,3],[5,0],[5,2],[7,0],[7,2],[7,2],[7,4],[6,3],[6,1]],performAction:function(a,b,c,d,e,f){var g=f.length-1;1===e?this.$="`"+f[g-1]+"`":2===e||4===e?this.$="":3===e||5===e||6===e?this.$=f[g-1]+f[g]:7===e?this.$=f[g-3]+"{"+f[g-1]+"}":8===e?this.$="${"+d.parseExpression(f[g-1])+"}":9===e?this.$=f[g]:void 0},table:[{3:1,4:c},{1:[3]},b(d,[2,2],{5:3}),{4:[1,4],6:5,8:[1,7],11:[1,6]},b([1,4,8,9,10],[2,1]),b(d,[2,3]),b(e,f,{7:8}),b(d,[2,9]),{3:11,4:c,8:g,9:h,10:[1,9]},b(d,[2,8]),b(e,[2,5]),b(e,[2,6]),b(e,f,{7:13}),{3:11,4:c,8:g,9:h,10:[1,14]},b(e,[2,7])],defaultActions:{},parseError:function(a,b){if(b.recoverable)this.trace(a);else{var c=new Error(a);throw c.hash=b,c}},parse:function(a){var b=this,c=[0],d=[null],e=[],f=this.table,g="",h=0,i=0,j=0,l=e.slice.call(arguments,1),m=Object.create(this.lexer),n={yy:{}};for(var o in this.yy)Object.prototype.hasOwnProperty.call(this.yy,o)&&(n.yy[o]=this.yy[o]);m.setInput(a,n.yy),n.yy.lexer=m,n.yy.parser=this,"undefined"==typeof m.yylloc&&(m.yylloc={});var k=m.yylloc;e.push(k);var q=m.options&&m.options.ranges;this.parseError="function"==typeof n.yy.parseError?n.yy.parseError:Object.getPrototypeOf(this).parseError;_token_stack:var s=function(){var a;return a=m.lex()||1,"number"!=typeof a&&(a=b.symbols_[a]||a),a};for(var t,u,v,w,x,y,z,A,B,C={};;){if(v=c[c.length-1],this.defaultActions[v]?w=this.defaultActions[v]:((null===t||"undefined"==typeof t)&&(t=s()),w=f[v]&&f[v][t]),"undefined"==typeof w||!w.length||!w[0]){var D="";for(y in B=[],f[v])this.terminals_[y]&&2<y&&B.push("'"+this.terminals_[y]+"'");D=m.showPosition?"Parse error on line "+(h+1)+":\n"+m.showPosition()+"\nExpecting "+B.join(", ")+", got '"+(this.terminals_[t]||t)+"'":"Parse error on line "+(h+1)+": Unexpected "+(1==t?"end of input":"'"+(this.terminals_[t]||t)+"'"),this.parseError(D,{text:m.match,token:this.terminals_[t]||t,line:m.yylineno,loc:k,expected:B})}if(w[0]instanceof Array&&1<w.length)throw new Error("Parse Error: multiple actions possible at state: "+v+", token: "+t);switch(w[0]){case 1:c.push(t),d.push(m.yytext),e.push(m.yylloc),c.push(w[1]),t=null,u?(t=u,u=null):(i=m.yyleng,g=m.yytext,h=m.yylineno,k=m.yylloc,0<j&&j--);break;case 2:if(z=this.productions_[w[1]][1],C.$=d[d.length-z],C._$={first_line:e[e.length-(z||1)].first_line,last_line:e[e.length-1].last_line,first_column:e[e.length-(z||1)].first_column,last_column:e[e.length-1].last_column},q&&(C._$.range=[e[e.length-(z||1)].range[0],e[e.length-1].range[1]]),x=this.performAction.apply(C,[g,i,h,n.yy,w[1],d,e].concat(l)),"undefined"!=typeof x)return x;z&&(c=c.slice(0,2*(-1*z)),d=d.slice(0,-1*z),e=e.slice(0,-1*z)),c.push(this.productions_[w[1]][0]),d.push(C.$),e.push(C._$),A=f[c[c.length-2]][c[c.length-1]],c.push(A);break;case 3:return!0;}}return!0}},j=function(){var a={EOF:1,parseError:function(a,b){if(this.yy.parser)this.yy.parser.parseError(a,b);else throw new Error(a)},setInput:function c(a,b){return this.yy=b||this.yy||{},this._input=a,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function c(){var a=this._input[0];this.yytext+=a,this.yyleng++,this.offset++,this.match+=a,this.matched+=a;var b=a.match(/(?:\r\n?|\n).*/g);return b?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),a},unput:function f(a){var b=a.length,c=a.split(/(?:\r\n?|\n)/g);this._input=a+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-b),this.offset-=b;var d=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),c.length-1&&(this.yylineno-=c.length-1);var e=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:c?(c.length===d.length?this.yylloc.first_column:0)+d[d.length-c.length].length-c[0].length:this.yylloc.first_column-b},this.options.ranges&&(this.yylloc.range=[e[0],e[0]+this.yyleng-b]),this.yyleng=this.yytext.length,this},more:function a(){return this._more=!0,this},reject:function a(){if(this.options.backtrack_lexer)this._backtrack=!0;else return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno});return this},less:function b(a){this.unput(this.match.slice(a))},pastInput:function b(){var a=this.matched.substr(0,this.matched.length-this.match.length);return(20<a.length?"...":"")+a.substr(-20).replace(/\n/g,"")},upcomingInput:function b(){var a=this.match;return 20>a.length&&(a+=this._input.substr(0,20-a.length)),(a.substr(0,20)+(20<a.length?"...":"")).replace(/\n/g,"")},showPosition:function c(){var a=this.pastInput(),b=Array(a.length+1).join("-");return a+this.upcomingInput()+"\n"+b+"^"},test_match:function g(a,b){var c,d,e;if(this.options.backtrack_lexer&&(e={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(e.yylloc.range=this.yylloc.range.slice(0))),d=a[0].match(/(?:\r\n?|\n).*/g),d&&(this.yylineno+=d.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:d?d[d.length-1].length-d[d.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+a[0].length},this.yytext+=a[0],this.match+=a[0],this.matches=a,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(a[0].length),this.matched+=a[0],c=this.performAction.call(this,this.yy,this,b,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),c)return c;if(this._backtrack){for(var f in e)this[f]=e[f];return!1}return!1},next:function g(){if(this.done)return this.EOF;this._input||(this.done=!0);var a,b,c,d;this._more||(this.yytext="",this.match="");for(var e=this._currentRules(),f=0;f<e.length;f++)if(c=this._input.match(this.rules[e[f]]),c&&(!b||c[0].length>b[0].length))if(b=c,d=f,this.options.backtrack_lexer){if(a=this.test_match(c,e[f]),!1!==a)return a;if(this._backtrack){b=!1;continue}else return!1}else if(!this.options.flex)break;return b?(a=this.test_match(b,e[d]),!1!==a&&a):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var a=this.next();return a?a:this.lex()},begin:function(a){this.conditionStack.push(a)},popState:function(){var a=this.conditionStack.length-1;return 0<a?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(a){return a=this.conditionStack.length-1-Math.abs(a||0),0<=a?this.conditionStack[a]:"INITIAL"},pushState:function(a){this.begin(a)},stateStackSize:function(){return this.conditionStack.length},options:{},performAction:function(a,b,c,d){switch(c){case 0:return 4;break;case 1:return 11;break;case 2:return 9;break;case 3:return 10;break;case 4:return 8;}},rules:[/^(?:`)/,/^(?:\$\{)/,/^(?:\{)/,/^(?:\})/,/^(?:(\\`|[^\`]))/],conditions:{INITIAL:{rules:[0,1,2,3,4],inclusive:!0}}};return a}();return i.lexer=j,a.prototype=i,i.Parser=a,new a}();"undefined"!=typeof require&&"undefined"!=typeof exports&&(exports.parser=backtickParser,exports.Parser=backtickParser.Parser,exports.parse=function(){return backtickParser.parse.apply(backtickParser,arguments)},exports.main=function(a){a[1]||(console.log("Usage: "+a[0]+" FILE"),process.exit(1));var b=require("fs").readFileSync(require("path").normalize(a[1]),"utf8");return exports.parser.parse(b)},"undefined"!=typeof module&&require.main===module&&exports.main(process.argv.slice(1)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,