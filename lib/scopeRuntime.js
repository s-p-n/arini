"use strict";require("core-js/modules/es6.array.from"),require("core-js/modules/es6.regexp.replace"),require("core-js/modules/es6.regexp.to-string"),require("core-js/modules/es6.regexp.constructor"),require("core-js/modules/es7.object.define-getter"),require("core-js/modules/es7.symbol.async-iterator"),require("core-js/modules/es6.symbol"),require("core-js/modules/es6.weak-map"),require("core-js/modules/web.dom.iterable"),require("core-js/modules/es6.map");function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}function _arrayWithHoles(a){if(Array.isArray(a))return a}var XRegExp=require("xregexp"),randStr=function(){for(var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:16,b="",c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",d=0;d<a;d+=1)b+=c[Math.floor(Math.random()*c.length)];return b},indexRange=function(a,b,c){return"number"==typeof c?("number"!=typeof a&&(a=0),"number"!=typeof b&&(b=c),0>a&&(a=c+a,0>a&&(a=0)),0>b&&(b=c+b,0>b&&(b=0)),b>c&&(b=c),a>=b?[0,0]:[a,b]):[0,0]};Map.prototype.slice=function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.size,c=this.entries(),d=[];if(0>a&&(a=this.size+a,0>a&&(a=0)),0>b&&(b=this.size+b,0>b&&(b=0)),b>this.size&&(b=this.size),a>=b)return scope.mapExpression();for(var e=0;e<a;e+=1)c.next();for(var f=a;f<b;f+=1)d.push(c.next().value);return scope.mapExpression.apply(scope,d)};var createProxy=function(){var a=new WeakMap,b=/^\-?\d+$/,c={get:function q(c,d){var e=this,f=this;if("string"==typeof d&&b.test(d))return d=parseInt(d),c.get(d);if("toString"===d)return function(){var b="map:".concat(a.get(e).type," {"),d=!0,f=!0,g=!1,h=void 0;try{for(var i,j=c[Symbol.iterator]();!(f=(i=j.next()).done);f=!0){var k=_slicedToArray(i.value,2),l=k[0],m=k[1];d?d=!1:b+=",",b+=" ".concat(l," => ").concat(m)}}catch(a){g=!0,h=a}finally{try{f||null==j.return||j.return()}finally{if(g)throw h}}return b+" }"};if("type"===d)return a.get(this).type;if(c.has(d))return c.get(d);if(d in c)return"function"==typeof c[d]?c[d].bind(c):c[d];var g=c.entries(),h=[],i=!0,j=!1,k=void 0;try{for(var l,m=g[Symbol.iterator]();!(i=(l=m.next()).done);i=!0){var n=_slicedToArray(l.value,2),o=n[0],p=n[1];"function"==typeof p[d]&&h.push([o,p])}}catch(a){j=!0,k=a}finally{try{i||null==m.return||m.return()}finally{if(j)throw k}}return 0===h.length?void 0:function(){for(var b=arguments.length,c=Array(b),e=0;e<b;e++)c[e]=arguments[e];return"numeric"===a.get(f).type?scope.arrayExpression.apply(scope,_toConsumableArray(h.map(function(a){var b;return(b=a[1])[d].apply(b,c)}))):scope.mapExpression.apply(scope,_toConsumableArray(h.map(function(a){var b;return[a[0],(b=a[1])[d].apply(b,c)]})))}},has:function c(a,b){return a.has(b)},set:function e(b,c,d){return"type"===c?a.get(this).type:b.set(c,d)}};return function(b,d){var e=Object.create(c);return a.set(e,Object.create(null)),a.get(e).type=d,new Proxy(b,e)}}(),NumericMap=function(){function a(a,b){return function(){if(a.index<b.size)a.result.value=[a.index,b.get(a.index++)];else return a.index=0,{done:!0};return a.result}}function b(a,b){return function(){if(a.index<b.size)a.result.value=a.index++;else return a.index=0,{done:!0};return a.result}}function c(a,b){return function(){if(a.index<b.size)a.result.value=b.get(a.index++);else return a.index=0,{done:!0};return a.result}}var d=new WeakMap,e=function(){function e(f){_classCallCheck(this,e);var g=this,h={array:_toConsumableArray(f)};d.set(this,h),h.createKeyIterator=function(){return h.createIterator(b)},h.createValueIterator=function(){return h.createIterator(c)},h.createEntryIterator=function(){return h.createIterator(a)},h.createIterator=function(a){return{next:a({index:0,result:{value:void 0,done:!1}},g),[Symbol.iterator]:function(){return this}}}}return _createClass(e,[{key:"toString",value:function c(){for(var a="NumericMap {",b=0;b<this.size;b+=1)0!=b&&(a+=","),a+=" ".concat(b," => ").concat(this.get(b));return a+" }"}},{key:"get",value:function b(a){if(0!==this.size){for(;0>a;)a=this.size+a;return this.array[a]}}},{key:"set",value:function c(a,b){return this.array[a]=b}},{key:"slice",value:function c(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.size;return scope.arrayExpression.apply(scope,_toConsumableArray(this.array.slice(a,b)))}},{key:"delete",value:function b(a){return!!this.has(a)&&(this.array.splice(a,1),!0)}},{key:"clear",value:function a(){this.size=0}},{key:"entries",value:function a(){return d.get(this).createEntryIterator()}},{key:"keys",value:function a(){return d.get(this).createKeyIterator()}},{key:"values",value:function a(){return d.get(this).createValueIterator()}},{key:"has",value:function b(a){return"number"==typeof a&&0<=a&&a<this.size}},{key:"forEach",value:function k(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this,c=!0,d=!1,e=void 0;try{for(var f,g=this[Symbol.iterator]();!(c=(f=g.next()).done);c=!0){var h=_slicedToArray(f.value,2),i=h[0],j=h[1];a.call(b,j,i,this)}}catch(a){d=!0,e=a}finally{try{c||null==g.return||g.return()}finally{if(d)throw e}}}},{key:Symbol.iterator,value:function a(){return d.get(this).createEntryIterator()}},{key:"type",get:function a(){return"numeric"}},{key:"array",get:function a(){return d.get(this).array},set:function b(a){return a instanceof Array?d.get(this).array=a:d.get(this).array}},{key:"size",get:function a(){return this.array.length},set:function b(a){return this.array.length=a}}]),e}();return e}(),Scope=function(){function a(){var b=this;_classCallCheck(this,a);this;this._scoping={let:this.mapExpression(),private:this.mapExpression(),protected:this.mapExpression(),public:this.mapExpression(),parent:null},this.userTags=this.mapExpression();var c=require("hyperscript");this.xmlExpression=function(d,e){function f(a){var b="",c=!0,d=!1,e=void 0;try{for(var g,h=a[Symbol.iterator]();!(c=(g=h.next()).done);c=!0){var i=_slicedToArray(g.value,2),j=i[0],k=i[1];b+="".concat(j,"{");var l=0,m=!1,n=!0,o=!1,p=void 0;try{for(var q,r=k[Symbol.iterator]();!(n=(q=r.next()).done);n=!0){var s=_slicedToArray(q.value,2),t=s[0],u=s[1];u instanceof Map?(b+="}".concat(f(new Map([[j+t,u]]))),l+1<k.size?b+="".concat(j,"{"):m=!0):b+="".concat(t,":").concat(u,";"),l+=1}}catch(a){o=!0,p=a}finally{try{n||null==r.return||r.return()}finally{if(o)throw p}}m||(b+="}")}}catch(a){d=!0,e=a}finally{try{c||null==h.return||h.return()}finally{if(d)throw e}}return b}for(var g=arguments.length,h=Array(2<g?g-2:0),j=2;j<g;j++)h[j-2]=arguments[j];var k;if("style"!==d&&"script"!==d){for(var l,m=[],n=0;n<h.length;n+=1)l=h[n],l instanceof NumericMap||l instanceof Map?m.push.apply(m,_toConsumableArray(l.values())):m.push(l);h=m}if(b.userTags.has(d.toLowerCase())&&"undefined"!=typeof window){var w=b.mapExpression();for(var x in e)w[x]=e[x];var y=c.apply(void 0,[d,e].concat(_toConsumableArray(h)));return $(y).data("rawAttributes",w),y}for(var z in k="style"===d&&h[0]instanceof Map?c(d,[f(h[0])]):"script"===d?c.apply(void 0,[d].concat(_toConsumableArray(h))):c.apply(void 0,[d].concat(_toConsumableArray(h))),("style"===d||"script"===d)&&(k.__defineGetter__("textContent",function(){return this.childNodes[0].value}),k.__defineGetter__("innerHTML",function(){return this.textContent}),k.__defineGetter__("outerHTML",function(){return"<".concat(d,">").concat(this.innerHTML,"</").concat(d,">")})),e){var a="";if("style"==z&&e[z]instanceof Map){var o=!0,p=!1,q=void 0;try{for(var r,s=e[z][Symbol.iterator]();!(o=(r=s.next()).done);o=!0){var t=_slicedToArray(r.value,2),u=t[0],v=t[1];a+="".concat(u,":").concat(v,";")}}catch(a){p=!0,q=a}finally{try{o||null==s.return||s.return()}finally{if(p)throw q}}}else if("pattern"==z&&e[z]instanceof RegExp){var A=e[z].toString();a=A.substr(1,A.lastIndexOf("/")-1)}else a=e[z];if("function"==typeof a){var B="scope.createScope(".concat(a._originalFunction.toString(),")");a="".concat(B,"(event)")}k.setAttribute(z,a)}return k.toString=function(){return"style"===k.tagName?k.outerHTML.replace(/gt\;/,">"):k.outerHTML},k.get=function(a){return"function"==typeof k[a]?k[a].bind(k):k[a]},k.childNodes.get=function(a){return"function"==typeof k.childNodes[a]?k.childNodes[a].bind(k):k.childNodes[a]},k}}return _createClass(a,[{key:"arrayExpression",value:function d(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];return createProxy(new NumericMap(b),"numeric")}},{key:"mapExpression",value:function d(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];return createProxy(new Map(b),"associative")}},{key:"assignmentExpression",value:function u(a,b){var c,d,e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:this._scoping,f=this,g=_slicedToArray(b,2),h=g[0],j=g[1];if(!(1<a.length))c=a[a.length-1],e.let.has(c)&&(d=e.let),e.private.has(c)&&(d=e.private),e.protected.has(c)&&(d=e.protected),e.public.has(c)&&(d=e.public);else if(2===a.length){var k=_slicedToArray(a,2);d=k[0],c=k[1]}else if(3===a.length){d=a[0];var l=indexRange(a[1],a[2],d.size),m=_slicedToArray(l,2),n=m[0],o=m[1];if(d instanceof NumericMap){for(var p=f.arrayExpression(),q=n;q<o;q+=1)p.array.push(f.assignmentExpression([d,q],b,e));return p}if(d instanceof Map){for(var r=f.mapExpression(),s=d.keys(),t=0;t<n;t+=1)s.next();for(var v,w=n;w<o;w+=1)v=s.next().value,r.set(v,f.assignmentExpression([d,v],b,e));return r}throw new Error("Unexpected Range Assignment `[:]` on non-map.")}if(void 0!==d)switch(h){case"=":return d.set?(d.set(c,j),d.get(c)):d[c]=j;case"+=":return d.set(c,f.binaryExpression("+",d.get(c),j)),d.get(c);case"*=":return d.set(c,f.binaryExpression("*",d.get(c),j)),d.get(c);default:throw new Error("Assignment Operator '".concat(h,"' is not implemented"));}if(e.parent)return f.assignmentExpression([c],b,e.parent);throw new Error("Identifier '".concat(c,"' is not defined"))}},{key:"binaryExpression",value:function k(c,d,a){this;switch(c){case"&&":return d&&a;case"||":return d||a;case"===":return d===a;case"!==":return d!==a;case">":return d>a;case"<":return d<a;case">=":return d>=a;case"<=":return d<=a;case"+":if(("string"==typeof d||"number"==typeof d)&&("string"==typeof a||"number"==typeof a))return d+a;if(d instanceof NumericMap){var l=this.arrayExpression.apply(this,_toConsumableArray(d.array));return l.set(l.size,a),l}throw new Error("Attempt to add incompatible types: '".concat(d,"' + '").concat(a,"'"));case"-":return d-a;case"*":if("number"!=typeof a&&(a=1),"number"==typeof d)return d*a;if("string"==typeof d){for(var e="",f=0;f<a;f+=1)e+=d;return e}if(d instanceof NumericMap){for(var g=scope.arrayExpression(),h=0;h<a;h+=1)for(var m=0;m<d.size;m+=1)g.set(g.size,d[m]);return g}throw new Error("Attempt to multiply incompatible types: '".concat(d,"' + '").concat(a,"'"));case"/":return d/a;case"^":return d^a;case"%":return d%a;}}},{key:"declarationExpression",value:function k(a){var b,c=a.type,d=a.name,e=a.value,f=this;if(d instanceof Array){if(null!==e&&"function"==typeof e[Symbol.iterator]){for(var g,h=[],j=0;j<d.length;j+=1)g=void 0,g=e.length<=j?void 0:e[j],h.push(f.declarationExpression({type:c,name:d[j],value:g}));return f.arrayExpression.apply(f,h)}throw new Error("Attempt to iterate over non-iterable during declaration")}if("let"===c){if(f._scoping.let.has(d))throw new Error("Identifier '".concat(d,"' has already been declared"));b=f._scoping.let}if("private"===c){if(f._scoping.private.has(d))throw new Error("Identifier '".concat(d,"' has already been declared"));b=f._scoping.private}if("protected"===c){if(f._scoping.protected.has(d))throw new Error("Identifier '".concat(d,"' has already been declared"));b=f._scoping.protected}if("public"===c){if(f._scoping.public.has(d))throw new Error("Identifier '".concat(d,"' has already been declared"));b=f._scoping.public}return b.set(d,e),e}},{key:"dereferenceIdentifier",value:function d(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this._scoping,c=this;return b.let.has(a)?b.let.delete(a):b.private.has(a)?b.private.delete(a):b.protected.has(a)?b.protected.delete(a):b.public.has(a)?b.public.delete(a):!!b.parent&&c.dereferenceIdentifier(a,b.parent)}},{key:"identifier",value:function d(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this._scoping,c=this;return b.let.has(a)?b.let.get(a):b.private.has(a)?b.private.get(a):b.protected.has(a)?b.protected.get(a):b.public.has(a)?b.public.get(a):b.parent?c.identifier(a,b.parent):"undefined"==typeof window?"undefined"==typeof global?void 0:global[a]:window[a]}},{key:"createScope",value:function c(a){var b=this;return a._isScope=!0,a._parent=this._scoping,a._beingUsed=!1,a._originalFunction=a,new Proxy(a,{apply:function e(a,c,d){return b.invokeExpression({function:a,arguments:d,context:c,isExtension:a._beingUsed})}})}},{key:"invokeExpression",value:function d(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{function:function a(){},arguments:[],context:this,isExtension:!1};if(!a.function._isScope)return a.function.apply(a.context,a.arguments);var b=this._scoping;if(void 0===a.function)throw new Error("Call to undefined scope");this._scoping={parent:a.function._parent,let:this.mapExpression(),private:this.mapExpression(),protected:this.mapExpression(),public:this.mapExpression()};var c=a.function(a.arguments);return void 0===c&&(!0===a.isExtension?c=this.mapExpression(["public",this._scoping.public],["protected",this._scoping.protected]):c=this._scoping.public),this._scoping=b,c}},{key:"import",value:function c(a){var b=require.resolve(a);return delete require.cache[b],require(b)}},{key:"use",value:function d(a,b){var c=this;a.forEach(function(a){if("function"!=typeof a)throw new Error("Attempt to use non-scope");a._beingUsed=!0;var d=a();if(a._beingUsed=!1,!(d instanceof Map))throw new Error("Attempt to use scope returning non-map");if(d.get("protected")instanceof Map){var e=!0,f=!1,g=void 0;try{for(var h,i=d.get("protected")[Symbol.iterator]();!(e=(h=i.next()).done);e=!0){var j=_slicedToArray(h.value,2),k=j[0],l=j[1];(void 0===b||-1!==b.indexOf(k))&&c._scoping.protected.set(k,l)}}catch(a){f=!0,g=a}finally{try{e||null==i.return||i.return()}finally{if(f)throw g}}}if(d.get("public")instanceof Map){var m=!0,n=!1,o=void 0;try{for(var p,q=d.get("public")[Symbol.iterator]();!(m=(p=q.next()).done);m=!0){var r=_slicedToArray(p.value,2),k=r[0],l=r[1];(void 0===b||-1!==b.indexOf(k))&&c._scoping.public.set(k,l)}}catch(a){n=!0,o=a}finally{try{m||null==q.return||q.return()}finally{if(n)throw o}}}})}}]),a}(),scope=new Scope({});module.exports=scope;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,