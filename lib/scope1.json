{
	"lex": {
		"rules": [
			["\\s",		"/* skip whitespace */"],
			["//",		"/* one line comment */"],
			["\\\\/\\\\*(.|\\n|\\r)*?\\\\*\\\\/",		"/* block comment */"],
			["\\<\\/",	"return '</';"],
			["\\/\\>",	"return '/>';"],
			["\\<",		"return '<';"],
			["\\>",		"return '>';"],
			["\\{",		"return '{';"],
			["\\}",		"return '}';"],
			["\\[",		"return '[';"],
			["\\]",		"return ']';"],
			["\\(",		"return '(';"],
			["\\)",		"return ')';"],
			["\\:",		"return ':';"],
			["\\.",		"return '.';"],
			["\\,",		"return ',';"],
			["\\;",		"return ';';"],
			["\\+",		"return '+';"],
			["\\-",		"return '-';"],
			["\\*",		"return '*';"],
			["\\/",		"return '/';"],
			["\\%",		"return '%';"],
			["\\^",		"return '^';"],
			["\\=",		"return '=';"],
			["\\'[^\\\\']*\\'",		"return 'ASTRING';"],
			["\\\"[^\\\\\"]*\\\"",		"return 'QSTRING';"],
			["\\`[^\\\\`]*\\`",		"return 'BSTRING';"],
			["let\\b",		"return 'LET';"],
			["true\\b",	"return 'TRUE';"],
			["false\\b",	"return 'FALSE';"],
			["[0-9]+(?:\\.[0-9]+)?\\b",		"return 'NUMBER';"],
			["[a-zA-Z_][a-zA-Z0-9_]*", "return 'IDENTIFIER';"],
			["$",		"return 'EOF';"]
		]
	},
	"tokens": "LET TRUE FALSE IDENTIFIER NUMBER",
	"operators": [
		["left", "="],
		["left", "+", "-"],
		["left", "*", "/"],
		["left", "^"],
		["left", "UMINUS"],
		["right", "{", "}"],
		["right", "[", "]"],
		["right", "(", ")"],
		["right", "<", ">", "</", "/>"],
		["right", ";"]
	],
	"start": "program",
	"bnf": {
		"program": [
			["controlCode EOF", "return $1"]
		],
		"controlCode": [
			["", 
				"return;"],
			["controlCode expression ;", 
				"$$ = new yy.scopeAst(yy, 'controlCode', [$1, $2]);"]
		],
		"expression": [
			["id = expression",
				"$$ = new yy.scopeAst(yy, 'assignmentExpression', [$1, '=', $3]);"],
			["LET IDENTIFIER = expression",
				"$$ = new yy.scopeAst(yy, 'declarationExpression', ['let', $2, $4]);"],
			["binaryExpression", 
				"$$ = $1"],
			["- expression",
				"$$ = new yy.scopeAst(yy, 'unaryExpression', [$1, $2]);",
				{"prec": "UMINUS"}],
			["( expression )",
				"$$ = $2"],
			["literal", 
				"$$ = $1"],
			["id",
				"$$ = $1"],
			["invoke",
				"$$ = $1"]
		],
		"expressionList": [
			["expression", 
				"$$ = new yy.scopeAst(yy, 'expressionList', [$1]);"],
			["expression , expressionList", 
				"$$ = new yy.scopeAst(yy, 'expressionList', [$1, $3]);"]
		],
		"id": [
			["IDENTIFIER",
				"$$ = new yy.scopeAst(yy, 'identifier', [$1]);"],
			["id . IDENTIFIER",
				"$$ = new yy.scopeAst(yy, 'identifier', [$1, $3]);"],
			["id [ expression ]",
				"$$ = new yy.scopeAst(yy, 'identifier', [$1, $3]);"]
		],
		"literal": [
			["TRUE",
				"$$ = new yy.scopeAst(yy, 'booleanLiteral', true);"],
			["FALSE",
				"$$ = new yy.scopeAst(yy, 'booleanLiteral', false);"],
			["NUMBER",
				"$$ = new yy.scopeAst(yy, 'numericLiteral', Number($1));"],
			["string",
				"$$ = new yy.scopeAst(yy, 'stringLiteral', $1.substr(1,$1.length-2));"],
			["xml",
				"$$ = $1"],
			["scope",
				"$$ = $1"]
		],
		"string": [
			["QSTRING", 
				"$$ = $1"],
			["ASTRING",
				"$$ = $1"],
			["BSTRING",
				"$$ = $1"]
		],
		"binaryExpression": [
			["expression + expression",
				"$$ = new yy.scopeAst(yy, 'binaryExpression', [$1, $2, $3]);"],
			["expression - expression",
				"$$ = new yy.scopeAst(yy, 'binaryExpression', [$1, $2, $3]);"],
			["expression * expression",
				"$$ = new yy.scopeAst(yy, 'binaryExpression', [$1, $2, $3]);"],
			["expression / expression",
				"$$ = new yy.scopeAst(yy, 'binaryExpression', [$1, $2, $3]);"],
			["expression ^ expression",
				"$$ = new yy.scopeAst(yy, 'binaryExpression', [$1, $2, $3]);"]
		],
		"xml": [
			["< id xmlAttributes > xmlControlCode </ id >",
				"$$ = new yy.scopeAst(yy, 'xmlExpression', [$2, $3, $5]);"],
			["< id xmlAttributes />",
				"$$ = new yy.scopeAst(yy, 'xmlExpression', [$2, $3]);"]
		],
		"xmlAttributes": [
			["", 
				"$$ = new yy.scopeAst(yy, 'xmlAttributes', []);"],
			["xmlAttributes id = expression",
				"$$ = new yy.scopeAst(yy, 'xmlAttributes', [$1, $2, $4]);"]
		],
		"xmlControlCode": [
			["",
				"$$ = new yy.scopeAst(yy, 'xmlControlCode', []);"],
			["xmlControlCode expression ;",
				"$$ = new yy.scopeAst(yy, 'xmlControlCode', [$1, $2]);"]
		],
		"invoke": [
			["id ( invokeArguments )",
				"$$ = new yy.scopeAst(yy, 'invokeExpression', [$1, $3]);"],
			["scope ( invokeArguments )",
				"$$ = new yy.scopeAst(yy, 'invokeExpression', [$1, $3]);"]
		],
		"invokeArguments": [
			["",
				"$$ = new yy.scopeAst(yy, 'invokeArguments', []);"],
			["expressionList",
				"$$ = new yy.scopeAst(yy, 'invokeArguments', [$1]);"]
		],
		"scope": [
			["scopeArguments scopeStart controlCode }",
				"$$ = new yy.scopeAst(yy, 'scopeExpression', [$scopeStart, $scopeArguments, $controlCode]);"],
			["scopeStart controlCode }",
				"$$ = new yy.scopeAst(yy, 'scopeExpression', [$scopeStart, $controlCode]);"]
		],
		"scopeStart": [
			["{",
				"$$ = new yy.scopeAst(yy, 'scopeStart', []);"]
		],
		"scopeArguments": [
			["( associativeList )",
				"$$ = new yy.scopeAst(yy, 'scopeArguments', [$2]);"]
		],
		"associativeList": [
			["associativeDeclaration",
				"$$ = new yy.scopeAst(yy, 'associativeList', [$1]);"],
			["associativeList , associativeDeclaration",
				"$$ = new yy.scopeAst(yy, 'associativeList', [$1, $3]);"]
		],
		"associativeDeclaration": [
			["IDENTIFIER : expression",
				"$$ = new yy.scopeAst(yy, 'associativeDeclaration', [$1, 'id', $3]);"],
			["string : expression",
				"$$ = new yy.scopeAst(yy, 'associativeDeclaration', [$1, 'string', $3]);"]
		]
	}
}