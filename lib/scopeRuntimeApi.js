"use strict";require("core-js/modules/es7.promise.finally"),require("core-js/modules/es6.promise"),require("core-js/modules/es6.regexp.replace"),require("core-js/modules/es6.regexp.match"),require("core-js/modules/es7.symbol.async-iterator"),require("core-js/modules/es6.symbol"),require("core-js/modules/es6.regexp.to-string"),require("core-js/modules/web.dom.iterable"),require("core-js/modules/es6.map");function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}function _arrayWithHoles(a){if(Array.isArray(a))return a}var fs=require("fs"),path=require("path"),ScopeParser=require("./ScopeParser.js");module.exports=function(scope){var userTags=scope.userTags,ScopeApi={print:function e(a){for(var b,c=[],d=0;d<a.length;d+=1)a[d]instanceof Map||a[d]instanceof scope.arrayExpression().__proto__.constructor?c.push(a[d].toString()):c.push(a[d]);(b=console).log.apply(b,c)},createTag:function c(a,b){userTags[a.toLowerCase()]=b},getTag:function b(a){return userTags[a.toLowerCase()]},getAllTags:function a(){return userTags},debug:function b(a){a.forEach(function(a){ScopeApi.print([ScopeApi.__debugReturn(a)])})},__debugReturn:function __debugReturn(value){var spaces=1<arguments.length&&void 0!==arguments[1]?arguments[1]:2,result="",spacef=function(){for(var a="",b=0;b<spaces;b+=1)a+=" ";return a};if("object"==typeof value&&value instanceof Map){result+="Map(";var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=value[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var _step$value=_slicedToArray(_step.value,2),key=_step$value[0],val=_step$value[1];result+="\n".concat(spacef()).concat(key," => ").concat(ScopeApi.__debugReturn(val,spaces+2))}}catch(a){_didIteratorError=!0,_iteratorError=a}finally{try{_iteratorNormalCompletion||null==_iterator.return||_iterator.return()}finally{if(_didIteratorError)throw _iteratorError}}return"".concat(result,")")}if("function"==typeof value){var source=value.toString(),args=source.match(/^\(args\=(\[.*\])\)/);return args=args[1]?eval(args[1]):[],result+="Scope([",args.forEach(function(a){result+="\n".concat(spacef(),"(").concat(typeof a.value,") ").concat(a.key,": ").concat(ScopeApi.__debugReturn(a.value,spaces+2))}),"".concat(result,"])")}return"string"==typeof value?"\"".concat(value,"\""):value},dereference:function d(a,b){var c;return void 0===b?b=a:c=a,c instanceof Map||c instanceof scope.arrayExpression().__proto__.constructor?c.delete(b):scope.dereferenceIdentifier(b)},if:function j(a){var b=_slicedToArray(a,4),c=b[0],d=b[1],e=void 0===d?function(){}:d,f=b[2],g=void 0===f?function(){}:f,h=b[3],i=void 0===h||h;return c?i&&"function"==typeof e?e():e:i&&"function"==typeof g?g():g},each:function t(a){var b=_slicedToArray(a,2),c=b[0],d=b[1],e=void 0===d?function(){}:d,f=!1,g=function(){f=!0};if("numeric"===c.type){for(var h=[],j=0;j<c.size&&(h.push(e(c.get(j),j,g)),!f);j+=1);return scope.arrayExpression.apply(scope,h)}var k=scope.mapExpression(),l=!0,m=!1,n=void 0;try{for(var o,p=c[Symbol.iterator]();!(l=(o=p.next()).done);l=!0){var q=_slicedToArray(o.value,2),r=q[0],s=q[1];if(k.set(r,e(s,r,g)),f)break}}catch(a){m=!0,n=a}finally{try{l||null==p.return||p.return()}finally{if(m)throw n}}return k},toJS:function n(a){var b;if("object"!=typeof a||null===a)return a;if(a instanceof Map){b={};var c=!0,d=!1,e=void 0;try{for(var f,g=a[Symbol.iterator]();!(c=(f=g.next()).done);c=!0){var h=_slicedToArray(f.value,2),j=h[0],k=h[1];b[j]=ScopeApi.toJS(k)}}catch(a){d=!0,e=a}finally{try{c||null==g.return||g.return()}finally{if(d)throw e}}return b}if(a instanceof scope.arrayExpression().__proto__.constructor){for(var l=[],m=0;m<a.size;m+=1)l.push(ScopeApi.toJS(a[m]));return l}return null},toJSON:function b(a){return JSON.stringify(ScopeApi.toJS(a))},BSONtoMap:function c(a){var b;if("object"!=typeof a||Buffer.isBuffer(a)||"_bsontype"in a)return a;if(null===a)return!1;if(a instanceof Array){b=scope.arrayExpression();for(var d=0;d<a.length;d+=1)b[d]=ScopeApi.BSONtoMap(a[d]);return b}for(var e in b=scope.mapExpression(),a)Object.hasOwnProperty.call(a,e)&&(b[e]=ScopeApi.BSONtoMap(a[e]));return b},eval:function _eval(code){var parser=new ScopeParser,translation=parser.translate(code);return eval(translation.code)},compile:function e(a){var b=new ScopeParser,c=path.join(__scopedir,a),d=c.replace(/\.sc$/,".js");return new ScopeApi.promise(function(a,e){fs.readFile(c,"utf8",function(f,g){f&&e("Could not read file ".concat(c,".\n").concat(f));var h=b.translate(g,c,d);fs.writeFile(d,h.code,function(b){b&&e("Could not write to file ".concat(d,".\n").concat(b));var c=scope.import(d);a(c)})})})},promise:function d(a){var b=new Promise(function(b,c){a(b,c)}),c=scope.mapExpression();return c.set("then",function(a){b.then(function(b){a(b)})}),c.set("catch",function(a){b.catch(function(b){a(b)})}),c.set("finally",function(a){b.finally(function(){a()})}),c.originalPromise=b,c}};return ScopeApi.promise.get=function(a){return ScopeApi.promise[a]},ScopeApi.promise.all=function(a){var b=[],c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done);d=!0){var i=_slicedToArray(g.value,2),j=i[0],k=i[1],l=void 0;l=void 0===k.originalPromise?k:k.originalPromise,b.push(l),c.push(j)}}catch(a){e=!0,f=a}finally{try{d||null==h.return||h.return()}finally{if(e)throw f}}var m=Promise.all(b),n=scope.mapExpression();return n.set("then",function(a){m.then(function(b){for(var d=scope.mapExpression(),e=0;e<b.length;e+=1)d.set(c[e],b[e]);a(d)})}),n.set("catch",function(a){m.catch(function(b){a(b)})}),n.set("finally",function(a){m.finally(function(){a()})}),n},ScopeApi.print=scope.createScope(ScopeApi.print),ScopeApi.debug=scope.createScope(ScopeApi.debug),ScopeApi.if=scope.createScope(ScopeApi.if),ScopeApi.each=scope.createScope(ScopeApi.each),ScopeApi};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,