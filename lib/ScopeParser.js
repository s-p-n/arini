"use strict";require("core-js/modules/es6.array.from"),require("core-js/modules/es7.symbol.async-iterator"),require("core-js/modules/es6.symbol"),require("core-js/modules/es6.regexp.to-string"),require("core-js/modules/es6.regexp.replace"),require("core-js/modules/web.dom.iterable");var fs=_interopRequireWildcard(require("fs")),path=_interopRequireWildcard(require("path")),Module=_interopRequireWildcard(require("module")),parser=_interopRequireWildcard(require("./parser.js")),_ScopeAst=_interopRequireDefault(require("./ScopeAst.js")),_ScopeRules=_interopRequireDefault(require("./ScopeRules.js")),_BacktickProcessor=_interopRequireDefault(require("./BacktickProcessor.js")),sourceMap=_interopRequireWildcard(require("source-map")),combine=_interopRequireWildcard(require("combine-source-map")),convert=_interopRequireWildcard(require("convert-source-map"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}return b.default=a,b}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}require("source-map-support").install();var ScopeParser=function(){function a(){_classCallCheck(this,a);var b=this;b.parser=new parser.Parser,b.rules=new _ScopeRules.default,b.parser.yy.scopeAst=_ScopeAst.default}return _createClass(a,[{key:"libraryUtils",value:function a(){return{runtime:require("./scopeRuntime.js"),api:require("./scopeRuntimeApi.js")}}},{key:"parse",value:function e(a){var b=this,c=b.parser.lexer.lex;b.parser.yy.scopeState={};var d=new _BacktickProcessor.default(b);return b.parser.lexer.lex=function(){var a;return a=d.lex(this),!1===a?c.call(this):a},this.parser.parse(a)}},{key:"traverse",value:function d(a){var b=this;if(null===a)return null;if("object"!=typeof a)return a;if(void 0===a.type)return a;if(void 0!==a.loc){var e=b.rules.state.loc.name;b.rules.state.loc=a.loc,b.rules.state.loc.name=e}if(a.body instanceof Array){var f=b.rules.parentNode;a.traversedBody=[],a.body.forEach(function(c){b.rules.parentNode=a.type,a.traversedBody.push(b.traverse(c))}),b.rules.parentNode=f}if(b.rules[a.type]){if(b.rules.state.setName(a.type),a.body instanceof Array){var c;return(c=b.rules)[a.type].apply(c,_toConsumableArray(a.traversedBody))}return b.rules.state.loc.sourceCode=a.body,b.rules[a.type](a.body)}return console.log("".concat(a.type," not implemented")),"Not implemented"}},{key:"import",value:function q(b,c,d,e){var f=this;d=JSON.parse(d);var g=path.resolve(path.dirname(b),d);if(!fs.existsSync(g)){var h=path.resolve(__dirname,"../packages"),i=fs.readdirSync(h);if(-1!==i.indexOf(d)){var j=path.join(h,d),k=require(path.join(j,"spn.json")),l=path.join(j,k.main);g=path.resolve(path.dirname(b),l)}else throw new Error("File \"".concat(d,"\" doesn't exist ").concat(f.rules.state.errorTail()))}if(/\.sc$/.test(g)){var m=path.resolve(path.dirname(c),d.replace(/\.sc$/,".js")),n=fs.readFileSync(g,"utf8"),o=new a().translate(n,g,m),p=path.dirname(m);fs.existsSync(p)||fs.mkdirSync(p),fs.writeFileSync(m,o.code);var r={source:o.code,sourceFile:m};return f.imported.push({file:r,offset:{line:e}}),"scope.import(".concat(JSON.stringify(m),")")}return"scope.import(".concat(JSON.stringify(g),")")}},{key:"translate",value:function s(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"NO SOURCE FILE",c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"NO LIB FILE",d=!!(3<arguments.length&&void 0!==arguments[3])&&arguments[3],e=this,f="";f+="undefined"==typeof window?"#!/usr/bin/env node\n\"use strict\";global.__scopedir=__dirname;require(\"source-map-support\").install();const scope=require(\""+path.join(__dirname,"scopeRuntime.js")+"\");const ScopeApi=require(\""+path.join(__dirname,"scopeRuntimeApi.js")+"\")(scope);":"\"use strict\";";var g,h;e.mapAndParse=function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{source:"",translation:"",sn:""};return"string"!=typeof a.sn&&a.sn.setSourceContent(b,a.source),a},e.sn=function(a){var c=1<arguments.length&&void 0!==arguments[1]?arguments[1]:e.rules.state.getName(),d=e.rules.state.loc.start;return new sourceMap.SourceNode(d.line,d.column,b,a,c)};var i,j=e.sn("");e.imported=[],e.rules=new _ScopeRules.default,e.rules.parser=e,e.rules.srcFilename=b,e.rules.libFilename=c,e.rules.node=j,e.rules.sn=e.sn,e.rules.mapAndParse=e.mapAndParse;var k=this.parse(a),l=JSON.stringify(k,null,"  "),m=e.traverse(k);if(d)return e.rules.invokeExpression(e.rules.scopeExpression(m),e.rules.invokeArguments()).sn;h=e.rules.invokeExpression(e.rules.scopeExpression(e.rules.scopeStart(),m),e.rules.invokeArguments()).sn,h.prepend([f,"module.exports="]),h.add([";"]),i=h.toStringWithSourceMap(),i.map=JSON.parse(i.map.toString()),i.map.sourcesContent=[a],i.comment=convert.fromObject(i.map).toComment();var n={source:i.code+"\n".concat(i.comment),sourceFile:c},p=combine.create(c.replace(/\.js$/,".min.js")).addFile(n,{line:1});e.imported.forEach(function(a){p.addFile(a.file,a.offset)});var q=p.base64(),r=convert.fromBase64(q).toObject();return g={ast:l,map:r,code:i.code+"\n".concat(i.comment)},g}}]),a}();module.exports=ScopeParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,