"use strict";require("core-js/modules/es6.array.from"),require("core-js/modules/es7.symbol.async-iterator"),require("core-js/modules/es6.symbol"),require("core-js/modules/es6.regexp.to-string"),require("core-js/modules/es6.regexp.replace"),require("core-js/modules/web.dom.iterable");var fs=_interopRequireWildcard(require("fs")),path=_interopRequireWildcard(require("path")),Module=_interopRequireWildcard(require("module")),parser=_interopRequireWildcard(require("./parser.js")),_ScopeAst=_interopRequireDefault(require("./ScopeAst.js")),_ScopeRules=_interopRequireDefault(require("./ScopeRules.js")),_BacktickProcessor=_interopRequireDefault(require("./BacktickProcessor.js")),sourceMap=_interopRequireWildcard(require("source-map")),combine=_interopRequireWildcard(require("combine-source-map")),convert=_interopRequireWildcard(require("convert-source-map"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}return b.default=a,b}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}require("source-map-support").install();var ScopeParser=function(){function a(){_classCallCheck(this,a);var b=this;b.parser=new parser.Parser,b.rules=new _ScopeRules.default,b.parser.yy.scopeAst=_ScopeAst.default}return _createClass(a,[{key:"libraryUtils",value:function a(){return{runtime:require("./scopeRuntime.js"),api:require("./scopeRuntimeApi.js")}}},{key:"parse",value:function e(a){var b=this,c=b.parser.lexer.lex;b.parser.yy.scopeState={};var d=new _BacktickProcessor.default(b);return b.parser.lexer.lex=function(){var a;return a=d.lex(this),!1===a?c.call(this):a},this.parser.parse(a)}},{key:"traverse",value:function d(a){var b=this;if(null===a)return null;if("object"!=typeof a)return a;if(void 0===a.type)return a;if(void 0!==a.loc){var e=b.rules.state.loc.name;b.rules.state.loc=a.loc,b.rules.state.loc.name=e}if(a.body instanceof Array){var f=b.rules.parentNode;a.traversedBody=[],a.body.forEach(function(c){b.rules.parentNode=a.type,a.traversedBody.push(b.traverse(c))}),b.rules.parentNode=f}if(b.rules[a.type]){if(b.rules.state.setName(a.type),a.body instanceof Array){var c;return(c=b.rules)[a.type].apply(c,_toConsumableArray(a.traversedBody))}return b.rules.state.loc.sourceCode=a.body,b.rules[a.type](a.body)}return console.log("".concat(a.type," not implemented")),"Not implemented"}},{key:"import",value:function q(b,c,d,e){var f=this;d=JSON.parse(d);var g=path.resolve(path.dirname(b),d);if(!fs.existsSync(g)){var h=path.resolve(__dirname,"../packages"),i=fs.readdirSync(h);if(-1!==i.indexOf(d)){var j=path.join(h,d),k=require(path.join(j,"spn.json")),l=path.join(j,k.main);g=path.resolve(path.dirname(b),l)}else throw new Error("File \"".concat(d,"\" doesn't exist ").concat(f.rules.state.errorTail()))}if(/\.sc$/.test(g)){var m=path.resolve(path.dirname(c),d.replace(/\.sc$/,".js")),n=fs.readFileSync(g,"utf8"),o=new a().translate(n,g,m),p=path.dirname(m);fs.existsSync(p)||fs.mkdirSync(p),fs.writeFileSync(m,o.code);var r={source:o.code,sourceFile:m};return f.imported.push({file:r,offset:{line:e}}),"scope.import(".concat(JSON.stringify(m),")")}return"scope.import(".concat(JSON.stringify(g),")")}},{key:"translate",value:function s(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"NO SOURCE FILE",c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"NO LIB FILE",d=!!(3<arguments.length&&void 0!==arguments[3])&&arguments[3],e=this,f="";f="undefined"==typeof window?require("./predefs.js")(__dirname):"\"use strict\";";var g,h;e.mapAndParse=function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{source:"",translation:"",sn:""};return"string"!=typeof a.sn&&a.sn.setSourceContent(b,a.source),a},e.sn=function(a){var c=1<arguments.length&&void 0!==arguments[1]?arguments[1]:e.rules.state.getName(),d=e.rules.state.loc.start;return new sourceMap.SourceNode(d.line,d.column,b,a,c)};var i,j=e.sn("");e.imported=[],e.rules=new _ScopeRules.default,e.rules.parser=e,e.rules.srcFilename=b,e.rules.libFilename=c,e.rules.node=j,e.rules.sn=e.sn,e.rules.mapAndParse=e.mapAndParse;var k=this.parse(a),l=JSON.stringify(k,null,"  "),m=e.traverse(k);if(d)return e.rules.invokeExpression(e.rules.scopeExpression(m),e.rules.invokeArguments()).sn;h=e.rules.invokeExpression(e.rules.scopeExpression(e.rules.scopeStart(),m),e.rules.invokeArguments()).sn,h.prepend(f),h.add(";"),i=h.toStringWithSourceMap(),i.map=JSON.parse(i.map.toString()),i.map.sourcesContent=[a],i.comment=convert.fromObject(i.map).toComment();var n={source:i.code+"\n".concat(i.comment),sourceFile:c},p=combine.create(c.replace(/\.js$/,".min.js")).addFile(n,{line:1});e.imported.forEach(function(a){p.addFile(a.file,a.offset)});var q=p.base64(),r=convert.fromBase64(q).toObject();return g={ast:l,map:r,code:i.code+"\n".concat(i.comment)},g}}]),a}();module.exports=ScopeParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TY29wZVBhcnNlci5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaW5zdGFsbCIsIlNjb3BlUGFyc2VyIiwic2VsZiIsInBhcnNlciIsIlBhcnNlciIsInJ1bGVzIiwiU2NvcGVSdWxlcyIsInl5Iiwic2NvcGVBc3QiLCJTY29wZUFzdCIsInJ1bnRpbWUiLCJhcGkiLCJjb2RlIiwiamlzb25MZXhlciIsImxleGVyIiwibGV4Iiwic2NvcGVTdGF0ZSIsImJ0UHJvY2Vzc29yIiwiQmFja3RpY2tQcm9jZXNzb3IiLCJjYWxsIiwicGFyc2UiLCJvYmoiLCJ0eXBlIiwibG9jIiwibmFtZSIsInN0YXRlIiwiYm9keSIsIkFycmF5IiwibGFzdFBhcmVudCIsInBhcmVudE5vZGUiLCJ0cmF2ZXJzZWRCb2R5IiwiZm9yRWFjaCIsImkiLCJwdXNoIiwidHJhdmVyc2UiLCJzZXROYW1lIiwic291cmNlQ29kZSIsImNvbnNvbGUiLCJsb2ciLCJzcmNGaWxlbmFtZSIsImxpYkZpbGVuYW1lIiwiZmlsZW5hbWUiLCJsaW5lT2Zmc2V0IiwiSlNPTiIsIm1TcmNGaWxlbmFtZSIsInBhdGgiLCJyZXNvbHZlIiwiZGlybmFtZSIsImZzIiwiZXhpc3RzU3luYyIsInBhY2thZ2VzRGlyIiwiX19kaXJuYW1lIiwicGFja2FnZXMiLCJyZWFkZGlyU3luYyIsImluZGV4T2YiLCJzY29wZVBhY2thZ2VEaXIiLCJqb2luIiwic3BuIiwibWFpbiIsIkVycm9yIiwiZXJyb3JUYWlsIiwidGVzdCIsIm1MaWJGaWxlbmFtZSIsInJlcGxhY2UiLCJtQ29kZSIsInJlYWRGaWxlU3luYyIsIm1SZXN1bHQiLCJ0cmFuc2xhdGUiLCJtTGliRGlybmFtZSIsIm1rZGlyU3luYyIsIndyaXRlRmlsZVN5bmMiLCJmaWxlIiwic291cmNlIiwic291cmNlRmlsZSIsImltcG9ydGVkIiwib2Zmc2V0IiwibGluZSIsInN0cmluZ2lmeSIsImFzSW5jbHVkZSIsInNjb3BlUnVudGltZSIsIndpbmRvdyIsInJlc3VsdCIsInRyYXZlcnNhbCIsIm1hcEFuZFBhcnNlIiwiZGF0YSIsInRyYW5zbGF0aW9uIiwic24iLCJzZXRTb3VyY2VDb250ZW50IiwiY2h1bmsiLCJnZXROYW1lIiwic3RhcnQiLCJzb3VyY2VNYXAiLCJTb3VyY2VOb2RlIiwiY29sdW1uIiwic20iLCJub2RlIiwiYXN0IiwiYXN0SlNPTiIsInBhcnNlUmVzdWx0IiwiaW52b2tlRXhwcmVzc2lvbiIsInNjb3BlRXhwcmVzc2lvbiIsImludm9rZUFyZ3VtZW50cyIsInNjb3BlU3RhcnQiLCJwcmVwZW5kIiwiYWRkIiwidG9TdHJpbmdXaXRoU291cmNlTWFwIiwibWFwIiwidG9TdHJpbmciLCJzb3VyY2VzQ29udGVudCIsImNvbW1lbnQiLCJjb252ZXJ0IiwiZnJvbU9iamVjdCIsInRvQ29tbWVudCIsIm1haW5GaWxlIiwiY29tYmluYXRpb24iLCJjb21iaW5lIiwiY3JlYXRlIiwiYWRkRmlsZSIsIm8iLCJiYXNlNjQiLCJuZXdTbSIsImZyb21CYXNlNjQiLCJ0b09iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJxakVBQUFBLE9BQU8sQ0FBQyxvQkFBRCxDQUFQLENBQThCQyxPQUE5QixFLElBWU1DLENBQUFBLFcsWUFDTCxZQUFlLHlCQUNkLEdBQU1DLENBQUFBLENBQUksQ0FBRyxJQUFiLENBQ0FBLENBQUksQ0FBQ0MsTUFBTCxDQUFjLEdBQUlBLENBQUFBLE1BQU0sQ0FBQ0MsTUFGWCxDQUdkRixDQUFJLENBQUNHLEtBQUwsQ0FBYSxHQUFJQyxvQkFISCxDQTZHZEosQ0FBSSxDQUFDQyxNQUFMLENBQVlJLEVBQVosQ0FBZUMsUUFBZixDQUEwQkMsaUJBQzFCLEMsNkRBRWUsQ0FDZixNQUFPLENBQ05DLE9BQU8sQ0FBRVgsT0FBTyxDQUFDLG1CQUFELENBRFYsQ0FFTlksR0FBRyxDQUFFWixPQUFPLENBQUMsc0JBQUQsQ0FGTixDQUlQLEMsZ0NBRU1hLEMsQ0FBTSxJQUNOVixDQUFBQSxDQUFJLENBQUcsSUFERCxDQUVS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dEIsQ0FBNEIrQyxDQUFDLENBQUMzQyxNQUE5QixDQUNBLENBRkQsQ0F2RjBGLElBMEZ0RjRDLENBQUFBLENBQU0sQ0FBR0wsQ0FBVyxDQUFDSyxNQUFaLEVBMUY2RSxDQTJGdEZDLENBQUssQ0FBR1YsT0FBTyxDQUFDVyxVQUFSLENBQW1CRixDQUFuQixFQUEyQkcsUUFBM0IsRUEzRjhFLENBaUcxRixNQUxBekMsQ0FBQUEsQ0FBTSxDQUFHLENBQ1JlLEdBQUcsQ0FBRUMsQ0FERyxDQUVSUyxHQUFHLENBQUVjLENBRkcsQ0FHUjVHLElBQUksQ0FBRWtGLENBQUUsQ0FBQ2xGLElBQUgsYUFBZWtGLENBQUUsQ0FBQ2UsT0FBbEIsQ0FIRSxDQUtULENBQU81QixDQUNQLEMsU0FHRjBDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQjNILFciLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKFwic291cmNlLW1hcC1zdXBwb3J0XCIpLmluc3RhbGwoKTtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgTW9kdWxlIGZyb20gXCJtb2R1bGVcIjtcbmltcG9ydCAqIGFzIHBhcnNlciBmcm9tIFwiLi9wYXJzZXIuanNcIjtcbmltcG9ydCBTY29wZUFzdCBmcm9tIFwiLi9TY29wZUFzdC5qc1wiO1xuaW1wb3J0IFNjb3BlUnVsZXMgZnJvbSBcIi4vU2NvcGVSdWxlcy5qc1wiO1xuaW1wb3J0IEJhY2t0aWNrUHJvY2Vzc29yIGZyb20gXCIuL0JhY2t0aWNrUHJvY2Vzc29yLmpzXCI7XG5pbXBvcnQgKiBhcyBzb3VyY2VNYXAgZnJvbSBcInNvdXJjZS1tYXBcIjtcbmltcG9ydCAqIGFzIGNvbWJpbmUgZnJvbSBcImNvbWJpbmUtc291cmNlLW1hcFwiO1xuaW1wb3J0ICogYXMgY29udmVydCBmcm9tIFwiY29udmVydC1zb3VyY2UtbWFwXCI7XG5cbmNsYXNzIFNjb3BlUGFyc2VyIHtcblx0Y29uc3RydWN0b3IgKCkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdHNlbGYucGFyc2VyID0gbmV3IHBhcnNlci5QYXJzZXIoKTtcblx0XHRzZWxmLnJ1bGVzID0gbmV3IFNjb3BlUnVsZXMoKTtcblx0XHQvL2NvbnNvbGUubG9nKHNlbGYucGFyc2VyLmxleGVyLmxleC50b1N0cmluZygpKTtcblx0XHQvL2NvbnNvbGUubG9nKHNlbGYucGFyc2VyLmxleGVyLm5leHQudG9TdHJpbmcoKSk7XG5cdFx0Lypcblx0XHRsZXQgamlzb25MZXhlciA9IHNlbGYucGFyc2VyLmxleGVyLmxleDtcblx0XHRzZWxmLnBhcnNlci55eS5zY29wZVN0YXRlID0ge1xuXHRcdFx0aW5CYWNrdGljazogZmFsc2UsXG5cdFx0XHRpbkJhY2t0aWNrRXhwcjogZmFsc2Vcblx0XHR9O1xuXHRcdGxldCBvbmNlID0gZmFsc2U7XG5cdFx0XG5cdFx0c2VsZi5wYXJzZXIubGV4ZXIubGV4ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKCFvbmNlKSB7XG5cdFx0XHRcdG9uY2UgPSAhb25jZTtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyh0aGlzKTtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyh0aGlzLnJ1bGVzKTtcblx0XHRcdH1cblx0XHRcdC8vY29uc29sZS5sb2coXCJpbnRlcmNlcHRlZCBsZXhcIik7XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwiaW4gYmFja3RpY2s6XCIsIHRoaXMueXkuc2NvcGVTdGF0ZS5pbkJhY2t0aWNrKTtcblx0XHRcdC8vY29uc29sZS5sb2coXCJ5eXRleHQ6XCIsIEpTT04uc3RyaW5naWZ5KHRoaXMueXl0ZXh0KSk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwiaW5wdXQ6XCIsIHRoaXMuaW5wdXQoKSk7XG5cdFx0XHRpZiAodGhpcy55eXRleHQgPT09IFwiYFwiKSB7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coXCJzd2l0Y2hlZCBiYWNrdGljayBzdGF0ZVwiKTtcblx0XHRcdFx0dGhpcy55eS5zY29wZVN0YXRlLmluQmFja3RpY2sgPSAhdGhpcy55eS5zY29wZVN0YXRlLmluQmFja3RpY2tcblx0XHRcdFxuXHRcdFx0fSBlbHNlIGlmICh0aGlzLnl5LnNjb3BlU3RhdGUuaW5CYWNrdGljaykge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nIChcImF0dGVtcHRpbmcgc2tpcFwiKTtcblx0XHRcdFx0Ly9sZXQgbmV4dCA9IHRoaXMubmV4dCgpO1xuXHRcdFx0XHRsZXQgaW5wdXRNYXRjaCwgdGVzdE1hdGNoO1xuXHRcdFx0XHRsZXQgZmluYWxNYXRjaCA9IFwiXCI7XG5cdFx0XHRcdGxldCBidEV4cHJSZWdleCA9IC9eKD86KFxccyopXFwkXFx7KFteXFx9XSopXFx9KC4qKSkvZ3VzO1xuXHRcdFx0XHRsZXQgYnRCb2R5UmVnZXggPSAvXigoPzpcXFxcYHxbXmBdKD8hXFx7KSkqKSguKikvZ3VzO1xuXG5cdFx0XHRcdHRoaXMuX2lucHV0ID0gdGhpcy55eXRleHQgKyB0aGlzLl9pbnB1dDtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImJ0RXhwclJlZ2V4OlwiLCBidEV4cHJSZWdleCk7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coXCJidEJvZHlSZWdleDpcIiwgYnRCb2R5UmVnZXgpO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwibWF0Y2g6XCIsIHRoaXMubWF0Y2gpO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwibWF0Y2hlZDpcIiwgdGhpcy5tYXRjaGVkKTtcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGNvbnN0IGJ0Qm9keSA9IDU3O1xuXHRcdFx0XHRcdGNvbnN0IGJ0RXhwclN0YXJ0ID0gNTY7XG5cdFx0XHRcdFx0Ly9jb25zdCBidEV4cHJFbmQgPSA/Pz9cblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiYnQtaW5wdXQ6XCIsIHRoaXMuX2lucHV0KTtcblx0XHRcdFx0XHRpZiAoaW5wdXRNYXRjaCA9IHRoaXMuX2lucHV0Lm1hdGNoKGJ0RXhwclJlZ2V4KSkge1xuXHRcdFx0XHRcdFx0bGV0IGJ0RXhwck1hdGNoID0gYnRFeHByUmVnZXguZXhlYyh0aGlzLl9pbnB1dCk7XG5cdFx0XHRcdFx0XHRsZXQgW1xuXHRcdFx0XHRcdFx0XHRidEV4cHJPcmlnaW5hbCxcblx0XHRcdFx0XHRcdFx0YnRFeHByU3BhY2VzLFxuXHRcdFx0XHRcdFx0XHRidEV4cHJTcmMsXG5cdFx0XHRcdFx0XHRcdGJ0RXhwckxlZnRvdmVyc1xuXHRcdFx0XHRcdFx0XSA9IGJ0RXhwck1hdGNoO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImJ0RXhwck1hdGNoOlwiLCBidEV4cHJNYXRjaCk7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiYnRFeHByT3JpZ2luYWw6XCIsIGJ0RXhwck9yaWdpbmFsKTtcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coXCJidEV4cHJTcmM6XCIsIGJ0RXhwclNyYyk7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiYnRFeHByTGVmdG92ZXJzOlwiLCBidEV4cHJMZWZ0b3ZlcnMpO1xuXHRcdFx0XHRcdFx0dGhpcy55eS5zY29wZVN0YXRlLmluQmFja3RpY2sgPSBmYWxzZTtcblx0XHRcdFx0XHRcdHRoaXMueXkuc2NvcGVTdGF0ZS5pbkJhY2t0aWNrRXhwciA9IHRydWU7XG5cdFx0XHRcdFx0XHRsZXQgbmV3RXhwclNyYyA9IHNlbGYudHJhdmVyc2Uoc2VsZi5wYXJzZShidEV4cHJTcmMgKyBcIjtcIikpLnRyYW5zbGF0aW9uLnJlcGxhY2UoLzskLywgXCJcIik7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwicGFyc2UgcmVzdWx0OlwiKTtcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2cobmV3RXhwclNyYyk7XG5cdFx0XHRcdFx0XHR0aGlzLnl5LnNjb3BlU3RhdGUuaW5CYWNrdGljayA9IHRydWU7XG5cdFx0XHRcdFx0XHR0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnJlcGxhY2UoYnRFeHByUmVnZXgsICgpID0+IHtcblx0XHRcdFx0XHRcdFx0bGV0IHByZXZDaGFyID0gdGhpcy5tYXRjaC5zdWJzdHIodGhpcy5tYXRjaC5sZW5ndGggLTEpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1hdGNoID0gYnRFeHByU3BhY2VzICsgJyR7JyArIG5ld0V4cHJTcmMgKyBcIn1cIjtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHByZXZDaGFyICsgYnRFeHByTGVmdG92ZXJzO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRmaW5hbE1hdGNoICs9IHRoaXMubWF0Y2g7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiYTogdGhpcy5tYXRjaCBhZnRlciByZXBsYWNlbWVudDpcIiwgdGhpcy5tYXRjaCk7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiYTogdGhpcy5faW5wdXQgYWZ0ZXIgcmVwbGFjZW1lbnQ6XCIsIHRoaXMuX2lucHV0KTtcblx0XHRcdFx0XHRcdC8vcHJvY2Vzcy5leGl0KCk7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGlucHV0TWF0Y2ggPSB0aGlzLl9pbnB1dC5tYXRjaChidEJvZHlSZWdleCkpIHtcblx0XHRcdFx0XHRcdGlmICh0aGlzLl9pbnB1dFswXSA9PT0gXCJgXCIpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdC8vdGhpcy5pbnB1dCgpO1xuXHRcdFx0XHRcdFx0XHQvL3RoaXMueXl0ZXh0ID0gXCJgXCI7XG5cdFx0XHRcdFx0XHRcdC8vcmV0dXJuIHRoaXMubGV4KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRsZXQgbWF0Y2ggPSBidEJvZHlSZWdleC5leGVjKHRoaXMuX2lucHV0KTtcblx0XHRcdFx0XHRcdHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQucmVwbGFjZShidEJvZHlSZWdleCwgKG9yaWdpbmFsLCBtYXRjaCwgbGVmdG92ZXJzKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGxldCBwcmV2Q2hhciA9IHRoaXMubWF0Y2guc3Vic3RyKHRoaXMubWF0Y2gubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubWF0Y2ggPSBtYXRjaDtcblx0XHRcdFx0XHRcdFx0ZmluYWxNYXRjaCArPSBtYXRjaDtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHByZXZDaGFyICsgbGVmdG92ZXJzO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiYjogdGhpcy5tYXRjaCBhZnRlciByZXBsYWNlbWVudDpcIiwgdGhpcy5tYXRjaCk7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiYjogdGhpcy5faW5wdXQgYWZ0ZXIgcmVwbGFjZW1lbnQ6XCIsIHRoaXMuX2lucHV0KTtcblx0XHRcdFx0XHRcdC8vcHJvY2Vzcy5leGl0KCk7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGVzdE1hdGNoID0gdGhpcy5uZXh0KCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUoKHRlc3RNYXRjaCAhPT0gZmFsc2UpICYmIHRoaXMuaW5wdXQoKSk7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coXCJtYXRjaDpcIiwgdGhpcy5tYXRjaCk7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coXCJtYXRjaGVkOlwiLCB0aGlzLm1hdGNoZWQpO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwibGFzdE1hdGNoOlwiLCBcImBcIiArIGZpbmFsTWF0Y2ggKyBcImBcIik7XG5cdFx0XHRcdHRoaXMueXkuc2NvcGVTdGF0ZS5idFN0cmluZyA9IFwiYFwiICsgZmluYWxNYXRjaCArIFwiYFwiO1xuXHRcdFx0XHRyZXR1cm4gdGVzdE1hdGNoP3Rlc3RNYXRjaDpqaXNvbkxleGVyLmNhbGwodGhpcyk7XG5cdFx0XHR9XG5cdFx0XHRsZXQgcmVzdWx0ID0gamlzb25MZXhlci5jYWxsKHRoaXMpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcInJlc3VsdDpcIik7XG5cdFx0XHQvL2NvbnNvbGUubG9nKHJlc3VsdCk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH07XG5cdFx0Ki9cblx0XHRzZWxmLnBhcnNlci55eS5zY29wZUFzdCA9IFNjb3BlQXN0O1xuXHR9XG5cblx0bGlicmFyeVV0aWxzICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cnVudGltZTogcmVxdWlyZSgnLi9zY29wZVJ1bnRpbWUuanMnKSxcblx0XHRcdGFwaTogcmVxdWlyZSgnLi9zY29wZVJ1bnRpbWVBcGkuanMnKVxuXHRcdH07XG5cdH1cblxuXHRwYXJzZSAoY29kZSkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdGxldCBqaXNvbkxleGVyID0gc2VsZi5wYXJzZXIubGV4ZXIubGV4O1xuXHRcdHNlbGYucGFyc2VyLnl5LnNjb3BlU3RhdGUgPSB7fTtcblx0XHRsZXQgYnRQcm9jZXNzb3IgPSBuZXcgQmFja3RpY2tQcm9jZXNzb3Ioc2VsZik7XG5cblx0XHRzZWxmLnBhcnNlci5sZXhlci5sZXggPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRsZXQgY29kZTtcblxuXHRcdFx0Y29kZSA9IGJ0UHJvY2Vzc29yLmxleCh0aGlzKTtcblx0XHRcdGlmIChjb2RlICE9PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm4gY29kZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBqaXNvbkxleGVyLmNhbGwodGhpcyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucGFyc2VyLnBhcnNlKGNvZGUpO1xuXHR9XG5cblx0dHJhdmVyc2UgKG9iaikge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdGxldCByZXN1bHQgPSBcIlwiO1xuXHRcdGlmIChvYmogPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9XG5cdFx0aWYgKG9iai50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXHRcdGlmIChvYmoubG9jICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGxldCBuYW1lID0gc2VsZi5ydWxlcy5zdGF0ZS5sb2MubmFtZTtcblx0XHRcdHNlbGYucnVsZXMuc3RhdGUubG9jID0gb2JqLmxvYztcblx0XHRcdHNlbGYucnVsZXMuc3RhdGUubG9jLm5hbWUgPSBuYW1lO1xuXHRcdH1cblxuXHRcdGlmIChvYmouYm9keSBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRsZXQgbGFzdFBhcmVudCA9IHNlbGYucnVsZXMucGFyZW50Tm9kZTtcblx0XHRcdG9iai50cmF2ZXJzZWRCb2R5ID0gW107XG5cdFx0XHRvYmouYm9keS5mb3JFYWNoKChpKSA9PiB7XG5cdFx0XHRcdHNlbGYucnVsZXMucGFyZW50Tm9kZSA9IG9iai50eXBlO1xuXHRcdFx0XHRvYmoudHJhdmVyc2VkQm9keS5wdXNoKHNlbGYudHJhdmVyc2UoaSkpO1xuXHRcdFx0fSk7XG5cdFx0XHRzZWxmLnJ1bGVzLnBhcmVudE5vZGUgPSBsYXN0UGFyZW50O1xuXHRcdH1cblx0XHRpZiAoc2VsZi5ydWxlc1tvYmoudHlwZV0pIHtcblx0XHRcdHNlbGYucnVsZXMuc3RhdGUuc2V0TmFtZShvYmoudHlwZSk7XG5cdFx0XHRpZiAob2JqLmJvZHkgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0XHRyZXR1cm4gc2VsZi5ydWxlc1tvYmoudHlwZV0oLi4ub2JqLnRyYXZlcnNlZEJvZHkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5ydWxlcy5zdGF0ZS5sb2Muc291cmNlQ29kZSA9IG9iai5ib2R5O1xuXHRcdFx0XHRyZXR1cm4gc2VsZi5ydWxlc1tvYmoudHlwZV0ob2JqLmJvZHkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zb2xlLmxvZyhgJHtvYmoudHlwZX0gbm90IGltcGxlbWVudGVkYCk7XG5cdFx0cmV0dXJuIFwiTm90IGltcGxlbWVudGVkXCI7XG5cdH1cblxuXHRpbXBvcnQgKHNyY0ZpbGVuYW1lLCBsaWJGaWxlbmFtZSwgZmlsZW5hbWUsIGxpbmVPZmZzZXQpIHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0ZmlsZW5hbWUgPSBKU09OLnBhcnNlKGZpbGVuYW1lKTtcblx0XHRsZXQgbVNyY0ZpbGVuYW1lID0gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShzcmNGaWxlbmFtZSksIGZpbGVuYW1lKTtcblx0XHRpZiAoIWZzLmV4aXN0c1N5bmMobVNyY0ZpbGVuYW1lKSkge1xuXHRcdFx0bGV0IHBhY2thZ2VzRGlyID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCIuLi9wYWNrYWdlc1wiKTtcblx0XHRcdGxldCBwYWNrYWdlcyA9IGZzLnJlYWRkaXJTeW5jKHBhY2thZ2VzRGlyKTtcblx0XHRcdGlmIChwYWNrYWdlcy5pbmRleE9mKGZpbGVuYW1lKSAhPT0gLTEpIHtcblx0XHRcdFx0bGV0IHNjb3BlUGFja2FnZURpciA9IHBhdGguam9pbihwYWNrYWdlc0RpciwgZmlsZW5hbWUpO1xuXHRcdFx0XHRsZXQgc3BuID0gcmVxdWlyZShwYXRoLmpvaW4oc2NvcGVQYWNrYWdlRGlyLCBcInNwbi5qc29uXCIpKTtcblx0XHRcdFx0bGV0IG1haW4gPSBwYXRoLmpvaW4oc2NvcGVQYWNrYWdlRGlyLCBzcG4ubWFpbik7XG5cdFx0XHRcdG1TcmNGaWxlbmFtZSA9IHBhdGgucmVzb2x2ZShwYXRoLmRpcm5hbWUoc3JjRmlsZW5hbWUpLCBtYWluKTtcblx0XHRcdFx0XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEZpbGUgXCIke2ZpbGVuYW1lfVwiIGRvZXNuJ3QgZXhpc3QgJHtzZWxmLnJ1bGVzLnN0YXRlLmVycm9yVGFpbCgpfWApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoL1xcLnNjJC8udGVzdChtU3JjRmlsZW5hbWUpKSB7XG5cdFx0XHRsZXQgbUxpYkZpbGVuYW1lID0gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShsaWJGaWxlbmFtZSksIGZpbGVuYW1lLnJlcGxhY2UoL1xcLnNjJC8sIFwiLmpzXCIpKTtcblx0XHRcdGxldCBtQ29kZSA9IGZzLnJlYWRGaWxlU3luYyhtU3JjRmlsZW5hbWUsICd1dGY4Jyk7XG5cdFx0XHRsZXQgbVJlc3VsdCA9IG5ldyBTY29wZVBhcnNlcigpLnRyYW5zbGF0ZShtQ29kZSwgbVNyY0ZpbGVuYW1lLCBtTGliRmlsZW5hbWUpO1xuXHRcdFx0bGV0IG1MaWJEaXJuYW1lID0gcGF0aC5kaXJuYW1lKG1MaWJGaWxlbmFtZSk7XG5cdFx0XHRpZiAoIWZzLmV4aXN0c1N5bmMobUxpYkRpcm5hbWUpKSB7XG5cdFx0XHRcdGZzLm1rZGlyU3luYyhtTGliRGlybmFtZSk7XG5cdFx0XHR9XG5cdFx0XHRmcy53cml0ZUZpbGVTeW5jKG1MaWJGaWxlbmFtZSwgbVJlc3VsdC5jb2RlKTtcblx0XHRcdGxldCBmaWxlID0ge1xuXHRcdFx0XHRzb3VyY2U6IG1SZXN1bHQuY29kZSxcblx0XHRcdFx0c291cmNlRmlsZTogbUxpYkZpbGVuYW1lXG5cdFx0XHR9O1xuXHRcdFx0c2VsZi5pbXBvcnRlZC5wdXNoKHtcblx0XHRcdFx0ZmlsZTogZmlsZSxcblx0XHRcdFx0b2Zmc2V0OiB7XG5cdFx0XHRcdFx0bGluZTogbGluZU9mZnNldFxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBgc2NvcGUuaW1wb3J0KCR7SlNPTi5zdHJpbmdpZnkobUxpYkZpbGVuYW1lKX0pYDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGBzY29wZS5pbXBvcnQoJHtKU09OLnN0cmluZ2lmeShtU3JjRmlsZW5hbWUpfSlgO1xuXHRcdH1cblx0fVxuXG5cdHRyYW5zbGF0ZSAoY29kZSwgc3JjRmlsZW5hbWU9XCJOTyBTT1VSQ0UgRklMRVwiLCBsaWJGaWxlbmFtZT1cIk5PIExJQiBGSUxFXCIsIGFzSW5jbHVkZT1mYWxzZSkge1xuXHRcdGxldCBzZWxmID0gdGhpcztcblx0XHRsZXQgc2NvcGVSdW50aW1lID0gXCJcIjtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0c2NvcGVSdW50aW1lID0gcmVxdWlyZShcIi4vcHJlZGVmcy5qc1wiKShfX2Rpcm5hbWUpO1xuXHRcdFx0LypzY29wZVJ1bnRpbWUgKz0gJyMhL3Vzci9iaW4vZW52IG5vZGVcXG4nICtcblx0XHRcdFx0J1widXNlIHN0cmljdFwiOycgK1xuXHRcdFx0XHQnZ2xvYmFsLl9fc2NvcGVkaXI9X19kaXJuYW1lOycgK1xuXHRcdFx0XHQncmVxdWlyZShcInNvdXJjZS1tYXAtc3VwcG9ydFwiKS5pbnN0YWxsKCk7JyArXG5cdFx0XHRcdCdjb25zdCBzY29wZT1yZXF1aXJlKFwiJyArIHBhdGguam9pbihfX2Rpcm5hbWUsIFwic2NvcGVSdW50aW1lLmpzXCIpICsgJ1wiKTsnICtcblx0XHRcdFx0J2NvbnN0IFNjb3BlQXBpPXJlcXVpcmUoXCInICsgcGF0aC5qb2luKF9fZGlybmFtZSwgXCJzY29wZVJ1bnRpbWVBcGkuanNcIikgKyAnXCIpKHNjb3BlKTsnOyovXG5cdFx0fSBlbHNlIHtcblx0XHRcdHNjb3BlUnVudGltZSA9ICdcInVzZSBzdHJpY3RcIjsnO1xuXHRcdH1cblx0XHQvL2xldCBzY29wZVJ1bnRpbWVFcnJvckhhbmRsZXIgPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKF9fZGlybmFtZSwgXCJzY29wZVJ1bnRpbWVFcnJvckhhbmRsZXIuanNcIiksIFwidXRmOFwiKTtcblx0XHRsZXQgcmVzdWx0O1xuXHRcdGxldCB0cmF2ZXJzYWw7XG5cdFx0Ly9sZXQgc291cmNlTm9kZXMgPSBbXTtcblx0XHQvL2xldCBsb2NzTWFwcGVkID0gW107XG5cdFx0c2VsZi5tYXBBbmRQYXJzZSA9IChkYXRhID0ge3NvdXJjZTpcIlwiLCB0cmFuc2xhdGlvbjpcIlwiLCBzbjogXCJcIn0pID0+IHtcblx0XHRcdC8vY29uc29sZS5sb2coZGF0YS5zb3VyY2UpO1xuXHRcdFx0Ly9sZXQgbG9jID0gc2VsZi5ydWxlcy5zdGF0ZS5sb2Muc3RhcnQ7XG5cdFx0XHQvL2NvbnNvbGUubG9nKHNlbGYucnVsZXMuc3RhdGUuZ2V0TmFtZSgpKTtcblx0XHRcdGlmICh0eXBlb2YgZGF0YS5zbiAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRkYXRhLnNuLnNldFNvdXJjZUNvbnRlbnQoc3JjRmlsZW5hbWUsIGRhdGEuc291cmNlKTtcblx0XHRcdH1cblx0XHRcdC8vc291cmNlTm9kZXMucHVzaChzbik7XG5cdFx0XHQvL2NvbnNvbGUubG9nKGRhdGEuc291cmNlLCBsb2MpO1xuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fTtcblx0XHRzZWxmLnNuID0gKGNodW5rLCBuYW1lPXNlbGYucnVsZXMuc3RhdGUuZ2V0TmFtZSgpKSA9PiB7XG5cdFx0XHRsZXQgbG9jID0gc2VsZi5ydWxlcy5zdGF0ZS5sb2Muc3RhcnQ7XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwiY2h1bms6XCIsIGNodW5rKTtcblx0XHRcdHJldHVybiBuZXcgc291cmNlTWFwLlNvdXJjZU5vZGUoXG5cdFx0XHRcdGxvYy5saW5lLCBcblx0XHRcdFx0bG9jLmNvbHVtbiwgXG5cdFx0XHRcdHNyY0ZpbGVuYW1lLCBcblx0XHRcdFx0Y2h1bmssXG5cdFx0XHRcdG5hbWVcblx0XHRcdCk7XG5cdFx0fTtcblx0XHRsZXQgbm9kZSA9IHNlbGYuc24oXCJcIik7XG5cdFx0bGV0IHNtO1xuXHRcdHNlbGYuaW1wb3J0ZWQgPSBbXTtcblx0XHRzZWxmLnJ1bGVzID0gbmV3IFNjb3BlUnVsZXMoKTtcblx0XHRzZWxmLnJ1bGVzLnBhcnNlciA9IHNlbGY7XG5cdFx0c2VsZi5ydWxlcy5zcmNGaWxlbmFtZSA9IHNyY0ZpbGVuYW1lO1xuXHRcdHNlbGYucnVsZXMubGliRmlsZW5hbWUgPSBsaWJGaWxlbmFtZTtcblx0XHRzZWxmLnJ1bGVzLm5vZGUgPSBub2RlO1xuXHRcdHNlbGYucnVsZXMuc24gPSBzZWxmLnNuO1xuXHRcdHNlbGYucnVsZXMubWFwQW5kUGFyc2UgPSBzZWxmLm1hcEFuZFBhcnNlO1xuXHRcdGxldCBhc3QgPSB0aGlzLnBhcnNlKGNvZGUpO1xuXHRcdGxldCBhc3RKU09OID0gSlNPTi5zdHJpbmdpZnkoYXN0LCBudWxsLCAnICAnKTtcblx0XHRsZXQgcGFyc2VSZXN1bHQgPSBzZWxmLnRyYXZlcnNlKGFzdCk7XG5cdFx0Ly9zY29wZVJ1bnRpbWUgPSBiYWJlbENvcmUudHJhbnNmb3JtKHNjb3BlUnVudGltZSwge3ByZXNldHM6IFsnbWluaWZ5LWVzMjAxNSddfSk7XG5cdFx0Ly9jb25zb2xlLmxvZyhzY29wZVJ1bnRpbWUpO1xuXHRcdGlmIChhc0luY2x1ZGUpIHtcblx0XHRcdHJldHVybiBzZWxmLnJ1bGVzLmludm9rZUV4cHJlc3Npb24oXG5cdFx0XHRcdFx0c2VsZi5ydWxlcy5zY29wZUV4cHJlc3Npb24oXG5cdFx0XHRcdFx0XHRwYXJzZVJlc3VsdFxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0c2VsZi5ydWxlcy5pbnZva2VBcmd1bWVudHMoKVxuXHRcdFx0XHQpLnNuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHRyYXZlcnNhbCA9IHNlbGYucnVsZXMuaW52b2tlRXhwcmVzc2lvbihcblx0XHRcdFx0c2VsZi5ydWxlcy5zY29wZUV4cHJlc3Npb24oXG5cdFx0XHRcdFx0c2VsZi5ydWxlcy5zY29wZVN0YXJ0KCksXG5cdFx0XHRcdFx0cGFyc2VSZXN1bHRcblx0XHRcdFx0KSxcblx0XHRcdFx0c2VsZi5ydWxlcy5pbnZva2VBcmd1bWVudHMoKVxuXHRcdFx0KS5zbjtcblxuXHRcdFx0dHJhdmVyc2FsLnByZXBlbmQoc2NvcGVSdW50aW1lKTtcblx0XHRcdHRyYXZlcnNhbC5hZGQoXCI7XCIpO1xuXHRcdH1cblx0XHRzbSA9IHRyYXZlcnNhbC50b1N0cmluZ1dpdGhTb3VyY2VNYXAoKTtcblx0XHRzbS5tYXAgPSBKU09OLnBhcnNlKHNtLm1hcC50b1N0cmluZygpKTtcblx0XHRzbS5tYXAuc291cmNlc0NvbnRlbnQgPSBbY29kZV07XG5cdFx0c20uY29tbWVudCA9IGNvbnZlcnQuZnJvbU9iamVjdChzbS5tYXApLnRvQ29tbWVudCgpO1xuXHRcdGxldCBtYWluRmlsZSA9IHtcblx0XHRcdHNvdXJjZTogc20uY29kZSArIGBcXG4ke3NtLmNvbW1lbnR9YCxcblx0XHRcdHNvdXJjZUZpbGU6IGxpYkZpbGVuYW1lXG5cdFx0fTtcblx0XHRsZXQgY29tYmluYXRpb24gPSBjb21iaW5lLlxuXHRcdFx0Y3JlYXRlKGxpYkZpbGVuYW1lLnJlcGxhY2UoL1xcLmpzJC8sIFwiLm1pbi5qc1wiKSkuXG5cdFx0XHRhZGRGaWxlKG1haW5GaWxlLCB7bGluZTogMX0pO1xuXHRcdFxuXHRcdHNlbGYuaW1wb3J0ZWQuZm9yRWFjaChvID0+IHtcblx0XHRcdGNvbWJpbmF0aW9uLmFkZEZpbGUoby5maWxlLCBvLm9mZnNldCk7XG5cdFx0fSk7XG5cdFx0bGV0IGJhc2U2NCA9IGNvbWJpbmF0aW9uLmJhc2U2NCgpO1xuXHRcdGxldCBuZXdTbSA9IGNvbnZlcnQuZnJvbUJhc2U2NChiYXNlNjQpLnRvT2JqZWN0KCk7XG5cdFx0cmVzdWx0ID0ge1xuXHRcdFx0YXN0OiBhc3RKU09OLFxuXHRcdFx0bWFwOiBuZXdTbSxcblx0XHRcdGNvZGU6IHNtLmNvZGUgKyBgXFxuJHtzbS5jb21tZW50fWBcblx0XHR9O1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTY29wZVBhcnNlcjsiXX0=