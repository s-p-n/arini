/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,47],$V1=[4,13,29,66,67,68,76,78,79,83,85,87,92,95,97,102,103,108,111,112,120,127,128,129,130,131],$V2=[2,44],$V3=[1,54],$V4=[1,19],$V5=[1,35],$V6=[1,31],$V7=[1,32],$V8=[1,60],$V9=[1,53],$Va=[1,24],$Vb=[1,25],$Vc=[1,30],$Vd=[1,44],$Ve=[1,41],$Vf=[1,57],$Vg=[1,56],$Vh=[1,55],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,58],$Vm=[1,36],$Vn=[1,37],$Vo=[1,38],$Vp=[1,39],$Vq=[1,40],$Vr=[1,64],$Vs=[1,67],$Vt=[1,68],$Vu=[1,77],$Vv=[1,78],$Vw=[1,93],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[1,76],$VM=[4,7,13,15,18,19,24,26,27,28,29,30,31,32,33,34,35,36,37,41,42,45,51,65,66,67,74,100,115,125,126],$VN=[2,66],$VO=[1,97],$VP=[1,98],$VQ=[1,99],$VR=[2,93],$VS=[4,7,10,13,15,18,19,24,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,45,51,65,66,67,74,100,115,125,126],$VT=[2,97],$VU=[2,98],$VV=[1,113],$VW=[1,115],$VX=[1,118],$VY=[89,90],$VZ=[4,13,29,54,56,57,58,59,66,67,68,76,78,79,83,87,92,95,97,102,103,108,111,112,120,127,128,129,130,131],$V_=[110,113,114],$V$=[4,7,10,13,15,18,19,24,26,27,28,29,30,31,32,33,34,35,36,37,41,42,45,51,65,66,67,74,100,115,125,126],$V01=[1,129],$V11=[4,13,29,66,67,68,76,78,79,83,87,92,97,102,103,108,111,112,120,127,128,129,130,131],$V21=[1,132],$V31=[19,51],$V41=[1,135],$V51=[1,136],$V61=[1,140],$V71=[4,7,10,19,24,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,45,47,51,65,101,102],$V81=[7,15,18,19,24,26,27,28,29,30,31,32,33,34,35,36,37,41,42,45,51,65,66,67,74,100,115,125,126],$V91=[51,74],$Va1=[7,19],$Vb1=[4,7,13,19,24,26,27,28,29,30,31,32,33,34,35,36,37,41,45,65],$Vc1=[1,198],$Vd1=[1,199],$Ve1=[18,66,67,125,126],$Vf1=[1,206],$Vg1=[15,19],$Vh1=[7,15,18,19,24,26,27,34,35,42,51,66,67,74,100,115,125,126],$Vi1=[7,15,18,19,24,26,27,28,29,34,35,36,37,41,42,45,51,66,67,74,100,115,125,126],$Vj1=[7,15,18,19,24,26,27,28,29,30,31,32,34,35,36,37,41,42,45,51,66,67,74,100,115,125,126],$Vk1=[7,15,18,19,34,35,42,51,66,67,74,100,115,125,126],$Vl1=[7,15,18,19,24,26,27,34,35,36,37,42,45,51,66,67,74,100,115,125,126],$Vm1=[7,15,18,19,42,51,66,67,74,100,115,125,126],$Vn1=[2,69],$Vo1=[19,100],$Vp1=[1,239],$Vq1=[7,19,51],$Vr1=[1,270];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"arrayStart":3,"[":4,"array":5,"arrayItems":6,"]":7,"arrayItem":8,"NAME":9,"BECOMES":10,"expr":11,"string":12,"(":13,"expr[a]":14,")":15,"expr[b]":16,"scopeDecl":17,"SPREAD":18,",":19,"attribute":20,"property":21,"attributeList":22,"binarySizeCmp":23,"SIZECMP":24,"binaryExpr":25,"EQ":26,"INEQ":27,"PLUS":28,"MINUS":29,"TIMES":30,"DIVIDE":31,"MODULUS":32,"POWER":33,"AND":34,"OR":35,"IN":36,"HAS":37,"id":38,"PLUS_BECOMES":39,"MINUS_BECOMES":40,"TO":41,"BY":42,"expr[c]":43,"unpackExpr":44,"FROM":45,"cast":46,":":47,"codeBlock":48,"decStatements":49,"controlCode":50,";":51,"stmt":52,"declaration":53,"LET":54,"decProperty":55,"PRIVATE":56,"PROTECTED":57,"PUBLIC":58,"USE":59,"decPropertyList":60,"decPropertyListAtom":61,"literal":62,"invokeExpr":63,"unaryExpr":64,".":65,"PROPERTY":66,"JSPROPERTY":67,"RANDOM":68,"ifStmt":69,"ifStmtLineStart":70,"ifStmtElseIfChain":71,"ifStmtEnd":72,"ifStmtElse":73,"ELSE":74,"ifStmtElseIf":75,"IF(":76,"invokeArgs":77,"BOOL":78,"NUMBER":79,"regex":80,"scope":81,"tag":82,"UNDEFINED":83,"program":84,"EOF":85,"randExpr":86,"REGEX_START":87,"regexBody":88,"REGEX_END":89,"REGEX_BODY":90,"returnStmt":91,"RETURN":92,"scopeArgumentSpread":93,"scopeStart":94,"}":95,"scopeAsyncFlag":96,"ASYNC":97,"scopeDeclStart":98,"scopeArguments":99,"){":100,"(){":101,"{":102,"FUNCTION":103,"scopeArgumentsList":104,"scopeArguments[a]":105,"scopeArguments[b]":106,"scopeArgumentsListAtom":107,"BT_OPEN":108,"stringBody":109,"BT_CLOSE":110,"QSTRING":111,"ASTRING":112,"BT_TEXT":113,"BT_EXPR_OPEN":114,"BT_EXPR_CLOSE":115,"tagShort":116,"tagBlock":117,"tagBlockStart":118,"tagBlockEnd":119,"<":120,"XML_BLOCK_END":121,"XML_CLOSE_ID":122,"XML_BLOCK_CLOSE":123,"XML_OPEN_ID":124,"XML_BLOCK_START":125,"XML_SHORT_CLOSE":126,"INCREMENT":127,"DECREMENT":128,"AWAIT":129,"INCLUDE":130,"NOT":131,"$accept":0,"$end":1},
terminals_: {2:"error",4:"[",7:"]",9:"NAME",10:"BECOMES",13:"(",14:"expr[a]",15:")",16:"expr[b]",18:"SPREAD",19:",",24:"SIZECMP",26:"EQ",27:"INEQ",28:"PLUS",29:"MINUS",30:"TIMES",31:"DIVIDE",32:"MODULUS",33:"POWER",34:"AND",35:"OR",36:"IN",37:"HAS",39:"PLUS_BECOMES",40:"MINUS_BECOMES",41:"TO",42:"BY",43:"expr[c]",45:"FROM",47:":",51:";",54:"LET",56:"PRIVATE",57:"PROTECTED",58:"PUBLIC",59:"USE",65:".",66:"PROPERTY",67:"JSPROPERTY",68:"RANDOM",74:"ELSE",76:"IF(",78:"BOOL",79:"NUMBER",83:"UNDEFINED",85:"EOF",87:"REGEX_START",89:"REGEX_END",90:"REGEX_BODY",92:"RETURN",95:"}",97:"ASYNC",100:"){",101:"(){",102:"{",103:"FUNCTION",105:"scopeArguments[a]",106:"scopeArguments[b]",108:"BT_OPEN",110:"BT_CLOSE",111:"QSTRING",112:"ASTRING",113:"BT_TEXT",114:"BT_EXPR_OPEN",115:"BT_EXPR_CLOSE",120:"<",121:"XML_BLOCK_END",122:"XML_CLOSE_ID",123:"XML_BLOCK_CLOSE",124:"XML_OPEN_ID",125:"XML_BLOCK_START",126:"XML_SHORT_CLOSE",127:"INCREMENT",128:"DECREMENT",129:"AWAIT",130:"INCLUDE",131:"NOT"},
productions_: [0,[3,1],[5,3],[5,2],[8,3],[8,3],[8,5],[8,1],[8,1],[8,2],[6,1],[6,3],[20,3],[20,1],[22,0],[22,2],[22,3],[23,3],[25,1],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,5],[25,5],[25,3],[25,3],[25,3],[46,2],[48,2],[50,0],[50,3],[50,2],[49,0],[49,3],[53,2],[53,2],[53,2],[53,2],[53,2],[55,3],[55,5],[55,1],[55,1],[55,4],[55,3],[60,1],[60,3],[61,1],[61,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,1],[38,3],[38,3],[38,3],[38,4],[69,4],[73,2],[75,3],[71,0],[71,2],[72,1],[72,2],[70,3],[77,1],[77,2],[77,3],[63,3],[63,4],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[84,2],[21,1],[21,1],[86,1],[86,2],[80,3],[88,0],[88,2],[91,3],[93,2],[81,3],[81,4],[96,1],[17,3],[17,4],[98,4],[98,4],[98,6],[98,6],[98,4],[98,4],[98,2],[98,2],[94,4],[94,6],[94,4],[94,2],[94,2],[94,1],[99,3],[99,1],[99,5],[99,3],[99,3],[104,1],[104,3],[107,1],[107,3],[52,1],[52,1],[12,3],[12,1],[12,1],[109,0],[109,2],[109,4],[82,1],[82,1],[117,3],[119,4],[118,4],[116,4],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[44,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
yy.array.begin();
break;
case 2:

			this.$ = (function () {
				let result = yy.array.active.toScope();
				yy.array.end();
				return `scope.array(${result})`;
			}());
		
break;
case 3:

			yy.array.end();
			this.$ = `scope.array()`;
		
break;
case 4:

			yy.array.active.push(`"${$$[$0-2]}"`, $$[$0]);
		
break;
case 5:

			yy.array.active.push($$[$0-2], $$[$0]);
		
break;
case 6:

			yy.array.active.push($$[$0-3], $$[$0]);
		
break;
case 7:

			yy.array.active.push(`"${$$[$0].name}"`, $$[$0].expr);
		
break;
case 8:

			yy.array.active.push($$[$0]);
		
break;
case 9:

			yy.array.active.pushSpread($$[$0]);
		
break;
case 12:

			this.$ = [$$[$0-2], $$[$0]];
		
break;
case 13:

			this.$ = [$$[$0], undefined];
		
break;
case 14: case 44: case 102: case 139:
this.$ = "";
break;
case 15:

			if ($$[$0-1] !== "") {
				$$[$0-1] += ",";
			}
			this.$ = (function () {
				if ($$[$0][1] === undefined) {
					return `${$$[$0-1]}${$$[$0][0]}`;
				}
				return `${$$[$0-1]}"${$$[$0][0]}":${$$[$0][1]}`;
			}());
		
break;
case 16:

			if ($$[$0-2] !== "") {
				$$[$0-2] += ",";
			}
			this.$ = `${$$[$0-2]}...scope.asObj(${$$[$0]})`;
		
break;
case 17:
this.$ = `scope.sizeCmp(${$$[$0-2]}, ${$$[$0]}, "${$$[$0-1]}")`;
break;
case 18: case 60: case 64: case 67: case 68: case 70: case 83: case 88: case 90: case 91: case 92: case 93: case 94: case 97: case 98: case 105: case 134: case 135: case 142: case 143: case 154:
this.$ = $$[$0];
break;
case 19:
this.$ = `Object.is(${$$[$0-2]},${$$[$0]})`;
break;
case 20:
this.$ = `!Object.is(${$$[$0-2]},${$$[$0]})`;
break;
case 21:
this.$ = `(${$$[$0-2]}+${$$[$0]})`;
break;
case 22:
this.$ = `(${$$[$0-2]}-${$$[$0]})`;
break;
case 23:
this.$ = `(${$$[$0-2]}*${$$[$0]})`;
break;
case 24:
this.$ = `(${$$[$0-2]}/${$$[$0]})`;
break;
case 25:
this.$ = `(${$$[$0-2]}%${$$[$0]})`;
break;
case 26:
this.$ = `(${$$[$0-2]}^${$$[$0]})`;
break;
case 27:
this.$ = `(${$$[$0-2]}&&${$$[$0]})`;
break;
case 28:
this.$ = `(${$$[$0-2]}||${$$[$0]})`;
break;
case 29:
this.$ = `scope.in(${$$[$0-2]}, ${$$[$0]})`;
break;
case 30:
this.$ = `scope.has(${$$[$0-2]}, ${$$[$0]})`;
break;
case 31:
this.$ = `scope.set(this._scoping,"${$$[$0-2]}",${$$[$0]})`;
break;
case 32:
this.$ = `scope.set(${$$[$0-2].parent},${$$[$0-2].prop},${$$[$0]})`;
break;
case 33:
this.$ = `scope.set(this._scoping,"${$$[$0-2]}",(scope.id["${$$[$0-2]}"]+${$$[$0]}))`;
break;
case 34:
this.$ = `scope.set(${$$[$0-2].parent},${$$[$0-2].prop},${$$[$0-2].parent}[${$$[$0-2].prop}]+${$$[$0]})`;
break;
case 35:
this.$ = `scope.set(this._scoping,"${$$[$0-2]}",(scope.id["${$$[$0-2]}"]-${$$[$0]}))`;
break;
case 36:
this.$ = `scope.set(${$$[$0-2].parent},${$$[$0-2].prop},${$$[$0-2].parent}[${$$[$0-2].prop}]-${$$[$0]})`;
break;
case 37:
this.$ = `${$$[$0-4]}.push(${$$[$0]})`;
break;
case 38:
this.$ = `scope.range(${$$[$0-4]},${$$[$0-2]},${$$[$0]})`;
break;
case 39:
this.$ = `scope.range(${$$[$0-2]},${$$[$0]})`;
break;
case 40: case 41:
this.$ = `scope.unpack(${$$[$0]}).using(${$$[$0-2]})`;
break;
case 42:

			this.$ = (function () {
				let t = $$[$0-1];
				let types = [
					["number", "Number"] ,
					["bool(ean)?", "Boolean"],
					["string", "String"],
					["regex", "XRegExp"],
					["array", "Array"]
				];

				for (let [search, replace] of types) {
					let r = new RegExp("^(?:" + search + ")$", "i");
					if (r.test(t)) {
						t = replace;
						break;
					}
				}
				return `scope.id.${t}`;
			}());
		
break;
case 45: case 48:
yy.scope.pushStmt($$[$0-1]);
break;
case 46:
yy.scope.pushStmt($$[$0]);
break;
case 49:
this.$ = `scope.declare("let", ${$$[$0]})`;
break;
case 50:
this.$ = `scope.declare("private", ${$$[$0]})`;
break;
case 51:
this.$ = `scope.declare("protected", ${$$[$0]})`;
break;
case 52:
this.$ = `scope.declare("public", ${$$[$0]})`;
break;
case 53:
this.$ = `scope.use(scope.id["${$$[$0]}"])`;
break;
case 54:
this.$ = `["${$$[$0-2]}",${$$[$0]}]`;
break;
case 55:
this.$ = `[[${$$[$0-3]}],${$$[$0]}]`;
break;
case 56:
this.$ = `["${$$[$0]}",]`;
break;
case 57:
this.$ = `["${$$[$0].name}", ${$$[$0].expr}]`;
break;
case 58:
this.$ = `["${$$[$0-2]}",${$$[$0]},${$$[$0-3]}]`;
break;
case 59: case 61:
this.$ = `${$$[$0-2]},${$$[$0]}`;
break;
case 62: case 132:
this.$ = `"${$$[$0]}"`;
break;
case 63:
this.$ = `[${$$[$0-1]}]`;
break;
case 65:
this.$ = $$[$0].value;
break;
case 66:
this.$ = `scope.id["${$$[$0]}"]`;
break;
case 69:
this.$ = '(' + $$[$0-1] + ')';
break;
case 71:
this.$ = {parent: $$[$0-2], prop: `"${$$[$0]}"`, value:`${$$[$0-2]}["${$$[$0]}"]`};
break;
case 72: case 73:
this.$ = {parent: $$[$0-2], prop: `"${$$[$0]}"`, value:`${$$[$0-2]}.${$$[$0]}`};
break;
case 74:
this.$ = {parent: $$[$0-3], prop: $$[$0-1], value:`${$$[$0-3]}[${$$[$0-1]}]`};
break;
case 75:

			this.$ = (function () {
				let result = $$[$0-3];
				result += `{
					let expr = ${$$[$0-2]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result + $$[$0-1] + $$[$0];
			}());
		
break;
case 76:

			this.$ = (function () {
				let result = `else`;
				result += `{
					let expr = ${$$[$0]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result;
			}());
		
break;
case 77:

			this.$ = (function () {
				let result = `else ${$$[$0-1]}`;
				result += `{
					let expr = ${$$[$0]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result;
			}());
		
break;
case 78: case 80:
this.$ = '';
break;
case 79:
this.$ = $$[$0-1] + $$[$0];
break;
case 81:
this.$ = $$[$0-1];
break;
case 82:
this.$ = `if(scope.toBoolean(${$$[$0-1]}))`;
break;
case 84:
this.$ = "..." + $$[$0];
break;
case 85:
this.$ = $$[$0-2] + "," + $$[$0];
break;
case 86:
this.$ = `(${$$[$0-2]}())`;
break;
case 87:
this.$ = `(${$$[$0-3]}(${$$[$0-1]}))`;
break;
case 89:
this.$ = $$[$0].toLowerCase();
break;
case 95:
this.$ = undefined;
break;
case 96:
return yy.scope.expressions;
break;
case 99:
this.$ = 'scope.random()';
break;
case 100:
this.$ = `scope.random(${$$[$0]})`;
break;
case 101:

			this.$ = (function () {
				let modifiers = yy.regex.modifiers;
				if (modifiers.length > 0) {
					return `XRegExp("${$$[$0-1]}", "${modifiers}")`;
				}
				return `XRegExp("${$$[$0-1]}")`;
			}());
		
break;
case 103:

			this.$ = $$[$0-1] + $$[$0].replace(/\"/g, '\\"').replace(/\n/g,'\\n');
		
break;
case 104:

			yy.scope.hasReturn = true;
			this.$ = `return ${$$[$0-1]};`;
		
break;
case 106:

			this.$ = $$[$0-2] + 
				'this._hasReturn=true;' + 
				'this._scoping=scope._scoping;' +
				yy.scope.toJS() + 
				';this._hasReturn=false},' + 
				yy.scope.hasReturn + 
			')';
			yy.scope.end();
		
break;
case 107:

			this.$ =$$[$0-2] + 
				'this._hasReturn=true;' + 
				'this._scoping=scope._scoping;' +
				yy.scope.toJS() + 
				';this._hasReturn=false},' + 
				yy.scope.hasReturn + 
			')';
			yy.scope.end();
		
break;
case 108:
yy.scope.setAsync();
break;
case 109:

			this.$ = {
				name: $$[$0-2].name,
				expr: 
					$$[$0-2].expr + 
					'this._hasReturn=true;' + 
					'this._scoping=scope._scoping;' +
					yy.scope.toJS() + 
					';this._hasReturn=false},' + 
					yy.scope.hasReturn + 
				')'
			};
			yy.scope.end();
		
break;
case 110:

			this.$ = {
				name: $$[$0-2].name,
				expr: $$[$0-2].expr + 
					'this._hasReturn=true;' + 
					'this._scoping=scope._scoping;' +
					yy.scope.toJS() + 
					';this._hasReturn=false},' + 
					yy.scope.hasReturn + 
				')'
			};
			yy.scope.end();
		
break;
case 111:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(${async}function(...args){${args}`
				};
			}());
		
break;
case 112:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(${async}function ${$$[$0-3]}(...args){${args}`
				};
			}());
		
break;
case 113:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				let argsLength = yy.scope.argsLength;
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args.slice(${argsLength})]);`;
				yy.scope.begin();
				return {
					name: $$[$0-5],
					expr: `scope.createScope(${async}function(...args){${args}${spread}`
				};
			}());
		
break;
case 114:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				let argsLength = yy.scope.argsLength;
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args.slice(${argsLength})]);`;
				yy.scope.begin();
				return {
					name: $$[$0-5],
					expr: `scope.createScope(${async}function ${$$[$0-5]}(...args){${args}${spread}`
				};
			}());
		
break;
case 115:

			yy.scope.endParen(true);
			this.$ = (function () {
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args]);`;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(${async}function(...args){${spread}`
				};
			}());
		
break;
case 116:

			yy.scope.endParen(true);
			this.$ = (function () {
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args]);`;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(${async}function ${$$[$0-3]}(...args){${spread}`
				};
			}());
		
break;
case 117: case 118:

			this.$ = (function () {
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				let fnName = $$[$0-1]
				if (/\-/.test($$[$0-1])) {
					fnName = "";
				}
				return {
					name: $$[$0-1],
					expr: `scope.createScope(${async}function ${fnName}(){`
				};
			}());
			
		
break;
case 119:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return `scope.createScope(${async}function(...args){${args}`;
			}());
		
break;
case 120:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				let argsLength = yy.scope.argsLength;
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args.slice(${argsLength})]);`;
				yy.scope.begin();
				return `scope.createScope(${async}function(...args){${args}${spread}`;
			}());
		
break;
case 121:

			yy.scope.endParen(true);
			this.$ = (function () {
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args]);`;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return `scope.createScope(${async}function(...args){${spread}`;
			}());
		
break;
case 122: case 123: case 124:

			this.$ = (function () {
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return `scope.createScope(${async}function(){`;
			}());
		
break;
case 125:

			this.$ = yy.scope.pushArg(`"${$$[$0-2]}"`, $$[$0]);
		
break;
case 126:

			this.$ = yy.scope.pushArg(`"${$$[$0]}"`);
		
break;
case 127:

			this.$ = yy.scope.pushArg(`[${$$[$0-3]}]`, $$[$0]);
		
break;
case 128:

			this.$ = yy.scope.pushArg(`[${$$[$0-1]}]`);
		
break;
case 129:
this.$ = yy.scope.args;
break;
case 130:
this.$ = $$[$0]
break;
case 131:
this.$ = $$[$0-2] + ',' + $$[$0]
break;
case 133:
this.$ = '[' + $$[$0-1] + ']';
break;
case 136:
 this.$ = '`' + $$[$0-1] + '`'; 
break;
case 137: case 138:
this.$ = $$[$0].replace(/\n/g, '\\n');
break;
case 140:

			this.$ = yy.setStr($$[$0-1], $$[$0]);
		
break;
case 141:

			this.$ = yy.setStr($$[$0-3], '${' + $$[$0-1] + '}');
		
break;
case 144:

			this.$ = (function () {
				let tag = $$[$0-2];

				if (tag.tagName !== $$[$0]) {
					yy.parseError(`Tag mismatch: `, {
						text: `</${$$[$0]}>`,
						token: yytext,
						line: yylineno,
						solution: `Change ${$$[$0]} to ${tag.tagName}, or the other way around.`,
						recoverable: true
					});
				}

				return tag.toJS();
			}());
			yy.scope.end();
		
break;
case 145:

			this.$ = $$[$0-1];
		
break;
case 146:

			this.$ = (function () {
				let parent = yy.scope;
				yy.scope.begin();
				return new yy.xml.Tag($$[$0-2], $$[$0-1]);
			}());
		
break;
case 147:
this.$ = (new yy.xml.Tag($$[$0-2], $$[$0-1], true)).toJS();
break;
case 148:
this.$ = '-' + $$[$0]
break;
case 149:
this.$ = '++' + $$[$0];
break;
case 150:
this.$ = '--' + $$[$0];
break;
case 151:
this.$ = `(await (async ()=>{let r = await ${$$[$0]};scope._scoping = this._scoping;return r;})())`;
break;
case 152:

			yy.lexer._more = true;
			this.$ = (function () {
				let f = path.join(yy.script_dir,$$[$0].substr(1,$$[$0].length-2));
				let r = yy.parser.include(f);
				return r;
			}());
		
break;
case 153:
this.$ = '!' + $$[$0];
break;
}
},
table: [o([4,13,29,54,56,57,58,59,66,67,68,76,78,79,83,85,87,92,97,102,103,108,111,112,120,127,128,129,130,131],$V0,{84:1,48:2,49:3}),{1:[3]},{85:[1,4]},o($V1,$V2,{50:5,53:6,54:[1,7],56:[1,8],57:[1,9],58:[1,10],59:[1,11]}),{1:[2,96]},o([85,95],[2,43],{11:12,52:13,62:14,38:15,21:16,63:17,25:18,64:20,91:21,69:22,5:23,80:26,81:27,12:28,82:29,23:33,44:34,70:42,3:43,94:45,96:46,116:50,117:51,86:52,118:59,4:$V3,13:$V4,29:$V5,66:$V6,67:$V7,68:$V8,76:$V9,78:$Va,79:$Vb,83:$Vc,87:$Vd,92:$Ve,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq}),{51:[1,61]},{4:$Vr,17:65,21:63,46:66,55:62,66:$Vs,67:$Vt,96:70,97:$Vf,98:69},{4:$Vr,17:65,21:63,46:66,55:71,66:$Vs,67:$Vt,96:70,97:$Vf,98:69},{4:$Vr,17:65,21:63,46:66,55:72,66:$Vs,67:$Vt,96:70,97:$Vf,98:69},{4:$Vr,17:65,21:63,46:66,55:73,66:$Vs,67:$Vt,96:70,97:$Vf,98:69},{21:74,66:$V6,67:$V7},{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,51:[1,75],65:$VL},o($V1,[2,46]),o($VM,[2,64]),o($VM,[2,65],{10:[1,94],39:[1,95],40:[1,96]}),o($VM,$VN,{10:$VO,39:$VP,40:$VQ}),o($VM,[2,67]),o($VM,[2,68]),{3:43,4:$V3,5:23,11:100,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($VM,[2,70]),o($V1,[2,134]),o($V1,[2,135]),o($VM,[2,88]),o($VM,[2,89]),o($VM,[2,90]),o($VM,[2,91]),o($VM,[2,92]),o($VM,$VR),o($VM,[2,94]),o($VM,[2,95]),o($VS,$VT),o($VS,$VU),o($VM,[2,18]),{45:[1,101]},{3:43,4:$V3,5:23,11:102,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:103,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:104,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:105,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{12:106,108:$Vi,111:$Vj,112:$Vk},{3:43,4:$V3,5:23,11:107,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:108,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:109,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,6:110,7:[1,111],8:112,9:$VV,11:117,12:114,13:$VW,17:116,18:$VX,21:120,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$Vs,67:$Vt,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:119,97:$Vf,98:69,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($VY,[2,102],{88:121}),o($VZ,$V0,{49:3,48:122}),{94:123,102:$Vg,103:$Vh},o($V_,[2,139],{109:124}),o($V$,[2,137]),o($V$,[2,138]),o($VM,[2,142]),o($VM,[2,143]),{45:[2,154]},{3:43,4:$V3,5:23,11:125,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o([4,7,9,13,18,29,66,67,68,78,79,83,87,97,102,103,108,111,112,120,127,128,129,130,131],[2,1]),{13:[1,126],101:[1,127],102:[1,128]},o($VZ,[2,124]),o([66,67,102,103],[2,108]),{124:$V01},o($V11,$V2,{50:130}),{3:43,4:$V3,5:23,11:131,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,45:[2,99],62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o([4,13,29,54,56,57,58,59,66,67,68,76,78,79,83,85,87,92,95,97,102,103,108,111,112,120,127,128,129,130,131],[2,48]),{19:$V21,51:[2,49]},o($V31,[2,56],{10:[1,133],47:[1,134],101:$V41,102:$V51}),{4:$V61,21:139,60:137,61:138,66:$V6,67:$V7},o($V31,[2,57]),{21:141,66:$V6,67:$V7},o($V71,$VT,{13:[1,142]}),o($V71,$VU,{13:[1,143]}),o($VZ,$V0,{49:3,48:144}),{21:146,66:$Vs,67:$Vt,98:145},{19:$V21,51:[2,50]},{19:$V21,51:[2,51]},{19:$V21,51:[2,52]},{51:[2,53]},o($V1,[2,45]),{66:[1,147],67:[1,148],68:[1,149]},{3:43,4:$V3,5:23,7:[1,151],11:150,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:154,12:28,13:$V4,15:[1,152],18:[1,155],21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,77:153,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:156,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:157,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:158,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:159,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:160,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:161,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:162,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:163,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:164,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:165,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:166,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:167,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:168,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:169,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:170,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:171,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:172,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:173,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:174,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:175,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:176,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{4:$Vu,13:$Vv,15:[1,177],24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL},{3:43,4:$V3,5:23,11:178,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($V81,[2,148],{4:$Vu,13:$Vv}),o($V81,[2,149],{4:$Vu,13:$Vv}),o($V81,[2,150],{4:$Vu,13:$Vv}),o($V81,[2,151],{4:$Vu,13:$Vv}),o($VM,[2,152]),o($V81,[2,153],{4:$Vu,13:$Vv}),{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,51:[1,179],65:$VL},o($V91,[2,78],{71:180,4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),{7:[1,181],19:[1,182]},o($VM,[2,3]),o($Va1,[2,10]),{10:[1,183]},o($Vb1,$VR,{10:[1,184]}),{3:43,4:$V3,5:23,11:185,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($Va1,[2,7]),o($Va1,[2,8],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),{3:43,4:$V3,5:23,11:186,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{21:146,66:$Vs,67:$Vt,94:123,98:145,102:$Vg,103:$Vh},o($Vb1,$VN,{10:$VO,39:$VP,40:$VQ,101:$V41,102:$V51}),{89:[1,187],90:[1,188]},{95:[1,189]},o($VZ,$V0,{49:3,48:190}),{110:[1,191],113:[1,192],114:[1,193]},{4:$Vu,13:$Vv,15:[1,194],24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL},{4:$Vc1,18:$Vd1,21:197,66:$V6,67:$V7,93:196,99:195},o($VZ,[2,122]),o($VZ,[2,123]),o($Ve1,[2,14],{22:200}),{3:43,4:$V3,5:23,11:12,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,52:13,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,69:22,70:42,76:$V9,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,91:21,92:$Ve,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,119:201,120:[1,202],127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:[2,100],65:$VL},{4:$Vr,17:65,21:63,46:66,55:203,66:$Vs,67:$Vt,96:70,97:$Vf,98:69},{3:43,4:$V3,5:23,11:204,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o([66,67],[2,42]),o($VZ,[2,117]),o($VZ,[2,118]),{7:[1,205],19:$Vf1},o($Va1,[2,60]),o($Va1,[2,62]),{4:$V61,21:139,60:207,61:138,66:$V6,67:$V7},{10:[1,208]},{4:$Vc1,18:$Vd1,21:197,66:$V6,67:$V7,93:210,99:209},{4:$Vc1,18:$Vd1,21:197,66:$V6,67:$V7,93:212,99:211},{95:[1,213]},o($VZ,$V0,{49:3,48:214}),{101:$V41,102:$V51},o($VS,[2,71]),o($VS,[2,72]),o($VS,[2,73]),{4:$Vu,7:[1,215],13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL},{10:[1,216]},o($VM,[2,86]),{15:[1,217],19:[1,218]},o($Vg1,[2,83],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),{3:43,4:$V3,5:23,11:219,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($Vh1,[2,19],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vh1,[2,20],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vi1,[2,21],{4:$Vu,13:$Vv,30:$VB,31:$VC,32:$VD,33:$VE,65:$VL}),o($Vi1,[2,22],{4:$Vu,13:$Vv,30:$VB,31:$VC,32:$VD,33:$VE,65:$VL}),o($Vj1,[2,23],{4:$Vu,13:$Vv,33:$VE,65:$VL}),o($Vj1,[2,24],{4:$Vu,13:$Vv,33:$VE,65:$VL}),o($Vj1,[2,25],{4:$Vu,13:$Vv,33:$VE,65:$VL}),o([7,15,18,19,24,26,27,28,29,30,31,32,33,34,35,36,37,41,42,45,51,66,67,74,100,115,125,126],[2,26],{4:$Vu,13:$Vv,65:$VL}),o($Vk1,[2,27],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vk1,[2,28],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vl1,[2,29],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,41:$VJ,65:$VL}),o($Vl1,[2,30],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,41:$VJ,65:$VL}),o([7,15,18,19,24,26,27,34,35,36,37,41,45,51,66,67,74,100,115,125,126],[2,39],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,42:[1,220],65:$VL}),o($Vl1,[2,41],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,41:$VJ,65:$VL}),o($Vh1,[2,17],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vm1,[2,32],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vm1,[2,34],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vm1,[2,36],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vm1,[2,31],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vm1,[2,33],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vm1,[2,35],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($VM,$Vn1),o($Vl1,[2,40],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,41:$VJ,65:$VL}),o($V1,[2,104]),{51:[1,223],72:221,73:224,74:[1,225],75:222},o($VM,[2,2]),{3:43,4:$V3,5:23,8:226,9:$VV,11:117,12:114,13:$VW,17:116,18:$VX,21:120,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$Vs,67:$Vt,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:119,97:$Vf,98:69,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:227,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{3:43,4:$V3,5:23,11:228,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{4:$Vu,13:$Vv,15:[1,229],24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL},o($Va1,[2,9],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($VM,[2,101]),o($VY,[2,103]),o($VM,[2,106]),{95:[1,230]},o($V$,[2,136]),o($V_,[2,140]),{3:43,4:$V3,5:23,11:231,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o([4,13,29,66,67,68,78,79,83,87,97,102,103,108,111,112,120,127,128,129,130,131],[2,82]),{19:[1,233],100:[1,232]},{100:[1,234]},o($Vo1,[2,126],{10:[1,235]}),{4:$Vp1,21:238,66:$V6,67:$V7,104:236,107:237},{21:240,66:$V6,67:$V7},{18:[1,244],20:243,21:245,66:$V6,67:$V7,125:[1,242],126:[1,241]},o($VM,[2,144]),{121:[1,246],124:$V01},{19:$V21,51:[2,59]},o($V31,[2,54],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),{10:[1,247]},{4:$V61,21:139,61:248,66:$V6,67:$V7},{7:[1,249],19:$Vf1},{3:43,4:$V3,5:23,11:250,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{19:[1,252],100:[1,251]},{100:[1,253]},{19:[1,255],100:[1,254]},{100:[1,256]},o($Vq1,[2,109]),{95:[1,257]},o($VS,[2,74]),{3:43,4:$V3,5:23,11:258,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($VM,[2,87]),{3:43,4:$V3,5:23,11:259,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($Vg1,[2,84],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),{3:43,4:$V3,5:23,11:260,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($V1,[2,75]),o($V91,[2,79]),o($V1,[2,80]),{51:[1,261]},{3:43,4:$V3,5:23,11:263,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,70:262,76:$V9,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($Va1,[2,11]),o($Va1,[2,4],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Va1,[2,5],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vb1,$Vn1,{10:[1,264]}),o($VM,[2,107]),{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL,115:[1,265]},o($VZ,[2,119]),{4:$Vc1,18:$Vd1,21:197,66:$V6,67:$V7,93:266,99:267},o($VZ,[2,121]),{3:43,4:$V3,5:23,11:268,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{7:[1,269],19:$Vr1},o($Va1,[2,130]),o($Va1,[2,132]),{4:$Vp1,21:238,66:$V6,67:$V7,104:271,107:237},{100:[2,105]},o($VM,[2,147]),o($V11,[2,146]),o($Ve1,[2,15]),{3:43,4:$V3,5:23,11:272,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($Ve1,[2,13],{10:[1,273]}),{122:[1,274]},{3:43,4:$V3,5:23,11:275,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($Va1,[2,61]),o($Va1,[2,63]),o($V31,[2,58],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($VZ,[2,111]),{4:$Vc1,18:$Vd1,21:197,66:$V6,67:$V7,93:276,99:267},o($VZ,[2,115]),o($VZ,[2,112]),{4:$Vc1,18:$Vd1,21:197,66:$V6,67:$V7,93:277,99:267},o($VZ,[2,116]),o($Vq1,[2,110]),o($V81,[2,37],{4:$Vu,13:$Vv}),o($Vg1,[2,85],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o([7,15,18,19,24,26,27,34,35,36,37,41,42,45,51,66,67,74,100,115,125,126],[2,38],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,65:$VL}),o($V1,[2,81]),{3:43,4:$V3,5:23,11:278,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,51:[2,76],65:$VL},{3:43,4:$V3,5:23,11:279,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($V_,[2,141]),{100:[1,280]},{19:[1,281],100:[2,129]},o($Vo1,[2,125],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Vo1,[2,128],{10:[1,282]}),{4:$Vp1,21:238,66:$V6,67:$V7,107:283},{7:[1,284],19:$Vr1},o($Ve1,[2,16],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),{3:43,4:$V3,5:23,11:285,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},{123:[1,286]},o($V31,[2,55],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),{100:[1,287]},{100:[1,288]},o($V91,[2,77],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($Va1,[2,6],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($VZ,[2,120]),{4:$Vc1,21:197,66:$V6,67:$V7,99:267},{3:43,4:$V3,5:23,11:289,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,44:34,62:14,63:17,64:20,66:$V6,67:$V7,68:$V8,78:$Va,79:$Vb,80:26,81:27,82:29,83:$Vc,86:52,87:$Vd,94:45,96:46,97:$Vf,102:$Vg,103:$Vh,108:$Vi,111:$Vj,112:$Vk,116:50,117:51,118:59,120:$Vl,127:$Vm,128:$Vn,129:$Vo,130:$Vp,131:$Vq},o($Va1,[2,131]),o($Va1,[2,133]),o($Ve1,[2,12],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL}),o($VM,[2,145]),o($VZ,[2,113]),o($VZ,[2,114]),o($Vo1,[2,127],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,41:$VJ,45:$VK,65:$VL})],
defaultActions: {4:[2,96],52:[2,154],74:[2,53],240:[2,105]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const fs = require('fs');
	const path = require('path');
	const arini_dir = path.dirname(path.dirname(process.argv[1]));
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true,"easy_keyword_rules":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	yy.setStr = function setStr(body, txt) {
		return body + txt;
	};

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
												if (this.topState() === "declLeft") {
													this.popState();
												}
											 	yy.scope.beginParen();
											 	yy.scope.endParen(true);
											 	this.pushState('controlCode');
												return 101;
											 
break;
case 2:
												this.pushState('ifParen');
												return "IF(";
											 
break;
case 3:this.popState();return 15;
break;
case 4:
												if (this.topState() === "declLeft") {
													this.popState();
												}
												this.pushState('paren');
												yy.scope.beginParen();
												return "(";
											 
break;
case 5:

												this.popState();
												this.pushState("controlCode");
												return "){";
											 
break;
case 6:
												this.popState();
												yy.scope.endParen(false);
												return ")";
											 
break;
case 7:return ",";
break;
case 8:return 18;
break;
case 9:this.pushState('inBacktick'); return 108;
break;
case 10:this.popState(); return 110;
break;
case 11:this.popState(); this.pushState('inBacktickExpr'); return 114;
break;
case 12:this.popState(); this.pushState('inBacktick'); return 115;
break;
case 13:return "BT_TEXT";
break;
case 14:
                                                if ((/^(\/|[a-z])/i).test(this._input)) {
													this.pushState("angleBracket");
													return "<";
												} else if ((/^\=/).test(this._input)) {
													yy_.yytext += "=";
													//this.match += '=';
													this.matched += '=';
													this._input = this._input.substr(1) || "";
													return "SIZECMP"
												} else if ((/^\-/).test(this._input)) {
													yy_.yytext += "-";
													this.match += '-';
													this.matched += '-';
													this._input = this._input.substr(1) || "";
													return "BY";
												}
												return "SIZECMP";
											 
break;
case 15:this.popState(); this.pushState("xmlBlockClose"); return "XML_BLOCK_END";
break;
case 16:this.popState(); this.pushState("xmlTagOpen"); return "XML_OPEN_ID";
break;
case 17:this.popState();
break;
case 18:this.popState(); return "XML_BLOCK_START";
break;
case 19:this.popState(); return "XML_SHORT_CLOSE";
break;
case 20:/* skip whitespace */
break;
case 21:this.popState(); return "XML_BLOCK_CLOSE";
break;
case 22:return "XML_CLOSE_ID";
break;
case 23:
	                                         	return (() => {
	                                         		let del_regex = /^r('''|"""|[\/"'@~%`])/;
	                                         		yy.regex.del = yy_.yytext.match(del_regex)[1];
	                                         		this.pushState("inRegex");
	                                         		return "REGEX_START";
	                                         	})();
                                            
break;
case 24:
												return (() => {
													let del = yy_.yytext.match(/^'''|"""|[/"'@~%`]/)[0];
													if (yy.regex.del === del) {
														yy.regex.modifiers = yy_.yytext.match(/[a-z]*$/i)[0];
														this.popState();
														return "REGEX_END";
													}
													return "REGEX_BODY";
												})();
											
break;
case 25:return "REGEX_BODY";
break;
case 26:this.pushState("declBracket"); return "[";
break;
case 27:this.popState();return "BECOMES";
break;
case 28:this.popState();return "]";
break;
case 29:this.pushState("declBracket"); return "[";
break;
case 30:return ",";
break;
case 31:
												if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                }
                                                return "PROPERTY";
                                            
break;
case 32:this.pushState("exprBracket");return 4;
break;
case 33:this.popState();return 7;
break;
case 34:
                                                 for (let [search, result] of yy.namedTokens) {
                                                 	if (search.test(yy_.yytext)) {
                                                 		if (typeof result === "function") {
                                                 			return result.call(this, yy_.yytext);
                                                 		}
                                                 		return result;
                                                 	}
                                                 }

                                                 if (/^\s*(\=|BECOMES?)/.test(this._input)) {
                                                 	return "NAME";
                                                 }
                                                 if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                }
                                                return "PROPERTY";
                                            
break;
case 35:
                                                return (() => {
	                                                const line_comment_regex = /^(?:\/[^\n]*(?=\n|$))/;
	                                                const block_comment_regex = /^(?:\*[\s\S]*?\*\/)/;
	                                                if (line_comment_regex.test(this._input)) {
	                                                    let match = this._input.match(line_comment_regex)[0];
	                                                    yy_.yytext += match;
	                                                    this.match += match;
	                                                    this.matched += match;
	                                                    this._input = this._input.substr(match.length + 1) || "";
	                                                } else if (block_comment_regex.test(this._input)) {
	                                                	let match = this._input.match(block_comment_regex)[0];
	                                                	yy_.yytext += match;
	                                                    this._input = this._input.substr(match.length) || "";
	                                                } else {
                                                		return "DIVIDE";
                                                	}
                                                })();
                                            
break;
case 36:
												if (this.topState() === "declLeft") {
													this.popState();
												}
												this.pushState("controlCode");
												return "{";
											 
break;
case 37:
												this.popState();
												return "}";
											 
break;
case 38:return "}";
break;
case 39:return "FUNCTION";
break;
case 40:return "TO";
break;
case 41:return "QSTRING";
break;
case 42:return "ASTRING";
break;
case 43:return "SIZECMP";
break;
case 44:return "SIZECMP";
break;
case 45:return "EQ";
break;
case 46:return "INEQ";
break;
case 47:return "PLUS_BECOMES";
break;
case 48:return "MINUS_BECOMES";
break;
case 49:return "AND";
break;
case 50:return "OR";
break;
case 51:return "INCREMENT";
break;
case 52:return "DECREMENT";
break;
case 53:return "PLUS";
break;
case 54:return "MINUS";
break;
case 55:return "TIMES";
break;
case 56:return "MODULUS";
break;
case 57:return "POWER";
break;
case 58:return ".";
break;
case 59:return ",";
break;
case 60:return "BECOMES";
break;
case 61:return ":";
break;
case 62:return "NOT";
break;
case 63:
                                                 for (let [search, result] of yy.namedTokens) {
                                                 	if (search.test(yy_.yytext)) {
                                                 		if (typeof result === "function") {
                                                 			return result.call(this, yy_.yytext);
                                                 		}
                                                 		return result;
                                                 	}
                                                 }
                                                 if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                 }
                                                 return "PROPERTY";
                                             
break;
case 64:return 79;
break;
case 65:return 51;
break;
case 66:return 85;
break;
case 67:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\(\s*\)\s*\{)/i,/^(?:if\s*\()/i,/^(?:\))/i,/^(?:\()/i,/^(?:\)\s*\{)/i,/^(?:\))/i,/^(?:,)/i,/^(?:\.\.\.)/i,/^(?:`)/i,/^(?:`)/i,/^(?:\$\{)/i,/^(?:\})/i,/^(?:(\\`|[^\`\$]|\$[^\{\`])+)/i,/^(?:<)/i,/^(?:\/)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:.)/i,/^(?:>)/i,/^(?:\/>)/i,/^(?:\s+)/i,/^(?:>)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:r(?:'''|"""|[\/"'@~%`]))/i,/^(?:(?:'''|"""|[\/"'@~%`])[Agimnsuxy]{0,7})/i,/^(?:\S|\s)/i,/^(?:\[)/i,/^(?:=|becomes)/i,/^(?:\])/i,/^(?:\[)/i,/^(?:,)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:\/)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\})/i,/^(?:#)/i,/^(?:\.\.)/i,/^(?:"(\\"|[^\"])*")/i,/^(?:'(\\'|[^\'])*')/i,/^(?:>)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:=)/i,/^(?::)/i,/^(?:!)/i,/^(?:[a-z\_\$][a-z0-9\-\_\$]*)/i,/^(?:[0-9]+(?:\.[0-9]+)?)/i,/^(?:;)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"controlCode":{"rules":[0,1,2,4,8,9,14,23,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"formalArguments":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"paren":{"rules":[0,1,2,4,5,6,7,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"ifParen":{"rules":[0,1,2,3,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"exprBracket":{"rules":[0,1,2,4,8,9,14,23,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"declRight":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"declBracket":{"rules":[0,1,2,4,8,9,14,23,28,29,30,31,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"declLeft":{"rules":[0,1,2,4,8,9,14,23,26,27,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"inRegex":{"rules":[24,25],"inclusive":false},"xmlBlockClose":{"rules":[20,21,22],"inclusive":false},"xmlTagOpen":{"rules":[0,1,2,4,8,9,14,18,19,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"angleBracket":{"rules":[15,16,17],"inclusive":false},"inBacktickExpr":{"rules":[0,1,2,4,8,9,12,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"inBacktick":{"rules":[10,11,13],"inclusive":false},"INITIAL":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}