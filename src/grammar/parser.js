/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,45],$V1=[4,13,31,65,66,67,75,77,78,82,84,86,91,94,99,100,105,108,109,117,124,125],$V2=[2,42],$V3=[1,48],$V4=[1,18],$V5=[1,33],$V6=[1,30],$V7=[1,31],$V8=[1,53],$V9=[1,47],$Va=[1,23],$Vb=[1,24],$Vc=[1,29],$Vd=[1,39],$Ve=[1,36],$Vf=[1,50],$Vg=[1,49],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,51],$Vl=[1,34],$Vm=[1,35],$Vn=[1,57],$Vo=[1,60],$Vp=[1,61],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,67],$VL=[4,7,13,15,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,45,51,64,65,66,73,97,112,122,123],$VM=[2,63],$VN=[1,89],$VO=[2,90],$VP=[4,7,10,13,15,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,45,51,64,65,66,73,97,112,122,123],$VQ=[2,94],$VR=[2,95],$VS=[1,100],$VT=[1,102],$VU=[1,105],$VV=[88,89],$VW=[4,13,31,54,56,57,58,65,66,67,75,77,78,82,86,91,94,99,100,105,108,109,117,124,125],$VX=[107,110,111],$VY=[1,114],$VZ=[4,13,31,65,66,67,75,77,78,82,86,91,99,100,105,108,109,117,124,125],$V_=[1,117],$V$=[19,51],$V01=[1,120],$V11=[1,121],$V21=[1,125],$V31=[4,7,10,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,45,47,51,64,98,99],$V41=[7,15,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,45,51,64,65,66,73,97,112,122,123],$V51=[51,73],$V61=[7,19],$V71=[4,7,13,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,45,64],$V81=[1,179],$V91=[1,180],$Va1=[18,65,66,122,123],$Vb1=[1,187],$Vc1=[15,19],$Vd1=[7,15,18,19,24,25,26,27,28,29,36,37,42,51,65,66,73,97,112,122,123],$Ve1=[7,15,18,19,24,25,26,27,28,29,30,31,36,37,38,39,41,42,45,51,65,66,73,97,112,122,123],$Vf1=[7,15,18,19,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,41,42,45,51,65,66,73,97,112,122,123],$Vg1=[7,15,18,19,36,37,42,51,65,66,73,97,112,122,123],$Vh1=[7,15,18,19,24,25,26,27,28,29,36,37,38,39,42,45,51,65,66,73,97,112,122,123],$Vi1=[7,15,18,19,42,51,65,66,73,97,112,122,123],$Vj1=[2,66],$Vk1=[19,97],$Vl1=[1,218],$Vm1=[1,248];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"arrayStart":3,"[":4,"array":5,"arrayItems":6,"]":7,"arrayItem":8,"NAME":9,"BECOMES":10,"expr":11,"string":12,"(":13,"expr[a]":14,")":15,"expr[b]":16,"scopeDecl":17,"SPREAD":18,",":19,"attribute":20,"property":21,"attributeList":22,"binaryExpr":23,"LT":24,"LTEQ":25,"GT":26,"GTEQ":27,"EQ":28,"INEQ":29,"PLUS":30,"MINUS":31,"TIMES":32,"DIVIDE":33,"MODULUS":34,"POWER":35,"AND":36,"OR":37,"IN":38,"HAS":39,"id":40,"TO":41,"BY":42,"expr[c]":43,"unpackExpr":44,"FROM":45,"cast":46,":":47,"codeBlock":48,"decStatements":49,"controlCode":50,";":51,"stmt":52,"declaration":53,"LET":54,"decProperty":55,"PRIVATE":56,"PROTECTED":57,"PUBLIC":58,"decPropertyList":59,"decPropertyListAtom":60,"literal":61,"invokeExpr":62,"unaryExpr":63,".":64,"PROPERTY":65,"JSPROPERTY":66,"RANDOM":67,"ifStmt":68,"ifStmtLineStart":69,"ifStmtElseIfChain":70,"ifStmtEnd":71,"ifStmtElse":72,"ELSE":73,"ifStmtElseIf":74,"IF(":75,"invokeArgs":76,"BOOL":77,"NUMBER":78,"regex":79,"scope":80,"tag":81,"UNDEFINED":82,"program":83,"EOF":84,"randExpr":85,"REGEX_START":86,"regexBody":87,"REGEX_END":88,"REGEX_BODY":89,"returnStmt":90,"RETURN":91,"scopeArgumentSpread":92,"scopeStart":93,"}":94,"scopeDeclStart":95,"scopeArguments":96,"){":97,"(){":98,"{":99,"FUNCTION":100,"scopeArgumentsList":101,"scopeArguments[a]":102,"scopeArguments[b]":103,"scopeArgumentsListAtom":104,"BT_OPEN":105,"stringBody":106,"BT_CLOSE":107,"QSTRING":108,"ASTRING":109,"BT_TEXT":110,"BT_EXPR_OPEN":111,"BT_EXPR_CLOSE":112,"tagShort":113,"tagBlock":114,"tagBlockStart":115,"tagBlockEnd":116,"<":117,"XML_BLOCK_END":118,"XML_CLOSE_ID":119,"XML_BLOCK_CLOSE":120,"XML_OPEN_ID":121,"XML_BLOCK_START":122,"XML_SHORT_CLOSE":123,"INCREMENT":124,"DECREMENT":125,"$accept":0,"$end":1},
terminals_: {2:"error",4:"[",7:"]",9:"NAME",10:"BECOMES",13:"(",14:"expr[a]",15:")",16:"expr[b]",18:"SPREAD",19:",",24:"LT",25:"LTEQ",26:"GT",27:"GTEQ",28:"EQ",29:"INEQ",30:"PLUS",31:"MINUS",32:"TIMES",33:"DIVIDE",34:"MODULUS",35:"POWER",36:"AND",37:"OR",38:"IN",39:"HAS",41:"TO",42:"BY",43:"expr[c]",45:"FROM",47:":",51:";",54:"LET",56:"PRIVATE",57:"PROTECTED",58:"PUBLIC",64:".",65:"PROPERTY",66:"JSPROPERTY",67:"RANDOM",73:"ELSE",75:"IF(",77:"BOOL",78:"NUMBER",82:"UNDEFINED",84:"EOF",86:"REGEX_START",88:"REGEX_END",89:"REGEX_BODY",91:"RETURN",94:"}",97:"){",98:"(){",99:"{",100:"FUNCTION",102:"scopeArguments[a]",103:"scopeArguments[b]",105:"BT_OPEN",107:"BT_CLOSE",108:"QSTRING",109:"ASTRING",110:"BT_TEXT",111:"BT_EXPR_OPEN",112:"BT_EXPR_CLOSE",117:"<",118:"XML_BLOCK_END",119:"XML_CLOSE_ID",120:"XML_BLOCK_CLOSE",121:"XML_OPEN_ID",122:"XML_BLOCK_START",123:"XML_SHORT_CLOSE",124:"INCREMENT",125:"DECREMENT"},
productions_: [0,[3,1],[5,3],[5,2],[8,3],[8,3],[8,5],[8,1],[8,1],[8,2],[6,1],[6,3],[20,3],[20,1],[22,0],[22,2],[22,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,5],[23,5],[23,3],[23,3],[23,3],[46,2],[48,2],[50,0],[50,3],[50,2],[49,0],[49,3],[53,2],[53,2],[53,2],[53,2],[55,3],[55,5],[55,1],[55,1],[55,4],[55,3],[59,1],[59,3],[60,1],[60,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,1],[40,3],[40,3],[40,3],[40,4],[68,4],[72,2],[74,3],[70,0],[70,2],[71,1],[71,2],[69,3],[76,1],[76,2],[76,3],[62,3],[62,4],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[83,2],[21,1],[21,1],[85,1],[85,2],[79,3],[87,0],[87,2],[90,3],[92,2],[80,3],[17,3],[95,4],[95,4],[95,6],[95,6],[95,4],[95,4],[95,2],[95,2],[93,4],[93,6],[93,4],[93,2],[93,2],[93,1],[96,3],[96,1],[96,5],[96,3],[96,3],[101,1],[101,3],[104,1],[104,3],[52,1],[52,1],[12,3],[12,1],[12,1],[106,0],[106,2],[106,4],[81,1],[81,1],[114,3],[116,4],[115,4],[113,4],[63,2],[63,2],[63,2],[44,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
yy.array.begin();
break;
case 2:

			this.$ = (function () {
				let result = yy.array.active.toScope();
				yy.array.end();
				return `scope.array(${result})`;
			}());
		
break;
case 3:

			yy.array.end();
			this.$ = `scope.array()`;
		
break;
case 4:

			yy.array.active.push(`"${$$[$0-2]}"`, $$[$0]);
		
break;
case 5:

			yy.array.active.push($$[$0-2], $$[$0]);
		
break;
case 6:

			yy.array.active.push($$[$0-3], $$[$0]);
		
break;
case 7:

			yy.array.active.push(`"${$$[$0].name}"`, $$[$0].expr);
		
break;
case 8:

			yy.array.active.push($$[$0]);
		
break;
case 9:

			yy.array.active.pushSpread($$[$0]);
		
break;
case 12:

			this.$ = [$$[$0-2], $$[$0]];
		
break;
case 13:

			this.$ = [$$[$0], undefined];
		
break;
case 14: case 42: case 99: case 133:
this.$ = "";
break;
case 15:

			if ($$[$0-1] !== "") {
				$$[$0-1] += ",";
			}
			this.$ = (function () {
				if ($$[$0][1] === undefined) {
					return `${$$[$0-1]}${$$[$0][0]}`;
				}
				return `${$$[$0-1]}"${$$[$0][0]}":${$$[$0][1]}`;
			}());
		
break;
case 16:

			if ($$[$0-2] !== "") {
				$$[$0-2] += ",";
			}
			this.$ = `${$$[$0-2]}...scope.asObj(${$$[$0]})`;
		
break;
case 17:
this.$ = `(${$$[$0-2]}<${$$[$0]})`;
break;
case 18:
this.$ = `(${$$[$0-2]}<=${$$[$0]})`;
break;
case 19:
this.$ = `(${$$[$0-2]}>${$$[$0]})`;
break;
case 20:
this.$ = `(${$$[$0-2]}>=${$$[$0]})`;
break;
case 21:
this.$ = `Object.is(${$$[$0-2]},${$$[$0]})`;
break;
case 22:
this.$ = `!Object.is(${$$[$0-2]},${$$[$0]})`;
break;
case 23:
this.$ = `(${$$[$0-2]}+${$$[$0]})`;
break;
case 24:
this.$ = `(${$$[$0-2]}-${$$[$0]})`;
break;
case 25:
this.$ = `(${$$[$0-2]}*${$$[$0]})`;
break;
case 26:
this.$ = `(${$$[$0-2]}/${$$[$0]})`;
break;
case 27:
this.$ = `(${$$[$0-2]}%${$$[$0]})`;
break;
case 28:
this.$ = `(${$$[$0-2]}^${$$[$0]})`;
break;
case 29:
this.$ = `(${$$[$0-2]}&&${$$[$0]})`;
break;
case 30:
this.$ = `(${$$[$0-2]}||${$$[$0]})`;
break;
case 31:
this.$ = `scope.in(${$$[$0-2]}, ${$$[$0]})`;
break;
case 32:
this.$ = `scope.has(${$$[$0-2]}, ${$$[$0]})`;
break;
case 33:
this.$ = `scope.set(scope._scoping,"${$$[$0-2]}",${$$[$0]})`;
break;
case 34:
this.$ = `scope.set(${$$[$0-2].parent},${$$[$0-2].prop},${$$[$0]})`;
break;
case 35:
this.$ = `${$$[$0-4]}.push(${$$[$0]})`;
break;
case 36:
this.$ = `scope.range(${$$[$0-4]},${$$[$0-2]},${$$[$0]})`;
break;
case 37:
this.$ = `scope.range(${$$[$0-2]},${$$[$0]})`;
break;
case 38: case 39:
this.$ = `scope.unpack(${$$[$0]}).using(${$$[$0-2]})`;
break;
case 40:

			this.$ = (function () {
				let t = $$[$0-1];
				let types = [
					["number", "Number"] ,
					["bool(ean)?", "Boolean"],
					["string", "String"],
					["regex", "XRegExp"],
					["array", "Array"]
				];

				for (let [search, replace] of types) {
					let r = new RegExp("^(?:" + search + ")$", "i");
					if (r.test(t)) {
						t = replace;
						break;
					}
				}

				console.log("got cast:");
				console.log(`${t}:`);
				return `scope.id.${t}`;
			}());
		
break;
case 43: case 46:
yy.scope.pushStmt($$[$0-1]);
break;
case 44:
yy.scope.pushStmt($$[$0]);
break;
case 47:
this.$ = `scope.declare("let", ${$$[$0]})`;
break;
case 48:
this.$ = `scope.declare("private", ${$$[$0]})`;
break;
case 49:
this.$ = `scope.declare("protected", ${$$[$0]})`;
break;
case 50:
this.$ = `scope.declare("public", ${$$[$0]})`;
break;
case 51:
this.$ = `["${$$[$0-2]}",${$$[$0]}]`;
break;
case 52:
this.$ = `[[${$$[$0-3]}],${$$[$0]}]`;
break;
case 53:
this.$ = `["${$$[$0]}",]`;
break;
case 54:
this.$ = `["${$$[$0].name}", ${$$[$0].expr}]`;
break;
case 55:
this.$ = `["${$$[$0-2]}",${$$[$0]},${$$[$0-3]}]`;
break;
case 56: case 58:
this.$ = `${$$[$0-2]},${$$[$0]}`;
break;
case 57: case 61: case 64: case 65: case 67: case 80: case 85: case 87: case 88: case 89: case 90: case 91: case 94: case 95: case 102: case 128: case 129: case 136: case 137: case 145:
this.$ = $$[$0];
break;
case 59: case 126:
this.$ = `"${$$[$0]}"`;
break;
case 60:
this.$ = `[${$$[$0-1]}]`;
break;
case 62:
this.$ = $$[$0].value;
break;
case 63:
this.$ = `scope.id["${$$[$0]}"]`;
break;
case 66:
this.$ = '(' + $$[$0-1] + ')';
break;
case 68:
this.$ = {parent: $$[$0-2], prop: `"${$$[$0]}"`, value:`${$$[$0-2]}["${$$[$0]}"]`};
break;
case 69: case 70:
this.$ = {parent: $$[$0-2], prop: `"${$$[$0]}"`, value:`${$$[$0-2]}.${$$[$0]}`};
break;
case 71:
this.$ = {parent: $$[$0-3], prop: $$[$0-1], value:`${$$[$0-3]}[${$$[$0-1]}]`};
break;
case 72:

			this.$ = (function () {
				let result = $$[$0-3];
				result += `{
					let expr = ${$$[$0-2]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result + $$[$0-1] + $$[$0];
			}());
		
break;
case 73:

			this.$ = (function () {
				let result = `else`;
				result += `{
					let expr = ${$$[$0]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result;
			}());
		
break;
case 74:

			this.$ = (function () {
				let result = `else ${$$[$0-1]}`;
				result += `{
					let expr = ${$$[$0]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result;
			}());
		
break;
case 75: case 77:
this.$ = '';
break;
case 76:
this.$ = $$[$0-1] + $$[$0];
break;
case 78:
this.$ = $$[$0-1];
break;
case 79:
this.$ = `if(${$$[$0-1]})`;
break;
case 81:
this.$ = "..." + $$[$0];
break;
case 82:
this.$ = $$[$0-2] + "," + $$[$0];
break;
case 83:
this.$ = `${$$[$0-2]}()`;
break;
case 84:
this.$ = `${$$[$0-3]}(${$$[$0-1]})`;
break;
case 86:
this.$ = $$[$0].toLowerCase();
break;
case 92:
this.$ = undefined;
break;
case 93:
return yy.scope.expressions;
break;
case 96:
this.$ = 'scope.random()';
break;
case 97:
this.$ = `scope.random(${$$[$0]})`;
break;
case 98:

			this.$ = (function () {
				let modifiers = yy.regex.modifiers;
				if (modifiers.length > 0) {
					return `XRegExp("${$$[$0-1]}", "${modifiers}")`;
				}
				return `XRegExp("${$$[$0-1]}")`;
			}());
		
break;
case 100:

			this.$ = $$[$0-1] + $$[$0].replace(/\"/g, '\\"').replace(/\n/g,'\\n');
		
break;
case 101:

			yy.scope.hasReturn = true;
			this.$ = `return ${$$[$0-1]};`;
		
break;
case 103:

			this.$ = $$[$0-2] + 
				'this._hasReturn=true;' + 
				yy.scope.toJS() + 
				';this._hasReturn=false},' + 
				yy.scope.hasReturn + 
			')';
			yy.scope.end();
		
break;
case 104:

			console.log("scopeDecl:");
			console.log($$[$0-2]);
			this.$ = {
				name: $$[$0-2].name,
				expr: 
					$$[$0-2].expr + 
					'this._hasReturn=true;' + 
					yy.scope.toJS() + 
					';this._hasReturn=false},' + 
					yy.scope.hasReturn + 
				')'
			};
			yy.scope.end();
		
break;
case 105:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(function(...args){${args}`
				};
			}());
		
break;
case 106:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(function ${$$[$0-3]}(...args){${args}`
				};
			}());
		
break;
case 107:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let argsLength = yy.scope.argsLength;
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args.slice(${argsLength})]);`;
				yy.scope.begin();
				return {
					name: $$[$0-5],
					expr: `scope.createScope(function(...args){${args}${spread}`
				};
			}());
		
break;
case 108:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let argsLength = yy.scope.argsLength;
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args.slice(${argsLength})]);`;
				yy.scope.begin();
				return {
					name: $$[$0-5],
					expr: `scope.createScope(function ${$$[$0-5]}(...args){${args}${spread}`
				};
			}());
		
break;
case 109:

			yy.scope.endParen(true);
			this.$ = (function () {
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args]);`;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(function(...args){${spread}`
				};
			}());
		
break;
case 110:

			yy.scope.endParen(true);
			this.$ = (function () {
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args]);`;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(function ${$$[$0-3]}(...args){${spread}`
				};
			}());
		
break;
case 111: case 112:

			yy.scope.begin();
			let fnName = $$[$0-1]
			if (/\-/.test($$[$0-1])) {
				fnName = "";
			}
			this.$ = {
				name: $$[$0-1],
				expr: `scope.createScope(function ${fnName}(){`
			};
		
break;
case 113:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				yy.scope.begin();
				return `scope.createScope(function(...args){${args}`;
			}());
		
break;
case 114:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let argsLength = yy.scope.argsLength;
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args.slice(${argsLength})]);`;
				yy.scope.begin();
				return `scope.createScope(function(...args){${args}${spread}`;
			}());
		
break;
case 115:

			yy.scope.endParen(true);
			this.$ = (function () {
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args]);`;
				yy.scope.begin();
				return `scope.createScope(function(...args){${spread}`;
			}());
		
break;
case 116: case 117: case 118:

			yy.scope.begin();
			this.$ = 'scope.createScope(function(){';
		
break;
case 119:

			this.$ = yy.scope.pushArg(`"${$$[$0-2]}"`, $$[$0]);
		
break;
case 120:

			this.$ = yy.scope.pushArg(`"${$$[$0]}"`);
		
break;
case 121:

			this.$ = yy.scope.pushArg(`[${$$[$0-3]}]`, $$[$0]);
		
break;
case 122:

			this.$ = yy.scope.pushArg(`[${$$[$0-1]}]`);
		
break;
case 123:
this.$ = yy.scope.args;
break;
case 124:
this.$ = $$[$0]
break;
case 125:
this.$ = $$[$0-2] + ',' + $$[$0]
break;
case 127:
this.$ = '[' + $$[$0-1] + ']';
break;
case 130:
 this.$ = '`' + $$[$0-1] + '`'; 
break;
case 131: case 132:
this.$ = $$[$0].replace(/\n/g, '\\n');
break;
case 134:

			this.$ = yy.setStr($$[$0-1], $$[$0]);
		
break;
case 135:

			this.$ = yy.setStr($$[$0-3], '${' + $$[$0-1] + '}');
		
break;
case 138:

			this.$ = (function () {
				let tag = $$[$0-2];

				if (tag.tagName !== $$[$0]) {
					yy.parseError(`Tag mismatch: `, {
						text: `</${$$[$0]}>`,
						token: yytext,
						line: yylineno,
						solution: `Change ${$$[$0]} to ${tag.tagName}, or the other way around.`,
						recoverable: true
					});
				}

				return tag.toJS();
			}());
			yy.scope.end();
		
break;
case 139:

			this.$ = $$[$0-1];
		
break;
case 140:

			this.$ = (function () {
				let parent = yy.scope;
				yy.scope.begin();
				console.log($$[$0-2], yy.scope.expressions);
				return new yy.xml.Tag($$[$0-2], $$[$0-1], yy.scope.expressions, parent);
			}());
		
break;
case 141:
this.$ = (new yy.xml.Tag($$[$0-2], $$[$0-1], [], yy.scope.expressions)).toJS();
break;
case 142:
this.$ = '-' + $$[$0]
break;
case 143:
this.$ = '++' + $$[$0];
break;
case 144:
this.$ = '--' + $$[$0];
break;
}
},
table: [o([4,13,31,54,56,57,58,65,66,67,75,77,78,82,84,86,91,99,100,105,108,109,117,124,125],$V0,{83:1,48:2,49:3}),{1:[3]},{84:[1,4]},o($V1,$V2,{50:5,53:6,54:[1,7],56:[1,8],57:[1,9],58:[1,10]}),{1:[2,93]},o([84,94],[2,41],{11:11,52:12,61:13,40:14,21:15,62:16,23:17,63:19,90:20,68:21,5:22,79:25,80:26,12:27,81:28,44:32,69:37,3:38,93:40,113:44,114:45,85:46,115:52,4:$V3,13:$V4,31:$V5,65:$V6,66:$V7,67:$V8,75:$V9,77:$Va,78:$Vb,82:$Vc,86:$Vd,91:$Ve,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,117:$Vk,124:$Vl,125:$Vm}),{51:[1,54]},{4:$Vn,17:58,21:56,46:59,55:55,65:$Vo,66:$Vp,95:62},{4:$Vn,17:58,21:56,46:59,55:63,65:$Vo,66:$Vp,95:62},{4:$Vn,17:58,21:56,46:59,55:64,65:$Vo,66:$Vp,95:62},{4:$Vn,17:58,21:56,46:59,55:65,65:$Vo,66:$Vp,95:62},{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,51:[1,66],64:$VK},o($V1,[2,44]),o($VL,[2,61]),o($VL,[2,62],{10:[1,88]}),o($VL,$VM,{10:$VN}),o($VL,[2,64]),o($VL,[2,65]),{3:38,4:$V3,5:22,11:90,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($VL,[2,67]),o($V1,[2,128]),o($V1,[2,129]),o($VL,[2,85]),o($VL,[2,86]),o($VL,[2,87]),o($VL,[2,88]),o($VL,[2,89]),o($VL,$VO),o($VL,[2,91]),o($VL,[2,92]),o($VP,$VQ),o($VP,$VR),{45:[1,91]},{3:38,4:$V3,5:22,11:92,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:93,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:94,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:95,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:96,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,6:97,7:[1,98],8:99,9:$VS,11:104,12:101,13:$VT,17:103,18:$VU,21:106,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$Vo,66:$Vp,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,95:62,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($VV,[2,99],{87:107}),o($VW,$V0,{49:3,48:108}),o($VX,[2,133],{106:109}),o($VP,[2,131]),o($VP,[2,132]),o($VL,[2,136]),o($VL,[2,137]),{45:[2,145]},{3:38,4:$V3,5:22,11:110,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o([4,7,9,13,18,31,65,66,67,77,78,82,86,99,100,105,108,109,117,124,125],[2,1]),{13:[1,111],98:[1,112],99:[1,113]},o($VW,[2,118]),{121:$VY},o($VZ,$V2,{50:115}),{3:38,4:$V3,5:22,11:116,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,45:[2,96],61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o([4,13,31,54,56,57,58,65,66,67,75,77,78,82,84,86,91,94,99,100,105,108,109,117,124,125],[2,46]),{19:$V_,51:[2,47]},o($V$,[2,53],{10:[1,118],47:[1,119],98:$V01,99:$V11}),{4:$V21,21:124,59:122,60:123,65:$V6,66:$V7},o($V$,[2,54]),{21:126,65:$V6,66:$V7},o($V31,$VQ,{13:[1,127]}),o($V31,$VR,{13:[1,128]}),o($VW,$V0,{49:3,48:129}),{19:$V_,51:[2,48]},{19:$V_,51:[2,49]},{19:$V_,51:[2,50]},o($V1,[2,43]),{65:[1,130],66:[1,131],67:[1,132]},{3:38,4:$V3,5:22,7:[1,134],11:133,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:137,12:27,13:$V4,15:[1,135],18:[1,138],21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,76:136,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:139,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:140,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:141,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:142,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:143,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:144,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:145,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:146,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:147,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:148,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:149,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:150,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:151,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:152,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:153,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:154,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:155,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:156,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:157,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:158,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{4:$Vq,13:$Vr,15:[1,159],24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK},{3:38,4:$V3,5:22,11:160,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($V41,[2,142],{4:$Vq,13:$Vr}),o($V41,[2,143],{4:$Vq,13:$Vr}),o($V41,[2,144],{4:$Vq,13:$Vr}),{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,51:[1,161],64:$VK},o($V51,[2,75],{70:162,4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),{7:[1,163],19:[1,164]},o($VL,[2,3]),o($V61,[2,10]),{10:[1,165]},o($V71,$VO,{10:[1,166]}),{3:38,4:$V3,5:22,11:167,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($V61,[2,7]),o($V61,[2,8],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),{3:38,4:$V3,5:22,11:168,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($V71,$VM,{10:$VN,98:$V01,99:$V11}),{88:[1,169],89:[1,170]},{94:[1,171]},{107:[1,172],110:[1,173],111:[1,174]},{4:$Vq,13:$Vr,15:[1,175],24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK},{4:$V81,18:$V91,21:178,65:$V6,66:$V7,92:177,96:176},o($VW,[2,116]),o($VW,[2,117]),o($Va1,[2,14],{22:181}),{3:38,4:$V3,5:22,11:11,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,52:12,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,68:21,69:37,75:$V9,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,90:20,91:$Ve,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,116:182,117:[1,183],124:$Vl,125:$Vm},{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:[2,97],64:$VK},{4:$Vn,17:58,21:56,46:59,55:184,65:$Vo,66:$Vp,95:62},{3:38,4:$V3,5:22,11:185,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o([65,66],[2,40]),o($VW,[2,111]),o($VW,[2,112]),{7:[1,186],19:$Vb1},o($V61,[2,57]),o($V61,[2,59]),{4:$V21,21:124,59:188,60:123,65:$V6,66:$V7},{10:[1,189]},{4:$V81,18:$V91,21:178,65:$V6,66:$V7,92:191,96:190},{4:$V81,18:$V91,21:178,65:$V6,66:$V7,92:193,96:192},{94:[1,194]},o($VP,[2,68]),o($VP,[2,69]),o($VP,[2,70]),{4:$Vq,7:[1,195],13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK},{10:[1,196]},o($VL,[2,83]),{15:[1,197],19:[1,198]},o($Vc1,[2,80],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),{3:38,4:$V3,5:22,11:199,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($Vd1,[2,17],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($Vd1,[2,18],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($Vd1,[2,19],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($Vd1,[2,20],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($Vd1,[2,21],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($Vd1,[2,22],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($Ve1,[2,23],{4:$Vq,13:$Vr,32:$VA,33:$VB,34:$VC,35:$VD,64:$VK}),o($Ve1,[2,24],{4:$Vq,13:$Vr,32:$VA,33:$VB,34:$VC,35:$VD,64:$VK}),o($Vf1,[2,25],{4:$Vq,13:$Vr,35:$VD,64:$VK}),o($Vf1,[2,26],{4:$Vq,13:$Vr,35:$VD,64:$VK}),o($Vf1,[2,27],{4:$Vq,13:$Vr,35:$VD,64:$VK}),o([7,15,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,45,51,65,66,73,97,112,122,123],[2,28],{4:$Vq,13:$Vr,64:$VK}),o($Vg1,[2,29],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($Vg1,[2,30],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($Vh1,[2,31],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,41:$VI,64:$VK}),o($Vh1,[2,32],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,41:$VI,64:$VK}),o([7,15,18,19,24,25,26,27,28,29,36,37,38,39,41,45,51,65,66,73,97,112,122,123],[2,37],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,42:[1,200],64:$VK}),o($Vh1,[2,39],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,41:$VI,64:$VK}),o($Vi1,[2,34],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($Vi1,[2,33],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($VL,$Vj1),o($Vh1,[2,38],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,41:$VI,64:$VK}),o($V1,[2,101]),{51:[1,203],71:201,72:204,73:[1,205],74:202},o($VL,[2,2]),{3:38,4:$V3,5:22,8:206,9:$VS,11:104,12:101,13:$VT,17:103,18:$VU,21:106,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$Vo,66:$Vp,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,95:62,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:207,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{3:38,4:$V3,5:22,11:208,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{4:$Vq,13:$Vr,15:[1,209],24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK},o($V61,[2,9],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($VL,[2,98]),o($VV,[2,100]),o($VL,[2,103]),o($VP,[2,130]),o($VX,[2,134]),{3:38,4:$V3,5:22,11:210,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o([4,13,31,65,66,67,77,78,82,86,99,100,105,108,109,117,124,125],[2,79]),{19:[1,212],97:[1,211]},{97:[1,213]},o($Vk1,[2,120],{10:[1,214]}),{4:$Vl1,21:217,65:$V6,66:$V7,101:215,104:216},{21:219,65:$V6,66:$V7},{18:[1,223],20:222,21:224,65:$V6,66:$V7,122:[1,221],123:[1,220]},o($VL,[2,138]),{118:[1,225],121:$VY},{19:$V_,51:[2,56]},o($V$,[2,51],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),{10:[1,226]},{4:$V21,21:124,60:227,65:$V6,66:$V7},{7:[1,228],19:$Vb1},{3:38,4:$V3,5:22,11:229,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{19:[1,231],97:[1,230]},{97:[1,232]},{19:[1,234],97:[1,233]},{97:[1,235]},o([7,19,51],[2,104]),o($VP,[2,71]),{3:38,4:$V3,5:22,11:236,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($VL,[2,84]),{3:38,4:$V3,5:22,11:237,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($Vc1,[2,81],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),{3:38,4:$V3,5:22,11:238,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($V1,[2,72]),o($V51,[2,76]),o($V1,[2,77]),{51:[1,239]},{3:38,4:$V3,5:22,11:241,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,69:240,75:$V9,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($V61,[2,11]),o($V61,[2,4],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($V61,[2,5],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($V71,$Vj1,{10:[1,242]}),{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK,112:[1,243]},o($VW,[2,113]),{4:$V81,18:$V91,21:178,65:$V6,66:$V7,92:244,96:245},o($VW,[2,115]),{3:38,4:$V3,5:22,11:246,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{7:[1,247],19:$Vm1},o($V61,[2,124]),o($V61,[2,126]),{4:$Vl1,21:217,65:$V6,66:$V7,101:249,104:216},{97:[2,102]},o($VL,[2,141]),o($VZ,[2,140]),o($Va1,[2,15]),{3:38,4:$V3,5:22,11:250,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($Va1,[2,13],{10:[1,251]}),{119:[1,252]},{3:38,4:$V3,5:22,11:253,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($V61,[2,58]),o($V61,[2,60]),o($V$,[2,55],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($VW,[2,105]),{4:$V81,18:$V91,21:178,65:$V6,66:$V7,92:254,96:245},o($VW,[2,109]),o($VW,[2,106]),{4:$V81,18:$V91,21:178,65:$V6,66:$V7,92:255,96:245},o($VW,[2,110]),o($V41,[2,35],{4:$Vq,13:$Vr}),o($Vc1,[2,82],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o([7,15,18,19,24,25,26,27,28,29,36,37,38,39,41,42,45,51,65,66,73,97,112,122,123],[2,36],{4:$Vq,13:$Vr,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,64:$VK}),o($V1,[2,78]),{3:38,4:$V3,5:22,11:256,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,51:[2,73],64:$VK},{3:38,4:$V3,5:22,11:257,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($VX,[2,135]),{97:[1,258]},{19:[1,259],97:[2,123]},o($Vk1,[2,119],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($Vk1,[2,122],{10:[1,260]}),{4:$Vl1,21:217,65:$V6,66:$V7,104:261},{7:[1,262],19:$Vm1},o($Va1,[2,16],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),{3:38,4:$V3,5:22,11:263,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},{120:[1,264]},o($V$,[2,52],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),{97:[1,265]},{97:[1,266]},o($V51,[2,74],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($V61,[2,6],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($VW,[2,114]),{4:$V81,21:178,65:$V6,66:$V7,96:245},{3:38,4:$V3,5:22,11:267,12:27,13:$V4,21:15,23:17,31:$V5,40:14,44:32,61:13,62:16,63:19,65:$V6,66:$V7,67:$V8,77:$Va,78:$Vb,79:25,80:26,81:28,82:$Vc,85:46,86:$Vd,93:40,99:$Vf,100:$Vg,105:$Vh,108:$Vi,109:$Vj,113:44,114:45,115:52,117:$Vk,124:$Vl,125:$Vm},o($V61,[2,125]),o($V61,[2,127]),o($Va1,[2,12],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK}),o($VL,[2,139]),o($VW,[2,107]),o($VW,[2,108]),o($Vk1,[2,121],{4:$Vq,13:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,32:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:$VI,45:$VJ,64:$VK})],
defaultActions: {4:[2,93],46:[2,145],219:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	yy.setStr = function setStr(body, txt) {
		return body + txt;
	};

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
											 	yy.scope.beginParen();
											 	yy.scope.endParen(true);
											 	this.pushState('controlCode');
												return 98;
											 
break;
case 2:
												this.pushState('ifParen');
												return "IF(";
											 
break;
case 3:this.popState();return 15;
break;
case 4:
												this.pushState('paren');
												yy.scope.beginParen();
												return "(";
											 
break;
case 5:
												this.popState();
												this.pushState("controlCode");
												return "){";
											 
break;
case 6:
												this.popState();
												yy.scope.endParen(false);
												return ")";
											 
break;
case 7:return ",";
break;
case 8:return 18;
break;
case 9:this.pushState('inBacktick'); return 105;
break;
case 10:this.popState(); return 107;
break;
case 11:this.popState(); this.pushState('inBacktickExpr'); return 111;
break;
case 12:this.popState(); this.pushState('inBacktick'); return 112;
break;
case 13:return "BT_TEXT";
break;
case 14:
                                                if ((/^(\/|[a-z])/i).test(this._input)) {
													this.pushState("angleBracket");
													return "<";
												} else if ((/^\=/).test(this._input)) {
													yy_.yytext += "=";
													this.match += '=';
													this.matched += '=';
													this._input = this._input.substr(1);
													return "LTEQ"
												} else if ((/^\-/).test(this._input)) {
													yy_.yytext += "-";
													this.match += '-';
													this.matched += '-';
													this._input = this._input.substr(1);
													return "BY";
												}
												return "LT";
											 
break;
case 15:this.popState(); this.pushState("xmlBlockClose"); return "XML_BLOCK_END";
break;
case 16:this.popState(); this.pushState("xmlTagOpen"); return "XML_OPEN_ID";
break;
case 17:this.popState();
break;
case 18:this.popState(); return "XML_BLOCK_START";
break;
case 19:this.popState(); return "XML_SHORT_CLOSE";
break;
case 20:/* skip whitespace */
break;
case 21:this.popState(); return "XML_BLOCK_CLOSE";
break;
case 22:return "XML_CLOSE_ID";
break;
case 23:
	                                         	return (() => {
	                                         		let del_regex = /^r('''|"""|[\/"'@~%`])/;
	                                         		yy.regex.del = yy_.yytext.match(del_regex)[1];
	                                         		this.pushState("inRegex");
	                                         		return "REGEX_START";
	                                         	})();
                                            
break;
case 24:
												return (() => {
													let del = yy_.yytext.match(/^'''|"""|[/"'@~%`]/)[0];
													if (yy.regex.del === del) {
														yy.regex.modifiers = yy_.yytext.match(/[a-z]*$/i)[0];
														this.popState();
														return "REGEX_END";
													}
													return "REGEX_BODY";
												})();
											
break;
case 25:return "REGEX_BODY";
break;
case 26:this.pushState("declBracket"); return "[";
break;
case 27:this.popState();return "BECOMES";
break;
case 28:this.popState();return "]";
break;
case 29:this.pushState("declBracket"); return "[";
break;
case 30:return ",";
break;
case 31:
												if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                }
                                                return "PROPERTY";
                                            
break;
case 32:this.pushState("exprBracket");return 4;
break;
case 33:this.popState();return 7;
break;
case 34:
                                                 for (let [search, result] of yy.namedTokens) {
                                                 	if (search.test(yy_.yytext)) {
                                                 		if (typeof result === "function") {
                                                 			return result.call(this, yy_.yytext);
                                                 		}
                                                 		return result;
                                                 	}
                                                 }

                                                 if (/^\s*(\=|BECOMES?)/.test(this._input)) {
                                                 	return "NAME";
                                                 }
                                                 if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                }
                                                return "PROPERTY";
                                            
break;
case 35:
                                                return (() => {
	                                                const line_comment_regex = /^(?:\/[^\n]*(?=\n|$))/;
	                                                const block_comment_regex = /^(?:\*[\s\S]*?\*\/)/;
	                                                if (line_comment_regex.test(this._input)) {
	                                                    let match = this._input.match(line_comment_regex)[0];
	                                                    yy_.yytext += match;
	                                                    this.match += match;
	                                                    this.matched += match;
	                                                    this._input = this._input.substr(match.length + 1);
	                                                } else if (block_comment_regex.test(this._input)) {
	                                                	let match = this._input.match(block_comment_regex)[0];
	                                                	yy_.yytext += match;
	                                                    this._input = this._input.substr(match.length);
	                                                } else {
                                                		return "DIVIDE";
                                                	}
                                                })();
                                            
break;
case 36:
												this.pushState("controlCode");
												return "{";
											 
break;
case 37:
												this.popState();
												return "}";
											 
break;
case 38:return "}";
break;
case 39:return "TO";
break;
case 40:return "QSTRING";
break;
case 41:return "ASTRING";
break;
case 42:return "GT";
break;
case 43:return "GTEQ";
break;
case 44:return "EQ";
break;
case 45:return "INEQ";
break;
case 46:return "AND";
break;
case 47:return "OR";
break;
case 48:return "INCREMENT";
break;
case 49:return "DECREMENT";
break;
case 50:return "PLUS";
break;
case 51:return "MINUS";
break;
case 52:return "TIMES";
break;
case 53:return "MODULUS";
break;
case 54:return "POWER";
break;
case 55:return ".";
break;
case 56:return ",";
break;
case 57:return "BECOMES";
break;
case 58:return ":";
break;
case 59:
                                                 for (let [search, result] of yy.namedTokens) {
                                                 	if (search.test(yy_.yytext)) {
                                                 		if (typeof result === "function") {
                                                 			return result.call(this, yy_.yytext);
                                                 		}
                                                 		return result;
                                                 	}
                                                 }
                                                 if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                 }
                                                 return "PROPERTY";
                                             
break;
case 60:return 78;
break;
case 61:return 51;
break;
case 62:return 84;
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\(\s*\)\s*\{)/i,/^(?:if\s*\()/i,/^(?:\))/i,/^(?:\()/i,/^(?:\)\s*\{)/i,/^(?:\))/i,/^(?:,)/i,/^(?:\.\.\.)/i,/^(?:`)/i,/^(?:`)/i,/^(?:\$\{)/i,/^(?:\})/i,/^(?:(\\`|[^\`\$]|\$[^\{\`])+)/i,/^(?:<)/i,/^(?:\/)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:.)/i,/^(?:>)/i,/^(?:\/>)/i,/^(?:\s+)/i,/^(?:>)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:r(?:'''|"""|[\/"'@~%`]))/i,/^(?:(?:'''|"""|[\/"'@~%`])[Agimnsuxy]{0,7})/i,/^(?:\S|\s)/i,/^(?:\[)/i,/^(?:=|becomes\b)/i,/^(?:\])/i,/^(?:\[)/i,/^(?:,)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:\/)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\})/i,/^(?:\.\.)/i,/^(?:"(\\"|[^\"])*")/i,/^(?:'(\\'|[^\'])*')/i,/^(?:>)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:=)/i,/^(?::)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:[0-9]+(?:\.[0-9]+)?)/i,/^(?:;)/i,/^(?:$)/i],
conditions: {"controlCode":{"rules":[0,1,2,4,8,9,14,23,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"formalArguments":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"paren":{"rules":[0,1,2,4,5,6,7,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"ifParen":{"rules":[0,1,2,3,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"exprBracket":{"rules":[0,1,2,4,8,9,14,23,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"declRight":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"declBracket":{"rules":[0,1,2,4,8,9,14,23,28,29,30,31,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"declLeft":{"rules":[0,1,2,4,8,9,14,23,26,27,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"inRegex":{"rules":[24,25],"inclusive":false},"xmlBlockClose":{"rules":[20,21,22],"inclusive":false},"xmlTagOpen":{"rules":[0,1,2,4,8,9,14,18,19,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"angleBracket":{"rules":[15,16,17],"inclusive":false},"inBacktickExpr":{"rules":[0,1,2,4,8,9,12,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"inBacktick":{"rules":[10,11,13],"inclusive":false},"INITIAL":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}