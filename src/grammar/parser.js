/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,41],$V1=[4,27,59,63,64,65,73,75,76,81,83,85,90,93,94,98,103,106,107,115,122,123],$V2=[2,38],$V3=[1,48],$V4=[1,33],$V5=[1,18],$V6=[1,30],$V7=[1,31],$V8=[1,53],$V9=[1,47],$Va=[1,23],$Vb=[1,24],$Vc=[1,29],$Vd=[1,39],$Ve=[1,36],$Vf=[1,49],$Vg=[1,50],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,51],$Vl=[1,34],$Vm=[1,35],$Vn=[1,57],$Vo=[1,64],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,82],$VG=[1,83],$VH=[1,65],$VI=[1,63],$VJ=[4,7,12,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,41,47,59,60,62,63,64,71,96,110,120,121],$VK=[4,7,10,12,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,41,43,47,59,60,62,63,64,71,96,110,120,121],$VL=[1,96],$VM=[87,88],$VN=[4,27,50,52,53,54,59,63,64,65,73,75,76,81,85,90,93,94,98,103,106,107,115,122,123],$VO=[105,108,109],$VP=[1,105],$VQ=[4,27,59,63,64,65,73,75,76,81,85,90,94,98,103,106,107,115,122,123],$VR=[1,108],$VS=[12,47],$VT=[1,114],$VU=[7,12,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,41,47,60,62,63,64,71,96,110,120,121],$VV=[47,71],$VW=[7,12],$VX=[1,162],$VY=[1,163],$VZ=[16,63,64,120,121],$V_=[1,170],$V$=[4,7,10,12,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,41,47,59,60,62,63,64,71,96,110,120,121],$V01=[12,60],$V11=[7,12,16,19,21,22,23,24,25,32,33,38,47,60,63,64,71,96,110,120,121],$V21=[7,12,16,19,21,22,23,24,25,26,27,32,33,34,35,37,38,41,47,60,63,64,71,96,110,120,121],$V31=[7,12,16,19,21,22,23,24,25,26,27,28,29,30,32,33,34,35,37,38,41,47,60,63,64,71,96,110,120,121],$V41=[7,12,16,32,33,38,47,60,63,64,71,96,110,120,121],$V51=[7,12,16,19,21,22,23,24,25,32,33,34,35,38,41,47,60,63,64,71,96,110,120,121],$V61=[7,12,16,38,47,60,63,64,71,96,110,120,121],$V71=[12,96],$V81=[1,194],$V91=[1,217];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"arrayStart":3,"[":4,"array":5,"arrayItems":6,"]":7,"arrayItem":8,"NAME":9,"BECOMES":10,"expr":11,",":12,"attribute":13,"property":14,"attributeList":15,"...":16,"binaryExpr":17,"expr[a]":18,"LT":19,"expr[b]":20,"LTEQ":21,"GT":22,"GTEQ":23,"EQ":24,"INEQ":25,"PLUS":26,"MINUS":27,"TIMES":28,"DIVIDE":29,"MODULUS":30,"POWER":31,"AND":32,"OR":33,"IN":34,"HAS":35,"id":36,"TO":37,"BY":38,"expr[c]":39,"unpackExpr":40,"FROM":41,"cast":42,":":43,"codeBlock":44,"decStatements":45,"controlCode":46,";":47,"stmt":48,"declaration":49,"LET":50,"decProperty":51,"PRIVATE":52,"PROTECTED":53,"PUBLIC":54,"decPropertyList":55,"decPropertyListAtom":56,"literal":57,"invokeExpr":58,"(":59,")":60,"unaryExpr":61,".":62,"PROPERTY":63,"JSPROPERTY":64,"RANDOM":65,"ifStmt":66,"ifStmtLineStart":67,"ifStmtElseIfChain":68,"ifStmtEnd":69,"ifStmtElse":70,"ELSE":71,"ifStmtElseIf":72,"IF(":73,"invokeArgs":74,"BOOL":75,"NUMBER":76,"regex":77,"scope":78,"string":79,"tag":80,"UNDEFINED":81,"program":82,"EOF":83,"randExpr":84,"REGEX_START":85,"regexBody":86,"REGEX_END":87,"REGEX_BODY":88,"returnStmt":89,"RETURN":90,"scopeArgumentSpread":91,"scopeStart":92,"}":93,"FUNCTION":94,"scopeArguments":95,"){":96,"(){":97,"{":98,"scopeArgumentsList":99,"scopeArguments[a]":100,"scopeArguments[b]":101,"scopeArgumentsListAtom":102,"BT_OPEN":103,"stringBody":104,"BT_CLOSE":105,"QSTRING":106,"ASTRING":107,"BT_TEXT":108,"BT_EXPR_OPEN":109,"BT_EXPR_CLOSE":110,"tagShort":111,"tagBlock":112,"tagBlockStart":113,"tagBlockEnd":114,"<":115,"XML_BLOCK_END":116,"XML_CLOSE_ID":117,"XML_BLOCK_CLOSE":118,"XML_OPEN_ID":119,"XML_BLOCK_START":120,"XML_SHORT_CLOSE":121,"INCREMENT":122,"DECREMENT":123,"$accept":0,"$end":1},
terminals_: {2:"error",4:"[",7:"]",9:"NAME",10:"BECOMES",12:",",16:"...",18:"expr[a]",19:"LT",20:"expr[b]",21:"LTEQ",22:"GT",23:"GTEQ",24:"EQ",25:"INEQ",26:"PLUS",27:"MINUS",28:"TIMES",29:"DIVIDE",30:"MODULUS",31:"POWER",32:"AND",33:"OR",34:"IN",35:"HAS",37:"TO",38:"BY",39:"expr[c]",41:"FROM",43:":",47:";",50:"LET",52:"PRIVATE",53:"PROTECTED",54:"PUBLIC",59:"(",60:")",62:".",63:"PROPERTY",64:"JSPROPERTY",65:"RANDOM",71:"ELSE",73:"IF(",75:"BOOL",76:"NUMBER",81:"UNDEFINED",83:"EOF",85:"REGEX_START",87:"REGEX_END",88:"REGEX_BODY",90:"RETURN",93:"}",94:"FUNCTION",96:"){",97:"(){",98:"{",100:"scopeArguments[a]",101:"scopeArguments[b]",103:"BT_OPEN",105:"BT_CLOSE",106:"QSTRING",107:"ASTRING",108:"BT_TEXT",109:"BT_EXPR_OPEN",110:"BT_EXPR_CLOSE",115:"<",116:"XML_BLOCK_END",117:"XML_CLOSE_ID",118:"XML_BLOCK_CLOSE",119:"XML_OPEN_ID",120:"XML_BLOCK_START",121:"XML_SHORT_CLOSE",122:"INCREMENT",123:"DECREMENT"},
productions_: [0,[3,1],[5,3],[5,2],[8,3],[8,1],[6,1],[6,3],[13,3],[13,1],[15,0],[15,2],[15,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,5],[17,5],[17,3],[17,3],[17,3],[42,2],[44,2],[46,0],[46,3],[46,2],[45,0],[45,3],[49,2],[49,2],[49,2],[49,2],[51,3],[51,5],[51,1],[51,4],[51,3],[55,1],[55,3],[56,1],[56,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,1],[36,3],[36,3],[36,3],[36,4],[66,4],[70,2],[72,3],[68,0],[68,2],[69,1],[69,2],[67,3],[74,1],[74,2],[74,3],[58,3],[58,4],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[82,2],[14,1],[14,1],[84,1],[84,2],[77,3],[86,0],[86,2],[89,3],[91,2],[78,3],[92,4],[92,6],[92,4],[92,2],[92,2],[92,1],[95,3],[95,1],[95,5],[95,3],[95,3],[99,1],[99,3],[102,1],[102,3],[48,1],[48,1],[79,3],[79,1],[79,1],[104,0],[104,2],[104,4],[80,1],[80,1],[112,3],[114,4],[113,4],[111,4],[61,2],[61,2],[61,2],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
yy.array.begin();
break;
case 2:

			this.$ = (function () {
				let result = yy.array.active.toScope();
				yy.array.end();
				return `scope.array(${result})`;
			}());
		
break;
case 3:

			yy.array.end();
			this.$ = `scope.array()`;
		
break;
case 4:

			yy.array.active.push($$[$0-2], $$[$0]);
		
break;
case 5:

			yy.array.active.push($$[$0]);
		
break;
case 8:

			this.$ = [$$[$0-2], $$[$0]];
		
break;
case 9:

			this.$ = [$$[$0], undefined];
		
break;
case 10: case 38: case 94: case 119:
this.$ = "";
break;
case 11:

			if ($$[$0-1] !== "") {
				$$[$0-1] += ",";
			}
			this.$ = (function () {
				if ($$[$0][1] === undefined) {
					return `${$$[$0-1]}${$$[$0][0]}`;
				}
				return `${$$[$0-1]}"${$$[$0][0]}":${$$[$0][1]}`;
			}());
		
break;
case 12:

			if ($$[$0-2] !== "") {
				$$[$0-2] += ",";
			}
			this.$ = `${$$[$0-2]}...scope.asObj(${$$[$0]})`;
		
break;
case 13:
this.$ = `(${$$[$0-2]}<${$$[$0]})`;
break;
case 14:
this.$ = `(${$$[$0-2]}<=${$$[$0]})`;
break;
case 15:
this.$ = `(${$$[$0-2]}>${$$[$0]})`;
break;
case 16:
this.$ = `(${$$[$0-2]}>=${$$[$0]})`;
break;
case 17:
this.$ = `Object.is(${$$[$0-2]},${$$[$0]})`;
break;
case 18:
this.$ = `!Object.is(${$$[$0-2]},${$$[$0]})`;
break;
case 19:
this.$ = `(${$$[$0-2]}+${$$[$0]})`;
break;
case 20:
this.$ = `(${$$[$0-2]}-${$$[$0]})`;
break;
case 21:
this.$ = `(${$$[$0-2]}*${$$[$0]})`;
break;
case 22:
this.$ = `(${$$[$0-2]}/${$$[$0]})`;
break;
case 23:
this.$ = `(${$$[$0-2]}%${$$[$0]})`;
break;
case 24:
this.$ = `(${$$[$0-2]}^${$$[$0]})`;
break;
case 25:
this.$ = `(${$$[$0-2]}&&${$$[$0]})`;
break;
case 26:
this.$ = `(${$$[$0-2]}||${$$[$0]})`;
break;
case 27:
this.$ = `scope.in(${$$[$0-2]}, ${$$[$0]})`;
break;
case 28:
this.$ = `scope.has(${$$[$0-2]}, ${$$[$0]})`;
break;
case 29:
this.$ = `scope.set(scope._scoping,"${$$[$0-2]}",${$$[$0]})`;
break;
case 30:
this.$ = `scope.set(${$$[$0-2].parent},${$$[$0-2].prop},${$$[$0]})`;
break;
case 31:
this.$ = `${$$[$0-4]}.push(${$$[$0]})`;
break;
case 32:
this.$ = `scope.range(${$$[$0-4]},${$$[$0-2]},${$$[$0]})`;
break;
case 33:
this.$ = `scope.range(${$$[$0-2]},${$$[$0]})`;
break;
case 34: case 35:
this.$ = `scope.unpack(${$$[$0]}).using(${$$[$0-2]})`;
break;
case 36:

			this.$ = (function () {
				let t = $$[$0-1];
				let types = [
					["number", "Number"] ,
					["bool(ean)?", "Boolean"],
					["string", "String"],
					["regex", "XRegExp"],
					["array", "Array"]
				];

				for (let [search, replace] of types) {
					let r = new RegExp("^(?:" + search + ")$", "i");
					if (r.test(t)) {
						t = replace;
						break;
					}
				}

				console.log("got cast:");
				console.log(`${t}:`);
				return `scope.id.${t}`;
			}());
		
break;
case 39: case 42:
yy.scope.pushStmt($$[$0-1]);
break;
case 40:
yy.scope.pushStmt($$[$0]);
break;
case 43:
this.$ = `scope.declare("let", ${$$[$0]})`;
break;
case 44:
this.$ = `scope.declare("private", ${$$[$0]})`;
break;
case 45:
this.$ = `scope.declare("protected", ${$$[$0]})`;
break;
case 46:
this.$ = `scope.declare("public", ${$$[$0]})`;
break;
case 47:
this.$ = `["${$$[$0-2]}",${$$[$0]}]`;
break;
case 48:
this.$ = `[[${$$[$0-3]}],${$$[$0]}]`;
break;
case 49:
this.$ = `["${$$[$0]}",]`;
break;
case 50:
this.$ = `["${$$[$0-2]}",${$$[$0]},${$$[$0-3]}]`;
break;
case 51: case 53:
this.$ = `${$$[$0-2]},${$$[$0]}`;
break;
case 52: case 56: case 59: case 60: case 62: case 75: case 80: case 82: case 83: case 84: case 85: case 86: case 89: case 90: case 97: case 114: case 115: case 122: case 123: case 131:
this.$ = $$[$0];
break;
case 54: case 112:
this.$ = `"${$$[$0]}"`;
break;
case 55:
this.$ = `[${$$[$0-1]}]`;
break;
case 57:
this.$ = $$[$0].value;
break;
case 58:
this.$ = `scope.id["${$$[$0]}"]`;
break;
case 61:
this.$ = '(' + $$[$0-1] + ')';
break;
case 63:
this.$ = {parent: $$[$0-2], prop: `"${$$[$0]}"`, value:`${$$[$0-2]}["${$$[$0]}"]`};
break;
case 64: case 65:
this.$ = {parent: $$[$0-2], prop: `"${$$[$0]}"`, value:`${$$[$0-2]}.${$$[$0]}`};
break;
case 66:
this.$ = {parent: $$[$0-3], prop: $$[$0-1], value:`${$$[$0-3]}[${$$[$0-1]}]`};
break;
case 67:

			this.$ = (function () {
				let result = $$[$0-3];
				result += `{
					let expr = ${$$[$0-2]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result + $$[$0-1] + $$[$0];
			}());
		
break;
case 68:

			this.$ = (function () {
				let result = `else`;
				result += `{
					let expr = ${$$[$0]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result;
			}());
		
break;
case 69:

			this.$ = (function () {
				let result = `else ${$$[$0-1]}`;
				result += `{
					let expr = ${$$[$0]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result;
			}());
		
break;
case 70: case 72:
this.$ = '';
break;
case 71:
this.$ = $$[$0-1] + $$[$0];
break;
case 73:
this.$ = $$[$0-1];
break;
case 74:
this.$ = `if(${$$[$0-1]})`;
break;
case 76:
this.$ = "..." + $$[$0];
break;
case 77:
this.$ = $$[$0-2] + "," + $$[$0];
break;
case 78:
this.$ = `${$$[$0-2]}()`;
break;
case 79:
this.$ = `${$$[$0-3]}(${$$[$0-1]})`;
break;
case 81:
this.$ = $$[$0].toLowerCase();
break;
case 87:
this.$ = undefined;
break;
case 88:
return yy.scope.expressions;
break;
case 91:
this.$ = 'scope.random()';
break;
case 92:
this.$ = `scope.random(${$$[$0]})`;
break;
case 93:

			this.$ = (function () {
				let modifiers = yy.regex.modifiers;
				if (modifiers.length > 0) {
					return `XRegExp("${$$[$0-1]}", "${modifiers}")`;
				}
				return `XRegExp("${$$[$0-1]}")`;
			}());
		
break;
case 95:

			this.$ = $$[$0-1] + $$[$0].replace(/\"/g, '\\"').replace(/\n/g,'\\n');
		
break;
case 96:

			yy.scope.hasReturn = true;
			this.$ = `return ${$$[$0-1]};`;
		
break;
case 98:

			this.$ = $$[$0-2] + 'this._hasReturn=true;' + yy.scope.toJS() + ';this._hasReturn=false},' + yy.scope.hasReturn + ')';
			yy.scope.end();
		
break;
case 99:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				yy.scope.begin();
				return `scope.createScope(function(...args){${args}`;
			}());
		
break;
case 100:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let argsLength = yy.scope.argsLength;
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args.slice(${argsLength})]);`;
				yy.scope.begin();
				return `scope.createScope(function(...args){${args}${spread}`;
			}());
		
break;
case 101:

			yy.scope.endParen(true);
			this.$ = (function () {
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args]);`;
				yy.scope.begin();
				return `scope.createScope(function(...args){${spread}`;
			}());
		
break;
case 102: case 103: case 104:

			yy.scope.begin();
			this.$ = 'scope.createScope(function(){';
		
break;
case 105:

			this.$ = yy.scope.pushArg(`"${$$[$0-2]}"`, $$[$0]);
		
break;
case 106:

			this.$ = yy.scope.pushArg(`"${$$[$0]}"`);
		
break;
case 107:

			this.$ = yy.scope.pushArg(`[${$$[$0-3]}]`, $$[$0]);
		
break;
case 108:

			this.$ = yy.scope.pushArg(`[${$$[$0-1]}]`);
		
break;
case 109:
this.$ = yy.scope.args;
break;
case 110:
this.$ = $$[$0]
break;
case 111:
this.$ = $$[$0-2] + ',' + $$[$0]
break;
case 113:
this.$ = '[' + $$[$0-1] + ']';
break;
case 116:
 this.$ = '`' + $$[$0-1] + '`'; 
break;
case 117: case 118:
this.$ = $$[$0].replace(/\n/g, '\\n');
break;
case 120:

			this.$ = yy.setStr($$[$0-1], $$[$0]);
		
break;
case 121:

			this.$ = yy.setStr($$[$0-3], '${' + $$[$0-1] + '}');
		
break;
case 124:

			this.$ = (function () {
				let tag = $$[$0-2];

				if (tag.tagName !== $$[$0]) {
					yy.parseError(`Tag mismatch: `, {
						text: `</${$$[$0]}>`,
						token: yytext,
						line: yylineno,
						solution: `Change ${$$[$0]} to ${tag.tagName}, or the other way around.`,
						recoverable: true
					});
				}

				return tag.toJS();
			}());
			yy.scope.end();
		
break;
case 125:

			this.$ = $$[$0-1];
		
break;
case 126:

			this.$ = (function () {
				let parent = yy.scope;
				yy.scope.begin();
				console.log($$[$0-2], yy.scope.expressions);
				return new yy.xml.Tag($$[$0-2], $$[$0-1], yy.scope.expressions, parent);
			}());
		
break;
case 127:
this.$ = (new yy.xml.Tag($$[$0-2], $$[$0-1], [], yy.scope.expressions)).toJS();
break;
case 128:
this.$ = '-' + $$[$0]
break;
case 129:
this.$ = '++' + $$[$0];
break;
case 130:
this.$ = '--' + $$[$0];
break;
}
},
table: [o([4,27,50,52,53,54,59,63,64,65,73,75,76,81,83,85,90,94,98,103,106,107,115,122,123],$V0,{82:1,44:2,45:3}),{1:[3]},{83:[1,4]},o($V1,$V2,{46:5,49:6,50:[1,7],52:[1,8],53:[1,9],54:[1,10]}),{1:[2,88]},o([83,93],[2,37],{11:11,48:12,57:13,36:14,14:15,58:16,17:17,61:19,89:20,66:21,5:22,77:25,78:26,79:27,80:28,40:32,67:37,3:38,92:40,111:44,112:45,84:46,113:52,4:$V3,27:$V4,59:$V5,63:$V6,64:$V7,65:$V8,73:$V9,75:$Va,76:$Vb,81:$Vc,85:$Vd,90:$Ve,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,115:$Vk,122:$Vl,123:$Vm}),{47:[1,54]},{4:$Vn,14:56,42:58,51:55,63:$V6,64:$V7},{4:$Vn,14:56,42:58,51:59,63:$V6,64:$V7},{4:$Vn,14:56,42:58,51:60,63:$V6,64:$V7},{4:$Vn,14:56,42:58,51:61,63:$V6,64:$V7},{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,47:[1,62],59:$VH,62:$VI},o($V1,[2,40]),o($VJ,[2,56]),o($VJ,[2,57],{10:[1,84]}),o($VJ,[2,58],{10:[1,85]}),o($VJ,[2,59]),o($VJ,[2,60]),{3:38,4:$V3,5:22,11:86,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($VJ,[2,62]),o($V1,[2,114]),o($V1,[2,115]),o($VJ,[2,80]),o($VJ,[2,81]),o($VJ,[2,82]),o($VJ,[2,83]),o($VJ,[2,84]),o($VJ,[2,85]),o($VJ,[2,86]),o($VJ,[2,87]),o($VK,[2,89]),o($VK,[2,90]),{41:[1,87]},{3:38,4:$V3,5:22,11:88,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:89,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:90,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:91,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:92,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,6:93,7:[1,94],8:95,9:$VL,11:97,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($VM,[2,94],{86:98}),o($VN,$V0,{45:3,44:99}),o($VO,[2,119],{104:100}),o($VJ,[2,117]),o($VJ,[2,118]),o($VJ,[2,122]),o($VJ,[2,123]),{41:[2,131]},{3:38,4:$V3,5:22,11:101,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o([4,7,9,27,59,63,64,65,75,76,81,85,94,98,103,106,107,115,122,123],[2,1]),{59:[1,102],97:[1,103],98:[1,104]},o($VN,[2,104]),{119:$VP},o($VQ,$V2,{46:106}),{3:38,4:$V3,5:22,11:107,14:15,17:17,27:$V4,36:14,40:32,41:[2,91],57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o([4,27,50,52,53,54,59,63,64,65,73,75,76,81,83,85,90,93,94,98,103,106,107,115,122,123],[2,42]),{12:$VR,47:[2,43]},o($VS,[2,49],{10:[1,109],43:[1,110]}),{4:$VT,14:113,55:111,56:112,63:$V6,64:$V7},{14:115,63:$V6,64:$V7},{12:$VR,47:[2,44]},{12:$VR,47:[2,45]},{12:$VR,47:[2,46]},o($V1,[2,39]),{63:[1,116],64:[1,117],65:[1,118]},{3:38,4:$V3,5:22,7:[1,120],11:119,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:123,14:15,16:[1,124],17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,60:[1,121],61:19,63:$V6,64:$V7,65:$V8,74:122,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:125,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:126,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:127,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:128,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:129,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:130,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:131,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:132,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:133,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:134,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:135,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:136,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:137,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:138,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:139,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:140,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:141,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:142,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:143,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:144,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,60:[1,145],62:$VI},{3:38,4:$V3,5:22,11:146,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($VU,[2,128],{4:$Vo,59:$VH}),o($VU,[2,129],{4:$Vo,59:$VH}),o($VU,[2,130],{4:$Vo,59:$VH}),{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,47:[1,147],59:$VH,62:$VI},o($VV,[2,70],{68:148,4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),{7:[1,149],12:[1,150]},o($VJ,[2,3]),o($VW,[2,6]),{10:[1,151]},o($VW,[2,5],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),{87:[1,152],88:[1,153]},{93:[1,154]},{105:[1,155],108:[1,156],109:[1,157]},{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,60:[1,158],62:$VI},{4:$VX,14:161,16:$VY,63:$V6,64:$V7,91:160,95:159},o($VN,[2,102]),o($VN,[2,103]),o($VZ,[2,10],{15:164}),{3:38,4:$V3,5:22,11:11,14:15,17:17,27:$V4,36:14,40:32,48:12,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,66:21,67:37,73:$V9,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,89:20,90:$Ve,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,114:165,115:[1,166],122:$Vl,123:$Vm},{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:[2,92],59:$VH,62:$VI},{4:$Vn,14:56,42:58,51:167,63:$V6,64:$V7},{3:38,4:$V3,5:22,11:168,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o([63,64],[2,36]),{7:[1,169],12:$V_},o($VW,[2,52]),o($VW,[2,54]),{4:$VT,14:113,55:171,56:112,63:$V6,64:$V7},{10:[1,172]},o($V$,[2,63]),o($V$,[2,64]),o($V$,[2,65]),{4:$Vo,7:[1,173],19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI},{10:[1,174]},o($VJ,[2,78]),{12:[1,176],60:[1,175]},o($V01,[2,75],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),{3:38,4:$V3,5:22,11:177,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($V11,[2,13],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($V11,[2,14],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($V11,[2,15],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($V11,[2,16],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($V11,[2,17],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($V11,[2,18],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($V21,[2,19],{4:$Vo,28:$Vx,29:$Vy,30:$Vz,31:$VA,59:$VH,62:$VI}),o($V21,[2,20],{4:$Vo,28:$Vx,29:$Vy,30:$Vz,31:$VA,59:$VH,62:$VI}),o($V31,[2,21],{4:$Vo,31:$VA,59:$VH,62:$VI}),o($V31,[2,22],{4:$Vo,31:$VA,59:$VH,62:$VI}),o($V31,[2,23],{4:$Vo,31:$VA,59:$VH,62:$VI}),o([7,12,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,41,47,60,63,64,71,96,110,120,121],[2,24],{4:$Vo,59:$VH,62:$VI}),o($V41,[2,25],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($V41,[2,26],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($V51,[2,27],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,37:$VF,59:$VH,62:$VI}),o($V51,[2,28],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,37:$VF,59:$VH,62:$VI}),o([7,12,16,19,21,22,23,24,25,32,33,34,35,37,41,47,60,63,64,71,96,110,120,121],[2,33],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,38:[1,178],59:$VH,62:$VI}),o($V51,[2,35],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,37:$VF,59:$VH,62:$VI}),o($V61,[2,30],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($V61,[2,29],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($VJ,[2,61]),o($V51,[2,34],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,37:$VF,59:$VH,62:$VI}),o($V1,[2,96]),{47:[1,181],69:179,70:182,71:[1,183],72:180},o($VJ,[2,2]),{3:38,4:$V3,5:22,8:184,9:$VL,11:97,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{3:38,4:$V3,5:22,11:185,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($VJ,[2,93]),o($VM,[2,95]),o($VJ,[2,98]),o($VJ,[2,116]),o($VO,[2,120]),{3:38,4:$V3,5:22,11:186,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o([4,27,59,63,64,65,75,76,81,85,94,98,103,106,107,115,122,123],[2,74]),{12:[1,188],96:[1,187]},{96:[1,189]},o($V71,[2,106],{10:[1,190]}),{4:$V81,14:193,63:$V6,64:$V7,99:191,102:192},{14:195,63:$V6,64:$V7},{13:198,14:200,16:[1,199],63:$V6,64:$V7,120:[1,197],121:[1,196]},o($VJ,[2,124]),{116:[1,201],119:$VP},{12:$VR,47:[2,51]},o($VS,[2,47],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),{10:[1,202]},{4:$VT,14:113,56:203,63:$V6,64:$V7},{7:[1,204],12:$V_},{3:38,4:$V3,5:22,11:205,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($V$,[2,66]),{3:38,4:$V3,5:22,11:206,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($VJ,[2,79]),{3:38,4:$V3,5:22,11:207,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($V01,[2,76],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),{3:38,4:$V3,5:22,11:208,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($V1,[2,67]),o($VV,[2,71]),o($V1,[2,72]),{47:[1,209]},{3:38,4:$V3,5:22,11:211,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,67:210,73:$V9,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($VW,[2,7]),o($VW,[2,4],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI,110:[1,212]},o($VN,[2,99]),{4:$VX,14:161,16:$VY,63:$V6,64:$V7,91:213,95:214},o($VN,[2,101]),{3:38,4:$V3,5:22,11:215,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{7:[1,216],12:$V91},o($VW,[2,110]),o($VW,[2,112]),{4:$V81,14:193,63:$V6,64:$V7,99:218,102:192},{96:[2,97]},o($VJ,[2,127]),o($VQ,[2,126]),o($VZ,[2,11]),{3:38,4:$V3,5:22,11:219,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($VZ,[2,9],{10:[1,220]}),{117:[1,221]},{3:38,4:$V3,5:22,11:222,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($VW,[2,53]),o($VW,[2,55]),o($VS,[2,50],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($VU,[2,31],{4:$Vo,59:$VH}),o($V01,[2,77],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o([7,12,16,19,21,22,23,24,25,32,33,34,35,37,38,41,47,60,63,64,71,96,110,120,121],[2,32],{4:$Vo,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,59:$VH,62:$VI}),o($V1,[2,73]),{3:38,4:$V3,5:22,11:223,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,47:[2,68],59:$VH,62:$VI},o($VO,[2,121]),{96:[1,224]},{12:[1,225],96:[2,109]},o($V71,[2,105],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($V71,[2,108],{10:[1,226]}),{4:$V81,14:193,63:$V6,64:$V7,102:227},{7:[1,228],12:$V91},o($VZ,[2,12],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),{3:38,4:$V3,5:22,11:229,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},{118:[1,230]},o($VS,[2,48],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($VV,[2,69],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($VN,[2,100]),{4:$VX,14:161,63:$V6,64:$V7,95:214},{3:38,4:$V3,5:22,11:231,14:15,17:17,27:$V4,36:14,40:32,57:13,58:16,59:$V5,61:19,63:$V6,64:$V7,65:$V8,75:$Va,76:$Vb,77:25,78:26,79:27,80:28,81:$Vc,84:46,85:$Vd,92:40,94:$Vf,98:$Vg,103:$Vh,106:$Vi,107:$Vj,111:44,112:45,113:52,115:$Vk,122:$Vl,123:$Vm},o($VW,[2,111]),o($VW,[2,113]),o($VZ,[2,8],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI}),o($VJ,[2,125]),o($V71,[2,107],{4:$Vo,19:$Vp,21:$Vq,22:$Vr,23:$Vs,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,41:$VG,59:$VH,62:$VI})],
defaultActions: {4:[2,88],46:[2,131],195:[2,97]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	yy.setStr = function setStr(body, txt) {
		return body + txt;
	};

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
											 	yy.scope.beginParen();
											 	yy.scope.endParen(true);
											 	this.pushState('controlCode');
												return 97;
											 
break;
case 2:
												this.pushState('ifParen');
												return "IF(";
											 
break;
case 3:this.popState();return 60;
break;
case 4:
												this.pushState('paren');
												yy.scope.beginParen();
												return "(";
											 
break;
case 5:
												this.popState();
												this.pushState("controlCode");
												return "){";
											 
break;
case 6:
												this.popState();
												yy.scope.endParen(false);
												return ")";
											 
break;
case 7:return ",";
break;
case 8:return 16;
break;
case 9:this.pushState('inBacktick'); return 103;
break;
case 10:this.popState(); return 105;
break;
case 11:this.popState(); this.pushState('inBacktickExpr'); return 109;
break;
case 12:this.popState(); this.pushState('inBacktick'); return 110;
break;
case 13:return "BT_TEXT";
break;
case 14:
                                                if ((/^(\/|[a-z])/i).test(this._input)) {
													this.pushState("angleBracket");
													return "<";
												} else if ((/^\=/).test(this._input)) {
													yy_.yytext += "=";
													this.match += '=';
													this.matched += '=';
													this._input = this._input.substr(1);
													return "LTEQ"
												} else if ((/^\-/).test(this._input)) {
													yy_.yytext += "-";
													this.match += '-';
													this.matched += '-';
													this._input = this._input.substr(1);
													return "BY";
												}
												return "LT";
											 
break;
case 15:this.popState(); this.pushState("xmlBlockClose"); return "XML_BLOCK_END";
break;
case 16:this.popState(); this.pushState("xmlTagOpen"); return "XML_OPEN_ID";
break;
case 17:this.popState();
break;
case 18:this.popState(); return "XML_BLOCK_START";
break;
case 19:this.popState(); return "XML_SHORT_CLOSE";
break;
case 20:/* skip whitespace */
break;
case 21:this.popState(); return "XML_BLOCK_CLOSE";
break;
case 22:return "XML_CLOSE_ID";
break;
case 23:
	                                         	return (() => {
	                                         		let del_regex = /^r('''|"""|[\/"'@~%`])/;
	                                         		yy.regex.del = yy_.yytext.match(del_regex)[1];
	                                         		this.pushState("inRegex");
	                                         		return "REGEX_START";
	                                         	})();
                                            
break;
case 24:
												return (() => {
													let del = yy_.yytext.match(/^'''|"""|[/"'@~%`]/)[0];
													if (yy.regex.del === del) {
														yy.regex.modifiers = yy_.yytext.match(/[a-z]*$/i)[0];
														this.popState();
														return "REGEX_END";
													}
													return "REGEX_BODY";
												})();
											
break;
case 25:return "REGEX_BODY";
break;
case 26:this.pushState("declBracket"); return "[";
break;
case 27:this.popState();return "BECOMES";
break;
case 28:this.popState();return "]";
break;
case 29:this.pushState("declBracket"); return "[";
break;
case 30:return ",";
break;
case 31:
												if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                }
                                                return "PROPERTY";
                                            
break;
case 32:this.pushState("exprBracket");return 4;
break;
case 33:this.popState();return 7;
break;
case 34:
                                                 for (let [search, result] of yy.namedTokens) {
                                                 	if (search.test(yy_.yytext)) {
                                                 		if (typeof result === "function") {
                                                 			return result.call(this, yy_.yytext);
                                                 		}
                                                 		return result;
                                                 	}
                                                 }

                                                 if (/^\s*(\=|BECOMES?)/.test(this._input)) {
                                                 	return "NAME";
                                                 }
                                                 if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                }
                                                return "PROPERTY";
                                            
break;
case 35:
                                                return (() => {
	                                                const line_comment_regex = /^(?:\/[^\n]*(?=\n|$))/;
	                                                const block_comment_regex = /^(?:\*[\s\S]*?\*\/)/;
	                                                if (line_comment_regex.test(this._input)) {
	                                                    let match = this._input.match(line_comment_regex)[0];
	                                                    yy_.yytext += match;
	                                                    this.match += match;
	                                                    this.matched += match;
	                                                    this._input = this._input.substr(match.length + 1);
	                                                } else if (block_comment_regex.test(this._input)) {
	                                                	let match = this._input.match(block_comment_regex)[0];
	                                                	yy_.yytext += match;
	                                                    this._input = this._input.substr(match.length);
	                                                } else {
                                                		return "DIVIDE";
                                                	}
                                                })();
                                            
break;
case 36:this.pushState("controlCode");return "{";
break;
case 37:
												this.popState();
												return "}";
											 
break;
case 38:return "TO";
break;
case 39:return "QSTRING";
break;
case 40:return "ASTRING";
break;
case 41:return "GT";
break;
case 42:return "GTEQ";
break;
case 43:return "EQ";
break;
case 44:return "INEQ";
break;
case 45:return "AND";
break;
case 46:return "OR";
break;
case 47:return "INCREMENT";
break;
case 48:return "DECREMENT";
break;
case 49:return "PLUS";
break;
case 50:return "MINUS";
break;
case 51:return "TIMES";
break;
case 52:return "MODULUS";
break;
case 53:return "POWER";
break;
case 54:return ".";
break;
case 55:return ",";
break;
case 56:return "BECOMES";
break;
case 57:return ":";
break;
case 58:
                                                 for (let [search, result] of yy.namedTokens) {
                                                 	if (search.test(yy_.yytext)) {
                                                 		if (typeof result === "function") {
                                                 			return result.call(this, yy_.yytext);
                                                 		}
                                                 		return result;
                                                 	}
                                                 }
                                                 if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                 }
                                                 return "PROPERTY";
                                             
break;
case 59:return 76;
break;
case 60:return 47;
break;
case 61:return 83;
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\(\s*\)\s*\{)/i,/^(?:if\s*\()/i,/^(?:\))/i,/^(?:\()/i,/^(?:\)\s*\{)/i,/^(?:\))/i,/^(?:,)/i,/^(?:\.\.\.)/i,/^(?:`)/i,/^(?:`)/i,/^(?:\$\{)/i,/^(?:\})/i,/^(?:(\\`|[^\`\$]|\$[^\{\`])+)/i,/^(?:<)/i,/^(?:\/)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:.)/i,/^(?:>)/i,/^(?:\/>)/i,/^(?:\s+)/i,/^(?:>)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:r(?:'''|"""|[\/"'@~%`]))/i,/^(?:(?:'''|"""|[\/"'@~%`])[Agimnsuxy]{0,7})/i,/^(?:\S|\s)/i,/^(?:\[)/i,/^(?:=|becomes\b)/i,/^(?:\])/i,/^(?:\[)/i,/^(?:,)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:\/)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.\.)/i,/^(?:"(\\"|[^\"])*")/i,/^(?:'(\\'|[^\'])*')/i,/^(?:>)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:=)/i,/^(?::)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:[0-9]+(?:\.[0-9]+)?)/i,/^(?:;)/i,/^(?:$)/i],
conditions: {"controlCode":{"rules":[0,1,2,4,8,9,14,23,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"formalArguments":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"paren":{"rules":[0,1,2,4,5,6,7,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"ifParen":{"rules":[0,1,2,3,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"exprBracket":{"rules":[0,1,2,4,8,9,14,23,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"declRight":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"declBracket":{"rules":[0,1,2,4,8,9,14,23,28,29,30,31,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"declLeft":{"rules":[0,1,2,4,8,9,14,23,26,27,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"inRegex":{"rules":[24,25],"inclusive":false},"xmlBlockClose":{"rules":[20,21,22],"inclusive":false},"xmlTagOpen":{"rules":[0,1,2,4,8,9,14,18,19,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"angleBracket":{"rules":[15,16,17],"inclusive":false},"inBacktickExpr":{"rules":[0,1,2,4,8,9,12,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"inBacktick":{"rules":[10,11,13],"inclusive":false},"INITIAL":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}