/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,43],$V1=[4,13,29,64,65,66,74,76,77,81,83,85,90,93,95,100,101,106,109,110,118,125,126,127,128,129],$V2=[2,40],$V3=[1,54],$V4=[1,19],$V5=[1,35],$V6=[1,31],$V7=[1,32],$V8=[1,60],$V9=[1,53],$Va=[1,24],$Vb=[1,25],$Vc=[1,30],$Vd=[1,44],$Ve=[1,41],$Vf=[1,57],$Vg=[1,56],$Vh=[1,55],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,58],$Vm=[1,36],$Vn=[1,37],$Vo=[1,38],$Vp=[1,39],$Vq=[1,40],$Vr=[1,64],$Vs=[1,67],$Vt=[1,68],$Vu=[1,77],$Vv=[1,78],$Vw=[1,93],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[1,76],$VM=[4,7,13,15,18,19,24,26,27,28,29,30,31,32,33,34,35,36,37,39,40,43,49,63,64,65,72,98,113,123,124],$VN=[2,62],$VO=[1,95],$VP=[2,89],$VQ=[4,7,10,13,15,18,19,24,26,27,28,29,30,31,32,33,34,35,36,37,39,40,43,49,63,64,65,72,98,113,123,124],$VR=[2,93],$VS=[2,94],$VT=[1,109],$VU=[1,111],$VV=[1,114],$VW=[87,88],$VX=[4,13,29,52,54,55,56,57,64,65,66,74,76,77,81,85,90,93,95,100,101,106,109,110,118,125,126,127,128,129],$VY=[108,111,112],$VZ=[1,125],$V_=[4,13,29,64,65,66,74,76,77,81,85,90,95,100,101,106,109,110,118,125,126,127,128,129],$V$=[1,128],$V01=[19,49],$V11=[1,131],$V21=[1,132],$V31=[1,136],$V41=[4,7,10,19,24,26,27,28,29,30,31,32,33,34,35,36,37,39,43,45,49,63,99,100],$V51=[7,15,18,19,24,26,27,28,29,30,31,32,33,34,35,36,37,39,40,43,49,63,64,65,72,98,113,123,124],$V61=[49,72],$V71=[7,19],$V81=[4,7,13,19,24,26,27,28,29,30,31,32,33,34,35,36,37,39,43,63],$V91=[1,190],$Va1=[1,191],$Vb1=[18,64,65,123,124],$Vc1=[1,198],$Vd1=[15,19],$Ve1=[7,15,18,19,24,26,27,34,35,40,49,64,65,72,98,113,123,124],$Vf1=[7,15,18,19,24,26,27,28,29,34,35,36,37,39,40,43,49,64,65,72,98,113,123,124],$Vg1=[7,15,18,19,24,26,27,28,29,30,31,32,34,35,36,37,39,40,43,49,64,65,72,98,113,123,124],$Vh1=[7,15,18,19,34,35,40,49,64,65,72,98,113,123,124],$Vi1=[7,15,18,19,24,26,27,34,35,36,37,40,43,49,64,65,72,98,113,123,124],$Vj1=[7,15,18,19,40,49,64,65,72,98,113,123,124],$Vk1=[2,65],$Vl1=[19,98],$Vm1=[1,231],$Vn1=[7,19,49],$Vo1=[1,262];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"arrayStart":3,"[":4,"array":5,"arrayItems":6,"]":7,"arrayItem":8,"NAME":9,"BECOMES":10,"expr":11,"string":12,"(":13,"expr[a]":14,")":15,"expr[b]":16,"scopeDecl":17,"SPREAD":18,",":19,"attribute":20,"property":21,"attributeList":22,"binarySizeCmp":23,"SIZECMP":24,"binaryExpr":25,"EQ":26,"INEQ":27,"PLUS":28,"MINUS":29,"TIMES":30,"DIVIDE":31,"MODULUS":32,"POWER":33,"AND":34,"OR":35,"IN":36,"HAS":37,"id":38,"TO":39,"BY":40,"expr[c]":41,"unpackExpr":42,"FROM":43,"cast":44,":":45,"codeBlock":46,"decStatements":47,"controlCode":48,";":49,"stmt":50,"declaration":51,"LET":52,"decProperty":53,"PRIVATE":54,"PROTECTED":55,"PUBLIC":56,"USE":57,"decPropertyList":58,"decPropertyListAtom":59,"literal":60,"invokeExpr":61,"unaryExpr":62,".":63,"PROPERTY":64,"JSPROPERTY":65,"RANDOM":66,"ifStmt":67,"ifStmtLineStart":68,"ifStmtElseIfChain":69,"ifStmtEnd":70,"ifStmtElse":71,"ELSE":72,"ifStmtElseIf":73,"IF(":74,"invokeArgs":75,"BOOL":76,"NUMBER":77,"regex":78,"scope":79,"tag":80,"UNDEFINED":81,"program":82,"EOF":83,"randExpr":84,"REGEX_START":85,"regexBody":86,"REGEX_END":87,"REGEX_BODY":88,"returnStmt":89,"RETURN":90,"scopeArgumentSpread":91,"scopeStart":92,"}":93,"scopeAsyncFlag":94,"ASYNC":95,"scopeDeclStart":96,"scopeArguments":97,"){":98,"(){":99,"{":100,"FUNCTION":101,"scopeArgumentsList":102,"scopeArguments[a]":103,"scopeArguments[b]":104,"scopeArgumentsListAtom":105,"BT_OPEN":106,"stringBody":107,"BT_CLOSE":108,"QSTRING":109,"ASTRING":110,"BT_TEXT":111,"BT_EXPR_OPEN":112,"BT_EXPR_CLOSE":113,"tagShort":114,"tagBlock":115,"tagBlockStart":116,"tagBlockEnd":117,"<":118,"XML_BLOCK_END":119,"XML_CLOSE_ID":120,"XML_BLOCK_CLOSE":121,"XML_OPEN_ID":122,"XML_BLOCK_START":123,"XML_SHORT_CLOSE":124,"INCREMENT":125,"DECREMENT":126,"AWAIT":127,"INCLUDE":128,"NOT":129,"$accept":0,"$end":1},
terminals_: {2:"error",4:"[",7:"]",9:"NAME",10:"BECOMES",13:"(",14:"expr[a]",15:")",16:"expr[b]",18:"SPREAD",19:",",24:"SIZECMP",26:"EQ",27:"INEQ",28:"PLUS",29:"MINUS",30:"TIMES",31:"DIVIDE",32:"MODULUS",33:"POWER",34:"AND",35:"OR",36:"IN",37:"HAS",39:"TO",40:"BY",41:"expr[c]",43:"FROM",45:":",49:";",52:"LET",54:"PRIVATE",55:"PROTECTED",56:"PUBLIC",57:"USE",63:".",64:"PROPERTY",65:"JSPROPERTY",66:"RANDOM",72:"ELSE",74:"IF(",76:"BOOL",77:"NUMBER",81:"UNDEFINED",83:"EOF",85:"REGEX_START",87:"REGEX_END",88:"REGEX_BODY",90:"RETURN",93:"}",95:"ASYNC",98:"){",99:"(){",100:"{",101:"FUNCTION",103:"scopeArguments[a]",104:"scopeArguments[b]",106:"BT_OPEN",108:"BT_CLOSE",109:"QSTRING",110:"ASTRING",111:"BT_TEXT",112:"BT_EXPR_OPEN",113:"BT_EXPR_CLOSE",118:"<",119:"XML_BLOCK_END",120:"XML_CLOSE_ID",121:"XML_BLOCK_CLOSE",122:"XML_OPEN_ID",123:"XML_BLOCK_START",124:"XML_SHORT_CLOSE",125:"INCREMENT",126:"DECREMENT",127:"AWAIT",128:"INCLUDE",129:"NOT"},
productions_: [0,[3,1],[5,3],[5,2],[8,3],[8,3],[8,5],[8,1],[8,1],[8,2],[6,1],[6,3],[20,3],[20,1],[22,0],[22,2],[22,3],[23,3],[25,1],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,5],[25,5],[25,3],[25,3],[25,3],[44,2],[46,2],[48,0],[48,3],[48,2],[47,0],[47,3],[51,2],[51,2],[51,2],[51,2],[51,2],[53,3],[53,5],[53,1],[53,1],[53,4],[53,3],[58,1],[58,3],[59,1],[59,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,1],[38,3],[38,3],[38,3],[38,4],[67,4],[71,2],[73,3],[69,0],[69,2],[70,1],[70,2],[68,3],[75,1],[75,2],[75,3],[61,3],[61,4],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[82,2],[21,1],[21,1],[84,1],[84,2],[78,3],[86,0],[86,2],[89,3],[91,2],[79,3],[79,4],[94,1],[17,3],[17,4],[96,4],[96,4],[96,6],[96,6],[96,4],[96,4],[96,2],[96,2],[92,4],[92,6],[92,4],[92,2],[92,2],[92,1],[97,3],[97,1],[97,5],[97,3],[97,3],[102,1],[102,3],[105,1],[105,3],[50,1],[50,1],[12,3],[12,1],[12,1],[107,0],[107,2],[107,4],[80,1],[80,1],[115,3],[117,4],[116,4],[114,4],[62,2],[62,2],[62,2],[62,2],[62,2],[62,2],[42,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
yy.array.begin();
break;
case 2:

			this.$ = (function () {
				let result = yy.array.active.toScope();
				yy.array.end();
				return `scope.array(${result})`;
			}());
		
break;
case 3:

			yy.array.end();
			this.$ = `scope.array()`;
		
break;
case 4:

			yy.array.active.push(`"${$$[$0-2]}"`, $$[$0]);
		
break;
case 5:

			yy.array.active.push($$[$0-2], $$[$0]);
		
break;
case 6:

			yy.array.active.push($$[$0-3], $$[$0]);
		
break;
case 7:

			yy.array.active.push(`"${$$[$0].name}"`, $$[$0].expr);
		
break;
case 8:

			yy.array.active.push($$[$0]);
		
break;
case 9:

			yy.array.active.pushSpread($$[$0]);
		
break;
case 12:

			this.$ = [$$[$0-2], $$[$0]];
		
break;
case 13:

			this.$ = [$$[$0], undefined];
		
break;
case 14: case 40: case 98: case 135:
this.$ = "";
break;
case 15:

			if ($$[$0-1] !== "") {
				$$[$0-1] += ",";
			}
			this.$ = (function () {
				if ($$[$0][1] === undefined) {
					return `${$$[$0-1]}${$$[$0][0]}`;
				}
				return `${$$[$0-1]}"${$$[$0][0]}":${$$[$0][1]}`;
			}());
		
break;
case 16:

			if ($$[$0-2] !== "") {
				$$[$0-2] += ",";
			}
			this.$ = `${$$[$0-2]}...scope.asObj(${$$[$0]})`;
		
break;
case 17:
this.$ = `scope.sizeCmp(${$$[$0-2]}, ${$$[$0]}, "${$$[$0-1]}")`;
break;
case 18: case 56: case 60: case 63: case 64: case 66: case 79: case 84: case 86: case 87: case 88: case 89: case 90: case 93: case 94: case 101: case 130: case 131: case 138: case 139: case 150:
this.$ = $$[$0];
break;
case 19:
this.$ = `Object.is(${$$[$0-2]},${$$[$0]})`;
break;
case 20:
this.$ = `!Object.is(${$$[$0-2]},${$$[$0]})`;
break;
case 21:
this.$ = `(${$$[$0-2]}+${$$[$0]})`;
break;
case 22:
this.$ = `(${$$[$0-2]}-${$$[$0]})`;
break;
case 23:
this.$ = `(${$$[$0-2]}*${$$[$0]})`;
break;
case 24:
this.$ = `(${$$[$0-2]}/${$$[$0]})`;
break;
case 25:
this.$ = `(${$$[$0-2]}%${$$[$0]})`;
break;
case 26:
this.$ = `(${$$[$0-2]}^${$$[$0]})`;
break;
case 27:
this.$ = `(${$$[$0-2]}&&${$$[$0]})`;
break;
case 28:
this.$ = `(${$$[$0-2]}||${$$[$0]})`;
break;
case 29:
this.$ = `scope.in(${$$[$0-2]}, ${$$[$0]})`;
break;
case 30:
this.$ = `scope.has(${$$[$0-2]}, ${$$[$0]})`;
break;
case 31:
this.$ = `scope.set(this._scoping,"${$$[$0-2]}",${$$[$0]})`;
break;
case 32:
this.$ = `scope.set(${$$[$0-2].parent},${$$[$0-2].prop},${$$[$0]})`;
break;
case 33:
this.$ = `${$$[$0-4]}.push(${$$[$0]})`;
break;
case 34:
this.$ = `scope.range(${$$[$0-4]},${$$[$0-2]},${$$[$0]})`;
break;
case 35:
this.$ = `scope.range(${$$[$0-2]},${$$[$0]})`;
break;
case 36: case 37:
this.$ = `scope.unpack(${$$[$0]}).using(${$$[$0-2]})`;
break;
case 38:

			this.$ = (function () {
				let t = $$[$0-1];
				let types = [
					["number", "Number"] ,
					["bool(ean)?", "Boolean"],
					["string", "String"],
					["regex", "XRegExp"],
					["array", "Array"]
				];

				for (let [search, replace] of types) {
					let r = new RegExp("^(?:" + search + ")$", "i");
					if (r.test(t)) {
						t = replace;
						break;
					}
				}

				//console.log("got cast:");
				//console.log(`${t}:`);
				return `scope.id.${t}`;
			}());
		
break;
case 41: case 44:
yy.scope.pushStmt($$[$0-1]);
break;
case 42:
yy.scope.pushStmt($$[$0]);
break;
case 45:
this.$ = `scope.declare("let", ${$$[$0]})`;
break;
case 46:
this.$ = `scope.declare("private", ${$$[$0]})`;
break;
case 47:
this.$ = `scope.declare("protected", ${$$[$0]})`;
break;
case 48:
this.$ = `scope.declare("public", ${$$[$0]})`;
break;
case 49:
this.$ = `scope.use(scope.id["${$$[$0]}"])`;
break;
case 50:
this.$ = `["${$$[$0-2]}",${$$[$0]}]`;
break;
case 51:
this.$ = `[[${$$[$0-3]}],${$$[$0]}]`;
break;
case 52:
this.$ = `["${$$[$0]}",]`;
break;
case 53:
this.$ = `["${$$[$0].name}", ${$$[$0].expr}]`;
break;
case 54:
this.$ = `["${$$[$0-2]}",${$$[$0]},${$$[$0-3]}]`;
break;
case 55: case 57:
this.$ = `${$$[$0-2]},${$$[$0]}`;
break;
case 58: case 128:
this.$ = `"${$$[$0]}"`;
break;
case 59:
this.$ = `[${$$[$0-1]}]`;
break;
case 61:
this.$ = $$[$0].value;
break;
case 62:
this.$ = `scope.id["${$$[$0]}"]`;
break;
case 65:
this.$ = '(' + $$[$0-1] + ')';
break;
case 67:
this.$ = {parent: $$[$0-2], prop: `"${$$[$0]}"`, value:`${$$[$0-2]}["${$$[$0]}"]`};
break;
case 68: case 69:
this.$ = {parent: $$[$0-2], prop: `"${$$[$0]}"`, value:`${$$[$0-2]}.${$$[$0]}`};
break;
case 70:
this.$ = {parent: $$[$0-3], prop: $$[$0-1], value:`${$$[$0-3]}[${$$[$0-1]}]`};
break;
case 71:

			this.$ = (function () {
				let result = $$[$0-3];
				result += `{
					let expr = ${$$[$0-2]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result + $$[$0-1] + $$[$0];
			}());
		
break;
case 72:

			this.$ = (function () {
				let result = `else`;
				result += `{
					let expr = ${$$[$0]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result;
			}());
		
break;
case 73:

			this.$ = (function () {
				let result = `else ${$$[$0-1]}`;
				result += `{
					let expr = ${$$[$0]};
					if (typeof expr === "function") {
						let result = expr();
						if (expr._hasReturn) {
							return result;
						}
					}
				}`;
				return result;
			}());
		
break;
case 74: case 76:
this.$ = '';
break;
case 75:
this.$ = $$[$0-1] + $$[$0];
break;
case 77:
this.$ = $$[$0-1];
break;
case 78:
this.$ = `if(scope.toBoolean(${$$[$0-1]}))`;
break;
case 80:
this.$ = "..." + $$[$0];
break;
case 81:
this.$ = $$[$0-2] + "," + $$[$0];
break;
case 82:
this.$ = `(${$$[$0-2]}())`;
break;
case 83:
this.$ = `(${$$[$0-3]}(${$$[$0-1]}))`;
break;
case 85:
this.$ = $$[$0].toLowerCase();
break;
case 91:
this.$ = undefined;
break;
case 92:
return yy.scope.expressions;
break;
case 95:
this.$ = 'scope.random()';
break;
case 96:
this.$ = `scope.random(${$$[$0]})`;
break;
case 97:

			this.$ = (function () {
				let modifiers = yy.regex.modifiers;
				if (modifiers.length > 0) {
					return `XRegExp("${$$[$0-1]}", "${modifiers}")`;
				}
				return `XRegExp("${$$[$0-1]}")`;
			}());
		
break;
case 99:

			this.$ = $$[$0-1] + $$[$0].replace(/\"/g, '\\"').replace(/\n/g,'\\n');
		
break;
case 100:

			yy.scope.hasReturn = true;
			this.$ = `return ${$$[$0-1]};`;
		
break;
case 102:

			this.$ = $$[$0-2] + 
				'this._hasReturn=true;' + 
				'this._scoping=scope._scoping;' +
				yy.scope.toJS() + 
				';this._hasReturn=false},' + 
				yy.scope.hasReturn + 
			')';
			yy.scope.end();
		
break;
case 103:

			this.$ =$$[$0-2] + 
				'this._hasReturn=true;' + 
				'this._scoping=scope._scoping;' +
				yy.scope.toJS() + 
				';this._hasReturn=false},' + 
				yy.scope.hasReturn + 
			')';
			yy.scope.end();
		
break;
case 104:
yy.scope.setAsync();
break;
case 105:

			//console.log("scopeDecl:");
			//console.log($$[$0-2]);
			this.$ = {
				name: $$[$0-2].name,
				expr: 
					$$[$0-2].expr + 
					'this._hasReturn=true;' + 
					'this._scoping=scope._scoping;' +
					yy.scope.toJS() + 
					';this._hasReturn=false},' + 
					yy.scope.hasReturn + 
				')'
			};
			yy.scope.end();
		
break;
case 106:

			//console.log("scopeDecl:");
			//console.log($$[$0-2]);
			this.$ = {
				name: $$[$0-2].name,
				expr: $$[$0-2].expr + 
					'this._hasReturn=true;' + 
					'this._scoping=scope._scoping;' +
					yy.scope.toJS() + 
					';this._hasReturn=false},' + 
					yy.scope.hasReturn + 
				')'
			};
			yy.scope.end();
		
break;
case 107:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(${async}function(...args){${args}`
				};
			}());
		
break;
case 108:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(${async}function ${$$[$0-3]}(...args){${args}`
				};
			}());
		
break;
case 109:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				let argsLength = yy.scope.argsLength;
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args.slice(${argsLength})]);`;
				yy.scope.begin();
				return {
					name: $$[$0-5],
					expr: `scope.createScope(${async}function(...args){${args}${spread}`
				};
			}());
		
break;
case 110:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				let argsLength = yy.scope.argsLength;
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args.slice(${argsLength})]);`;
				yy.scope.begin();
				return {
					name: $$[$0-5],
					expr: `scope.createScope(${async}function ${$$[$0-5]}(...args){${args}${spread}`
				};
			}());
		
break;
case 111:

			yy.scope.endParen(true);
			this.$ = (function () {
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args]);`;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(${async}function(...args){${spread}`
				};
			}());
		
break;
case 112:

			yy.scope.endParen(true);
			this.$ = (function () {
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args]);`;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return {
					name: $$[$0-3],
					expr: `scope.createScope(${async}function ${$$[$0-3]}(...args){${spread}`
				};
			}());
		
break;
case 113: case 114:

			this.$ = (function () {
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				let fnName = $$[$0-1]
				if (/\-/.test($$[$0-1])) {
					fnName = "";
				}
				return {
					name: $$[$0-1],
					expr: `scope.createScope(${async}function ${fnName}(){`
				};
			}());
			
		
break;
case 115:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return `scope.createScope(${async}function(...args){${args}`;
			}());
		
break;
case 116:

			yy.scope.endParen(true);
			this.$ = (function () {
				let args = yy.scope.argsDecl;
				let async = yy.scope.asyncFlag;
				let argsLength = yy.scope.argsLength;
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args.slice(${argsLength})]);`;
				yy.scope.begin();
				return `scope.createScope(${async}function(...args){${args}${spread}`;
			}());
		
break;
case 117:

			yy.scope.endParen(true);
			this.$ = (function () {
				let spreadProp = $$[$0-1];
				let spread = `scope.declare("let", ["${spreadProp}",args]);`;
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return `scope.createScope(${async}function(...args){${spread}`;
			}());
		
break;
case 118: case 119: case 120:

			this.$ = (function () {
				let async = yy.scope.asyncFlag;
				yy.scope.begin();
				return `scope.createScope(${async}function(){`;
			}());
		
break;
case 121:

			this.$ = yy.scope.pushArg(`"${$$[$0-2]}"`, $$[$0]);
		
break;
case 122:

			this.$ = yy.scope.pushArg(`"${$$[$0]}"`);
		
break;
case 123:

			this.$ = yy.scope.pushArg(`[${$$[$0-3]}]`, $$[$0]);
		
break;
case 124:

			this.$ = yy.scope.pushArg(`[${$$[$0-1]}]`);
		
break;
case 125:
this.$ = yy.scope.args;
break;
case 126:
this.$ = $$[$0]
break;
case 127:
this.$ = $$[$0-2] + ',' + $$[$0]
break;
case 129:
this.$ = '[' + $$[$0-1] + ']';
break;
case 132:
 this.$ = '`' + $$[$0-1] + '`'; 
break;
case 133: case 134:
this.$ = $$[$0].replace(/\n/g, '\\n');
break;
case 136:

			this.$ = yy.setStr($$[$0-1], $$[$0]);
		
break;
case 137:

			this.$ = yy.setStr($$[$0-3], '${' + $$[$0-1] + '}');
		
break;
case 140:

			this.$ = (function () {
				let tag = $$[$0-2];

				if (tag.tagName !== $$[$0]) {
					yy.parseError(`Tag mismatch: `, {
						text: `</${$$[$0]}>`,
						token: yytext,
						line: yylineno,
						solution: `Change ${$$[$0]} to ${tag.tagName}, or the other way around.`,
						recoverable: true
					});
				}

				return tag.toJS();
			}());
			yy.scope.end();
		
break;
case 141:

			this.$ = $$[$0-1];
		
break;
case 142:

			this.$ = (function () {
				let parent = yy.scope;
				yy.scope.begin();
				//console.log($$[$0-2], yy.scope.expressions);
				return new yy.xml.Tag($$[$0-2], $$[$0-1], yy.scope.expressions, parent);
			}());
		
break;
case 143:
this.$ = (new yy.xml.Tag($$[$0-2], $$[$0-1], [], yy.scope.expressions)).toJS();
break;
case 144:
this.$ = '-' + $$[$0]
break;
case 145:
this.$ = '++' + $$[$0];
break;
case 146:
this.$ = '--' + $$[$0];
break;
case 147:
this.$ = `(await (async ()=>{let r = await ${$$[$0]};scope._scoping = this._scoping;return r;})())`;
break;
case 148:

			yy.lexer._more = true;
			this.$ = (function () {
				console.log("script dir:", yy.script_dir);
				let f = path.join(yy.script_dir,$$[$0].substr(1,$$[$0].length-2));
				console.log("include:",f);
				//console.log(yy.lexer);
				let r = yy.parser.include(f);
				//console.log(r);
				return r;
			}());
		
break;
case 149:
this.$ = '!' + $$[$0];
break;
}
},
table: [o([4,13,29,52,54,55,56,57,64,65,66,74,76,77,81,83,85,90,95,100,101,106,109,110,118,125,126,127,128,129],$V0,{82:1,46:2,47:3}),{1:[3]},{83:[1,4]},o($V1,$V2,{48:5,51:6,52:[1,7],54:[1,8],55:[1,9],56:[1,10],57:[1,11]}),{1:[2,92]},o([83,93],[2,39],{11:12,50:13,60:14,38:15,21:16,61:17,25:18,62:20,89:21,67:22,5:23,78:26,79:27,12:28,80:29,23:33,42:34,68:42,3:43,92:45,94:46,114:50,115:51,84:52,116:59,4:$V3,13:$V4,29:$V5,64:$V6,65:$V7,66:$V8,74:$V9,76:$Va,77:$Vb,81:$Vc,85:$Vd,90:$Ve,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq}),{49:[1,61]},{4:$Vr,17:65,21:63,44:66,53:62,64:$Vs,65:$Vt,94:70,95:$Vf,96:69},{4:$Vr,17:65,21:63,44:66,53:71,64:$Vs,65:$Vt,94:70,95:$Vf,96:69},{4:$Vr,17:65,21:63,44:66,53:72,64:$Vs,65:$Vt,94:70,95:$Vf,96:69},{4:$Vr,17:65,21:63,44:66,53:73,64:$Vs,65:$Vt,94:70,95:$Vf,96:69},{21:74,64:$V6,65:$V7},{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,49:[1,75],63:$VL},o($V1,[2,42]),o($VM,[2,60]),o($VM,[2,61],{10:[1,94]}),o($VM,$VN,{10:$VO}),o($VM,[2,63]),o($VM,[2,64]),{3:43,4:$V3,5:23,11:96,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($VM,[2,66]),o($V1,[2,130]),o($V1,[2,131]),o($VM,[2,84]),o($VM,[2,85]),o($VM,[2,86]),o($VM,[2,87]),o($VM,[2,88]),o($VM,$VP),o($VM,[2,90]),o($VM,[2,91]),o($VQ,$VR),o($VQ,$VS),o($VM,[2,18]),{43:[1,97]},{3:43,4:$V3,5:23,11:98,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:99,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:100,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:101,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{12:102,106:$Vi,109:$Vj,110:$Vk},{3:43,4:$V3,5:23,11:103,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:104,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:105,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,6:106,7:[1,107],8:108,9:$VT,11:113,12:110,13:$VU,17:112,18:$VV,21:116,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$Vs,65:$Vt,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:115,95:$Vf,96:69,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($VW,[2,98],{86:117}),o($VX,$V0,{47:3,46:118}),{92:119,100:$Vg,101:$Vh},o($VY,[2,135],{107:120}),o($VQ,[2,133]),o($VQ,[2,134]),o($VM,[2,138]),o($VM,[2,139]),{43:[2,150]},{3:43,4:$V3,5:23,11:121,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o([4,7,9,13,18,29,64,65,66,76,77,81,85,95,100,101,106,109,110,118,125,126,127,128,129],[2,1]),{13:[1,122],99:[1,123],100:[1,124]},o($VX,[2,120]),o([64,65,100,101],[2,104]),{122:$VZ},o($V_,$V2,{48:126}),{3:43,4:$V3,5:23,11:127,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,43:[2,95],60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o([4,13,29,52,54,55,56,57,64,65,66,74,76,77,81,83,85,90,93,95,100,101,106,109,110,118,125,126,127,128,129],[2,44]),{19:$V$,49:[2,45]},o($V01,[2,52],{10:[1,129],45:[1,130],99:$V11,100:$V21}),{4:$V31,21:135,58:133,59:134,64:$V6,65:$V7},o($V01,[2,53]),{21:137,64:$V6,65:$V7},o($V41,$VR,{13:[1,138]}),o($V41,$VS,{13:[1,139]}),o($VX,$V0,{47:3,46:140}),{21:142,64:$Vs,65:$Vt,96:141},{19:$V$,49:[2,46]},{19:$V$,49:[2,47]},{19:$V$,49:[2,48]},{49:[2,49]},o($V1,[2,41]),{64:[1,143],65:[1,144],66:[1,145]},{3:43,4:$V3,5:23,7:[1,147],11:146,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:150,12:28,13:$V4,15:[1,148],18:[1,151],21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,75:149,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:152,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:153,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:154,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:155,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:156,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:157,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:158,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:159,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:160,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:161,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:162,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:163,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:164,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:165,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:166,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:167,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:168,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{4:$Vu,13:$Vv,15:[1,169],24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL},{3:43,4:$V3,5:23,11:170,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($V51,[2,144],{4:$Vu,13:$Vv}),o($V51,[2,145],{4:$Vu,13:$Vv}),o($V51,[2,146],{4:$Vu,13:$Vv}),o($V51,[2,147],{4:$Vu,13:$Vv}),o($VM,[2,148]),o($V51,[2,149],{4:$Vu,13:$Vv}),{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,49:[1,171],63:$VL},o($V61,[2,74],{69:172,4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),{7:[1,173],19:[1,174]},o($VM,[2,3]),o($V71,[2,10]),{10:[1,175]},o($V81,$VP,{10:[1,176]}),{3:43,4:$V3,5:23,11:177,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($V71,[2,7]),o($V71,[2,8],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),{3:43,4:$V3,5:23,11:178,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{21:142,64:$Vs,65:$Vt,92:119,96:141,100:$Vg,101:$Vh},o($V81,$VN,{10:$VO,99:$V11,100:$V21}),{87:[1,179],88:[1,180]},{93:[1,181]},o($VX,$V0,{47:3,46:182}),{108:[1,183],111:[1,184],112:[1,185]},{4:$Vu,13:$Vv,15:[1,186],24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL},{4:$V91,18:$Va1,21:189,64:$V6,65:$V7,91:188,97:187},o($VX,[2,118]),o($VX,[2,119]),o($Vb1,[2,14],{22:192}),{3:43,4:$V3,5:23,11:12,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,50:13,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,67:22,68:42,74:$V9,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,89:21,90:$Ve,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,117:193,118:[1,194],125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:[2,96],63:$VL},{4:$Vr,17:65,21:63,44:66,53:195,64:$Vs,65:$Vt,94:70,95:$Vf,96:69},{3:43,4:$V3,5:23,11:196,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o([64,65],[2,38]),o($VX,[2,113]),o($VX,[2,114]),{7:[1,197],19:$Vc1},o($V71,[2,56]),o($V71,[2,58]),{4:$V31,21:135,58:199,59:134,64:$V6,65:$V7},{10:[1,200]},{4:$V91,18:$Va1,21:189,64:$V6,65:$V7,91:202,97:201},{4:$V91,18:$Va1,21:189,64:$V6,65:$V7,91:204,97:203},{93:[1,205]},o($VX,$V0,{47:3,46:206}),{99:$V11,100:$V21},o($VQ,[2,67]),o($VQ,[2,68]),o($VQ,[2,69]),{4:$Vu,7:[1,207],13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL},{10:[1,208]},o($VM,[2,82]),{15:[1,209],19:[1,210]},o($Vd1,[2,79],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),{3:43,4:$V3,5:23,11:211,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($Ve1,[2,19],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($Ve1,[2,20],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($Vf1,[2,21],{4:$Vu,13:$Vv,30:$VB,31:$VC,32:$VD,33:$VE,63:$VL}),o($Vf1,[2,22],{4:$Vu,13:$Vv,30:$VB,31:$VC,32:$VD,33:$VE,63:$VL}),o($Vg1,[2,23],{4:$Vu,13:$Vv,33:$VE,63:$VL}),o($Vg1,[2,24],{4:$Vu,13:$Vv,33:$VE,63:$VL}),o($Vg1,[2,25],{4:$Vu,13:$Vv,33:$VE,63:$VL}),o([7,15,18,19,24,26,27,28,29,30,31,32,33,34,35,36,37,39,40,43,49,64,65,72,98,113,123,124],[2,26],{4:$Vu,13:$Vv,63:$VL}),o($Vh1,[2,27],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($Vh1,[2,28],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($Vi1,[2,29],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,39:$VJ,63:$VL}),o($Vi1,[2,30],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,39:$VJ,63:$VL}),o([7,15,18,19,24,26,27,34,35,36,37,39,43,49,64,65,72,98,113,123,124],[2,35],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,40:[1,212],63:$VL}),o($Vi1,[2,37],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,39:$VJ,63:$VL}),o($Ve1,[2,17],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($Vj1,[2,32],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($Vj1,[2,31],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($VM,$Vk1),o($Vi1,[2,36],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,39:$VJ,63:$VL}),o($V1,[2,100]),{49:[1,215],70:213,71:216,72:[1,217],73:214},o($VM,[2,2]),{3:43,4:$V3,5:23,8:218,9:$VT,11:113,12:110,13:$VU,17:112,18:$VV,21:116,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$Vs,65:$Vt,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:115,95:$Vf,96:69,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:219,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{3:43,4:$V3,5:23,11:220,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{4:$Vu,13:$Vv,15:[1,221],24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL},o($V71,[2,9],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($VM,[2,97]),o($VW,[2,99]),o($VM,[2,102]),{93:[1,222]},o($VQ,[2,132]),o($VY,[2,136]),{3:43,4:$V3,5:23,11:223,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o([4,13,29,64,65,66,76,77,81,85,95,100,101,106,109,110,118,125,126,127,128,129],[2,78]),{19:[1,225],98:[1,224]},{98:[1,226]},o($Vl1,[2,122],{10:[1,227]}),{4:$Vm1,21:230,64:$V6,65:$V7,102:228,105:229},{21:232,64:$V6,65:$V7},{18:[1,236],20:235,21:237,64:$V6,65:$V7,123:[1,234],124:[1,233]},o($VM,[2,140]),{119:[1,238],122:$VZ},{19:$V$,49:[2,55]},o($V01,[2,50],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),{10:[1,239]},{4:$V31,21:135,59:240,64:$V6,65:$V7},{7:[1,241],19:$Vc1},{3:43,4:$V3,5:23,11:242,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{19:[1,244],98:[1,243]},{98:[1,245]},{19:[1,247],98:[1,246]},{98:[1,248]},o($Vn1,[2,105]),{93:[1,249]},o($VQ,[2,70]),{3:43,4:$V3,5:23,11:250,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($VM,[2,83]),{3:43,4:$V3,5:23,11:251,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($Vd1,[2,80],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),{3:43,4:$V3,5:23,11:252,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($V1,[2,71]),o($V61,[2,75]),o($V1,[2,76]),{49:[1,253]},{3:43,4:$V3,5:23,11:255,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,68:254,74:$V9,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($V71,[2,11]),o($V71,[2,4],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($V71,[2,5],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($V81,$Vk1,{10:[1,256]}),o($VM,[2,103]),{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL,113:[1,257]},o($VX,[2,115]),{4:$V91,18:$Va1,21:189,64:$V6,65:$V7,91:258,97:259},o($VX,[2,117]),{3:43,4:$V3,5:23,11:260,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{7:[1,261],19:$Vo1},o($V71,[2,126]),o($V71,[2,128]),{4:$Vm1,21:230,64:$V6,65:$V7,102:263,105:229},{98:[2,101]},o($VM,[2,143]),o($V_,[2,142]),o($Vb1,[2,15]),{3:43,4:$V3,5:23,11:264,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($Vb1,[2,13],{10:[1,265]}),{120:[1,266]},{3:43,4:$V3,5:23,11:267,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($V71,[2,57]),o($V71,[2,59]),o($V01,[2,54],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($VX,[2,107]),{4:$V91,18:$Va1,21:189,64:$V6,65:$V7,91:268,97:259},o($VX,[2,111]),o($VX,[2,108]),{4:$V91,18:$Va1,21:189,64:$V6,65:$V7,91:269,97:259},o($VX,[2,112]),o($Vn1,[2,106]),o($V51,[2,33],{4:$Vu,13:$Vv}),o($Vd1,[2,81],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o([7,15,18,19,24,26,27,34,35,36,37,39,40,43,49,64,65,72,98,113,123,124],[2,34],{4:$Vu,13:$Vv,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,63:$VL}),o($V1,[2,77]),{3:43,4:$V3,5:23,11:270,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,49:[2,72],63:$VL},{3:43,4:$V3,5:23,11:271,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($VY,[2,137]),{98:[1,272]},{19:[1,273],98:[2,125]},o($Vl1,[2,121],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($Vl1,[2,124],{10:[1,274]}),{4:$Vm1,21:230,64:$V6,65:$V7,105:275},{7:[1,276],19:$Vo1},o($Vb1,[2,16],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),{3:43,4:$V3,5:23,11:277,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},{121:[1,278]},o($V01,[2,51],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),{98:[1,279]},{98:[1,280]},o($V61,[2,73],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($V71,[2,6],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($VX,[2,116]),{4:$V91,21:189,64:$V6,65:$V7,97:259},{3:43,4:$V3,5:23,11:281,12:28,13:$V4,21:16,23:33,25:18,29:$V5,38:15,42:34,60:14,61:17,62:20,64:$V6,65:$V7,66:$V8,76:$Va,77:$Vb,78:26,79:27,80:29,81:$Vc,84:52,85:$Vd,92:45,94:46,95:$Vf,100:$Vg,101:$Vh,106:$Vi,109:$Vj,110:$Vk,114:50,115:51,116:59,118:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:$Vq},o($V71,[2,127]),o($V71,[2,129]),o($Vb1,[2,12],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL}),o($VM,[2,141]),o($VX,[2,109]),o($VX,[2,110]),o($Vl1,[2,123],{4:$Vu,13:$Vv,24:$Vw,26:$Vx,27:$Vy,28:$Vz,29:$VA,30:$VB,31:$VC,32:$VD,33:$VE,34:$VF,35:$VG,36:$VH,37:$VI,39:$VJ,43:$VK,63:$VL})],
defaultActions: {4:[2,92],52:[2,150],74:[2,49],232:[2,101]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const fs = require('fs');
	const path = require('path');
	const arini_dir = path.dirname(path.dirname(process.argv[1]));
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true,"easy_keyword_rules":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	yy.setStr = function setStr(body, txt) {
		return body + txt;
	};
	//console.log(this);

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
												if (this.topState() === "declLeft") {
													//console.log("\n\n\nEurika!\n\n\n");
													this.popState();
												}
											 	yy.scope.beginParen();
											 	yy.scope.endParen(true);
											 	this.pushState('controlCode');
												return 99;
											 
break;
case 2:
												this.pushState('ifParen');
												return "IF(";
											 
break;
case 3:this.popState();return 15;
break;
case 4:
												if (this.topState() === "declLeft") {
													//console.log("\n\n\nEurika!\n\n\n");
													this.popState();
												}
												this.pushState('paren');
												yy.scope.beginParen();
												return "(";
											 
break;
case 5:

												this.popState();
												this.pushState("controlCode");
												return "){";
											 
break;
case 6:
												this.popState();
												yy.scope.endParen(false);
												return ")";
											 
break;
case 7:return ",";
break;
case 8:return 18;
break;
case 9:this.pushState('inBacktick'); return 106;
break;
case 10:this.popState(); return 108;
break;
case 11:this.popState(); this.pushState('inBacktickExpr'); return 112;
break;
case 12:this.popState(); this.pushState('inBacktick'); return 113;
break;
case 13:return "BT_TEXT";
break;
case 14:
                                                if ((/^(\/|[a-z])/i).test(this._input)) {
													this.pushState("angleBracket");
													return "<";
												} else if ((/^\=/).test(this._input)) {
													yy_.yytext += "=";
													//this.match += '=';
													this.matched += '=';
													this._input = this._input.substr(1) || "";
													return "SIZECMP"
												} else if ((/^\-/).test(this._input)) {
													yy_.yytext += "-";
													this.match += '-';
													this.matched += '-';
													this._input = this._input.substr(1) || "";
													return "BY";
												}
												return "SIZECMP";
											 
break;
case 15:this.popState(); this.pushState("xmlBlockClose"); return "XML_BLOCK_END";
break;
case 16:this.popState(); this.pushState("xmlTagOpen"); return "XML_OPEN_ID";
break;
case 17:this.popState();
break;
case 18:this.popState(); return "XML_BLOCK_START";
break;
case 19:this.popState(); return "XML_SHORT_CLOSE";
break;
case 20:/* skip whitespace */
break;
case 21:this.popState(); return "XML_BLOCK_CLOSE";
break;
case 22:return "XML_CLOSE_ID";
break;
case 23:
	                                         	return (() => {
	                                         		let del_regex = /^r('''|"""|[\/"'@~%`])/;
	                                         		yy.regex.del = yy_.yytext.match(del_regex)[1];
	                                         		this.pushState("inRegex");
	                                         		return "REGEX_START";
	                                         	})();
                                            
break;
case 24:
												return (() => {
													let del = yy_.yytext.match(/^'''|"""|[/"'@~%`]/)[0];
													if (yy.regex.del === del) {
														yy.regex.modifiers = yy_.yytext.match(/[a-z]*$/i)[0];
														this.popState();
														return "REGEX_END";
													}
													return "REGEX_BODY";
												})();
											
break;
case 25:return "REGEX_BODY";
break;
case 26:this.pushState("declBracket"); return "[";
break;
case 27:this.popState();return "BECOMES";
break;
case 28:this.popState();return "]";
break;
case 29:this.pushState("declBracket"); return "[";
break;
case 30:return ",";
break;
case 31:
												if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                }
                                                return "PROPERTY";
                                            
break;
case 32:this.pushState("exprBracket");return 4;
break;
case 33:this.popState();return 7;
break;
case 34:
												 //console.log("\n\n\nEXPR BRACKET FOUND\n\n\n");
                                                 for (let [search, result] of yy.namedTokens) {
                                                 	if (search.test(yy_.yytext)) {
                                                 		if (typeof result === "function") {
                                                 			return result.call(this, yy_.yytext);
                                                 		}
                                                 		return result;
                                                 	}
                                                 }

                                                 if (/^\s*(\=|BECOMES?)/.test(this._input)) {
                                                 	return "NAME";
                                                 }
                                                 if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                }
                                                return "PROPERTY";
                                            
break;
case 35:
                                                return (() => {
	                                                const line_comment_regex = /^(?:\/[^\n]*(?=\n|$))/;
	                                                const block_comment_regex = /^(?:\*[\s\S]*?\*\/)/;
	                                                if (line_comment_regex.test(this._input)) {
	                                                    let match = this._input.match(line_comment_regex)[0];
	                                                    yy_.yytext += match;
	                                                    this.match += match;
	                                                    this.matched += match;
	                                                    this._input = this._input.substr(match.length + 1) || "";
	                                                } else if (block_comment_regex.test(this._input)) {
	                                                	let match = this._input.match(block_comment_regex)[0];
	                                                	yy_.yytext += match;
	                                                    this._input = this._input.substr(match.length) || "";
	                                                } else {
                                                		return "DIVIDE";
                                                	}
                                                })();
                                            
break;
case 36:
												if (this.topState() === "declLeft") {
													//console.log("\n\n\nEurika!\n\n\n");
													//console.log(this);
													this.popState();
												}
												this.pushState("controlCode");
												return "{";
											 
break;
case 37:
												this.popState();
												return "}";
											 
break;
case 38:return "}";
break;
case 39:return "FUNCTION";
break;
case 40:return "TO";
break;
case 41:return "QSTRING";
break;
case 42:return "ASTRING";
break;
case 43:return "SIZECMP";
break;
case 44:return "SIZECMP";
break;
case 45:return "EQ";
break;
case 46:return "INEQ";
break;
case 47:return "AND";
break;
case 48:return "OR";
break;
case 49:return "INCREMENT";
break;
case 50:return "DECREMENT";
break;
case 51:return "PLUS";
break;
case 52:return "MINUS";
break;
case 53:return "TIMES";
break;
case 54:return "MODULUS";
break;
case 55:return "POWER";
break;
case 56:return ".";
break;
case 57:return ",";
break;
case 58:return "BECOMES";
break;
case 59:return ":";
break;
case 60:return "NOT";
break;
case 61:
                                                 for (let [search, result] of yy.namedTokens) {
                                                 	if (search.test(yy_.yytext)) {
                                                 		if (typeof result === "function") {
                                                 			return result.call(this, yy_.yytext);
                                                 		}
                                                 		return result;
                                                 	}
                                                 }
                                                 if (!(/\-/).test(yy_.yytext)) {
                                                 	return "JSPROPERTY";
                                                 }
                                                 if (yy_.yytext === "id") {
                                                 	//console.log(this);
                                                 	process.exit();
                                                 }
                                                 return "PROPERTY";
                                             
break;
case 62:return 77;
break;
case 63:return 49;
break;
case 64:return 83;
break;
case 65:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\(\s*\)\s*\{)/i,/^(?:if\s*\()/i,/^(?:\))/i,/^(?:\()/i,/^(?:\)\s*\{)/i,/^(?:\))/i,/^(?:,)/i,/^(?:\.\.\.)/i,/^(?:`)/i,/^(?:`)/i,/^(?:\$\{)/i,/^(?:\})/i,/^(?:(\\`|[^\`\$]|\$[^\{\`])+)/i,/^(?:<)/i,/^(?:\/)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:.)/i,/^(?:>)/i,/^(?:\/>)/i,/^(?:\s+)/i,/^(?:>)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:r(?:'''|"""|[\/"'@~%`]))/i,/^(?:(?:'''|"""|[\/"'@~%`])[Agimnsuxy]{0,7})/i,/^(?:\S|\s)/i,/^(?:\[)/i,/^(?:=|becomes)/i,/^(?:\])/i,/^(?:\[)/i,/^(?:,)/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[a-z][a-z0-9\-\_\$]*)/i,/^(?:\/)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\})/i,/^(?:#)/i,/^(?:\.\.)/i,/^(?:"(\\"|[^\"])*")/i,/^(?:'(\\'|[^\'])*')/i,/^(?:>)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:=)/i,/^(?::)/i,/^(?:!)/i,/^(?:[a-z\_\$][a-z0-9\-\_\$]*)/i,/^(?:[0-9]+(?:\.[0-9]+)?)/i,/^(?:;)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"controlCode":{"rules":[0,1,2,4,8,9,14,23,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"formalArguments":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"paren":{"rules":[0,1,2,4,5,6,7,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"ifParen":{"rules":[0,1,2,3,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"exprBracket":{"rules":[0,1,2,4,8,9,14,23,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"declRight":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"declBracket":{"rules":[0,1,2,4,8,9,14,23,28,29,30,31,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"declLeft":{"rules":[0,1,2,4,8,9,14,23,26,27,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"inRegex":{"rules":[24,25],"inclusive":false},"xmlBlockClose":{"rules":[20,21,22],"inclusive":false},"xmlTagOpen":{"rules":[0,1,2,4,8,9,14,18,19,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"angleBracket":{"rules":[15,16,17],"inclusive":false},"inBacktickExpr":{"rules":[0,1,2,4,8,9,12,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"inBacktick":{"rules":[10,11,13],"inclusive":false},"INITIAL":{"rules":[0,1,2,4,8,9,14,23,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}