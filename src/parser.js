/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,26],$V1=[1,40],$V2=[1,30],$V3=[1,9],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,11],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[1,39],$Vg=[1,32],$Vh=[1,33],$Vi=[1,34],$Vj=[1,18],$Vk=[1,35],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[1,54],$Vy=[1,55],$Vz=[5,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,45,75,78],$VA=[1,62],$VB=[1,65],$VC=[1,64],$VD=[1,79],$VE=[2,64],$VF=[5,8,12,14,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,44,45,50,72,75,78],$VG=[2,46],$VH=[2,59],$VI=[5,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,44,45,72,75,78],$VJ=[8,16,30,38,39,40,41,44,48,49,52,56,57,58,64,65,66,67,68,69,73],$VK=[1,111],$VL=[5,19,45],$VM=[1,112],$VN=[1,113],$VO=[5,16,19,36,45,75,78],$VP=[5,16,19,21,22,23,24,25,26,27,28,36,45,75,78],$VQ=[5,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,44,45,72,75,78],$VR=[5,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,45,72,75,78],$VS=[1,124],$VT=[5,45],$VU=[16,75,78],$VV=[5,16,19,21,22,36,45,75,78],$VW=[5,16,19,21,22,23,24,25,26,27,28,29,30,36,45,75,78],$VX=[5,16,19,21,22,23,24,25,26,27,28,29,30,31,32,36,45,75,78],$VY=[5,8,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,44,45,50,75,78],$VZ=[8,16,30,38,39,40,41,44,48,49,52,56,57,58,65,66,67,68,69,73,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"array":3,"arrayStart":4,"]":5,"associativeList":6,"expressionList":7,"[":8,"assignmentExpression":9,"id":10,"assignmentValue":11,"=":12,"expression":13,"+=":14,"associativeDeclaration":15,"IDENTIFIER":16,":":17,"string":18,",":19,"binaryExpression":20,"AND":21,"OR":22,"IS":23,"ISNT":24,"GT":25,"LT":26,"GTEQ":27,"LTEQ":28,"+":29,"-":30,"*":31,"/":32,"^":33,"%":34,"controlCode":35,";":36,"declarationExpression":37,"LET":38,"PRIVATE":39,"PROTECTED":40,"PUBLIC":41,"import":42,"use":43,"(":44,")":45,"literal":46,"invoke":47,"RETURN":48,"!":49,".":50,"idList":51,"IMPORT":52,"invokeTracker":53,"invokeArguments":54,"scope":55,"TRUE":56,"FALSE":57,"NUMBER":58,"xml":59,"program":60,"EOF":61,"scopeArguments":62,"scopeStart":63,"}":64,"{":65,"QSTRING":66,"ASTRING":67,"BSTRING":68,"USE":69,"usable":70,"useOnly":71,"ONLY":72,"<":73,"xmlAttributes":74,">":75,"xmlControlCode":76,"</":77,"/>":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"]",8:"[",12:"=",14:"+=",16:"IDENTIFIER",17:":",19:",",21:"AND",22:"OR",23:"IS",24:"ISNT",25:"GT",26:"LT",27:"GTEQ",28:"LTEQ",29:"+",30:"-",31:"*",32:"/",33:"^",34:"%",36:";",38:"LET",39:"PRIVATE",40:"PROTECTED",41:"PUBLIC",44:"(",45:")",48:"RETURN",49:"!",50:".",52:"IMPORT",56:"TRUE",57:"FALSE",58:"NUMBER",61:"EOF",64:"}",65:"{",66:"QSTRING",67:"ASTRING",68:"BSTRING",69:"USE",72:"ONLY",73:"<",75:">",77:"</",78:"/>"},
productions_: [0,[3,2],[3,3],[3,3],[4,1],[9,2],[11,2],[11,2],[15,3],[15,3],[6,1],[6,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[35,0],[35,3],[37,4],[37,4],[37,4],[37,4],[13,1],[13,1],[13,1],[13,1],[13,2],[13,1],[13,3],[13,1],[13,1],[13,1],[13,2],[13,2],[7,1],[7,3],[10,1],[10,3],[10,4],[51,1],[51,3],[42,2],[53,2],[47,3],[47,4],[47,4],[47,3],[47,4],[47,4],[54,0],[54,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[60,2],[55,4],[55,3],[63,1],[62,3],[18,1],[18,1],[18,1],[43,2],[43,3],[70,1],[70,1],[70,1],[70,3],[70,3],[70,3],[71,4],[59,8],[59,4],[74,0],[74,4],[76,0],[76,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new yy.scopeAst(yy, 'emptyMapExpression', [$$[$0-1]]);
break;
case 2:
this.$ = new yy.scopeAst(yy, 'mapExpression', [$$[$0-2], $$[$0-1]]);
break;
case 3:
this.$ = new yy.scopeAst(yy, 'arrayExpression', [$$[$0-2], $$[$0-1]]);
break;
case 4:
this.$ = new yy.scopeAst(yy, 'arrayStart', []);
break;
case 5:
this.$ = new yy.scopeAst(yy, 'assignmentExpression', [$$[$0-1], $$[$0]]);
break;
case 6: case 7:
this.$ = new yy.scopeAst(yy, 'assignmentValue', [$$[$0-1], $$[$0]]);
break;
case 8:
this.$ = new yy.scopeAst(yy, 'associativeDeclaration', [$$[$0-2], 'id', $$[$0]]);
break;
case 9:
this.$ = new yy.scopeAst(yy, 'associativeDeclaration', [$$[$0-2], 'string', $$[$0]]);
break;
case 10:
this.$ = new yy.scopeAst(yy, 'associativeList', [$$[$0]]);
break;
case 11:
this.$ = new yy.scopeAst(yy, 'associativeList', [$$[$0-2], $$[$0]]);
break;
case 12:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '&&', $$[$0]]);
break;
case 13:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '||', $$[$0]]);
break;
case 14:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '===', $$[$0]]);
break;
case 15:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '!==', $$[$0]]);
break;
case 16:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '>', $$[$0]]);
break;
case 17:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '<', $$[$0]]);
break;
case 18:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '>=', $$[$0]]);
break;
case 19:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '<=', $$[$0]]);
break;
case 20: case 21: case 22: case 23: case 24: case 25:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], $$[$0-1], $$[$0]]);
break;
case 26:
this.$ = new yy.scopeAst(yy, 'controlCode', []);
break;
case 27:
this.$ = new yy.scopeAst(yy, 'controlCode', [$$[$0-2], $$[$0-1]]);
break;
case 28:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['let', $$[$0-2], $$[$0]]);
break;
case 29:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['private', $$[$0-2], $$[$0]]);
break;
case 30:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['protected', $$[$0-2], $$[$0]]);
break;
case 31:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['public', $$[$0-2], $$[$0]]);
break;
case 32: case 33: case 34: case 35: case 37: case 39: case 40: case 41: case 65: case 66: case 67: case 73: case 74: case 75:
this.$ = $$[$0]
break;
case 36:
this.$ = new yy.scopeAst(yy, 'unaryExpression',['-', $$[$0]]);
break;
case 38:
this.$ = $$[$0-1]
break;
case 42:
this.$ = new yy.scopeAst(yy, 'returnExpression', [$$[$0]]);
break;
case 43:
this.$ = new yy.scopeAst(yy, 'unaryExpression',['!', $$[$0]]);
break;
case 44:
this.$ = new yy.scopeAst(yy, 'expressionList', [$$[$0]]);
break;
case 45:
this.$ = new yy.scopeAst(yy, 'expressionList', [$$[$0-2], $$[$0]]);
break;
case 46:
this.$ = new yy.scopeAst(yy, 'identifier', [$$[$0]]);
break;
case 47:
this.$ = new yy.scopeAst(yy, 'identifier', [$$[$0-2], 'dot', $$[$0]]);
break;
case 48:
this.$ = new yy.scopeAst(yy, 'identifier', [$$[$0-3], 'bracket', $$[$0-1]]);
break;
case 49:
this.$ = new yy.scopeAst(yy, 'idList', [$$[$0]]);
break;
case 50:
this.$ = new yy.scopeAst(yy, 'idList', [$$[$0-2], $$[$0]]);
break;
case 51:
this.$ = new yy.scopeAst(yy, 'importExpression', [$$[$0]]);
break;
case 52:
this.$ = new yy.scopeAst(yy, 'invokeTracker', [$$[$0-1]]);
break;
case 53:
this.$ = new yy.scopeAst(yy, 'invokeExpression', [$$[$0-2], $$[$0-1]]);
break;
case 54: case 55: case 58:
this.$ = new yy.scopeAst(yy, 'invokeExpression', [$$[$0-3], $$[$0-1]]);
break;
case 56:
this.$ = new yy.scopeAst(yy, 'invokeId', [$$[$0-2], 'dot', $$[$0]]);
break;
case 57:
this.$ = new yy.scopeAst(yy, 'invokeId', [$$[$0-3], 'bracket', $$[$0-1]]);
break;
case 59:
this.$ = new yy.scopeAst(yy, 'invokeArguments', []);
break;
case 60:
this.$ = new yy.scopeAst(yy, 'invokeArguments', [$$[$0]]);
break;
case 61:
this.$ = new yy.scopeAst(yy, 'booleanLiteral', true);
break;
case 62:
this.$ = new yy.scopeAst(yy, 'booleanLiteral', false);
break;
case 63:
this.$ = new yy.scopeAst(yy, 'numericLiteral', Number($$[$0]));
break;
case 64:
this.$ = new yy.scopeAst(yy, 'stringLiteral', $$[$0].substr(1,$$[$0].length-2));
break;
case 68:
return $$[$0-1]
break;
case 69:
this.$ = new yy.scopeAst(yy, 'scopeExpression', [$$[$0-2], $$[$0-3], $$[$0-1]]);
break;
case 70:
this.$ = new yy.scopeAst(yy, 'scopeExpression', [$$[$0-2], $$[$0-1]]);
break;
case 71:
this.$ = new yy.scopeAst(yy, 'scopeStart', []);
break;
case 72:
this.$ = new yy.scopeAst(yy, 'scopeArguments', [$$[$0-1]]);
break;
case 76:
this.$ = new yy.scopeAst(yy, 'useExpression', [$$[$0]]);
break;
case 77:
this.$ = new yy.scopeAst(yy, 'useExpression', [$$[$0-1], $$[$0]]);
break;
case 78: case 79: case 80:
this.$ = new yy.scopeAst(yy, 'usable', [$$[$0]]);
break;
case 81: case 82: case 83:
this.$ = new yy.scopeAst(yy, 'usable', [$$[$0-2], $$[$0]]);
break;
case 84:
this.$ = new yy.scopeAst(yy, 'useOnly', [$$[$0-1]]);
break;
case 85:
this.$ = new yy.scopeAst(yy, 'xmlExpression', [$$[$0-6], $$[$0-5], $$[$0-3]]);
break;
case 86:
this.$ = new yy.scopeAst(yy, 'xmlExpression', [$$[$0-2], $$[$0-1]]);
break;
case 87:
this.$ = new yy.scopeAst(yy, 'xmlAttributes', []);
break;
case 88:
this.$ = new yy.scopeAst(yy, 'xmlAttributes', [$$[$0-3], $$[$0-2], $$[$0]]);
break;
case 89:
this.$ = new yy.scopeAst(yy, 'xmlControlCode', []);
break;
case 90:
this.$ = new yy.scopeAst(yy, 'xmlControlCode', [$$[$0-2], $$[$0-1]]);
break;
}
},
table: [o([8,16,30,38,39,40,41,44,48,49,52,56,57,58,61,65,66,67,68,69,73],$V0,{60:1,35:2}),{1:[3]},{3:29,4:38,8:$V1,9:5,10:13,13:4,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,61:[1,3],62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{1:[2,68]},{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,36:[1,41]},o($Vz,[2,32]),o($Vz,[2,33],{44:[1,56]}),o($Vz,[2,34]),o($Vz,[2,35]),{3:29,4:38,8:$V1,9:5,10:13,13:57,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($Vz,[2,37]),{3:29,4:38,6:59,8:$V1,9:5,10:13,13:58,15:60,16:$VA,18:61,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($Vz,[2,39]),o($Vz,[2,40],{11:63,8:$VB,12:[1,67],14:[1,68],44:[1,66],50:$VC}),o($Vz,[2,41],{8:[1,70],44:[1,71],50:[1,69]}),{3:29,4:38,8:$V1,9:5,10:13,13:72,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:73,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{18:74,66:$Vg,67:$Vh,68:$Vi},{10:77,16:$V2,42:78,44:$VD,52:$Vb,55:76,62:36,63:37,65:$Vf,70:75},{16:[1,80]},{16:[1,81]},{16:[1,82]},{16:[1,83]},o($Vz,[2,61]),o($Vz,[2,62]),o($Vz,[2,63]),o($Vz,$VE),o($Vz,[2,65]),o($Vz,[2,66],{44:[1,84]}),o($Vz,[2,67]),o($VF,$VG),{3:29,4:38,7:86,8:$V1,9:5,10:13,13:87,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,45:$VH,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,54:85,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($VI,[2,73]),o($VI,[2,74]),o($VI,[2,75]),{10:88,16:$V2},{63:89,65:$Vf},o($VJ,$V0,{35:90}),{3:29,4:38,5:[1,91],6:92,7:93,8:$V1,9:5,10:13,13:87,15:60,16:$VA,18:61,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($VJ,[2,71]),o([5,8,16,30,38,39,40,41,44,48,49,52,56,57,58,65,66,67,68,69,73],[2,4]),o([8,16,30,38,39,40,41,44,48,49,52,56,57,58,61,64,65,66,67,68,69,73],[2,27]),{3:29,4:38,8:$V1,9:5,10:13,13:94,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:95,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:96,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:97,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:98,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:99,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:100,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:101,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:102,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:103,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:104,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:105,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:106,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:107,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,7:86,8:$V1,9:5,10:13,13:87,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,45:$VH,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,54:108,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($Vz,[2,36]),{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,45:[1,109]},{19:$VK,45:[1,110]},o($VL,[2,10]),o([5,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,45],$VE,{17:$VM}),o([5,8,12,14,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,44,45,50],$VG,{17:$VN}),o($Vz,[2,5]),{16:[1,114]},{3:29,4:38,8:$V1,9:5,10:13,13:115,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o([8,16,30,38,39,40,41,44,45,48,49,52,56,57,58,65,66,67,68,69,73],[2,52]),{3:29,4:38,8:$V1,9:5,10:13,13:116,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:117,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{10:118,16:$V2},{3:29,4:38,8:$V1,9:5,10:13,13:119,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,7:86,8:$V1,9:5,10:13,13:87,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,45:$VH,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,54:120,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($VO,[2,42],{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VP,[2,43],{29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VQ,[2,51]),o([5,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,45,75,78],[2,76],{71:121,19:[1,122],72:[1,123]}),o($VR,[2,78]),o($VR,[2,79],{8:$VB,50:$VC}),o($VR,[2,80]),{6:59,15:60,16:$VS,18:125,66:$Vg,67:$Vh,68:$Vi},{12:[1,126]},{12:[1,127]},{12:[1,128]},{12:[1,129]},{3:29,4:38,7:86,8:$V1,9:5,10:13,13:87,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,45:$VH,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,54:130,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{45:[1,131]},{45:[2,60]},o($VT,[2,44],{19:[1,132],21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VU,[2,87],{74:133,8:$VB,50:$VC}),o($VJ,$V0,{35:134}),{3:29,4:38,8:$V1,9:5,10:13,13:4,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,64:[1,135],65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($Vz,[2,1]),{5:[1,136],19:$VK},{5:[1,137]},o($VV,[2,12],{23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VV,[2,13],{23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VP,[2,14],{29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VP,[2,15],{29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VP,[2,16],{29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VP,[2,17],{29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VP,[2,18],{29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VP,[2,19],{29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VW,[2,20],{31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VW,[2,21],{31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VX,[2,22],{33:$Vx,34:$Vy}),o($VX,[2,23],{33:$Vx,34:$Vy}),o($Vz,[2,24]),o($Vz,[2,25]),{45:[1,138]},o($Vz,[2,38]),{65:[2,72]},{15:139,16:$VS,18:125,66:$Vg,67:$Vh,68:$Vi},{3:29,4:38,8:$V1,9:5,10:13,13:140,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:141,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($VF,[2,47]),{5:[1,142],21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy},o($VO,[2,6],{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VO,[2,7],{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o([5,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,44,45,50,75,78],[2,56],{8:$VB}),{5:[1,143],21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy},{45:[1,144]},o($Vz,[2,77]),{10:146,16:$V2,42:147,44:$VD,52:$Vb,55:145,62:36,63:37,65:$Vf},{44:[1,148]},{17:$VN},{17:$VM},{3:29,4:38,8:$V1,9:5,10:13,13:149,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:150,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:151,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{3:29,4:38,8:$V1,9:5,10:13,13:152,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{45:[1,153]},o($VY,[2,53]),{3:29,4:38,7:154,8:$V1,9:5,10:13,13:87,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},{16:[1,157],75:[1,155],78:[1,156]},{3:29,4:38,8:$V1,9:5,10:13,13:4,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,64:[1,158],65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($VQ,[2,70]),o($Vz,[2,2]),o($Vz,[2,3]),o($VY,[2,55]),o($VL,[2,11]),o($VL,[2,9],{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VL,[2,8],{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VF,[2,48]),o($VY,[2,57]),o($VY,[2,58]),o($VR,[2,81]),o($VR,[2,82],{8:$VB,50:$VC}),o($VR,[2,83]),{3:29,4:38,7:159,8:$V1,9:5,10:13,13:87,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($VO,[2,28],{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VO,[2,29],{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VO,[2,30],{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VO,[2,31],{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),o($VY,[2,54]),o($VT,[2,45]),o($VZ,[2,89],{76:160}),o($Vz,[2,86]),{12:[1,161]},o($VQ,[2,69]),{45:[1,162]},{3:29,4:38,8:$V1,9:5,10:13,13:164,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk,77:[1,163]},{3:29,4:38,8:$V1,9:5,10:13,13:165,16:$V2,18:26,20:10,30:$V3,37:8,38:$V4,39:$V5,40:$V6,41:$V7,42:6,43:7,44:$V8,46:12,47:14,48:$V9,49:$Va,52:$Vb,53:31,55:28,56:$Vc,57:$Vd,58:$Ve,59:27,62:36,63:37,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,73:$Vk},o($Vz,[2,84]),{10:166,16:$V2},{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,36:[1,167]},o($VU,[2,88],{21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy}),{8:$VB,50:$VC,75:[1,168]},o($VZ,[2,90]),o($Vz,[2,85])],
defaultActions: {3:[2,68],86:[2,60],110:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* one line comment */
break;
case 2:/* block comment */
break;
case 3:return 14;
break;
case 4:return 12;
break;
case 5:return 77;
break;
case 6:return 78;
break;
case 7:return '<=';
break;
case 8:return '>=';
break;
case 9:return 73;
break;
case 10:return 75;
break;
case 11:return 65;
break;
case 12:return 64;
break;
case 13:return 8;
break;
case 14:return 5;
break;
case 15:return 44;
break;
case 16:return 45;
break;
case 17:return 17;
break;
case 18:return 50;
break;
case 19:return 19;
break;
case 20:return 36;
break;
case 21:return 29;
break;
case 22:return 30;
break;
case 23:return 31;
break;
case 24:return 32;
break;
case 25:return 34;
break;
case 26:return 33;
break;
case 27:return 67;
break;
case 28:return 66;
break;
case 29:return 68;
break;
case 30:return 52;
break;
case 31:return 69;
break;
case 32:return 72;
break;
case 33:return 'INTO';
break;
case 34:return 'AS';
break;
case 35:return 38;
break;
case 36:return 41;
break;
case 37:return 40;
break;
case 38:return 39;
break;
case 39:return 56;
break;
case 40:return 57;
break;
case 41:return 48;
break;
case 42:return 23;
break;
case 43:return 24;
break;
case 44:return 26;
break;
case 45:return 25;
break;
case 46:return 27;
break;
case 47:return 28;
break;
case 48:return 21;
break;
case 49:return 21;
break;
case 50:return 22;
break;
case 51:return 22;
break;
case 52:return 49;
break;
case 53:return 58;
break;
case 54:return 16;
break;
case 55:return 61;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\+=)/,/^(?:=)/,/^(?:<\/)/,/^(?:\/>)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:'[^\']*')/,/^(?:"[^\"]*")/,/^(?:`[^\`]*`)/,/^(?:import\b)/,/^(?:use\b)/,/^(?:only\b)/,/^(?:into\b)/,/^(?:as\b)/,/^(?:let\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:is\b)/,/^(?:isnt\b)/,/^(?:lt\b)/,/^(?:gt\b)/,/^(?:gteq\b)/,/^(?:lteq\b)/,/^(?:&&)/,/^(?:and\b)/,/^(?:\|\|)/,/^(?:or\b)/,/^(?:!)/,/^(?:[0-9]+(?:.[0-9]+)?)/,/^(?:[a-zA-Z_-][a-zA-Z0-9_-]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}