
let tests = [
	{
		let string:foo = "im foo";
		let number:bar = "im bar";

		// string number
		console.log(scope.getType(foo), scope.getType(bar));
		
		// "im foo", NaN
		console.log(foo, bar);

		foo = 42;
		bar = 24;

		// string number 
		console.log(scope.getType(foo), scope.getType(bar));

		// "42", 24
		console.log(foo, bar);
	},
	{
		let Reference (obj, prop, target) {
			Object.defineProperty(obj, prop, [
				enumerable = true,
				get {
					return obj[target];
				},
				set (val) {
					return obj[target] = val;
				}
			]);
		};
		let foo = "im foo";
		let Reference:bar = "foo";
		console.log(foo, bar);

		bar = "im bar";
		console.log(foo, bar);
	},
	{
		let Dynamic = func(obj, prop, arr) {
			let descriptor = [
				enumerable = true,
				configurable = true,
				...arr
			];
			Object.defineProperty(obj, prop, descriptor);
		};

		let Dynamic:always1 = [
			value = 1,
			writable = false
		];
		console.log(always1);
		always1 = 12;
		console.log(always1);
	},
	{
		let Dynamic = func(obj, prop, arr) {
			let descriptor = [
				enumerable = true,
				configurable = true,
				...arr
			];
			Object.defineProperty(obj, prop, descriptor);
		};

		let Person {

			let realAge = 0;
			public Dynamic:age = [
				get {
					return realAge;
				},
				set (newAge) {
					if (0 <= newAge <= 150) {
						return realAge = newAge;
					};
				}
			];
		};
		let sam = Person();
		console.log(sam, sam.age);
		sam.age = 425;
		console.log(sam, sam.age);
	}
];

tests[0]();
tests[1]();
tests[2]();
tests[3]();