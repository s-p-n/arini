/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,23],$V1=[1,34],$V2=[1,14],$V3=[1,8],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,9],$V9=[1,12],$Va=[1,13],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,33],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,39],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,48],$Vw=[1,49],$Vx=[5,10,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,40,63,66],$Vy=[1,52],$Vz=[1,51],$VA=[1,58],$VB=[5,8,10,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,34,39,40,45,63,66],$VC=[2,41],$VD=[2,54],$VE=[5,10,11,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,40,63,66],$VF=[8,10,25,33,35,36,37,39,43,44,48,49,50,56,57,58,59,60,61],$VG=[2,49],$VH=[1,98],$VI=[5,14,40],$VJ=[1,99],$VK=[1,100],$VL=[5,10,14,31,40,63,66],$VM=[5,10,14,16,17,18,19,20,21,22,23,31,40,63,66],$VN=[10,63,66],$VO=[5,40],$VP=[5,10,14,16,17,31,40,63,66],$VQ=[5,10,14,16,17,18,19,20,21,22,23,24,25,31,40,63,66],$VR=[5,10,14,16,17,18,19,20,21,22,23,24,25,26,27,31,40,63,66],$VS=[5,10,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,39,40,63,66],$VT=[5,8,10,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,39,40,45,63,66],$VU=[8,10,25,33,35,36,37,39,43,44,48,49,50,57,58,59,60,61,65];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"array":3,"arrayStart":4,"]":5,"associativeList":6,"expressionList":7,"[":8,"associativeDeclaration":9,"IDENTIFIER":10,":":11,"expression":12,"string":13,",":14,"binaryExpression":15,"AND":16,"OR":17,"IS":18,"ISNT":19,"GT":20,"LT":21,"GTEQ":22,"LTEQ":23,"+":24,"-":25,"*":26,"/":27,"^":28,"%":29,"controlCode":30,";":31,"declarationExpression":32,"LET":33,"=":34,"PRIVATE":35,"PROTECTED":36,"PUBLIC":37,"id":38,"(":39,")":40,"literal":41,"invoke":42,"RETURN":43,"!":44,".":45,"invokeArguments":46,"scope":47,"TRUE":48,"FALSE":49,"NUMBER":50,"xml":51,"program":52,"EOF":53,"scopeArguments":54,"scopeStart":55,"}":56,"{":57,"QSTRING":58,"ASTRING":59,"BSTRING":60,"<":61,"xmlAttributes":62,">":63,"xmlControlCode":64,"</":65,"/>":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"]",8:"[",10:"IDENTIFIER",11:":",14:",",16:"AND",17:"OR",18:"IS",19:"ISNT",20:"GT",21:"LT",22:"GTEQ",23:"LTEQ",24:"+",25:"-",26:"*",27:"/",28:"^",29:"%",31:";",33:"LET",34:"=",35:"PRIVATE",36:"PROTECTED",37:"PUBLIC",39:"(",40:")",43:"RETURN",44:"!",45:".",48:"TRUE",49:"FALSE",50:"NUMBER",53:"EOF",56:"}",57:"{",58:"QSTRING",59:"ASTRING",60:"BSTRING",61:"<",63:">",65:"</",66:"/>"},
productions_: [0,[3,2],[3,3],[3,3],[4,1],[9,3],[9,3],[6,1],[6,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[30,0],[30,3],[32,4],[32,4],[32,4],[32,4],[12,3],[12,1],[12,1],[12,2],[12,3],[12,1],[12,1],[12,1],[12,2],[12,2],[7,1],[7,3],[38,1],[38,3],[38,4],[42,4],[42,4],[42,3],[42,4],[42,4],[46,0],[46,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[52,2],[47,4],[47,3],[55,1],[54,3],[13,1],[13,1],[13,1],[51,8],[51,4],[62,0],[62,4],[64,0],[64,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new yy.scopeAst(yy, 'arrayExpression', [$$[$0-1]]);
break;
case 2: case 3:
this.$ = new yy.scopeAst(yy, 'arrayExpression', [$$[$0-2], $$[$0-1]]);
break;
case 4:
this.$ = new yy.scopeAst(yy, 'arrayStart', []);
break;
case 5:
this.$ = new yy.scopeAst(yy, 'associativeDeclaration', [$$[$0-2], 'id', $$[$0]]);
break;
case 6:
this.$ = new yy.scopeAst(yy, 'associativeDeclaration', [$$[$0-2], 'string', $$[$0]]);
break;
case 7:
this.$ = new yy.scopeAst(yy, 'associativeList', [$$[$0]]);
break;
case 8:
this.$ = new yy.scopeAst(yy, 'associativeList', [$$[$0-2], $$[$0]]);
break;
case 9:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '&&', $$[$0]]);
break;
case 10:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '||', $$[$0]]);
break;
case 11:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '===', $$[$0]]);
break;
case 12:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '!==', $$[$0]]);
break;
case 13:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '>', $$[$0]]);
break;
case 14:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '<', $$[$0]]);
break;
case 15:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '>=', $$[$0]]);
break;
case 16:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '<=', $$[$0]]);
break;
case 17: case 18: case 19: case 20: case 21: case 22:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], $$[$0-1], $$[$0]]);
break;
case 23:
return;
break;
case 24:
this.$ = new yy.scopeAst(yy, 'controlCode', [$$[$0-2], $$[$0-1]]);
break;
case 25:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['let', $$[$0-2], $$[$0]]);
break;
case 26:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['private', $$[$0-2], $$[$0]]);
break;
case 27:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['protected', $$[$0-2], $$[$0]]);
break;
case 28:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['public', $$[$0-2], $$[$0]]);
break;
case 29:
this.$ = new yy.scopeAst(yy, 'assignmentExpression', [$$[$0-2], $$[$0]]);
break;
case 30: case 31: case 34: case 35: case 36: case 55: case 56: case 57: case 63: case 64: case 65:
this.$ = $$[$0]
break;
case 32:
this.$ = '- $$[$0]';
break;
case 33:
this.$ = $$[$0-1]
break;
case 37:
this.$ = new yy.scopeAst(yy, 'returnExpression', [$$[$0]]);
break;
case 38:
this.$ = '! $$[$0]';
break;
case 39:
this.$ = new yy.scopeAst(yy, 'expressionList', [$$[$0]]);
break;
case 40:
this.$ = new yy.scopeAst(yy, 'expressionList', [$$[$0-2], $$[$0]]);
break;
case 41:
this.$ = new yy.scopeAst(yy, 'identifier', [$$[$0]]);
break;
case 42:
this.$ = new yy.scopeAst(yy, 'identifier', [$$[$0-2], 'dot', $$[$0]]);
break;
case 43:
this.$ = new yy.scopeAst(yy, 'identifier', [$$[$0-3], 'bracket', $$[$0-1]]);
break;
case 44: case 45: case 48:
this.$ = new yy.scopeAst(yy, 'invokeExpression', [$$[$0-3], $$[$0-1]]);
break;
case 46:
this.$ = new yy.scopeAst(yy, 'invokeId', [$$[$0-2], 'dot', $$[$0]]);
break;
case 47:
this.$ = new yy.scopeAst(yy, 'invokeId', [$$[$0-3], 'bracket', $$[$0-1]]);
break;
case 49:
this.$ = new yy.scopeAst(yy, 'invokeArguments', []);
break;
case 50:
this.$ = new yy.scopeAst(yy, 'invokeArguments', [$$[$0]]);
break;
case 51:
this.$ = new yy.scopeAst(yy, 'booleanLiteral', true);
break;
case 52:
this.$ = new yy.scopeAst(yy, 'booleanLiteral', false);
break;
case 53:
this.$ = new yy.scopeAst(yy, 'numericLiteral', Number($$[$0]));
break;
case 54:
this.$ = new yy.scopeAst(yy, 'stringLiteral', $$[$0].substr(1,$$[$0].length-2));
break;
case 58:
return $$[$0-1]
break;
case 59:
this.$ = new yy.scopeAst(yy, 'scopeExpression', [$$[$0-2], $$[$0-3], $$[$0-1]]);
break;
case 60:
this.$ = new yy.scopeAst(yy, 'scopeExpression', [$$[$0-2], $$[$0-1]]);
break;
case 61:
this.$ = new yy.scopeAst(yy, 'scopeStart', []);
break;
case 62:
this.$ = new yy.scopeAst(yy, 'scopeArguments', [$$[$0-1]]);
break;
case 66:
this.$ = new yy.scopeAst(yy, 'xmlExpression', [$$[$0-6], $$[$0-5], $$[$0-3]]);
break;
case 67:
this.$ = new yy.scopeAst(yy, 'xmlExpression', [$$[$0-2], $$[$0-1]]);
break;
case 68:
this.$ = new yy.scopeAst(yy, 'xmlAttributes', []);
break;
case 69:
this.$ = new yy.scopeAst(yy, 'xmlAttributes', [$$[$0-3], $$[$0-2], $$[$0]]);
break;
case 70:
this.$ = new yy.scopeAst(yy, 'xmlControlCode', []);
break;
case 71:
this.$ = new yy.scopeAst(yy, 'xmlControlCode', [$$[$0-2], $$[$0-1]]);
break;
}
},
table: [o([8,10,25,33,35,36,37,39,43,44,48,49,50,53,57,58,59,60,61],$V0,{52:1,30:2}),{1:[3]},{3:25,4:32,8:$V1,10:$V2,12:4,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,53:[1,3],54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{1:[2,58]},{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,31:[1,35]},o($Vx,[2,35],{8:$Vy,34:[1,50],39:[1,53],45:$Vz}),o($Vx,[2,30]),o($Vx,[2,31]),{3:25,4:32,8:$V1,10:$V2,12:54,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,6:56,8:$V1,9:57,10:$VA,12:55,13:59,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($Vx,[2,34]),o($Vx,[2,36],{8:[1,61],39:[1,62],45:[1,60]}),{3:25,4:32,8:$V1,10:$V2,12:63,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:64,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VB,$VC),{10:[1,65]},{10:[1,66]},{10:[1,67]},{10:[1,68]},o($Vx,[2,51]),o($Vx,[2,52]),o($Vx,[2,53]),o($Vx,$VD),o($Vx,[2,55]),o($Vx,[2,56],{39:[1,69]}),o($Vx,[2,57]),o($VE,[2,63]),o($VE,[2,64]),o($VE,[2,65]),{10:$V2,38:70},{55:71,57:$Ve},o($VF,$V0,{30:72}),{3:25,4:32,5:[1,73],6:74,7:75,8:$V1,9:57,10:$VA,12:76,13:59,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VF,[2,61]),o([5,8,10,25,33,35,36,37,39,43,44,48,49,50,57,58,59,60,61],[2,4]),o([8,10,25,33,35,36,37,39,43,44,48,49,50,53,56,57,58,59,60,61],[2,24]),{3:25,4:32,8:$V1,10:$V2,12:77,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:78,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:79,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:80,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:81,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:82,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:83,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:84,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:85,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:86,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:87,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:88,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:89,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:90,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:91,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{10:[1,92]},{3:25,4:32,8:$V1,10:$V2,12:93,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,7:95,8:$V1,10:$V2,12:76,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,40:$VG,41:10,42:11,43:$V9,44:$Va,46:94,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($Vx,[2,32]),{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,40:[1,96]},{14:$VH,40:[1,97]},o($VI,[2,7]),o([5,8,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,34,39,40,45],$VC,{11:$VJ}),o([5,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,40],$VD,{11:$VK}),{10:$V2,38:101},{3:25,4:32,8:$V1,10:$V2,12:102,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,7:95,8:$V1,10:$V2,12:76,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,40:$VG,41:10,42:11,43:$V9,44:$Va,46:103,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VL,[2,37],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VM,[2,38],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),{34:[1,104]},{34:[1,105]},{34:[1,106]},{34:[1,107]},{3:25,4:32,7:95,8:$V1,10:$V2,12:76,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,40:$VG,41:10,42:11,43:$V9,44:$Va,46:108,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VN,[2,68],{62:109,8:$Vy,45:$Vz}),o($VF,$V0,{30:110}),{3:25,4:32,8:$V1,10:$V2,12:4,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,56:[1,111],57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($Vx,[2,1]),{5:[1,112],14:$VH},{5:[1,113]},o($VO,[2,39],{14:[1,114],16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VP,[2,9],{18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VP,[2,10],{18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VM,[2,11],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VM,[2,12],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VM,[2,13],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VM,[2,14],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VM,[2,15],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VM,[2,16],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VQ,[2,17],{26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VQ,[2,18],{26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VR,[2,19],{28:$Vv,29:$Vw}),o($VR,[2,20],{28:$Vv,29:$Vw}),o($Vx,[2,21]),o($Vx,[2,22]),o($VL,[2,29],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VB,[2,42]),{5:[1,115],16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw},{40:[1,116]},{40:[2,50]},o($Vx,[2,33]),{57:[2,62]},{9:117,10:[1,118],13:119,58:$Vf,59:$Vg,60:$Vh},{3:25,4:32,8:$V1,10:$V2,12:120,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:121,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o([5,10,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,39,40,45,63,66],[2,46],{8:$Vy}),{5:[1,122],16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw},{40:[1,123]},{3:25,4:32,8:$V1,10:$V2,12:124,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:125,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:126,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{3:25,4:32,8:$V1,10:$V2,12:127,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{40:[1,128]},{10:$V2,38:131,63:[1,129],66:[1,130]},{3:25,4:32,8:$V1,10:$V2,12:4,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,56:[1,132],57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VS,[2,60]),o($Vx,[2,2]),o($Vx,[2,3]),{3:25,4:32,7:133,8:$V1,10:$V2,12:76,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VB,[2,43]),o($VT,[2,44]),o($VI,[2,8]),{11:$VJ},{11:$VK},o($VI,[2,5],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VI,[2,6],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VT,[2,47]),o($VT,[2,48]),o($VL,[2,25],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VL,[2,26],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VL,[2,27],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VL,[2,28],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),o($VT,[2,45]),o($VU,[2,70],{64:134}),o($Vx,[2,67]),{8:$Vy,34:[1,135],45:$Vz},o($VS,[2,59]),o($VO,[2,40]),{3:25,4:32,8:$V1,10:$V2,12:137,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi,65:[1,136]},{3:25,4:32,8:$V1,10:$V2,12:138,13:22,15:7,25:$V3,32:6,33:$V4,35:$V5,36:$V6,37:$V7,38:5,39:$V8,41:10,42:11,43:$V9,44:$Va,47:24,48:$Vb,49:$Vc,50:$Vd,51:23,54:30,55:31,57:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{10:$V2,38:139},{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,31:[1,140]},o($VN,[2,69],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw}),{8:$Vy,45:$Vz,63:[1,141]},o($VU,[2,71]),o($Vx,[2,66])],
defaultActions: {3:[2,58],95:[2,50],97:[2,62]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* one line comment */
break;
case 2:/* block comment */
break;
case 3:return 65;
break;
case 4:return 66;
break;
case 5:return '<=';
break;
case 6:return '>=';
break;
case 7:return 61;
break;
case 8:return 63;
break;
case 9:return 57;
break;
case 10:return 56;
break;
case 11:return 8;
break;
case 12:return 5;
break;
case 13:return 39;
break;
case 14:return 40;
break;
case 15:return 11;
break;
case 16:return 45;
break;
case 17:return 14;
break;
case 18:return 31;
break;
case 19:return 24;
break;
case 20:return 25;
break;
case 21:return 26;
break;
case 22:return 27;
break;
case 23:return 29;
break;
case 24:return 28;
break;
case 25:return 34;
break;
case 26:return 59;
break;
case 27:return 58;
break;
case 28:return 60;
break;
case 29:return 33;
break;
case 30:return 37;
break;
case 31:return 36;
break;
case 32:return 35;
break;
case 33:return 48;
break;
case 34:return 49;
break;
case 35:return 43;
break;
case 36:return 18;
break;
case 37:return 19;
break;
case 38:return 21;
break;
case 39:return 20;
break;
case 40:return 22;
break;
case 41:return 23;
break;
case 42:return 16;
break;
case 43:return 16;
break;
case 44:return 17;
break;
case 45:return 17;
break;
case 46:return 44;
break;
case 47:return 50;
break;
case 48:return 10;
break;
case 49:return 53;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:<\/)/,/^(?:\\>)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:=)/,/^(?:'[^\']*')/,/^(?:"[^\"]*")/,/^(?:`[^\`]*`)/,/^(?:let\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:is\b)/,/^(?:isnt\b)/,/^(?:lt\b)/,/^(?:gt\b)/,/^(?:gteq\b)/,/^(?:lteq\b)/,/^(?:&&)/,/^(?:and\b)/,/^(?:\|\|)/,/^(?:or\b)/,/^(?:!)/,/^(?:[0-9]+(?:.[0-9]+)?)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}