/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,22],$V1=[1,34],$V2=[1,14],$V3=[1,8],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,9],$V9=[1,12],$Va=[1,13],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,33],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,39],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,48],$Vw=[5,10,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,39,62,65],$Vx=[1,51],$Vy=[1,50],$Vz=[1,57],$VA=[5,8,10,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,33,38,39,44,62,65],$VB=[2,40],$VC=[2,53],$VD=[5,10,11,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,39,62,65],$VE=[8,10,25,32,34,35,36,38,42,43,47,48,49,55,56,57,58,59,60],$VF=[2,48],$VG=[1,96],$VH=[5,14,39],$VI=[1,97],$VJ=[1,98],$VK=[5,10,14,30,39,62,65],$VL=[5,10,14,16,17,18,19,20,21,22,23,30,39,62,65],$VM=[10,62,65],$VN=[5,39],$VO=[5,10,14,16,17,30,39,62,65],$VP=[5,10,14,16,17,18,19,20,21,22,23,24,25,30,39,62,65],$VQ=[5,10,14,16,17,18,19,20,21,22,23,24,25,26,27,30,39,62,65],$VR=[5,10,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,38,39,62,65],$VS=[5,8,10,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,38,39,44,62,65],$VT=[8,10,25,32,34,35,36,38,42,43,47,48,49,56,57,58,59,60,64];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"array":3,"arrayStart":4,"]":5,"associativeList":6,"expressionList":7,"[":8,"associativeDeclaration":9,"IDENTIFIER":10,":":11,"expression":12,"string":13,",":14,"binaryExpression":15,"AND":16,"OR":17,"IS":18,"ISNT":19,"GT":20,"LT":21,"GTEQ":22,"LTEQ":23,"+":24,"-":25,"*":26,"/":27,"^":28,"controlCode":29,";":30,"declarationExpression":31,"LET":32,"=":33,"PRIVATE":34,"PROTECTED":35,"PUBLIC":36,"id":37,"(":38,")":39,"literal":40,"invoke":41,"RETURN":42,"!":43,".":44,"invokeArguments":45,"scope":46,"TRUE":47,"FALSE":48,"NUMBER":49,"xml":50,"program":51,"EOF":52,"scopeArguments":53,"scopeStart":54,"}":55,"{":56,"QSTRING":57,"ASTRING":58,"BSTRING":59,"<":60,"xmlAttributes":61,">":62,"xmlControlCode":63,"</":64,"/>":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"]",8:"[",10:"IDENTIFIER",11:":",14:",",16:"AND",17:"OR",18:"IS",19:"ISNT",20:"GT",21:"LT",22:"GTEQ",23:"LTEQ",24:"+",25:"-",26:"*",27:"/",28:"^",30:";",32:"LET",33:"=",34:"PRIVATE",35:"PROTECTED",36:"PUBLIC",38:"(",39:")",42:"RETURN",43:"!",44:".",47:"TRUE",48:"FALSE",49:"NUMBER",52:"EOF",55:"}",56:"{",57:"QSTRING",58:"ASTRING",59:"BSTRING",60:"<",62:">",64:"</",65:"/>"},
productions_: [0,[3,2],[3,3],[3,3],[4,1],[9,3],[9,3],[6,1],[6,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[29,0],[29,3],[31,4],[31,4],[31,4],[31,4],[12,3],[12,1],[12,1],[12,2],[12,3],[12,1],[12,1],[12,1],[12,2],[12,2],[7,1],[7,3],[37,1],[37,3],[37,4],[41,4],[41,4],[41,3],[41,4],[41,4],[45,0],[45,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[51,2],[46,4],[46,3],[54,1],[53,3],[13,1],[13,1],[13,1],[50,8],[50,4],[61,0],[61,4],[63,0],[63,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new yy.scopeAst(yy, 'arrayExpression', [$$[$0-1]]);
break;
case 2: case 3:
this.$ = new yy.scopeAst(yy, 'arrayExpression', [$$[$0-2], $$[$0-1]]);
break;
case 4:
this.$ = new yy.scopeAst(yy, 'arrayStart', []);
break;
case 5:
this.$ = new yy.scopeAst(yy, 'associativeDeclaration', [$$[$0-2], 'id', $$[$0]]);
break;
case 6:
this.$ = new yy.scopeAst(yy, 'associativeDeclaration', [$$[$0-2], 'string', $$[$0]]);
break;
case 7:
this.$ = new yy.scopeAst(yy, 'associativeList', [$$[$0]]);
break;
case 8:
this.$ = new yy.scopeAst(yy, 'associativeList', [$$[$0-2], $$[$0]]);
break;
case 9:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '&&', $$[$0]]);
break;
case 10:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '||', $$[$0]]);
break;
case 11:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '===', $$[$0]]);
break;
case 12:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '!==', $$[$0]]);
break;
case 13:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '>', $$[$0]]);
break;
case 14:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '<', $$[$0]]);
break;
case 15:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '>=', $$[$0]]);
break;
case 16:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], '<=', $$[$0]]);
break;
case 17: case 18: case 19: case 20: case 21:
this.$ = new yy.scopeAst(yy, 'binaryExpression', [$$[$0-2], $$[$0-1], $$[$0]]);
break;
case 22:
return;
break;
case 23:
this.$ = new yy.scopeAst(yy, 'controlCode', [$$[$0-2], $$[$0-1]]);
break;
case 24:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['let', $$[$0-2], $$[$0]]);
break;
case 25:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['private', $$[$0-2], $$[$0]]);
break;
case 26:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['protected', $$[$0-2], $$[$0]]);
break;
case 27:
this.$ = new yy.scopeAst(yy, 'declarationExpression', ['public', $$[$0-2], $$[$0]]);
break;
case 28:
this.$ = new yy.scopeAst(yy, 'assignmentExpression', [$$[$0-2], $$[$0]]);
break;
case 29: case 30: case 33: case 34: case 35: case 54: case 55: case 56: case 62: case 63: case 64:
this.$ = $$[$0]
break;
case 31:
this.$ = '- $$[$0]';
break;
case 32:
this.$ = $$[$0-1]
break;
case 36:
this.$ = new yy.scopeAst(yy, 'returnExpression', [$$[$0]]);
break;
case 37:
this.$ = '! $$[$0]';
break;
case 38:
this.$ = new yy.scopeAst(yy, 'expressionList', [$$[$0]]);
break;
case 39:
this.$ = new yy.scopeAst(yy, 'expressionList', [$$[$0-2], $$[$0]]);
break;
case 40:
this.$ = new yy.scopeAst(yy, 'identifier', [$$[$0]]);
break;
case 41:
this.$ = new yy.scopeAst(yy, 'identifier', [$$[$0-2], 'dot', $$[$0]]);
break;
case 42:
this.$ = new yy.scopeAst(yy, 'identifier', [$$[$0-3], 'bracket', $$[$0-1]]);
break;
case 43: case 44: case 47:
this.$ = new yy.scopeAst(yy, 'invokeExpression', [$$[$0-3], $$[$0-1]]);
break;
case 45:
this.$ = new yy.scopeAst(yy, 'invokeId', [$$[$0-2], 'dot', $$[$0]]);
break;
case 46:
this.$ = new yy.scopeAst(yy, 'invokeId', [$$[$0-3], 'bracket', $$[$0-1]]);
break;
case 48:
this.$ = new yy.scopeAst(yy, 'invokeArguments', []);
break;
case 49:
this.$ = new yy.scopeAst(yy, 'invokeArguments', [$$[$0]]);
break;
case 50:
this.$ = new yy.scopeAst(yy, 'booleanLiteral', true);
break;
case 51:
this.$ = new yy.scopeAst(yy, 'booleanLiteral', false);
break;
case 52:
this.$ = new yy.scopeAst(yy, 'numericLiteral', Number($$[$0]));
break;
case 53:
this.$ = new yy.scopeAst(yy, 'stringLiteral', $$[$0].substr(1,$$[$0].length-2));
break;
case 57:
return $$[$0-1]
break;
case 58:
this.$ = new yy.scopeAst(yy, 'scopeExpression', [$$[$0-2], $$[$0-3], $$[$0-1]]);
break;
case 59:
this.$ = new yy.scopeAst(yy, 'scopeExpression', [$$[$0-2], $$[$0-1]]);
break;
case 60:
this.$ = new yy.scopeAst(yy, 'scopeStart', []);
break;
case 61:
this.$ = new yy.scopeAst(yy, 'scopeArguments', [$$[$0-1]]);
break;
case 65:
this.$ = new yy.scopeAst(yy, 'xmlExpression', [$$[$0-6], $$[$0-5], $$[$0-3]]);
break;
case 66:
this.$ = new yy.scopeAst(yy, 'xmlExpression', [$$[$0-2], $$[$0-1]]);
break;
case 67:
this.$ = new yy.scopeAst(yy, 'xmlAttributes', []);
break;
case 68:
this.$ = new yy.scopeAst(yy, 'xmlAttributes', [$$[$0-3], $$[$0-2], $$[$0]]);
break;
case 69:
this.$ = new yy.scopeAst(yy, 'xmlControlCode', []);
break;
case 70:
this.$ = new yy.scopeAst(yy, 'xmlControlCode', [$$[$0-2], $$[$0-1]]);
break;
}
},
table: [o([8,10,25,32,34,35,36,38,42,43,47,48,49,52,56,57,58,59,60],$V0,{51:1,29:2}),{1:[3]},{3:25,4:32,8:$V1,10:$V2,12:4,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,52:[1,3],53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{1:[2,57]},{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,30:[1,35]},o($Vw,[2,34],{8:$Vx,33:[1,49],38:[1,52],44:$Vy}),o($Vw,[2,29]),o($Vw,[2,30]),{3:25,4:32,8:$V1,10:$V2,12:53,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,6:55,8:$V1,9:56,10:$Vz,12:54,13:58,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Vw,[2,33]),o($Vw,[2,35],{8:[1,60],38:[1,61],44:[1,59]}),{3:25,4:32,8:$V1,10:$V2,12:62,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:63,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($VA,$VB),{10:[1,64]},{10:[1,65]},{10:[1,66]},{10:[1,67]},o($Vw,[2,50]),o($Vw,[2,51]),o($Vw,[2,52]),o($Vw,$VC),o($Vw,[2,54]),o($Vw,[2,55],{38:[1,68]}),o($Vw,[2,56]),o($VD,[2,62]),o($VD,[2,63]),o($VD,[2,64]),{10:$V2,37:69},{54:70,56:$Ve},o($VE,$V0,{29:71}),{3:25,4:32,5:[1,72],6:73,7:74,8:$V1,9:56,10:$Vz,12:75,13:58,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($VE,[2,60]),o([5,8,10,25,32,34,35,36,38,42,43,47,48,49,56,57,58,59,60],[2,4]),o([8,10,25,32,34,35,36,38,42,43,47,48,49,52,55,56,57,58,59,60],[2,23]),{3:25,4:32,8:$V1,10:$V2,12:76,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:77,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:78,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:79,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:80,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:81,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:82,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:83,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:84,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:85,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:86,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:87,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:88,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:89,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{10:[1,90]},{3:25,4:32,8:$V1,10:$V2,12:91,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,7:93,8:$V1,10:$V2,12:75,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,39:$VF,40:10,41:11,42:$V9,43:$Va,45:92,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Vw,[2,31]),{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,39:[1,94]},{14:$VG,39:[1,95]},o($VH,[2,7]),o([5,8,14,16,17,18,19,20,21,22,23,24,25,26,27,28,33,38,39,44],$VB,{11:$VI}),o([5,14,16,17,18,19,20,21,22,23,24,25,26,27,28,39],$VC,{11:$VJ}),{10:$V2,37:99},{3:25,4:32,8:$V1,10:$V2,12:100,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,7:93,8:$V1,10:$V2,12:75,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,39:$VF,40:10,41:11,42:$V9,43:$Va,45:101,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($VK,[2,36],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VL,[2,37],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),{33:[1,102]},{33:[1,103]},{33:[1,104]},{33:[1,105]},{3:25,4:32,7:93,8:$V1,10:$V2,12:75,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,39:$VF,40:10,41:11,42:$V9,43:$Va,45:106,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($VM,[2,67],{61:107,8:$Vx,44:$Vy}),o($VE,$V0,{29:108}),{3:25,4:32,8:$V1,10:$V2,12:4,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,55:[1,109],56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Vw,[2,1]),{5:[1,110],14:$VG},{5:[1,111]},o($VN,[2,38],{14:[1,112],16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VO,[2,9],{18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VO,[2,10],{18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VL,[2,11],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VL,[2,12],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VL,[2,13],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VL,[2,14],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VL,[2,15],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VL,[2,16],{24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VP,[2,17],{26:$Vt,27:$Vu,28:$Vv}),o($VP,[2,18],{26:$Vt,27:$Vu,28:$Vv}),o($VQ,[2,19],{28:$Vv}),o($VQ,[2,20],{28:$Vv}),o($Vw,[2,21]),o($VK,[2,28],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VA,[2,41]),{5:[1,113],16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv},{39:[1,114]},{39:[2,49]},o($Vw,[2,32]),{56:[2,61]},{9:115,10:[1,116],13:117,57:$Vf,58:$Vg,59:$Vh},{3:25,4:32,8:$V1,10:$V2,12:118,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:119,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o([5,10,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,38,39,44,62,65],[2,45],{8:$Vx}),{5:[1,120],16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv},{39:[1,121]},{3:25,4:32,8:$V1,10:$V2,12:122,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:123,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:124,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{3:25,4:32,8:$V1,10:$V2,12:125,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{39:[1,126]},{10:$V2,37:129,62:[1,127],65:[1,128]},{3:25,4:32,8:$V1,10:$V2,12:4,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,55:[1,130],56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($VR,[2,59]),o($Vw,[2,2]),o($Vw,[2,3]),{3:25,4:32,7:131,8:$V1,10:$V2,12:75,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($VA,[2,42]),o($VS,[2,43]),o($VH,[2,8]),{11:$VI},{11:$VJ},o($VH,[2,5],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VH,[2,6],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VS,[2,46]),o($VS,[2,47]),o($VK,[2,24],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VK,[2,25],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VK,[2,26],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VK,[2,27],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),o($VS,[2,44]),o($VT,[2,69],{63:132}),o($Vw,[2,66]),{8:$Vx,33:[1,133],44:$Vy},o($VR,[2,58]),o($VN,[2,39]),{3:25,4:32,8:$V1,10:$V2,12:135,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi,64:[1,134]},{3:25,4:32,8:$V1,10:$V2,12:136,13:22,15:7,25:$V3,31:6,32:$V4,34:$V5,35:$V6,36:$V7,37:5,38:$V8,40:10,41:11,42:$V9,43:$Va,46:24,47:$Vb,48:$Vc,49:$Vd,50:23,53:30,54:31,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{10:$V2,37:137},{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,30:[1,138]},o($VM,[2,68],{16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv}),{8:$Vx,44:$Vy,62:[1,139]},o($VT,[2,70]),o($Vw,[2,65])],
defaultActions: {3:[2,57],93:[2,49],95:[2,61]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* one line comment */
break;
case 2:/* block comment */
break;
case 3:return 64;
break;
case 4:return 65;
break;
case 5:return '<=';
break;
case 6:return '>=';
break;
case 7:return 60;
break;
case 8:return 62;
break;
case 9:return 56;
break;
case 10:return 55;
break;
case 11:return 8;
break;
case 12:return 5;
break;
case 13:return 38;
break;
case 14:return 39;
break;
case 15:return 11;
break;
case 16:return 44;
break;
case 17:return 14;
break;
case 18:return 30;
break;
case 19:return 24;
break;
case 20:return 25;
break;
case 21:return 26;
break;
case 22:return 27;
break;
case 23:return '%';
break;
case 24:return 28;
break;
case 25:return 33;
break;
case 26:return 58;
break;
case 27:return 57;
break;
case 28:return 59;
break;
case 29:return 32;
break;
case 30:return 36;
break;
case 31:return 35;
break;
case 32:return 34;
break;
case 33:return 47;
break;
case 34:return 48;
break;
case 35:return 42;
break;
case 36:return 18;
break;
case 37:return 19;
break;
case 38:return 21;
break;
case 39:return 20;
break;
case 40:return 22;
break;
case 41:return 23;
break;
case 42:return 16;
break;
case 43:return 16;
break;
case 44:return 17;
break;
case 45:return 17;
break;
case 46:return 43;
break;
case 47:return 49;
break;
case 48:return 10;
break;
case 49:return 52;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:<\/)/,/^(?:\\>)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:=)/,/^(?:'[^\']*')/,/^(?:"[^\"]*")/,/^(?:`[^\`]*`)/,/^(?:let\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:is\b)/,/^(?:isnt\b)/,/^(?:lt\b)/,/^(?:gt\b)/,/^(?:gteq\b)/,/^(?:lteq\b)/,/^(?:&&)/,/^(?:and\b)/,/^(?:\|\|)/,/^(?:or\b)/,/^(?:!)/,/^(?:[0-9]+(?:.[0-9]+)?)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}